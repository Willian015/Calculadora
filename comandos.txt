CMD:guardarportao
CMD:editarportao
CMD:senhaportao
CMD:abrirportao
CMD:tocarsom
CMD:pegarradio
CMD:guardarradio
CMD:portamalas
CMD:entregarpizzas
CMD:pegarpizzas
CMD:cancelarentrega
CMD:pegarpizza
CMD:guardarpizza
CMD:specialaction
CMD:macros
CMD:aimbots
CMD:troll
CMD:do(playerid)
CMD:tr(playerid)
CMD:dominarmoto(playerid)
CMD:dominar(playerid){
CMD:dotr(playerid)
CMD:misterios(playerid){
CMD:resettr(playerid)
CMD:destruirgz(playerid)
CMD:criargz(playerid, params[])
CMD:salvargz(playerid, nome[])
CMD:antiafk(playerid, params[])
CMD:caixa(playerid, params[])
CMD:horarioverao(playerid, params[])
CMD:ch(playerid, params[])
CMD:cm(playerid, params[])
CMD:cs(playerid, params[])
CMD:desbugarcam(playerid, params[])
CMD:guerramorro(playerid)
CMD:guerrapedreira(playerid)
CMD:horariosguerra(playerid)
CMD:reconectarbots(playerid){
CMD:logar(playerid, params[])
CMD:santosemeuovo(playerid, params[])
CMD:registrar(playerid, params[])
CMD:demitir(playerid, params[])
CMD:v(playerid, result[])
CMD:s(playerid, result[])
CMD:rg(playerid, params[])
CMD:a(playerid, result[])
CMD:ah(playerid, result[])
CMD:agendarban(playerid, params[])
CMD:ca(playerid, result[])
CMD:desativadoochat(playerid, result[])
CMD:h(playerid, result[])
CMD:entriad(playerid, params[])
CMD:sentriad(playerid, params[])
CMD:laptop(playerid, params[])
CMD:convidar(playerid, result[])
CMD:ba(playerid, result[])
CMD:departamento(playerid, params[])return ForT:d(playerid, params);
CMD:d(playerid, params[])
CMD:ce(playerid, result[])
CMD:n
CMD:noob
CMD:lchat(playerid, result[])
CMD:g(playerid, result[])
CMD:gangue(playerid, params[])return ForT:ga(playerid, params);
CMD:ga(playerid, params[])
CMD:horas
CMD:corona(playerid, params[])
CMD:punirnoob(playerid, params[])
CMD:lompoc(playerid, params[])
CMD:bloquearn(playerid, params[])
CMD:bloquearan(playerid, params[])
CMD:bloqueararmas(playerid, params[])
CMD:setlompoc(playerid, params[])
CMD:aviso(playerid, params[])
CMD:retiraravisos(playerid, params[])
CMD:agendarcadeia(playerid, params[])
CMD:cashoff(playerid, params[])
CMD:pm(playerid, params[])return ForT:par(playerid, params);
CMD:par(playerid, params[])
CMD:blindarcarro(playerid)
CMD:blindar(playerid)
CMD:sirene(playerid)
CMD:par22(playerid, params[])
CMD:vender(playerid, params[])
CMD:peixes(playerid)
CMD:comer(playerid, cmdtext[])
CMD:cozinhar(playerid, x_nr[])
CMD:cozinharpeixe(playerid, params[])
CMD:cozinhado(playerid)
CMD:pescar(playerid)
CMD:jogarpeixe(playerid, params[])
CMD:jogardevolta(playerid)
CMD:jogardevoltatudo(playerid)
CMD:gmx(playerid, params[])
CMD:duvida(playerid, result[])
CMD:matoumorreu(playerid, params[])
CMD:atender(playerid, result[])
CMD:report(playerid, params[])return ForT:reportar(playerid, params);
CMD:reportar(playerid, params[]){
CMD:sos(playerid, result[])return ForT:relatorio(playerid, result);
CMD:relato(playerid, result[])return ForT:relatorio(playerid, result);
CMD:relatorio(playerid, result[])
CMD:atendimento(playerid, result[])
CMD:presos(playerid, params[])
CMD:hospitalizados(playerid, params[])
CMD:promover(playerid, params[])
CMD:hqhelper(playerid, params[])
CMD:comprarouros(playerid, result[])
CMD:venderouros(playerid, result[])
CMD:materiais(playerid, x_nr[])
CMD:alarme(playerid, params[])
CMD:localizador(playerid, params[])
CMD:xenon(playerid, params[])
CMD:farol(playerid, params[])
CMD:capo(playerid, params[])
CMD:pmalas(playerid, params[])
CMD:bug(playerid, params[])
CMD:rbug(playerid, result[])
CMD:sugestao(playerid, result[])
CMD:motor(playerid)
CMD:mercadorials(playerid, params[])
CMD:mercadorialv(playerid, params[])
CMD:mercadoriasf(playerid, params[])
CMD:terminais(playerid, params[])
CMD:contagem(playerid)
CMD:online(playerid, params[])
CMD:stopani(playerid, params[])
CMD:trocarvagas(playerid, params[])
CMD:limparvaga(playerid, vaga[])
CMD:limpartodasvagas(playerid)
CMD:lcandidato(playerid, vaga[])
CMD:limparlider(playerid, Vaga[])
CMD:afk(playerid, params[]) // CREATED BY MALUKO
CMD:sairafk(playerid, params[]) // CREATED BY MALUKO
CMD:fixveh(playerid, params[])
CMD:infohelpers(playerid, params[])
CMD:infoadmins(playerid, params[])
CMD:infoadminstemp(playerid, params[])
CMD:limparadmin(playerid)
CMD:limparadmintemp(playerid)
CMD:limparhelper(playerid)
CMD:criaradmin(playerid, params[])
CMD:criaradmintemp(playerid, params[])
CMD:darvida(playerid, params[])
CMD:darfome(playerid, params[])
CMD:darsede(playerid, params[])
CMD:ativarorgvip(playerid, params[])
CMD:ativarorgsvips(playerid, params[])
CMD:darsaude(playerid, params[])
CMD:reclife(playerid, params[])
CMD:iniciarhay(playerid, params[])
CMD:destruirhay(playerid)
CMD:iniciarfall(playerid)
CMD:criarfall(playerid)
CMD:destruirfall(playerid)
CMD:antdb(playerid)
CMD:aarenax1(playerid)
CMD:liberarvip(playerid)
CMD:arenax1(playerid)
CMD:sairarena(playerid)
CMD:criarcorrida(playerid, params[])
CMD:veiculocorrida(playerid, params[])
CMD:ajudacorrida(playerid)
CMD:plgd(playerid, params[])
CMD:addracepoint(playerid, params[])
CMD:iniciarcorrida(playerid, params[])
CMD:largada(playerid, params[])
CMD:salvarcorrida(playerid, params[])
CMD:carregarcorrida(playerid, params[])
CMD:destruircorrida(playerid)
CMD:entrarevento(playerid)
CMD:darcolete(playerid, params[])
CMD:dargrana(playerid, params[])
CMD:setcash(playerid, params[])
CMD:testcor(playerid, params[])
CMD:testcorx(playerid, params[])
CMD:setsocio(playerid, params[])
CMD:setpower(playerid, params[])
CMD:setgold(playerid, params[])
CMD:setvip(playerid, params[])
CMD:setplatina(playerid, params[])
CMD:retirarvip(playerid, params[])
CMD:mudarluta(playerid, params[])
CMD:praia(playerid, params[])
CMD:pararroubo(playerid, params[])
CMD:roubos(playerid, params[])
CMD:entrarorg(playerid, params[])
CMD:amudarnick(playerid, params[])
CMD:autorizarn(playerid, params[])
CMD:trocarnick(playerid, params[])
CMD:sairorg(playerid, params[])
CMD:irtunning(playerid, params[])
CMD:assaltar(playerid, params[])
CMD:fim(playerid, params[])
CMD:ircadeia(playerid, params[])
CMD:descricao(playerid, tmp5[])
CMD:trazersemp(playerid, params[])
CMD:trazeremp(playerid, params[])
CMD:trazerempexit(playerid, params[])
CMD:trazerfazenda(playerid, params[])
CMD:trazercasa(playerid, params[])
CMD:trazerexitcasa(playerid, params[])
CMD:trazercarrof(playerid, params[])
CMD:trocarcasa(playerid, params[])
CMD:hqpr(playerid, params[])
CMD:retirargrana(playerid, params[])
CMD:versenhaadmin(playerid){
CMD:pagar(playerid, params[])
CMD:meavalie(playerid, params[])
CMD:notaadm(playerid, params[])
CMD:terminar(playerid, x_Emprego[])
CMD:fila(playerid, params[])
CMD:sacar(playerid, params[])
CMD:depositar(playerid, params[])
CMD:regras(playerid)
CMD:teleportes(playerid, params[])
CMD:criarevento(playerid, params[])
CMD:irevento(playerid, params[])
CMD:sairevento(playerid)
CMD:trazertodos(playerid, params[])
CMD:trazertodosx1(playerid, params[])
CMD:grampear(playerid, params[])
CMD:mostrarrg(playerid, params[])
CMD:senhap(playerid, params[])
CMD:mostrarsenha(playerid, params[])
CMD:togparticular(playerid, params[])
CMD:ocupado(playerid, params[])
CMD:getemprego(playerid, params[])
CMD:cardapiozin(playerid, params[])
CMD:casaarvore(playerid, params[])
CMD:sexshop(playerid, params[])
CMD:BPFvenderhqBPF(playerid)
CMD:licencas(playerid, params[])
CMD:disfarceex2014(playerid)
CMD:testarspawn(playerid)
CMD:testarcores(playerid)
CMD:gps(playerid)
CMD:dn(playerid, params[])
CMD:logout(playerid, params[])
CMD:logoutpl(playerid, params[])
CMD:logoutall(playerid, params[])
CMD:up(playerid, params[])
CMD:checkbots(playerid, params[])
CMD:checkrt(playerid, params[])
CMD:cameras(playerid, params[])
CMD:lt(playerid, params[])
CMD:rt(playerid, params[])
CMD:loks777(playerid)
CMD:manuzinhatexto456(playerid,result[])
CMD:handsup(playerid)
CMD:hide(playerid)
CMD:fly(playerid, params[])
CMD:voar(playerid, params[])
CMD:voar2(playerid, params[])// Legal voar assim ^^
CMD:voar3(playerid, params[])// Legal voar assim ^^
CMD:vercarteira(playerid, params[])
CMD:telefone(playerid, params[])return ForT:agenda(playerid, params);
CMD:agenda(playerid, params[])
CMD:carrofazenda(playerid, params[])
CMD:carrocasa(playerid, params[])
CMD:resetarmelhorias(playerid, params[])
CMD:resetarfazendas(playerid, params[])
CMD:comprararma(playerid, params[])
CMD:admvcarro(playerid)
CMD:admvtodascasas(playerid)
CMD:patins(playerid)
CMD:melhorar(playerid, gunid[])
CMD:ats(playerid, params[])
CMD:temessanaotio(playerid, params[])
CMD:trocarsenha(playerid, params[])
CMD:cnn2(playerid, result[])
CMD:ang(playerid, params[])
CMD:anpersonalizado(playerid)
CMD:an(playerid, result[])
CMD:spawn(playerid, params[])
CMD:hqadm(playerid)
CMD:ls(playerid)
CMD:resetduel(playerid)
CMD:duelar(playerid)
CMD:minhasala(playerid, params[])
CMD:irhospital(playerid, params[])
CMD:sf(playerid, params[])
CMD:lv(playerid, params[])
CMD:gov(playerid, result[])
CMD:pre(playerid, result[])
CMD:desativar(playerid, tmp[])
CMD:me(playerid, params[])return ForT:eu(playerid, params);
CMD:eu(playerid, result[])
CMD:livrardrogas(playerid)
CMD:livrarmats(playerid)
CMD:largararma(playerid)
    {
        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;

		if(gettime() < GetPVarInt(playerid, #VarFlood17))
		    return SendClientMessage(playerid, COLOR_GRAD1, #Você não pode usar este comando com tanta frequencia);
		SetPVarInt(playerid, #VarFlood17, gettime()+5);

  		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED){

			return SendClientMessage(playerid, COLOR_GREY, " Você não pode usar este comando agora !");
   		}

		switch(GetPlayerWeapon(playerid)){

		    case 16, 18, 44, 45, 35:
		        return SendClientMessage(playerid, COLOR_GREY, " Você não pode largar esta arma !");
		}


        new GunID = GetPlayerWeapon(playerid);
        new GunAmmo = GetPlayerAmmo(playerid);
        new Float:x, Float:y, Float:z;
        if(GunID > 0 && GunAmmo != 0)
        {
            new f = MAX_OBJ+1;
            for(new a = 0; a < MAX_OBJ; a++)
            {
                if(dGunData[a][ObjPos][0] == 0.0)
                {
                    f = a;
                    break;
                }
            }
            if(f > MAX_OBJ) return SendClientMessage(playerid, 0x33AA3300, "Você não pode largar esta arma no momento, tente novamente mais tarde!");

			RemovePlayerWeapon(playerid, GunID);

			GetPlayerPos(playerid, x, y, z);
			CreateDroppedGun(GunID, GunAmmo, x, y, z);

            ApplyAnimation(playerid,"BOMBER","BOM_Plant_2Idle",4.1,0,1,1,0,0);

			new buffer[85];

			format(buffer, sizeof(buffer), "Você largou um(a) %s.", GunNames[dGunData[f][ObjData][0]]);
			SendClientMessage(playerid, 0x33CCFFFF, buffer);

			format(buffer, sizeof(buffer), "*%s colocou um(a) %s no chão.", NomePlayer(playerid), GunNames[dGunData[f][ObjData][0]]);
			SendClientMessageInRange(30.0, playerid, buffer, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			printf("%s", buffer);
        }
        return 1;
    }

 	CMD:parma(playerid)
    {
        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
        new f = MAX_OBJ+1;
		for(new a = 0; a < MAX_OBJ; a++)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 1.8, dGunData[a][ObjPos][0], dGunData[a][ObjPos][1], dGunData[a][ObjPos][2]))
		    {
		        f = a;
		        break;
		    }
		}
		if(f > MAX_OBJ) return 1;

		if(gettime() < GetPVarInt(playerid, #VarFlood8))
		    return 1;
		SetPVarInt(playerid, #VarFlood8, gettime()+2);

        
        for(new i=0; i<75; i++)
		{
		    if(InventarioInfo[playerid][i][iSlot] == 19382)
		    {
		        InventarioInfo[playerid][i][iSlot] = MudarIdArma(dGunData[f][ObjData][0]);
		        InventarioInfo[playerid][i][iUnidades] = dGunData[f][ObjData][1];
				break;
		    }
		}

        DestroyDroppedObject(f);

        ApplyAnimation(playerid,"BOMBER","BOM_Plant_2Idle",4.1,0,1,1,0,0);

		new buffer[85];
		format(buffer, sizeof(buffer), "Você pegou um(a) %s.", GunNames[dGunData[f][ObjData][0]]);
  		SendClientMessage(playerid, 0x33AA3300, buffer);

		format(buffer, sizeof(buffer), "*%s pegou um(a) %s do chão.", NomePlayer(playerid), GunNames[dGunData[f][ObjData][0]]);
		SendClientMessageInRange(30.0, playerid, buffer, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		printf("%s", buffer);
  		return 1;
    }
CMD:pitem(playerid)
    {
        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;
        new f = MAX_OBJ+1;
		for(new a = 0; a < MAX_OBJ; a++)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 1.8, dItemData[a][ObjtPos][0], dItemData[a][ObjtPos][1], dItemData[a][ObjtPos][2]))
		    {
		        f = a;
		        break;
		    }
		}
		if(f > MAX_OBJ) return 1;

		if(gettime() < GetPVarInt(playerid, #VarFlood8))
		    return 1;
		SetPVarInt(playerid, #VarFlood8, gettime()+2);

        for(new i=0; i<75; i++)
		{
		    if(InventarioInfo[playerid][i][iSlot] == 19382)
		    {
		        InventarioInfo[playerid][i][iSlot] = dItemData[f][ObjtData][0];
		        InventarioInfo[playerid][i][iUnidades] = dItemData[f][ObjtData][1];
				break;
		    }
		}

		new str[256];
		format(str, sizeof str, "* Você pegou um item: %s, com %d unidade(s)", NomeItemInventario(dItemData[f][ObjtData][0]), dItemData[f][ObjtData][1]);
		SendClientMessage(playerid, 0x00ccccFF, str);
        DestroyDroppedItem(f);

        ApplyAnimation(playerid,"BOMBER","BOM_Plant_2Idle",4.1,0,1,1,0,0);


  		return 1;
    }
stock CreateDroppedGun(GunID, GunAmmo, Float:gPosX, Float:gPosY, Float:gPosZ)
{
	new f = MAX_OBJ+1;
    for(new a = 0; a < MAX_OBJ; a++)
    {
        if(dGunData[a][ObjPos][0] == 0.0)
        {
            f = a;
            break;
        }
    }
    if(f > MAX_OBJ) return;

    dGunData[f][dropTimer] = gettime() + (30*60);//30 minutos para a arma desaparecer

    dGunData[f][ObjData][0] = GunID;
	dGunData[f][ObjData][1] = GunAmmo;
	dGunData[f][ObjPos][0] = gPosX;
	dGunData[f][ObjPos][1] = gPosY;
	dGunData[f][ObjPos][2] = gPosZ;
	dGunData[f][ObjID] = CreateDynamicObject(GunObjects[GunID], dGunData[f][ObjPos][0], dGunData[f][ObjPos][1], dGunData[f][ObjPos][2]-1, 93.7, 120.0, random(360), -1, -1, -1, 80.0);

	new buffer[128];

	format(buffer, sizeof buffer, "%s",GunNames[dGunData[f][ObjData][0]]);
 	dGunData[f][text3d] = CreateDynamic3DTextLabel(buffer, 0xAAAAAAAA, dGunData[f][ObjPos][0], dGunData[f][ObjPos][1], dGunData[f][ObjPos][2]-1, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 80.0);

	return;
}
stock CreateDroppedItem(Item, Amount, Float:gPosX, Float:gPosY, Float:gPosZ)
{
 new f = MAX_OBJ+1;
    for(new a = 0; a < MAX_OBJ; a++)
    {
        if(dItemData[a][ObjtPos][0] == 0.0)
        {
            f = a;
            break;
        }
    }
    if(f > MAX_OBJ) return;

    dItemData[f][droptTimer] = gettime() + (30*60);//30 minutos para o item sumir

    dItemData[f][ObjtData][0] = Item;
 dItemData[f][ObjtData][1] = Amount;
 dItemData[f][ObjtPos][0] = gPosX;
 dItemData[f][ObjtPos][1] = gPosY;
 dItemData[f][ObjtPos][2] = gPosZ;
 dItemData[f][ObjtID] = CreateDynamicObject(Item, dItemData[f][ObjtPos][0], dItemData[f][ObjtPos][1], dItemData[f][ObjtPos][2]-1, 93.7, 120.0, random(360), -1, -1, -1, 80.0);

 new buffer[50];
 format(buffer, sizeof buffer, "Item: %s\nUnidade(s): %d", NomeItemInventario(dItemData[f][ObjtData][0]), dItemData[f][ObjtData][1]);
  dItemData[f][textt3d] = CreateDynamic3DTextLabel(buffer, 0xAAAAAAAA, dItemData[f][ObjtPos][0], dItemData[f][ObjtPos][1], dItemData[f][ObjtPos][2]-1, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 80.0);

 return;
}

stock DestroyDroppedObject(dropid)
{
		DestroyDynamicObject(dGunData[dropid][ObjID]);
		DestroyDynamic3DTextLabel(dGunData[dropid][text3d]);
		dGunData[dropid][ObjPos][0] = 0.0;
		dGunData[dropid][ObjPos][1] = 0.0;
		dGunData[dropid][ObjPos][2] = 0.0;
		dGunData[dropid][ObjID] = -1;
		//dGunData[f][ObjData][0] = 0;
		dGunData[dropid][ObjData][1] = 0;

		return 1;
}
stock DestroyDroppedItem(dropid)
{
		DestroyDynamicObject(dItemData[dropid][ObjtID]);
		DestroyDynamic3DTextLabel(dItemData[dropid][textt3d]);
		dItemData[dropid][ObjtPos][0] = 0.0;
		dItemData[dropid][ObjtPos][1] = 0.0;
		dItemData[dropid][ObjtPos][2] = 0.0;
		dItemData[dropid][ObjtID] = -1;
		//dGunData[f][ObjData][0] = 0;
		dItemData[dropid][ObjtData][1] = 0;

		return 1;
}
//----------------------------------[Short]-----------------------------------------------
	CMD:m(playerid, result[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
	    	if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, 0xA92BF6F6, "Você não pode falar, pois foi calado");
				return true;
			}
	    	if(!IsACop(playerid) && PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pAdminTemp] < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não é um policial!");
			    return true;
			}
			if(OnDuty[playerid] != 1 && PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pAdminTemp] < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não Bateu o cartão!");
			    return true;
			}
			if(PlayerInfo[playerid][pJailed] == 9)
		    {
				SendClientMessage(playerid,COLOR_GRAD1,"Você não pode usar este comando nas Celas da Administração!");
		      	return true;
		    }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(isnull(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: (/m)egafone [texto]");
				return true;
			}
			//Anti Divulguer
			if(AntiDivulguer(playerid, result))return 1;
			if(IsACop(playerid) || PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pAdminTemp] > 0)
			{
			    new string[MAX_STRING];
				if(admtrampando[playerid] > 0)
				{
					format(string, sizeof(string), "[MEGAFONE] %s:o< %s]", sendername, result);
					SendClientMessageInRange(60.0, playerid, string, 0xFE85E0AA,0xFE85E0AA,0xFE85E0AA,0xFE85E0AA,0xFE85E0AA);
				}
				else if(PlayerInfo[playerid][pMembro] == 1||PlayerInfo[playerid][pLider] == 1)
				{
					format(string, sizeof(string), "Policia Militar %s:o< %s", sendername, result);
					SendClientMessageInRange(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				else if(PlayerInfo[playerid][pMembro] == 2||PlayerInfo[playerid][pLider] == 2)
				{
					format(string, sizeof(string), "BOPE %s:o< %s", sendername, result);
					SendClientMessageInRange(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				else if(PlayerInfo[playerid][pMembro] == 27||PlayerInfo[playerid][pLider] == 27)
				{
					format(string, sizeof(string), "Policial Militar %s:o< %s", sendername, result);
					SendClientMessageInRange(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				else if(PlayerInfo[playerid][pMembro] == 3||PlayerInfo[playerid][pLider] == 3)
				{
				    format(string, sizeof(string), "Exercito %s:o< %s", sendername, result);
				    SendClientMessageInRange(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				else if(IsAGOV(playerid))
				{
				    format(string, sizeof(string), "Governo %s:o< %s", sendername, result);
				    SendClientMessageInRange(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				else if(PlayerInfo[playerid][pMembro] == 16||PlayerInfo[playerid][pLider] == 16)
				{
				    format(string, sizeof(string), "ROTA %s:o< %s", sendername, result);
				    SendClientMessageInRange(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				else if(PlayerInfo[playerid][pMembro] == 11||PlayerInfo[playerid][pLider] == 11)
				{
				    format(string, sizeof(string), "Policial Federal %s:o< %s", sendername, result);
				    SendClientMessageInRange(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				else if(PlayerInfo[playerid][pMembro] == 33||PlayerInfo[playerid][pLider] == 33)
				{
				    format(string, sizeof(string), "Policial Civil %s:o< %s", sendername, result);
				    SendClientMessageInRange(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				else if(PlayerInfo[playerid][pMembro] == 34||PlayerInfo[playerid][pLider] == 34)
				{
				    format(string, sizeof(string), "DETRAN %s:o< %s", sendername, result);
				    SendClientMessageInRange(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				printf("%s", string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Você não faz parte de nenhuma equipe !");
				return true;
			}
			return true;
	}

CMD:r(playerid, params[])
{
	if(isnull(params))return SendClientMessage(playerid, COLOR_GREY, "USE: (/r)adio [texto]");
	new gstring[128];
	new org = GetPlayerOrg(playerid);
	if(org != 1 && org != 2 && org != 3 && org != 4 && org != 7 && org != 11
	&& org != 33 && org != 16 && org != 35 && org != 34)
	{
		return SendClientMessage(playerid, COLOR_GREY, "Você não pode falar no rádio de uma organização");
	}
	new result[250];
	if(Palavrao(result))
   	              {
                       GivePlayerMoney(playerid, -500);
                       SendClientMessage(playerid, COLOR_LIGHTRED, "É PROIBIDO CHINGAR NO CHAT DO GOVERNO,VOCÊ PERDEU 500 REAIS !");
                       return 1;
    	          }

    if(PlayerInfo[playerid][pMuted] == 1)return SendClientMessage(playerid, 0xA92BF6F6, "Você não pode falar, pois foi calado");
    if(admtrampando[playerid] == 1 && PlayerInfo[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "Você não pode falar no rádio em modo trabalho!");
	//Anti Divulguer
	if(AntiDivulguer(playerid, params))return 1;
	format(gstring, sizeof(gstring), "* %s falou algo no rádio.", PlayerName(playerid));
	SendClientMessageInRange(20.0, playerid, gstring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	format(gstring, sizeof gstring, "** %s %s: %s, over. **", GetPlayerCargo(playerid), NomePlayer(playerid), params);
	SendFamilyMessage(org, TEAM_BLUE_COLOR, gstring);
	return true;
}


	CMD:setgravity(playerid, params[])
	{
	    if (PlayerInfo[playerid][pAdmin] < 1340)return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando.");
		new Float:gravity;
		if(sscanf(params, "f", gravity))return SendClientMessage(playerid, COLOR_GRAD1, "USE: /setgravity [value]");
		SetGravity(gravity);
		SendClientMessage(playerid, COLOR_GRAD1, "Gravidade setada {FFFFFF}(padrão: 0.008)");
		return true;
	}
	CMD:escudo(playerid, params[])
	{
 		if(IsACop(playerid))
    	{
    	    if(PlayerInfo[playerid][pJailed] == 9)
		    {
				SendClientMessage(playerid,COLOR_GRAD1,"Você não pode usar este comando nas Celas da Administração!");
		      	return true;
		    }
        	if(Equipamentos[playerid] == 1)
        	{
            	RemovePlayerAttachedObjectEx(playerid,Vaga_Escudo);
            	Equipamentos[playerid] = 0;
            	return true;
        	}
        	if(Equipamentos[playerid] == 0)
        	{
        	    new id = CountAttachedObjects(playerid);
            	SetPlayerAttachedObject(playerid,id,18637,13,0.35,0.0,0.0,0.0,0.0,180.0);
            	SetPlayerAttachedObjectEx(18637,Vaga_Escudo,playerid,id);
            	SendClientMessage(playerid,0x9fa4e8F6,"Você pegou o escudo !");
            	Equipamentos[playerid] = 1;
            	return true;
        	}
    	}
    	else
    	{
        	SendClientMessage(playerid,COLOR_WHITE,"Você não é um COP.");
    	}
   	 	return true;
	}

	CMD:taser(playerid, params[])
	{
		if(PlayerInfo[playerid][pJailed] != 0)
	    {
			SendClientMessage(playerid,COLOR_GRAD1,"Você não pode usar este comando na cadeia!");
	      	return true;
	    }
	    if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid,COLOR_GRAD1,"Você não pode usar este comando dentro de um veículo!");

	    if(PlayerInfo[playerid][pJailed] == 9)
    	{
			SendClientMessage(playerid,COLOR_GRAD1,"Você não pode usar este comando nas Celas da Administração!");
  			return true;
	    }
 		if(IsACop(playerid))
    	{
    	    new string[128];
        	if(InTaser[playerid] == true)
        	{
        	    RemovePlayerAttachedObjectEx(playerid,Vaga_Taser);
            	InTaser[playerid] = false;
            	RemoveArmament(playerid);
				format(string, sizeof(string), "* %s guardou seu taser no coldre.", NomePlayer(playerid));
				SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				if(balaseagle[playerid] < 1)SetPlayerAmmo(playerid, 2, 0);
				return true;
        	}
        	if(InTaser[playerid] == false)
        	{
				if(gettime() < GetPVarInt(playerid, #VarFlood9))
				    return SendClientMessage(playerid, COLOR_GRAD1, "O Taser esta recarregando, espere 15 segundos para pegar novamente.");
				SetPVarInt(playerid, #VarFlood9, gettime()+15);
				InTaser[playerid] = true;
				SetArmament(playerid, 18642);
				new id = CountAttachedObjects(playerid);
            	SetPlayerAttachedObject(playerid, 0, 18642, 6, 0.06, 0.01, 0.08, 180.0, 0.0, 0.0);
				SetPlayerAttachedObjectEx(18642,Vaga_Taser,playerid,id);
				format(string, sizeof(string), "* %s retirou seu taser do coldre.", NomePlayer(playerid));
				SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	return true;
        	}
    	}
    	else
    	{
        	SendClientMessage(playerid,COLOR_WHITE,"Você não é um COP.");
    	}
   	 	return true;
	}
	CMD:choque(playerid, params[])
	{
		if(PlayerInfo[playerid][pJailed] != 0)
	    {
			SendClientMessage(playerid,COLOR_GRAD1,"Você não pode usar este comando na cadeia!");
	      	return true;
	    }
	   if(GetPlayerState(playerid) != PLAYER_STATE_PASSENGER)
	   	return SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você precisa estar de passageiro de um Veículo para usar o Choque.");

	    if(PlayerInfo[playerid][pJailed] == 9)
    	{
			SendClientMessage(playerid,COLOR_GRAD1,"Você não pode usar este comando nas Celas da Administração!");
  			return true;
	    }
 		if(IsACop(playerid))
    	{
    	    new string[128];
        	if(InChoque[playerid] == true)
        	{
        	    RemovePlayerWeapon(playerid, 23);
        	    GivePlayerWeapon(playerid, armaeagle[playerid], balaseagle[playerid]);
        	    SetPlayerArmedWeapon(playerid, 29);
            	InChoque[playerid] = false;
				format(string, sizeof(string), "* %s guardou sua arma de Choque.", NomePlayer(playerid));
				SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				if(balaseagle[playerid] < 1)SetPlayerAmmo(playerid, 2, 0);
				return true;
        	}
        	if(InChoque[playerid] == false)
        	{
				if(gettime() < GetPVarInt(playerid, #VarFlood9))
				    return SendClientMessage(playerid, COLOR_GRAD1, "O Choque esta recarregando, espere 1 minuto para pegar novamente.");
				SetPVarInt(playerid, #VarFlood9, gettime()+60);

        	    GetPlayerWeaponData(playerid, 2, armaeagle[playerid], balaseagle[playerid]);
				InChoque[playerid] = true;
				RemovePlayerWeapon(playerid, 24);
				RemovePlayerWeapon(playerid, 23);
				GivePlayerWeapon(playerid, 23, 1);
				format(string, sizeof(string), "* %s retirou sua arma de choque.", NomePlayer(playerid));
				SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	return true;
        	}
    	}
    	else
    	{
        	SendClientMessage(playerid,COLOR_WHITE,"Você não é um COP.");
    	}
   	 	return true;
	}
	CMD:mecanico(playerid, params[])
	{
	    if (isnull(params))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USE: /Detran [Nome]");
			SendClientMessage(playerid, COLOR_GRAD1, "Nomes: | Subir | Descer |");
			return 1;
		}
	    if (!strcmp(params, "subir", true))
	    {
	        if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1569.34424, -2156.86060, 12.96720)) return SendClientMessage(playerid, COLOR_GRAD1, "Você não está na HQ dos Detran!");
	        MoveDynamicObject(MechLift, 1569.34424, -2156.86060, 14.70720, 0.5);
	    }
	    else if (!strcmp(params, "descer", true))
	    {
	        if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1569.34424, -2156.86060, 12.96720)) return SendClientMessage(playerid, COLOR_GRAD1, "Você não está na HQ dos Detran!");
	        MoveDynamicObject(MechLift, 1569.34424, -2156.86060, 12.96720, 0.5);
	    }
	    else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USE: /Detran [Nome]");
			SendClientMessage(playerid, COLOR_GRAD1, "Nomes: | Subir | Descer |");
		}
	    return 1;
	}

	CMD:batercartao(playerid, params[])
 	{
	   		 new Veh = GetPlayerVehicleID(playerid);
			if(PlayerInfo[playerid][pJailed] != 0)
	    	{
		   		SendClientMessage(playerid,COLOR_YELLOW,"Você não pode batercartao na cadeia!");
				return true;
		    }
		    if(PlayerInfo[playerid][pJailed] == 9)
		    {
				SendClientMessage(playerid,COLOR_GRAD1,"Você não pode usar este comando nas Celas da Administração!");
		      	return true;
		    }
		    if((PlayerInfo[playerid][pAdmin] && admtrampando[playerid]) || (PlayerInfo[playerid][pHelper] && helpertrampando[playerid]))
	    	return SendClientMessage(playerid, COLOR_GREY, "Você precisa estar em modo jogo para bater cartão.");

	    	if(InTaser[playerid] == true || InChoque[playerid] == true)
        	{
        	    SendClientMessage(playerid,COLOR_GREY,"Você não pode bater cartão quando estiver com o Taser ou Choque em mãos!");
	   			return true;
        	}

    	    new string[128];
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(IsACop(playerid))
			{
            	if(PlayerToPoint(2,playerid,229.9627,165.1098,1003.0234) || PlayerToPoint(2,playerid,1712.3022,-1640.2500,20.2239) || PlayerToPoint(2,playerid,255.1995,77.1081,1003.6406) || PlayerToPoint(2,playerid,-1348.3979,500.5638,11.2027)
				|| PlayerToPoint(2,playerid,927.2700,-1038.1577,31.8984) || PlayerToPoint(2,playerid,240.5192,112.7945,1003.2188) || PlayerToPoint(2,playerid,2266.5007,-137.6130,26.4619))
				{
				    if(gettime() < GetPVarInt(playerid, #VarFlood11))
			    		return SendClientMessage(playerid, COLOR_GRAD1, #Você não pode batercartao com tanta frequencia);
					SetPVarInt(playerid, #VarFlood11, gettime()+12);
					if(OnDuty[playerid]==0)
			        {
						format(string, sizeof(string), "Oficial: %s está fardado.", sendername);
						SendClientMessageToAll(0x00C2ECFF,string);
	    				format(string, sizeof(string), "* Oficial: %s Tirou um Crachá,Distintivo e uma Arma do Seu Armário.", sendername);
						SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        GivePlayerWeapon(playerid, 24, 150);
                        GivePlayerWeapon(playerid, 25, 250);
						SetPlayerArmour(playerid, 100);
						SetPlayerHealth(playerid, 100);
						OnDuty[playerid] = 1;
						EmpregoDuty[playerid] = 2;
						ApplyAnimation(playerid, "HEIST9","USE:_SwipeCard", 4.0, 0, 0, 0, 0, 0);
      					SetTimerEx("LimparAnim", 2000, false, "i", playerid);
					}
					else if(OnDuty[playerid]==1)
					{
	    				format(string, sizeof(string), "* Oficial: %s guardou seu Crachá,Distintivo e Arma no Armário.", sendername);
						SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						ResetPlayerWeapons(playerid);
						OnDuty[playerid] = 0;
						EmpregoDuty[playerid] = 0;
						ApplyAnimation(playerid, "HEIST9","USE:_SwipeCard", 4.0, 0, 0, 0, 0, 0);
      					SetTimerEx("LimparAnim", 2000, false, "i", playerid);
					}
				}
			}
			else if(PlayerInfo[playerid][pEmprego] == 14)
			{
			    if(PlayerToPoint(2.0, playerid,2015.1254,-2093.5525,13.5469))
				{
				    if(EmpregoDuty[playerid] == 1)
				    {
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Agora Você Está De Folga, e não receberá chamados!");
				        EmpregoDuty[playerid] = 0;
				        Bombers -= 1;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Agora você está de plantão com o seu trabalho e irá receber chamadas de pessoas que precisam.");
				        EmpregoDuty[playerid] = 1;
				        format(string, sizeof(string), "[BOMBEIRO]: %s está em serviço, (/servico bombeiro).", sendername);
		    			OOCNews(0x00C2ECFF,string);
				        Bombers += 1;
				    }
			    }
			}
			else if(PlayerInfo[playerid][pEmprego] == 2)
			{
				    if(EmpregoDuty[playerid] == 1)
				    {
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Agora Você Está De Folga, e não receberá chamados!");
				        EmpregoDuty[playerid] = 0;
				        AdvOns -= 1;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Agora você está de plantão com o seu trabalho e irá receber chamadas de pessoas que precisam.");
				        EmpregoDuty[playerid] = 1;
				        format(string, sizeof(string), "[ADVOGADO]: %s está em serviço, (/servico Advogado).", sendername);
		    			OOCNews(0x00C2ECFF,string);
				        AdvOns += 1;
				    }
			}
			else if(PlayerInfo[playerid][pEmprego] == 20)
			{
				    if(EmpregoDuty[playerid] == 1)
				    {
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Agora Você Está De Folga, e não receberá chamados!");
				        EmpregoDuty[playerid] = 0;
				        PizOns -= 1;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Agora você está de plantão com o seu trabalho e irá receber chamadas de pessoas que precisam.");
				        EmpregoDuty[playerid] = 1;
				        format(string, sizeof(string), "[Entregador]: %s está em serviço, (/servico Pizza).", sendername);
		    			OOCNews(0x00C2ECFF,string);
				        PizOns += 1;
				    }
			}
			else if(IsAMecCar(Veh) && IsAMec(playerid) || IsAMecanicCar(Veh) && IsAMec(playerid))
				{
				    if(GetPlayerState(playerid) == 2)
				    {
					    if(EmpregoDuty[playerid] == 1)
					    {
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Agora Você Está De Folga, e não receberá chamados!");
					        EmpregoDuty[playerid] = 0;
					        Mechanics -= 1;
					    }
					    else
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Agora você está de plantão como mecânico e irá receber chamadas de pessoas que precisam.");
					        EmpregoDuty[playerid] = 1;
					        SetPlayerSkin(playerid,50);
					        format(string, sizeof(string), "Mecânico %s está em servico, /servico mecanico.", sendername);
			    			SendClientMessageToAll(0x00C2ECFF,string);
					        Mechanics += 1;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Você não é o motorista!");
					    return true;
					}
				}
			return true;
	}
	CMD:plantao(playerid, params[])
	{
		if(GetPlayerOrg(playerid) == 4)
		{
		    if(PlayerInfo[playerid][pJailed] == 9)
		    {
				SendClientMessage(playerid,COLOR_GRAD1,"Você não pode usar este comando nas Celas da Administração!");
		      	return true;
		    }
		    if((PlayerInfo[playerid][pAdmin] && admtrampando[playerid]) || (PlayerInfo[playerid][pHelper] && helpertrampando[playerid]))
	    	return SendClientMessage(playerid, COLOR_GREY, "Você precisa estar em modo jogo bater cartão.");

		    if(EmpregoDuty[playerid] == 1)
		    {
		      	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Agora Você Está De Folga, e não receberá chamados!");
		      	EmpregoDuty[playerid] = 0;
		        Medics -= 1;
		    }
		    else
		    {
		        new string[128];
		        if(PlayerInfo[playerid][pSex] == 2)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
		        	format(string, sizeof(string), "Médica %s está no plantão, use (/servico medico).", sendername);
				}
				if(PlayerInfo[playerid][pSex] == 1)
				{
				    GetPlayerName(playerid, sendername, sizeof(sendername));
		        	format(string, sizeof(string), "Médico %s está no plantão, use (/servico medico).", sendername);
				}
				SendClientMessageToAll(COLOR_LIGHTBLUE,string);
		       	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Agora você está de plantão com o seu trabalho e irá receber chamadas de pessoas que precisam.");
		       	EmpregoDuty[playerid] = 1;
		        Medics += 1;
			}
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Você nao é um medico!");
		return true;
	}
		CMD:aa2017equirc1(playerid)
	{
	    new org = GetPlayerOrg(playerid);
	    new darmaconha = CofreOrg[org][dMaconha];
    	if(org)
		{

		    if(CofreOrg[org][Vip] > 0)return EquipamentosORVIP(playerid);

  		   	if(JaEquipado[playerid] == 1)
    		{
	   			SendClientMessage(playerid,COLOR_GREY," Você precisa esperar um pouco para equipar novamente!");
	   			return true;
    		}
    	    new dorgas = CofreOrg[org][Materiais];
    	    new gastado = (CofreOrg[org][dEaglec1]+CofreOrg[org][dShotc1]+CofreOrg[org][dMP5c1]+CofreOrg[org][dAKc1]+CofreOrg[org][dRiflec1])/2;
    	    new maconha = CofreOrg[org][Maconha];
    	    new grana = CofreOrg[org][Dinheiro];


			if(PlayerInfo[playerid][pCargo] >= 1)
    		{

    		    new string[128];
		    	if(CofreOrg[org][Materiais] < gastado)
	    		{
					if(IsAMember(playerid))
					{
						format(string, sizeof string, "Sua organização não tem %d materiais para equipar neste cargo!", gastado);
						SendClientMessage(playerid, -1, string);
		    			return true;
		   			}
	    		}
                ResetPlayerWeapons(playerid);
                	    	    SetPlayerHealth(playerid, 100.0);
                SetPlayerArmour(playerid, 100.0);
				CofreOrg[org][Materiais] = dorgas-gastado;
				GivePlayerWeapon(playerid, 1, 1);
				GivePlayerWeapon(playerid, 5, 1);
    			SetPlayerHealth(playerid, 100.0);
	    	    GivePlayerWeapon(playerid, 24, CofreOrg[org][dEaglec1]);
	    	    GivePlayerWeapon(playerid, 25, CofreOrg[org][dShotc1]);
	    	    GivePlayerWeapon(playerid, 29, CofreOrg[org][dMP5c1]);
	    	    if(IsACop(playerid))GivePlayerWeapon(playerid, 3, 1);
	    	    if(IsAMember(playerid)){
					format(string, sizeof(string), "INFO HQ: Seus equipamentos gastaram %d materiais da sua HQ!", gastado);
	    			SendClientMessage(playerid, 0x00660CC8, string);
				}
	    	    GivePlayerMoney(playerid, -50);
	    	    CofreOrg[org][Dinheiro] = grana+50;
	    	    format(string, sizeof(string), "*%s se equipou", PlayerName(playerid));
				SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				Bucetuda[playerid] = SetTimerEx("PlayerEquipar", 40000, 0, "i", playerid);
				JaEquipado[playerid] = 1;
	    		if(GetPlayerOrg(playerid) == 23 || GetPlayerOrg(playerid) == 15 || GetPlayerOrg(playerid) == 3 || GetPlayerOrg(playerid) == 29)
	    	    {
	    	        GivePlayerWeapon(playerid, 4, 1);
	    	    }
	    	    if(IsACop(playerid))
	    	    {
	    	        GivePlayerWeapon(playerid, 43, 500);
	    	    }
	    		if(GetPlayerOrg(playerid) == 20)
	    	    {
	    	        ResetPlayerWeapons(playerid);
	    	        GivePlayerWeapon(playerid, 24, 200);
	    	        GivePlayerWeapon(playerid, 25, 200);
	    	        GivePlayerWeapon(playerid, 42, 5000);
	    	    }
				if(CofreOrg[org][Maconha] > darmaconha && IsAMember(playerid))
    			{
					format(string, sizeof(string), "Sua HQ te deu %d de Maconha", darmaconha);
	    			SendClientMessage(playerid, COLOR_YELLOW,string);
					CofreOrg[org][Maconha] = maconha-darmaconha;
					PlayerInfo[playerid][pDrogas] += darmaconha;
		   			return true;
    			}
    			else
    			{
    		        return 1;
    			}
	    	}
	    	else
	    	{
	    	    SendClientMessage(playerid, COLOR_WHITE, " Escolha seu cargo corretamente");
	    	    return true;
			}
		}
		return true;
	}

//c2
	CMD:aa2017equirc2(playerid)
	{
	    new org = GetPlayerOrg(playerid);
	    new darmaconha = CofreOrg[org][dMaconha];
    	if(org)
		{
            if(CofreOrg[org][Vip] > 0)return EquipamentosORVIP(playerid);
  		   	if(JaEquipado[playerid] == 1)
    		{
	   			SendClientMessage(playerid,COLOR_GREY," Você precisa esperar um pouco para equipar novamente!");
	   			return true;
    		}
    	    new dorgas = CofreOrg[org][Materiais];
    	    new gastado = (CofreOrg[org][dEaglec2]+CofreOrg[org][dShotc2]+CofreOrg[org][dMP5c2]+CofreOrg[org][dAKc2]+CofreOrg[org][dRiflec2])/2;
    	    new maconha = CofreOrg[org][Maconha];
    	    new grana = CofreOrg[org][Dinheiro];
    		if(PlayerInfo[playerid][pCargo] >= 2)
    		{
    		    new string[128];
		    	if(CofreOrg[org][Materiais] < gastado)
	    		{
					if(IsAMember(playerid))
					{
						format(string, sizeof string, "Sua organização não tem %d materiais para equipar neste cargo!", gastado);
						SendClientMessage(playerid, -1, string);
		    			return true;
		   			}
	    		}

	    	    SetPlayerHealth(playerid, 100.0);
                SetPlayerArmour(playerid, 100.0);
                ResetPlayerWeapons(playerid);
				CofreOrg[org][Materiais] = dorgas-gastado;
				GivePlayerWeapon(playerid, 1, 1);
				GivePlayerWeapon(playerid, 5, 1);
				GivePlayerWeapon(playerid, 24, CofreOrg[org][dEaglec2]);
	    	    GivePlayerWeapon(playerid, 25, CofreOrg[org][dShotc2]);
	    	    GivePlayerWeapon(playerid, 29, CofreOrg[org][dMP5c2]);
	    	    if(IsACop(playerid))GivePlayerWeapon(playerid, 3, 1);
	    	    if(IsAMember(playerid)){
					format(string, sizeof(string), "INFO HQ: Seus equipamentos gastaram %d materiais da sua HQ!", gastado);
	    			SendClientMessage(playerid, 0x00660CC8, string);
				}
	    	    GivePlayerMoney(playerid, -50);
	    	    CofreOrg[org][Dinheiro] = grana+50;
				format(string, sizeof(string), "*%s se equipou", PlayerName(playerid));
				SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				Bucetuda[playerid] = SetTimerEx("PlayerEquipar", 40000, 0, "i", playerid);
				JaEquipado[playerid] = 1;
	    	    if(GetPlayerOrg(playerid) == 23 || GetPlayerOrg(playerid) == 15 || GetPlayerOrg(playerid) == 3 || GetPlayerOrg(playerid) == 29)
	    	    {
	    	        GivePlayerWeapon(playerid, 4, 1);
	    	    }
	    		if(GetPlayerOrg(playerid) == 20)
	    	    {
	    	        ResetPlayerWeapons(playerid);
	    	        GivePlayerWeapon(playerid, 24, 200);
	    	        GivePlayerWeapon(playerid, 25, 200);
	    	        GivePlayerWeapon(playerid, 42, 5000);
	    	    }
				if(CofreOrg[org][Maconha] > darmaconha && IsAMember(playerid))
    			{
					format(string, sizeof(string), "Sua HQ te deu %d de Maconha", darmaconha);
	    			SendClientMessage(playerid, COLOR_YELLOW,string);
					CofreOrg[org][Maconha] = maconha-darmaconha;
					PlayerInfo[playerid][pDrogas] += darmaconha;
		   			return true;
    			}
    			else
    			{
    		        return 1;
    			}
	    	}
	    	else
	    	{
	    	    SendClientMessage(playerid, COLOR_WHITE, " Escolha seu cargo corretamente");
	    	    return true;
			}
		}
		return true;
	}

//c3
	CMD:aa2017equirc3(playerid)
	{
	    new org = GetPlayerOrg(playerid);
	    new darmaconha = CofreOrg[org][dMaconha];
    	if(org)
		{
		    if(CofreOrg[org][Vip] > 0)return EquipamentosORVIP(playerid);
  		   	if(JaEquipado[playerid] == 1)
    		{
	   			SendClientMessage(playerid,COLOR_GREY," Você precisa esperar um pouco para equipar novamente!");
	   			return true;
    		}
    	    new dorgas = CofreOrg[org][Materiais];
    	    new gastado = (CofreOrg[org][dEaglec3]+CofreOrg[org][dShotc3]+CofreOrg[org][dMP5c3]+CofreOrg[org][dAKc3]+CofreOrg[org][dRiflec3])/2;
    	    new maconha = CofreOrg[org][Maconha];
    	    new grana = CofreOrg[org][Dinheiro];
    		if(PlayerInfo[playerid][pCargo] >= 3)
    		{
    		    new string[128];
		    	if(CofreOrg[org][Materiais] < gastado)
	    		{
					if(IsAMember(playerid))
					{
						format(string, sizeof string, "Sua organização não tem %d materiais para equipar neste cargo!", gastado);
						SendClientMessage(playerid, -1, string);
		    			return true;
		   			}
	    		}
	    	    SetPlayerHealth(playerid, 100.0);
                SetPlayerArmour(playerid, 100.0);
                ResetPlayerWeapons(playerid);
				CofreOrg[org][Materiais] = dorgas-gastado;
				GivePlayerWeapon(playerid, 1, 1);
				GivePlayerWeapon(playerid, 5, 1);
				GivePlayerWeapon(playerid, 24, CofreOrg[org][dEaglec3]);
	    	    GivePlayerWeapon(playerid, 25, CofreOrg[org][dShotc3]);
	    	    GivePlayerWeapon(playerid, 29, CofreOrg[org][dMP5c3]);
	    	    GivePlayerWeapon(playerid, 31, CofreOrg[org][dM4c3]);
	    	    if(IsACop(playerid))GivePlayerWeapon(playerid, 3, 1);
	    	    if(IsAMember(playerid)){
					format(string, sizeof(string), "INFO HQ: Seus equipamentos gastaram %d materiais da sua HQ!", gastado);
	    			SendClientMessage(playerid, 0x00660CC8, string);
				}
	    	    if(GetPlayerOrg(playerid) == 23 || GetPlayerOrg(playerid) == 15 || GetPlayerOrg(playerid) == 3 || GetPlayerOrg(playerid) == 29)
	    	    {
	    	        SetPlayerArmour(playerid, 50.0);
	    	        SetPlayerHealth(playerid, 100.0);
	    	        GivePlayerWeapon(playerid, 34, 20);
	    	        GivePlayerWeapon(playerid, 4, 1);
	    	    }
	    	    if(IsACop(playerid))
	    	    {
	    	        GivePlayerWeapon(playerid, 34, 20);
	    	        GivePlayerWeapon(playerid, 31, 200);
	    	    }
	    	    GivePlayerMoney(playerid, -50);
	    	    CofreOrg[org][Dinheiro] = grana+50;
				format(string, sizeof(string), "*%s se equipou", PlayerName(playerid));
				SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				Bucetuda[playerid] = SetTimerEx("PlayerEquipar", 40000, 0, "i", playerid);
				JaEquipado[playerid] = 1;
	    		if(GetPlayerOrg(playerid) == 20)
	    	    {
	    	        ResetPlayerWeapons(playerid);
	    	        GivePlayerWeapon(playerid, 24, 200);
	    	        GivePlayerWeapon(playerid, 25, 200);
	    	        GivePlayerWeapon(playerid, 42, 5000);
	    	    }
				if(CofreOrg[org][Maconha] > darmaconha && IsAMember(playerid))
    			{
					format(string, sizeof(string), "Sua HQ te deu %d de Maconha", darmaconha);
	    			SendClientMessage(playerid, COLOR_YELLOW,string);
					CofreOrg[org][Maconha] = maconha-darmaconha;
					PlayerInfo[playerid][pDrogas] += darmaconha;
		   			return true;
    			}
    			else
    			{
    		        return 1;
    			}

	    	}
	    	else
	    	{
	    	    SendClientMessage(playerid, COLOR_WHITE, " Escolha seu cargo corretamente");
	    	    return true;
			}
		}
		return true;
	}
//c4
	CMD:aa2017equirc4(playerid)
	{
	    new org = GetPlayerOrg(playerid);
	    new darmaconha = CofreOrg[org][dMaconha];
    	if(org)
		{
            if(CofreOrg[org][Vip] > 0)return EquipamentosORVIP(playerid);
  		   	if(JaEquipado[playerid] == 1)
    		{
	   			SendClientMessage(playerid,COLOR_GREY," Você precisa esperar um pouco para equipar novamente!");
	   			return true;
    		}
    	    new dorgas = CofreOrg[org][Materiais];
    	    new gastado = (CofreOrg[org][dEaglec4]+CofreOrg[org][dShotc4]+CofreOrg[org][dMP5c4]+CofreOrg[org][dAKc4]+CofreOrg[org][dRiflec4])/2;
    	    new maconha = CofreOrg[org][Maconha];
    	    new grana = CofreOrg[org][Dinheiro];
    		if(PlayerInfo[playerid][pCargo] >= 4)
    		{
    		    new string[128];
		    	if(CofreOrg[org][Materiais] < gastado)
	    		{
					if(IsAMember(playerid))
					{
						format(string, sizeof string, "Sua organização não tem %d materiais para equipar neste cargo!", gastado);
						SendClientMessage(playerid, -1, string);
		    			return true;
		   			}
	    		}
	    	    SetPlayerHealth(playerid, 100.0);
                SetPlayerArmour(playerid, 100.0);
                ResetPlayerWeapons(playerid);
				CofreOrg[org][Materiais] = dorgas-gastado;
				GivePlayerWeapon(playerid, 1, 1);
				GivePlayerWeapon(playerid, 5, 1);
				GivePlayerWeapon(playerid, 24, CofreOrg[org][dEaglec4]);
	    	    GivePlayerWeapon(playerid, 25, CofreOrg[org][dShotc4]);
	    	    GivePlayerWeapon(playerid, 29, CofreOrg[org][dMP5c4]);
	    	    GivePlayerWeapon(playerid, 30, CofreOrg[org][dAKc4]);
	    	    GivePlayerWeapon(playerid, 34, CofreOrg[org][dRiflec4]);
	    	    if(IsACop(playerid))GivePlayerWeapon(playerid, 3, 1);
	    	    if(IsAMember(playerid)){
					format(string, sizeof(string), "INFO HQ: Seus equipamentos gastaram %d materiais da sua HQ!", gastado);
	    			SendClientMessage(playerid, 0x00660CC8, string);
				}
	    	    GivePlayerMoney(playerid, -50);
	    	    CofreOrg[org][Dinheiro] = grana+50;
				format(string, sizeof(string), "*%s se equipou", PlayerName(playerid));
				SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				Bucetuda[playerid] = SetTimerEx("PlayerEquipar", 40000, 0, "i", playerid);
				JaEquipado[playerid] = 1;
    			if(CofreOrg[org][Maconha] > darmaconha && IsAMember(playerid))
    			{
					format(string, sizeof(string), "Sua HQ te deu %d de Maconha", darmaconha);
	    			SendClientMessage(playerid, COLOR_YELLOW,string);
					CofreOrg[org][Maconha] = maconha-darmaconha;
					PlayerInfo[playerid][pDrogas] += darmaconha;
    			}
    		    if(IsACop(playerid))
	    	    {
	    	        GivePlayerWeapon(playerid, 34, 80);
	    	        GivePlayerWeapon(playerid, 31, 300);
	    	    }
         		if(org == 15 || org == 3 || org == 23 || org == 29)
    			{
	                ResetPlayerWeapons(playerid);
	                GivePlayerWeapon(playerid, 1, 1);
					GivePlayerWeapon(playerid, 4, 1);
	    	        GivePlayerWeapon(playerid, 24, CofreOrg[org][dEaglec4]);
	    	        GivePlayerWeapon(playerid, 25, CofreOrg[org][dShotc4]);
	    	        GivePlayerWeapon(playerid, 29, CofreOrg[org][dMP5c4]);
	    	        GivePlayerWeapon(playerid, 30, CofreOrg[org][dAKc4]);
	    	        GivePlayerWeapon(playerid, 34, CofreOrg[org][dRiflec4]);
		    	    GivePlayerWeapon(playerid, 31, 150);
		    	    GivePlayerWeapon(playerid, 33, 200);
		    	    GivePlayerWeapon(playerid, 34, 80);
		    	    GivePlayerMoney(playerid, -500);
		    	    SetPlayerHealth(playerid, 100);
	    	        SetPlayerArmour(playerid, 50.0);
		    	    CofreOrg[org][Dinheiro] = grana+500;
					Bucetuda[playerid] = SetTimerEx("PlayerEquipar", 40000, 0, "i", playerid);
					JaEquipado[playerid] = 1;
	   			}
	    		if(GetPlayerOrg(playerid) == 20)
	    	    {
	    	        ResetPlayerWeapons(playerid);
	    	        GivePlayerWeapon(playerid, 24, 200);
	    	        GivePlayerWeapon(playerid, 25, 200);
	    	        GivePlayerWeapon(playerid, 42, 5000);
	    	    }
	    	}
	    	else
	    	{
	    	    SendClientMessage(playerid, COLOR_WHITE, " Escolha seu cargo corretamente");
	    	    return true;
			}
		}
		return true;
	}
//c5
	CMD:aa2017equirc5(playerid)
	{
	    new org = GetPlayerOrg(playerid);
	    new darmaconha = CofreOrg[org][dMaconha];
    	if(org)
		{
            if(CofreOrg[org][Vip] > 0)return EquipamentosORVIP(playerid);
  		   	if(JaEquipado[playerid] == 1)
    		{
	   			SendClientMessage(playerid,COLOR_GREY," Você precisa esperar um pouco para equipar novamente!");
	   			return true;
    		}
    	    new dorgas = CofreOrg[org][Materiais];
    	    new gastado = (CofreOrg[org][dEaglec5]+CofreOrg[org][dShotc5]+CofreOrg[org][dMP5c5]+CofreOrg[org][dAKc5]+CofreOrg[org][dRiflec5])/2;
    	    new maconha = CofreOrg[org][Maconha];
    	    new grana = CofreOrg[org][Dinheiro];
    		if(PlayerInfo[playerid][pCargo] >= 5)
    		{
    		    new string[128];

		    	if(CofreOrg[org][Materiais] < gastado)
	    		{
					if(IsAMember(playerid))
					{
						format(string, sizeof string, "Sua organização não tem %d materiais para equipar neste cargo!", gastado);
						SendClientMessage(playerid, -1, string);
		    			return true;
		   			}
	    		}
    		    	    	    SetPlayerHealth(playerid, 100.0);
                SetPlayerArmour(playerid, 100.0);
                ResetPlayerWeapons(playerid);
				CofreOrg[org][Materiais] = dorgas-gastado;
				GivePlayerWeapon(playerid, 1, 1);
				GivePlayerWeapon(playerid, 5, 1);
	    	    GivePlayerWeapon(playerid, 24, CofreOrg[org][dEaglec5]);
	    	    GivePlayerWeapon(playerid, 25, CofreOrg[org][dShotc5]);
	    	    GivePlayerWeapon(playerid, 29, CofreOrg[org][dMP5c5]);
                GivePlayerWeapon(playerid, 30, CofreOrg[org][dAKc5]);
	    	    GivePlayerWeapon(playerid, 34, CofreOrg[org][dRiflec5]);
	    	    if(IsACop(playerid))GivePlayerWeapon(playerid, 3, 1);
	    	    if(IsAMember(playerid)){
					format(string, sizeof(string), "INFO HQ: Seus equipamentos gastaram %d materiais da sua HQ!", gastado);
	    			SendClientMessage(playerid, 0x00660CC8, string);
				}
	    	    GivePlayerMoney(playerid, -50);
	    	    CofreOrg[org][Dinheiro] = grana+50;
				format(string, sizeof(string), "*%s se equipou", PlayerName(playerid));
				SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				Bucetuda[playerid] = SetTimerEx("PlayerEquipar", 40000, 0, "i", playerid);
				JaEquipado[playerid] = 1;
    			if(CofreOrg[org][Maconha] > darmaconha && IsAMember(playerid))
    			{
					format(string, sizeof(string), "Sua HQ te deu %d de Maconha", darmaconha);
	    			SendClientMessage(playerid, COLOR_YELLOW,string);
					CofreOrg[org][Maconha] = maconha-darmaconha;
					PlayerInfo[playerid][pDrogas] += darmaconha;
    			}
	    	    if(IsACop(playerid))
	    	    {
	    	        GivePlayerWeapon(playerid, 34, 100);
	    	        GivePlayerWeapon(playerid, 31, 400);
	    	    }
    			if(org == 15 || org == 3 || org == 23 || org == 29)
    			{
		               	ResetPlayerWeapons(playerid);
		                GivePlayerWeapon(playerid, 1, 1);
						GivePlayerWeapon(playerid, 4, 1);
	    	    	    GivePlayerWeapon(playerid, 24, CofreOrg[org][dEaglec5]);
	    	    	    GivePlayerWeapon(playerid, 25, CofreOrg[org][dShotc5]);
	    	    	    GivePlayerWeapon(playerid, 29, CofreOrg[org][dMP5c5]);
                	    GivePlayerWeapon(playerid, 30, CofreOrg[org][dAKc5]);
	    	    	    GivePlayerWeapon(playerid, 34, CofreOrg[org][dRiflec5]);
			    	    GivePlayerWeapon(playerid, 31, 200);
			    	    GivePlayerWeapon(playerid, 33, 200);
			    	    GivePlayerWeapon(playerid, 34, 100);
			    	    GivePlayerMoney(playerid, -500);
	    	        	SetPlayerArmour(playerid, 50.0);
	    	        	SetPlayerHealth(playerid, 100.0);
			    	    CofreOrg[org][Dinheiro] = grana+500;
						Bucetuda[playerid] = SetTimerEx("PlayerEquipar", 40000, 0, "i", playerid);
						JaEquipado[playerid] = 1;
    			}
	    		if(GetPlayerOrg(playerid) == 20)
	    	    {
	    	        ResetPlayerWeapons(playerid);
	    	        GivePlayerWeapon(playerid, 24, 200);
	    	        GivePlayerWeapon(playerid, 25, 200);
	    	        GivePlayerWeapon(playerid, 42, 5000);
	    	    }

	    	}
	    	else
	    	{
	    	    SendClientMessage(playerid, COLOR_WHITE, " Escolha seu cargo corretamente");
	    	    return true;
			}
		}
		return true;
	}

//c6 = lider
	CMD:aa2017equirc6(playerid)
	{
	    new org = GetPlayerOrg(playerid);
	    new darmaconha = CofreOrg[org][dMaconha];
    	if(org)
		{
		    if(CofreOrg[org][Vip] > 0)return EquipamentosORVIP(playerid);
  		   	if(JaEquipado[playerid] == 1)
    		{
	   			SendClientMessage(playerid,COLOR_GREY," Você precisa esperar um pouco para equipar novamente!");
	   			return true;
    		}
    	    new dorgas = CofreOrg[org][Materiais];
    	    new gastado = (CofreOrg[org][dEaglec5]+CofreOrg[org][dShotc5]+CofreOrg[org][dMP5c5]+CofreOrg[org][dAKc5]+CofreOrg[org][dRiflec5])/2;
    	    new maconha = CofreOrg[org][Maconha];
    	    new grana = CofreOrg[org][Dinheiro];
    		if(PlayerInfo[playerid][pCargo] == 6)
    		{
    		    new string[128];

		    	if(CofreOrg[org][Materiais] < gastado)
	    		{
					if(IsAMember(playerid))
					{
						format(string, sizeof string, "Sua organização não tem %d materiais para equipar neste cargo!", gastado);
						SendClientMessage(playerid, -1, string);
		    			return true;
		   			}
	    		}
    		    SetPlayerHealth(playerid, 100.0);
                ResetPlayerWeapons(playerid);
				CofreOrg[org][Materiais] = dorgas-gastado;
				GivePlayerWeapon(playerid, 1, 1);
				GivePlayerWeapon(playerid, 5, 1);
	    	    GivePlayerWeapon(playerid, 24, CofreOrg[org][dEaglec5]);
	    	    GivePlayerWeapon(playerid, 25, CofreOrg[org][dShotc5]);
	    	    GivePlayerWeapon(playerid, 29, CofreOrg[org][dMP5c5]);
                GivePlayerWeapon(playerid, 30, CofreOrg[org][dAKc5]);
	    	    GivePlayerWeapon(playerid, 34, CofreOrg[org][dRiflec5]);
	    	    if(IsAMember(playerid)){
					format(string, sizeof(string), "INFO HQ: Seus equipamentos gastaram %d materiais da sua HQ!", gastado);
	    			SendClientMessage(playerid, 0x00660CC8, string);
				}
				GivePlayerMoney(playerid, -50);
	    	    CofreOrg[org][Dinheiro] = grana+50;
				format(string, sizeof(string), "*%s se equipou", PlayerName(playerid));
				SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				Bucetuda[playerid] = SetTimerEx("PlayerEquipar", 40000, 0, "i", playerid);
				JaEquipado[playerid] = 1;
    			if(CofreOrg[org][Maconha] > darmaconha && IsAMember(playerid))
    			{
					format(string, sizeof(string), "Sua HQ te deu %d de Maconha", darmaconha);
	    			SendClientMessage(playerid, COLOR_YELLOW,string);
					CofreOrg[org][Maconha] = maconha-darmaconha;
					PlayerInfo[playerid][pDrogas] += darmaconha;
    			}
	    	    if(IsACop(playerid))
	    	    {
	    	        GivePlayerWeapon(playerid, 34, 120);
	    	        GivePlayerWeapon(playerid, 31, 600);
	    	    }
    			if(org == 15 || org == 3 || org == 23 || org == 29)
    			{
		                ResetPlayerWeapons(playerid);
		                GivePlayerWeapon(playerid, 1, 1);
						GivePlayerWeapon(playerid, 4, 1);
	    	    	    GivePlayerWeapon(playerid, 24, CofreOrg[org][dEaglec5]);
	    	    	    GivePlayerWeapon(playerid, 25, CofreOrg[org][dShotc5]);
	    	    	    GivePlayerWeapon(playerid, 29, CofreOrg[org][dMP5c5]);
                	    GivePlayerWeapon(playerid, 30, CofreOrg[org][dAKc5]);
	    	    	    GivePlayerWeapon(playerid, 34, CofreOrg[org][dRiflec5]);
			    	    GivePlayerWeapon(playerid, 31, 400);
			    	    GivePlayerWeapon(playerid, 33, 200);
			    	    GivePlayerWeapon(playerid, 34, 120);
			    	    GivePlayerMoney(playerid, -500);
	    	        	SetPlayerArmour(playerid, 50.0);
	    	        	SetPlayerHealth(playerid, 100.0);
			    	    CofreOrg[org][Dinheiro] = grana+500;
						Bucetuda[playerid] = SetTimerEx("PlayerEquipar", 40000, 0, "i", playerid);
						JaEquipado[playerid] = 1;
    			}
	    		if(GetPlayerOrg(playerid) == 20)
	    	    {
	    	        ResetPlayerWeapons(playerid);
	    	        GivePlayerWeapon(playerid, 24, 200);
	    	        GivePlayerWeapon(playerid, 25, 200);
	    	        GivePlayerWeapon(playerid, 42, 5000);
	    	    }
	    	}
	    	else
	    	{
	    	    SendClientMessage(playerid, COLOR_WHITE, " Escolha seu cargo corretamente");
	    	    return true;
			}
		}
		return true;
	}
		EquipamentosORVIP(playerid){

	    static
			string[89]
		;

		format(string, sizeof(string), "*%s pegou os equipamentos (ORG VIP)", PlayerName(playerid));
		SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		Bucetuda[playerid] = SetTimerEx("PlayerEquipar", 40000, 0, "i", playerid);

        ResetPlayerWeapons(playerid);

        SetPlayerHealth(playerid, 100.0);
        SetPlayerArmour(playerid, 100.0);

        GivePlayerWeapon(playerid, 4, 1);
        GivePlayerWeapon(playerid, 24, 999);
        GivePlayerWeapon(playerid, 25, 999);
        GivePlayerWeapon(playerid, 29, 999);
        GivePlayerWeapon(playerid, 31, 999);
        GivePlayerWeapon(playerid, 34, 999);

		return 1;
	}
	CMD:equiparreporter(playerid, params[])
	{

	    if((PlayerInfo[playerid][pAdmin] && admtrampando[playerid]) || (PlayerInfo[playerid][pHelper] && helpertrampando[playerid]))
	    return SendClientMessage(playerid, COLOR_GREY, "Você precisa estar em modo jogo para equipar-se.");

		if(PlayerToPoint(3, playerid,356.6207,208.9427,1008.3828))
		{
		    if((PlayerInfo[playerid][pAdmin] && admtrampando[playerid]) || (PlayerInfo[playerid][pHelper] && helpertrampando[playerid]))
	    	return SendClientMessage(playerid, COLOR_GREY, "Você precisa estar em modo jogo para equipar-se.");

	    	if(InTaser[playerid] == true || InChoque[playerid] == true)
        	{
        	    SendClientMessage(playerid,COLOR_GREY,"Você não pode equipar-se quando estiver com o Taser ou Choque em mãos!");
	   			return true;
        	}

        	if(gettime() < GetPVarInt(playerid, "VarDano"))
				return SendClientMessage(playerid, COLOR_GRAD1,"Você só poderá equipar 3 minutos após tomar dano de alguém !");

	        GetPlayerName(playerid, sendername, sizeof(sendername));
   			if(PlayerInfo[playerid][pMembro] == 9 || PlayerInfo[playerid][pLider] == 9)//Reporter
			{
			    new string[128];
				format(string, sizeof(string), "* O Repórter %s Pegou Seus Equipamentos", PlayerName(playerid));
				SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
 		        ResetPlayerWeapons(playerid);
 		        TempDropArmasBody[playerid] = 0;
			    SetPlayerHealth(playerid, 100.0);
				GivePlayerWeapon(playerid, 24, 150);
				GivePlayerWeapon(playerid, 43, 200);
				return true;
			}
			else
			{
				SendClientMessage(playerid, 0xF0FFFFAA, "Você não é Repórter !");
			}
		}
		return true;
	}
	CMD:equipargang(playerid, params[])
	{
			    if(gettime() < GetPVarInt(playerid, "VarDano"))
				return SendClientMessage(playerid, COLOR_GRAD1,"Você só poderá equipar 3 minutos após tomar dano de alguém !");
  		   	if(JaEquipado[playerid] == 1)
    		{
	   			SendClientMessage(playerid,COLOR_GREY,"Você precisa esperar um pouco para equipar novamente!");
	   			return true;
    		}
			 if (IsPlayerInVehicle(playerid,CarrosGroove[7]) || IsPlayerInVehicle(playerid,CarrosAztecas[2])
			 || IsPlayerInVehicle(playerid,CarrosBallas[5]) || IsPlayerInVehicle(playerid,CarrosVagos[9]) || IsPlayerInVehicle(playerid,CarrosCV[9]) || IsPlayerInVehicle(playerid,CarrosPCC[1]))
		     {
		           new string[128];
	        	   if(OrgsGang(playerid))
					{
		          		    if(CofreOrg[PlayerInfo[playerid][pMembro]][Vip] != 0 || CofreOrg[PlayerInfo[playerid][pLider]][Vip] != 0)
		          		    {
		          		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Voce Pegou os Equipamentos VIP de Sua Org.");
 								format(string, sizeof(string), "* %s pega seus equipamentos ORG-VIP.", sendername);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	                            SetPlayerHealth(playerid, 100.0);
  								SetPlayerArmour(playerid, 100.0);
								GivePlayerWeapon(playerid, 24, 500);
								GivePlayerWeapon(playerid, 25, 500);
	                            GivePlayerWeapon(playerid, 29, 500);
	                            GivePlayerWeapon(playerid, 34, 5);
								GivePlayerWeapon(playerid, 31, 500);
								Bucetuda[playerid] = SetTimerEx("PlayerEquipar", 40000, 0, "i", playerid);
						        JaEquipado[playerid] = 1;
								return 1;
		          		    }
		          		    else
		          		    {
			          		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Voce Pegou os Equipamentos Próprios Para o seu Cargo.");
								if (PlayerInfo[playerid][pCargo] == 1)
								{
					   				format(string, sizeof(string), "* %s pega seus equipamentos.", sendername);
									ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	                                SetPlayerHealth(playerid, 100.0);
                                    SetPlayerArmour(playerid, 100.0);
									GivePlayerWeapon(playerid, 24, 100);
									GivePlayerWeapon(playerid, 25, 50);
	                                GivePlayerWeapon(playerid, 29, 80);
									GivePlayerWeapon(playerid, 31, 50);
									GivePlayerWeapon(playerid, 34, 5);
									Bucetuda[playerid] = SetTimerEx("PlayerEquipar", 40000, 0, "i", playerid);
						        	JaEquipado[playerid] = 1;
									return 1;
								}
								if (PlayerInfo[playerid][pCargo] == 2)
								{
				   					format(string, sizeof(string), "* %s pega seus equipamentos.", sendername);
									ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	                                SetPlayerHealth(playerid, 100.0);
                                    SetPlayerArmour(playerid, 100.0);
									GivePlayerWeapon(playerid, 24, 150);
									GivePlayerWeapon(playerid, 25, 70);
									GivePlayerWeapon(playerid, 29, 120);
									GivePlayerWeapon(playerid, 34, 5);
									GivePlayerWeapon(playerid, 31, 100);
									Bucetuda[playerid] = SetTimerEx("PlayerEquipar", 40000, 0, "i", playerid);
						        	JaEquipado[playerid] = 1;
									return 1;
								}
				 				if (PlayerInfo[playerid][pCargo] == 3)
								{
					   				format(string, sizeof(string), "* %s pega seus equipamentos.", sendername);
									ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									SetPlayerHealth(playerid, 100.0);
                                    SetPlayerArmour(playerid, 100.0);
									GivePlayerWeapon(playerid, 24, 170);
									GivePlayerWeapon(playerid, 25, 100);
									GivePlayerWeapon(playerid, 29, 150);
									GivePlayerWeapon(playerid, 34, 5);
									GivePlayerWeapon(playerid, 31, 150);
									Bucetuda[playerid] = SetTimerEx("PlayerEquipar", 40000, 0, "i", playerid);
						        	JaEquipado[playerid] = 1;
									return 1;
			                    }
				  				if (PlayerInfo[playerid][pCargo] == 4)
								{
			   						format(string, sizeof(string), "* %s pega seus equipamentos.", sendername);
									ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									SetPlayerHealth(playerid, 100.0);
                                    SetPlayerArmour(playerid, 100.0);
									GivePlayerWeapon(playerid, 24, 200);
									GivePlayerWeapon(playerid, 25, 150);
									GivePlayerWeapon(playerid, 29, 200);
									GivePlayerWeapon(playerid, 34, 5);
									GivePlayerWeapon(playerid, 31, 200);
									Bucetuda[playerid] = SetTimerEx("PlayerEquipar", 40000, 0, "i", playerid);
						        	JaEquipado[playerid] = 1;
									return 1;
								}
						 		if (PlayerInfo[playerid][pCargo] == 5)
								{
						   			format(string, sizeof(string), "* %s pega seus equipamentos.", sendername);
									ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									SetPlayerHealth(playerid, 100.0);
                                    SetPlayerArmour(playerid, 100.0);
									GivePlayerWeapon(playerid, 24, 250);
									GivePlayerWeapon(playerid, 25, 200);
									GivePlayerWeapon(playerid, 34, 5);
									GivePlayerWeapon(playerid, 29, 250);
									GivePlayerWeapon(playerid, 31, 250);
									Bucetuda[playerid] = SetTimerEx("PlayerEquipar", 40000, 0, "i", playerid);
						        	JaEquipado[playerid] = 1;
									return 1;
								}
								if (PlayerInfo[playerid][pCargo] == 6)
								{
						   			format(string, sizeof(string), "* Líder %s pega seus equipamentos.", sendername);
									ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	  								SetPlayerHealth(playerid, 100.0);
                                    SetPlayerArmour(playerid, 100.0);
									GivePlayerWeapon(playerid, 24, 250);
									GivePlayerWeapon(playerid, 25, 250);
									GivePlayerWeapon(playerid, 34, 5);
									GivePlayerWeapon(playerid, 29, 300);
									GivePlayerWeapon(playerid, 31, 300);
									Bucetuda[playerid] = SetTimerEx("PlayerEquipar", 40000, 0, "i", playerid);
						        	JaEquipado[playerid] = 1;
									return 1;
								}
							}
			    		}
			 }
		return 1;
	}
 	CMD:equipar(playerid, params[])
	{
	    new string[128];
        GetPlayerName(playerid, sendername, MAX_PLAYER_NAME);
	  	if(PlayerToPoint(2,playerid,229.9627,165.1098,1003.0234) || PlayerToPoint(2,playerid,1712.3022,-1640.2500,20.2239) || PlayerToPoint(2,playerid,255.1995,77.1081,1003.6406) || PlayerToPoint(2,playerid,-1348.3979,500.5638,11.2027)
				|| PlayerToPoint(2,playerid,927.2700,-1038.1577,31.8984) || PlayerToPoint(2,playerid,240.5192,112.7945,1003.2188)  || PlayerToPoint(2,playerid,2266.5007,-137.6130,26.4619))
				{
			if(PlayerInfo[playerid][pJailed] != 0)
			{
				SendClientMessage(playerid,COLOR_GREY,"Você não pode equipar na cadeia!");
				return true;
			}
			if((PlayerInfo[playerid][pAdmin] && admtrampando[playerid]) || (PlayerInfo[playerid][pHelper] && helpertrampando[playerid]))
	    	return SendClientMessage(playerid, COLOR_GREY, "Você precisa estar em modo jogo para equipar-se.");

	    	if(InTaser[playerid] == true || InChoque[playerid] == true)
        	{
        	    SendClientMessage(playerid,COLOR_GREY,"Você não pode equipar-se quando estiver com o Taser ou Choque em mãos!");
	   			return true;
        	}

        	if(gettime() < GetPVarInt(playerid, "VarDano"))
				return SendClientMessage(playerid, COLOR_GRAD1,"Você só poderá equipar 3 minutos após tomar dano de alguém !");

	    	if(gettime() < GetPVarInt(playerid, #VarFlood10))
    			return SendClientMessage(playerid, COLOR_GRAD1, #Você não pode equipar com tanta frequencia);
				SetPVarInt(playerid, #VarFlood10, gettime()+60);
	    	if(PlayerInfo[playerid][pLider] == 1 || PlayerInfo[playerid][pLider] == 2 ||
			PlayerInfo[playerid][pLider] == 16 || PlayerInfo[playerid][pLider] == 11 ||
			PlayerInfo[playerid][pLider] == 33|| PlayerInfo[playerid][pMembro] == 1 ||
			PlayerInfo[playerid][pMembro] == 2 || PlayerInfo[playerid][pMembro] == 16 ||
			PlayerInfo[playerid][pMembro] == 11 || PlayerInfo[playerid][pMembro] == 33 ||
			GetPlayerOrg(playerid) == 35)
			{
			    if(PlayerInfo[playerid][pCargo] == 6)
			    {
			   		format(string, sizeof(string), "* %s se equipou.", PlayerName(playerid));
					SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SendClientMessage(playerid,COLOR_LIGHTBLUE,"*** Você pegou seus equipamentos de acordo com o seu cargo!");
	                ResetPlayerWeapons(playerid);
	                TempDropArmasBody[playerid] = 0;
				    SetPlayerArmour(playerid, 100.0);
				   	SetPlayerHealth(playerid, 100.0);
					GivePlayerWeapon(playerid, 25, 140);
					GivePlayerWeapon(playerid, 24, 170);
					GivePlayerWeapon(playerid, 29, 510);
					GivePlayerWeapon(playerid, 31, 550);
					GivePlayerWeapon(playerid, 34, 80);
					GivePlayerWeapon(playerid, 17, 50);
					GivePlayerWeapon(playerid, 3, 1);
	   			}
	    		if(PlayerInfo[playerid][pCargo] == 5)
			 	{
			   		format(string, sizeof(string), "* %s se equipou.", PlayerName(playerid));
					SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SendClientMessage(playerid,COLOR_LIGHTBLUE,"*** Você pegou seus equipamentos de acordo com o seu cargo!");
	                ResetPlayerWeapons(playerid);
	                TempDropArmasBody[playerid] = 0;
				    SetPlayerArmour(playerid, 100.0);
				    SetPlayerHealth(playerid, 100.0);
					GivePlayerWeapon(playerid, 25, 120);
					GivePlayerWeapon(playerid, 24, 360);
					GivePlayerWeapon(playerid, 29, 490);
					GivePlayerWeapon(playerid, 3, 1);
					GivePlayerWeapon(playerid, 31, 400);
					GivePlayerWeapon(playerid, 34, 50);
					GivePlayerWeapon(playerid, 17, 40);
	            }
	    		if(PlayerInfo[playerid][pCargo] == 4)
			 	{
			   		format(string, sizeof(string), "* %s se equipou.", PlayerName(playerid));
					SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SendClientMessage(playerid,COLOR_LIGHTBLUE,"*** Você pegou seus equipamentos de acordo com o seu cargo!");
	                ResetPlayerWeapons(playerid);
	                TempDropArmasBody[playerid] = 0;
				    SetPlayerArmour(playerid, 100.0);
				    SetPlayerHealth(playerid, 100.0);
					GivePlayerWeapon(playerid, 25, 120);
					GivePlayerWeapon(playerid, 24, 360);
					GivePlayerWeapon(playerid, 29, 490);
					GivePlayerWeapon(playerid, 3, 1);
					GivePlayerWeapon(playerid, 31, 400);
					GivePlayerWeapon(playerid, 34, 50);
					GivePlayerWeapon(playerid, 17, 40);
	            }
		  		if(PlayerInfo[playerid][pCargo] == 3)
		    	{
	   				format(string, sizeof(string), "* %s se equipou.", PlayerName(playerid));
					SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SendClientMessage(playerid,COLOR_LIGHTBLUE,"*** Você pegou seus equipamentos de acordo com o seu cargo!");
	                ResetPlayerWeapons(playerid);
	                TempDropArmasBody[playerid] = 0;
			   		SetPlayerArmour(playerid, 100.0);
		   			SetPlayerHealth(playerid, 100.0);
					GivePlayerWeapon(playerid, 25, 190);
					GivePlayerWeapon(playerid, 24, 150);
					GivePlayerWeapon(playerid, 29, 450);
					GivePlayerWeapon(playerid, 31, 550);
					GivePlayerWeapon(playerid, 17, 30);
					GivePlayerWeapon(playerid, 34, 30);
					GivePlayerWeapon(playerid, 3, 1);
	            }
			 	if(PlayerInfo[playerid][pCargo] == 2)
			    {
			   		format(string, sizeof(string), "* %s se equipou.", PlayerName(playerid));
	   				SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	   				SendClientMessage(playerid,COLOR_LIGHTBLUE,"*** Você pegou seus equipamentos de acordo com o seu cargo!");
	                ResetPlayerWeapons(playerid);
	                TempDropArmasBody[playerid] = 0;
			  		SetPlayerArmour(playerid, 100.0);
				    SetPlayerHealth(playerid, 100.0);
					GivePlayerWeapon(playerid, 25, 80);
					GivePlayerWeapon(playerid, 24, 150);
					GivePlayerWeapon(playerid, 3, 1);
					GivePlayerWeapon(playerid, 29, 300);
					GivePlayerWeapon(playerid, 31, 300);
					GivePlayerWeapon(playerid, 34, 80);
					GivePlayerWeapon(playerid, 17, 20);
	            }
			 	if(PlayerInfo[playerid][pCargo] == 1)
			 	{
			   		format(string, sizeof(string), "* %s se equipou.", PlayerName(playerid));
					SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SendClientMessage(playerid,COLOR_LIGHTBLUE,"*** Você pegou seus equipamentos de acordo com o seu cargo!");
	                ResetPlayerWeapons(playerid);
	                TempDropArmasBody[playerid] = 0;
				    SetPlayerArmour(playerid, 100.0);
				    SetPlayerHealth(playerid, 100.0);
					GivePlayerWeapon(playerid, 25, 190);
					GivePlayerWeapon(playerid, 24, 150);
					GivePlayerWeapon(playerid, 29, 450);
					GivePlayerWeapon(playerid, 31, 550);
					GivePlayerWeapon(playerid, 34, 5);
					GivePlayerWeapon(playerid, 17, 30);
					GivePlayerWeapon(playerid, 3, 1);
	            }
	   		}
			if(PlayerInfo[playerid][pLider] == 3)
			{
		    	format(string, sizeof(string), "* %s se equipou.", PlayerName(playerid));
				SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SendClientMessage(playerid,COLOR_LIGHTBLUE,"*** Você pegou seus equipamentos de acordo com o seu cargo!");
	            ResetPlayerWeapons(playerid);
                TempDropArmasBody[playerid] = 0;
			    SetPlayerArmour(playerid, 100.0);
			    SetPlayerHealth(playerid, 100.0);
				GivePlayerWeapon(playerid, 25, 500);
				GivePlayerWeapon(playerid, 24, 500);
				GivePlayerWeapon(playerid, 31, 600);
				GivePlayerWeapon(playerid, 29, 600);
				GivePlayerWeapon(playerid, 17, 10);
				GivePlayerWeapon(playerid, 34, 100);
				return true;
			}
			if(PlayerInfo[playerid][pMembro] == 3)//Exercito
		   	{
			   	SetPlayerArmour(playerid, 100.0);
			    SetPlayerHealth(playerid, 100.0);
			    GivePlayerWeapon(playerid, 4, 1);
	    		if(PlayerInfo[playerid][pCargo] == 1)
			    {
					format(string, sizeof(string), "* %s se equipou.", PlayerName(playerid));
					SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SendClientMessage(playerid,COLOR_LIGHTBLUE,"*** Você pegou seus equipamentos de acordo com o seu cargo!");
	                ResetPlayerWeapons(playerid);
	                TempDropArmasBody[playerid] = 0;
					GivePlayerWeapon(playerid, 25, 80);
					GivePlayerWeapon(playerid, 24, 80);
					GivePlayerWeapon(playerid, 31, 300);
					GivePlayerWeapon(playerid, 29, 300);
					GivePlayerWeapon(playerid, 34, 5);
					GivePlayerWeapon(playerid, 17, 10);
					return true;
				}
		   		if(PlayerInfo[playerid][pCargo] == 2)
			    {
			   		format(string, sizeof(string), "* %s se equipou.", PlayerName(playerid));
					SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SendClientMessage(playerid,COLOR_LIGHTBLUE,"*** Você pegou seus equipamentos de acordo com o seu cargo!");
	                ResetPlayerWeapons(playerid);
	                TempDropArmasBody[playerid] = 0;
					GivePlayerWeapon(playerid, 25, 80);
					GivePlayerWeapon(playerid, 24, 150);
					GivePlayerWeapon(playerid, 29, 300);
					GivePlayerWeapon(playerid, 31, 400);
					GivePlayerWeapon(playerid, 34, 5);
					GivePlayerWeapon(playerid, 17, 20);
					return true;
				}
		      	if(PlayerInfo[playerid][pCargo] == 3)
	   			{
			  		format(string, sizeof(string), "* %s se equipou.", PlayerName(playerid));
					SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SendClientMessage(playerid,COLOR_LIGHTBLUE,"*** Você pegou seus equipamentos de acordo com o seu cargo!");
	                ResetPlayerWeapons(playerid);
	                TempDropArmasBody[playerid] = 0;
					GivePlayerWeapon(playerid, 25, 190);
					GivePlayerWeapon(playerid, 24, 150);
					GivePlayerWeapon(playerid, 29, 450);
					GivePlayerWeapon(playerid, 34, 5);
					GivePlayerWeapon(playerid, 31, 550);
					GivePlayerWeapon(playerid, 17, 30);
					GivePlayerWeapon(playerid, 34, 25);
					return true;
				}
				if(PlayerInfo[playerid][pCargo] == 4)
			    {
					format(string, sizeof(string), "* %s se equipou.", PlayerName(playerid));
					SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SendClientMessage(playerid,COLOR_LIGHTBLUE,"*** Você pegou seus equipamentos de acordo com o seu cargo!");
	                ResetPlayerWeapons(playerid);
	                TempDropArmasBody[playerid] = 0;
					GivePlayerWeapon(playerid, 25, 120);
					GivePlayerWeapon(playerid, 24, 360);
					GivePlayerWeapon(playerid, 29, 490);
					GivePlayerWeapon(playerid, 31, 400);
					GivePlayerWeapon(playerid, 17, 40);
					GivePlayerWeapon(playerid, 34, 5);
					return true;
				}
			    if(PlayerInfo[playerid][pCargo] == 6)
			    {
					format(string, sizeof(string), "* %s se equipou.", PlayerName(playerid));
					SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SendClientMessage(playerid,COLOR_LIGHTBLUE,"*** Você pegou seus equipamentos de acordo com o seu cargo!");
	                ResetPlayerWeapons(playerid);
	                TempDropArmasBody[playerid] = 0;
					GivePlayerWeapon(playerid, 25, 140);
					GivePlayerWeapon(playerid, 24, 170);
					GivePlayerWeapon(playerid, 29, 510);
					GivePlayerWeapon(playerid, 31, 550);
					GivePlayerWeapon(playerid, 17, 50);
					GivePlayerWeapon(playerid, 34, 100);
					return true;
				}
			}
		}
		if(PlayerInfo[playerid][pEmprego] == 14)//Bombeiros
 		{
 		    if(PlayerToPoint(2.0, playerid,2015.1254,-2093.5525,13.5469))
			{
				    		format(string, sizeof(string), "[BOMBEIRO]: %s se equipou.", sendername);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							SendClientMessage(playerid,COLOR_LIGHTBLUE,"*** Você pegou seus equipamentos de acordo com o seu cargo!");
							ResetPlayerWeapons(playerid);
							TempDropArmasBody[playerid] = 0;
				    		SetPlayerArmour(playerid, 100.0);
				   			SetPlayerHealth(playerid, 100.0);
							GivePlayerWeapon(playerid, 42, 5000);
							GivePlayerWeapon(playerid, 9, 1);
			}
		}
	 	return true;
	}
	CMD:kitvip(playerid, result[])
	{
		    if(gettime() < GetPVarInt(playerid, "VarDano"))
				return SendClientMessage(playerid, COLOR_GRAD1,"Você só poderá equipar 3 minutos após tomar dano de alguém !");

	    	new string[128];
	    	new location = PlayerInfo[playerid][pLocal];
	        GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(PlayerInfo[playerid][pVIP] == 1)
			{
			if(location == 99 || location == 100 || location == 102 || PlayerToPoint(2.0,playerid,296.3083,-38.1549,1001.5156) || PlayerToPoint(2.0,playerid,313.8642,-133.8308,999.6016))
	     	{
	   	 		format(string, sizeof string, "* VIP %s Pegou Seu KitVip.", sendername);
	    		SendClientMessageInRange(30.0, playerid, string, 0x00fefeC8,0x00fefeC8,0x00fefeC8,0x00fefeC8,0x00fefeC8);
                SendClientMessage(playerid,COLOR_LIGHTRED,"Lembre-se,você não pode estar em batalha! ou levará cadeia!");
				ResetPlayerWeapons(playerid);
				TempDropArmasBody[playerid] = 0;
		    	GivePlayerWeapon(playerid, 29, 800);
			   	GivePlayerWeapon(playerid, 25, 800);
			   	GivePlayerWeapon(playerid, 24, 900);
			   	GivePlayerWeapon(playerid, 4, 1);
				SetPlayerArmour(playerid, 50);
				SetPlayerHealth(playerid, 100);
				SendClientMessage(playerid,COLOR_GREEN,"Você pegou o seu Kit VIP.");
				return 1;
				}
		     else
		   {
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está em uma loja de armas.");
		  }
              return true;
			}
			else if(PlayerInfo[playerid][pVIP] == 2)
			{
			if(location == 99 || location == 100 || location == 102 || PlayerToPoint(2.0,playerid,296.3083,-38.1549,1001.5156) || PlayerToPoint(2.0,playerid,313.8642,-133.8308,999.6016))
	        	{
		   		format(string, sizeof string, "* Sócio %s Pegou Seu KitSócio.", sendername);
	    		SendClientMessageInRange(30.0, playerid, string, 0xfaa788C8,0xfaa788C8,0xfaa788C8,0xfaa788C8,0xfaa788C8);
                SendClientMessage(playerid,COLOR_LIGHTRED,"Lembre-se,você não pode estar em batalha! ou levará cadeia!");
				ResetPlayerWeapons(playerid);
				TempDropArmasBody[playerid] = 0;
				GivePlayerWeapon(playerid, 31, 600);
		    	GivePlayerWeapon(playerid, 29, 800);
			   	GivePlayerWeapon(playerid, 25, 800);
			   	GivePlayerWeapon(playerid, 24, 900);
			   	GivePlayerWeapon(playerid, 4, 1);
				SetPlayerArmour(playerid, 70);
				SetPlayerHealth(playerid, 100);
				SendClientMessage(playerid,COLOR_LIGHTBLUE,"Você pegou o seu Kit Sócio.");
				return 1;
				}
		     else
		   {
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está em uma loja de armas.");
		  }
              return true;
			}
			else if(PlayerInfo[playerid][pVIP] == 5)
			{
			if(location == 99 || location == 100 || location == 102 || PlayerToPoint(2.0,playerid,296.3083,-38.1549,1001.5156) || PlayerToPoint(2.0,playerid,313.8642,-133.8308,999.6016))
		      {
		   		format(string, sizeof string, "* Sócio Power %s Pegou Seu KitSócio.", sendername);
	    		SendClientMessageInRange(30.0, playerid, string, 0xbb52feC8,0xbb52feC8,0xbb52feC8,0xbb52feC8,0xbb52feC8);
                SendClientMessage(playerid,COLOR_LIGHTRED,"Lembre-se,você não pode estar em batalha! ou levará cadeia!");
				ResetPlayerWeapons(playerid);
				TempDropArmasBody[playerid] = 0;
				GivePlayerWeapon(playerid, 34, 70);
				GivePlayerWeapon(playerid, 35, 1);
	    		GivePlayerWeapon(playerid, 31, 600);
		    	GivePlayerWeapon(playerid, 29, 800);
			   	GivePlayerWeapon(playerid, 25, 800);
			   	GivePlayerWeapon(playerid, 24, 900);
			   	GivePlayerWeapon(playerid, 4, 1);
				SetPlayerArmour(playerid, 80);
				SetPlayerHealth(playerid, 100);
				SendClientMessage(playerid,COLOR_LIGHTBLUE,"Você pegou o seu Kit Sócio Power.");
				return 1;
				}
		     else
		   {
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está em uma loja de armas.");
		  }
              return true;
			}
            else if(PlayerInfo[playerid][pVIP] == 6)
			{
			if(location == 99 || location == 100 || location == 102 || PlayerToPoint(2.0,playerid,296.3083,-38.1549,1001.5156) || PlayerToPoint(2.0,playerid,313.8642,-133.8308,999.6016))
	     	{
		   		format(string, sizeof string, "* Sócio Gold %s Pegou Seu KitSócio.", sendername);
	    		SendClientMessageInRange(30.0, playerid, string, 0xfef33cC8,0xfef33cC8,0xfef33cC8,0xfef33cC8,0xfef33cC8);
                SendClientMessage(playerid,COLOR_LIGHTRED,"Lembre-se,você não pode estar em batalha! ou levará cadeia!");
				ResetPlayerWeapons(playerid);
				TempDropArmasBody[playerid] = 0;
	    		GivePlayerWeapon(playerid, 24, 400);
	    		GivePlayerWeapon(playerid, 45,1);
				GivePlayerWeapon(playerid, 16, 16);
		    	GivePlayerWeapon(playerid, 31, 500);
			   	GivePlayerWeapon(playerid, 29, 500);
			   	GivePlayerWeapon(playerid, 25, 400);
			   	GivePlayerWeapon(playerid, 34, 50);
			   	GivePlayerWeapon(playerid, 4, 1);
			   	GivePlayerWeapon(playerid, 35, 3);
				SetPlayerArmour(playerid, 100);
				SetPlayerHealth(playerid, 100);
				SendClientMessage(playerid,COLOR_LIGHTBLUE,"Você pegou o seu Kit Sócio Gold.");
				return 1;
				}
		     else
		   {
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está em uma loja de armas.");
		  }
	 			return true;
			}
			else if(PlayerInfo[playerid][pVIP] == 7)
			{
			if(location == 99 || location == 100 || location == 102 || PlayerToPoint(2.0,playerid,296.3083,-38.1549,1001.5156) || PlayerToPoint(2.0,playerid,313.8642,-133.8308,999.6016))
	     	{
		   		format(string, sizeof string, "* Sócio Diamante %s Pegou Seu KitSócio.", sendername);
	    		SendClientMessageInRange(30.0, playerid, string, 0x2CE2FAC8,0x2CE2FAC8,0x2CE2FAC8,0x2CE2FAC8,0x2CE2FAC8);
                SendClientMessage(playerid,COLOR_LIGHTRED,"Lembre-se,você não pode estar em batalha! ou levará cadeia!");
				ResetPlayerWeapons(playerid);
				TempDropArmasBody[playerid] = 0;
	    		GivePlayerWeapon(playerid, 24, 600);
	    		GivePlayerWeapon(playerid, 45,2);
				GivePlayerWeapon(playerid, 16, 26);
		    	GivePlayerWeapon(playerid, 31, 700);
			   	GivePlayerWeapon(playerid, 29, 700);
			   	GivePlayerWeapon(playerid, 25, 400);
			   	GivePlayerWeapon(playerid, 34, 70);
			   	GivePlayerWeapon(playerid, 4, 5);
			   	GivePlayerWeapon(playerid, 35, 5);
				SetPlayerArmour(playerid, 100);
				SetPlayerHealth(playerid, 100);
				SendClientMessage(playerid,COLOR_LIGHTBLUE,"Você pegou o seu Kit Sócio Diamante");
				return 1;
				}
		     else
		   {
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está em uma loja de armas.");
		  }
	 			return true;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Você não é um VIP/Sócio");
			    return true;
			}
	}
    CMD:produtos(playerid)return ForT:carga(playerid);
    CMD:prods(playerid)return ForT:carga(playerid);
	CMD:carga(playerid)
	{
			new tmpcar = GetPlayerVehicleID(playerid);
			new string[50];
			if(GetVehicleModel(tmpcar) == 403 || GetVehicleModel(tmpcar) == 499 || GetVehicleModel(tmpcar) == 414 || GetVehicleModel(tmpcar) == 456)
			{
				GameTextForPlayer(playerid, "~r~Voce nao esta em um veiculo de carga", 5000, 1);
				return 1;
			}
			if(GetVehicleTrailer(tmpcar) < 1)
					{
					    if(GetVehicleModel(tmpcar) == 403)
						{
							SendClientMessage(playerid, COLOR_GREY, "Este caminhão nao tem a carga traseira.");
							return 1;
						}
					}
			format(string, sizeof(string), "Produtos: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
			SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
			return 1;
	}
	CMD:comprarprods(playerid, params[])return ForT:comprarprodutos(playerid, params);
	CMD:comprarprodutos(playerid, params[])
	{
			new tmpcar = GetPlayerVehicleID(playerid);
			new compcost = 1;
		    new amount;
			if(sscanf(params, "d", amount))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: /comprarprodutos [Quantia]");
				return 1;
			}
			new string[128];
			if(!PlayerToPoint(20.0, playerid, 2485.0405,-2081.7695,13.5469) && !PlayerToPoint(20.0, playerid, SBizzInfo[21][sbEntranceX],SBizzInfo[21][sbEntranceY],SBizzInfo[21][sbEntranceZ]))
			{
			    SendClientMessage(playerid, COLOR_GRAD3, "Você esta longe da entrada de comprar Produtos!");
			    return true;
			}
			if(PlayerToPoint(20.0, playerid, 2485.0405,-2081.7695,13.5469) || PlayerToPoint(20.0, playerid, SBizzInfo[21][sbEntranceX],SBizzInfo[21][sbEntranceY],SBizzInfo[21][sbEntranceZ]))
			{
				if(GetVehicleModel(tmpcar) == 403 || GetVehicleModel(tmpcar) == 499 || GetVehicleModel(tmpcar) == 414 || GetVehicleModel(tmpcar) == 456)
				{
				    if(GetVehicleTrailer(tmpcar) < 1)
					{
					    if(GetVehicleModel(tmpcar) == 403)
						{
							SendClientMessage(playerid, COLOR_GREY, "Este caminhão nao tem a carga traseira.");
							return 1;
						}
					}
					if(PlayerHaul[tmpcar][pLoad] < PlayerHaul[tmpcar][pCapasity])
					{
						if(amount < 1 || amount > 1500) { SendClientMessage(playerid, COLOR_GREY, "   Não é possível comprar menos de 1 Produto ou mais de 1500 !"); return 1; }
						new check= PlayerHaul[tmpcar][pLoad] + amount;
						if(check > PlayerHaul[tmpcar][pCapasity])
						{
						    format(string, sizeof(string), "Você foi ao longo do Limite do caminhão que é de %d, que atualmente é %d.",PlayerHaul[tmpcar][pCapasity],PlayerHaul[tmpcar][pLoad]);
						    SendClientMessage(playerid, COLOR_GREY, string);
						    return 1;
						}
				    if(GetVehicleTrailer(tmpcar) < 1)
					{
					    if(GetVehicleModel(tmpcar) == 403)
						{
							SendClientMessage(playerid, COLOR_GREY, "Este caminhão nao tem a carga traseira.");
							return 1;
						}
					}
						new cost = amount*compcost;
						if(GetPlayerMoney(playerid) >= cost)
						{
							PlayerHaul[tmpcar][pLoad] += amount;
							format(string, sizeof(string), "Produtos: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							format(string, sizeof(string), "Você comprou %d Produtos por $%d.", amount,cost);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							SendClientMessage(playerid, COLOR_GREY, "Use /gps e procure uma propriedade que pague bem /motor para ligar o motor");
							GiveDinheiro(playerid,-cost);
							empmoney(playerid, 21, cost);
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				    	    format(string, sizeof(string), "%d",PlayerHaul[tmpcar][pLoad]);
							PlayerTextDrawSetString(playerid,Produtosnb[playerid], string);
							format(string, sizeof(string), "%d",PlayerHaul[tmpcar][pCapasity]);
							PlayerTextDrawSetString(playerid,MaxProdutosnb[playerid], string);
				    	    ShowCami(playerid);
							return 1;
						}
						else
						{
							format(string, sizeof(string), "Você não pode comprar %d Produtos você não tem $%d !", amount,cost);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							return 1;
						}
					}
					else
					{
							format(string, sizeof(string), "Produtos: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, TEAM_GROVE_COLOR, "Este veículo não pode transportar produtos.");
					return 1;
				}
			}
		return 1;
	}
 CMD:venderprods(playerid)return ForT:venderprodutos(playerid);
	CMD:venderprodutos(playerid)
	{
	    	new cashmade;
	    	new tmpcar;
			tmpcar = GetPlayerVehicleID(playerid);
			if(GetVehicleTrailer(tmpcar) < 1)
					{
					    if(GetVehicleModel(tmpcar) == 403)
						{
							SendClientMessage(playerid, COLOR_GREY, "Este caminhão nao tem a carga traseira.");
							return 1;
						}
					}
			new string[128];
			if(PlayerHaul[tmpcar][pLoad] == 0)
			{
				GameTextForPlayer(playerid, "~r~Caminhao vazio, volte para o estoque.", 5000, 1);
				format(string, sizeof(string), "Produtos: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
				SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
	    	    format(string, sizeof(string), "%d",PlayerHaul[tmpcar][pLoad]);
				PlayerTextDrawSetString(playerid,Produtosnb[playerid], string);
				format(string, sizeof(string), "%d",PlayerHaul[tmpcar][pCapasity]);
				PlayerTextDrawSetString(playerid,MaxProdutosnb[playerid], string);
	    	    ShowCami(playerid);
	    	    Atualizar3Dtexts();
				return 1;
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (PlayerToPoint(10, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
				{
					if(BizzInfo[i][bProductsReq] < 1)
					{
						GameTextForPlayer(playerid, "~r~Nao precisamos mais de produtos", 5000, 1);
						format(string, sizeof(string), "Dinheiro adquirido $%d.", cashmade);
						PlayerInfo[playerid][pConta] = cashmade;
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						format(string, sizeof(string), "Produtos: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
			    	    format(string, sizeof(string), "%d",PlayerHaul[tmpcar][pLoad]);
						PlayerTextDrawSetString(playerid,Produtosnb[playerid], string);
						format(string, sizeof(string), "%d",PlayerHaul[tmpcar][pCapasity]);
						PlayerTextDrawSetString(playerid,MaxProdutosnb[playerid], string);
			    	    ShowCami(playerid);
						return 1;
					}
					if(PlayerHaul[tmpcar][pLoad]*BizzInfo[i][bPriceProd] > BizzInfo[i][bTill])
					{
						GameTextForPlayer(playerid, "~r~Nao podemos pagar pelos produtos", 5000, 1);
						format(string, sizeof(string), "Dinheiro adquirido $%d.", cashmade);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						PlayerInfo[playerid][pConta] = cashmade;
						format(string, sizeof(string), "Produtos: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
			    	    format(string, sizeof(string), "%d",PlayerHaul[tmpcar][pLoad]);
						PlayerTextDrawSetString(playerid,Produtosnb[playerid], string);
						format(string, sizeof(string), "%d",PlayerHaul[tmpcar][pCapasity]);
						PlayerTextDrawSetString(playerid,MaxProdutosnb[playerid], string);
			    	    ShowCami(playerid);
						return 1;
					}
					cashmade = PlayerHaul[tmpcar][pLoad]*BizzInfo[i][bPriceProd];
					BizzInfo[i][bProducts] += PlayerHaul[tmpcar][pLoad];
					BizzInfo[i][bProductsReq] -= PlayerHaul[tmpcar][pLoad];
                    PlayerHaul[tmpcar][pLoad] = 0;
					GiveDinheiro(playerid,cashmade);
					BizzInfo[i][bTill] -= cashmade;
					empmoney(playerid, 21, cashmade);
					GameTextForPlayer(playerid, "~r~Caminhao vazio, volte para o estoque", 5000, 1);
					format(string, sizeof(string), "Dinheiro adquirido $%d.", cashmade);
					SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
					PlayerInfo[playerid][pConta] = cashmade;
					format(string, sizeof(string), "Produtos: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
					SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		    	    format(string, sizeof(string), "%d",PlayerHaul[tmpcar][pLoad]);
					PlayerTextDrawSetString(playerid,Produtosnb[playerid], string);
					format(string, sizeof(string), "%d",PlayerHaul[tmpcar][pCapasity]);
					PlayerTextDrawSetString(playerid,MaxProdutosnb[playerid], string);
		    	    ShowCami(playerid);
					SalvarEmpresa(i);
					Atualizar3Dtexts();
					return 1;
				}
			}
			for(new i = 0; i < sizeof(SBizzInfo); i++)
			{
				if (PlayerToPoint(10, playerid,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
				{
					if(SBizzInfo[i][sbProductsReq] < 1)
					{
						GameTextForPlayer(playerid, "~r~Nao precisamos mais de produtos", 5000, 1);
						format(string, sizeof(string), "Dinheiro adquirido $%d.", cashmade);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						PlayerInfo[playerid][pConta] = cashmade;
						format(string, sizeof(string), "Produtos: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						format(string, sizeof(string), "%d",PlayerHaul[tmpcar][pLoad]);
						PlayerTextDrawSetString(playerid,Produtosnb[playerid], string);
						format(string, sizeof(string), "%d",PlayerHaul[tmpcar][pCapasity]);
						PlayerTextDrawSetString(playerid,MaxProdutosnb[playerid], string);
			    	    ShowCami(playerid);
						return 1;
					}
					if(PlayerHaul[tmpcar][pLoad]*SBizzInfo[i][sbPriceProd] > SBizzInfo[i][sbTill])
					{
						GameTextForPlayer(playerid, "~r~Não podemos pagar o acordo", 5000, 1);
						format(string, sizeof(string), "Dinheiro adquirido $%d.", cashmade);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						format(string, sizeof(string), "Produtos: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						format(string, sizeof(string), "%d",PlayerHaul[tmpcar][pLoad]);
						PlayerTextDrawSetString(playerid,Produtosnb[playerid], string);
						format(string, sizeof(string), "%d",PlayerHaul[tmpcar][pCapasity]);
						PlayerTextDrawSetString(playerid,MaxProdutosnb[playerid], string);
			    	    ShowCami(playerid);
						return 1;
					}
					cashmade = PlayerHaul[tmpcar][pLoad]*SBizzInfo[i][sbPriceProd];
					SBizzInfo[i][sbProducts] += PlayerHaul[tmpcar][pLoad];
					SBizzInfo[i][sbProductsReq] -= PlayerHaul[tmpcar][pLoad];
					GiveDinheiro(playerid,cashmade);
					SBizzInfo[i][sbTill] -= cashmade;
					PlayerHaul[tmpcar][pLoad] = 0;
					GameTextForPlayer(playerid, "~r~Caminhao vazio, volte para o estoque.", 5000, 1);
					format(string, sizeof(string), "Dinheiro adquirido $%d.", cashmade);
					SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
					PlayerInfo[playerid][pConta] = cashmade;
					format(string, sizeof(string), "Produtos: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
					SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "%d",PlayerHaul[tmpcar][pLoad]);
					PlayerTextDrawSetString(playerid,Produtosnb[playerid], string);
					format(string, sizeof(string), "%d",PlayerHaul[tmpcar][pCapasity]);
					PlayerTextDrawSetString(playerid,MaxProdutosnb[playerid], string);
		    	    ShowCami(playerid);
					SalvarSEmpresa(i);
					Atualizar3Dtexts();
					return 1;
				}
			}
   for(new i = 0; i < sizeof(FBizzInfo); i++)
			{
				if (PlayerToPoint(10, playerid,FBizzInfo[i][fbEntranceX], FBizzInfo[i][fbEntranceY], FBizzInfo[i][fbEntranceZ]))
					{
						if(FBizzInfo[i][fbProductsReq] < 1)
						{
							GameTextForPlayer(playerid, "~r~Nao precisamos mais de produtos", 5000, 1);
							format(string, sizeof(string), "Dinheiro adquirido $%d.", cashmade);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							PlayerInfo[playerid][pConta] = cashmade;
							format(string, sizeof(string), "Produtos: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							format(string, sizeof(string), "%d",PlayerHaul[tmpcar][pLoad]);
							PlayerTextDrawSetString(playerid,Produtosnb[playerid], string);
							format(string, sizeof(string), "%d",PlayerHaul[tmpcar][pCapasity]);
							PlayerTextDrawSetString(playerid,MaxProdutosnb[playerid], string);
				    	    ShowCami(playerid);
							return 1;
						}
						if(PlayerHaul[tmpcar][pLoad]*FBizzInfo[i][fbPriceProd] > FBizzInfo[i][fbTill])
						{
							GameTextForPlayer(playerid, "~r~Não podemos pagar o acordo", 5000, 1);
							format(string, sizeof(string), "Dinheiro adquirido $%d.", cashmade);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							PlayerInfo[playerid][pConta] = cashmade;
							format(string, sizeof(string), "Produtos: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
							format(string, sizeof(string), "%d",PlayerHaul[tmpcar][pLoad]);
							PlayerTextDrawSetString(playerid,Produtosnb[playerid], string);
							format(string, sizeof(string), "%d",PlayerHaul[tmpcar][pCapasity]);
							PlayerTextDrawSetString(playerid,MaxProdutosnb[playerid], string);
				    	    ShowCami(playerid);
							return 1;
						}
						cashmade = PlayerHaul[tmpcar][pLoad]*FBizzInfo[i][fbPriceProd];
						FBizzInfo[i][fbProducts] += PlayerHaul[tmpcar][pLoad];
						FBizzInfo[i][fbProductsReq] -= PlayerHaul[tmpcar][pLoad];
						GiveDinheiro(playerid,cashmade);
						FBizzInfo[i][fbTill] -= cashmade;
						PlayerHaul[tmpcar][pLoad] = 0;
						GameTextForPlayer(playerid, "~r~Caminhao vazio, volte para o estoque.", 5000, 1);
						format(string, sizeof(string), "Dinheiro adquiridot $%d.", cashmade);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						PlayerInfo[playerid][pConta] = cashmade;
						format(string, sizeof(string), "Produtos: %d/%d.", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						format(string, sizeof(string), "%d",PlayerHaul[tmpcar][pLoad]);
						PlayerTextDrawSetString(playerid,Produtosnb[playerid], string);
						format(string, sizeof(string), "%d",PlayerHaul[tmpcar][pCapasity]);
						PlayerTextDrawSetString(playerid,MaxProdutosnb[playerid], string);
			    	    ShowCami(playerid);
						SalvarFEmpresa(i);
						Atualizar3Dtexts();
						return 1;
					}
				}
			GameTextForPlayer(playerid, "~r~Esta longe de uma empresa ou fazenda", 5000, 1);
			return 1;
	}
    CMD:precoproduto(playerid, params[])
	{
		new bouse = PlayerInfo[playerid][pPbiskey];
		if (bouse == 255)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   Você não possui uma empresa.");
			return 1;
		}
		new amount;
		if(sscanf(params, "d", amount))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USE: /precoproduto [Preço por produto]");
		}
		if(amount < 1 || amount > 99999)
		{
			SendClientMessage(playerid, COLOR_WHITE, "A quantia mínima é $1, a quantia máxima é $99999.");
			return 1;
		}
		new string[100];
		if (bouse >= 100)
		{
			SBizzInfo[bouse-100][sbPriceProd] = amount;
			format(string, sizeof(string), "Comprará produtos por $%d.", SBizzInfo[bouse-100][sbPriceProd]);
			SalvarSEmpresa(bouse-100);
			Atualizar3Dtexts();
		}
		else
		{
			BizzInfo[bouse][bPriceProd] = amount;
			format(string, sizeof(string), "Comprará produto por $%d.", BizzInfo[bouse][bPriceProd]);
			SalvarEmpresa(bouse);
		}
		Atualizar3Dtexts();
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	CMD:precoprodutofaz(playerid, params[])
	{
		new fouse = PlayerInfo[playerid][pPFazkey];
		if (fouse == 255)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Você não possui uma Fazenda.");
			return 1;
		}
		new amount;
		if(sscanf(params, "d", amount))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USE: /precoprodutofaz [Preço por produto]");
		}
		if(amount < 1 || amount > 99999)
		{
			SendClientMessage(playerid, COLOR_WHITE, "A quantia mínima é $1, a quantia máxima é $99999.");
			return 1;
		}
		new string[100];
		if(fouse < 255)
		{
		    FBizzInfo[fouse][fbPriceProd] = amount;
			format(string, sizeof(string), "Comprará produtos por $%d.", FBizzInfo[fouse][fbPriceProd]);
			SalvarFEmpresa(fouse);
			Atualizar3Dtexts();
		}
		Atualizar3Dtexts();
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	CMD:pedirprodutos(playerid, params[])
	{
		new bouse = PlayerInfo[playerid][pPbiskey];
		if (bouse == 255)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Você não possui uma empresa.");
			return 1;
		}
		new amount;
		if(sscanf(params, "d", amount))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USE: /pedirprodutos [Quantidade]");
		}
		if(amount < 1 || amount > 9999999)
		{
			SendClientMessage(playerid, COLOR_WHITE, "A quantia mínima é 1, a quantia máxima é 9999999.");
			return 1;
		}
		new string[100];
		if (bouse >= 100 && bouse < 200)
		{
			SBizzInfo[bouse-100][sbProductsReq] = amount;
			format(string, sizeof(string), "pediu %d produtos.", SBizzInfo[bouse-100][sbProductsReq]);
			SalvarSEmpresa(bouse-100);
			Atualizar3Dtexts();
		}
		else if (bouse < 100)
		{
			BizzInfo[bouse][bProductsReq] = amount;
			format(string, sizeof(string), "pediu %d produtos.", BizzInfo[bouse][bProductsReq]);
			SalvarEmpresa(bouse);
		}
		SendClientMessage(playerid, COLOR_WHITE, string);
		Atualizar3Dtexts();
		return 1;
	}
	CMD:pedirprodutosfaz(playerid, params[])
	{
		new fouse = PlayerInfo[playerid][pPFazkey];
		if (fouse == 255)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Você não possui uma Fazenda.");
			return 1;
		}
		new amount;
		if(sscanf(params, "d", amount))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USE: /pedirprodutosfaz [Quantidade]");
		}
		if(amount < 1 || amount > 9999999)
		{
			SendClientMessage(playerid, COLOR_WHITE, "A quantia mínima é 1, a quantia máxima é 9999999.");
			return 1;
		}
		new string[100];
		if (fouse < 255)
		{
			FBizzInfo[fouse][fbProductsReq] = amount;
			format(string, sizeof(string), "pediu %d produtos.", FBizzInfo[fouse][fbProductsReq]);
			SalvarFEmpresa(fouse);
			Atualizar3Dtexts();
		}
		SendClientMessage(playerid, COLOR_WHITE, string);
		Atualizar3Dtexts();
		return 1;
	}
	CMD:fumar(playerid)
	{

     	if(PlayerInfo[playerid][pJailed] == 9)
	    {
			SendClientMessage(playerid,COLOR_GRAD1,"Você não pode usar este comando nas Celas da Administração!");
  			return true;
	    }

	    if(PlayerInfo[playerid][pCigarros] < 1)return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem um cigarro, compre um na 24/7 !");

		new Float:vida;
		GetPlayerHealth(playerid, vida);
		if(vida > 99.0)return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode mais fumar, sua vida está cheia !");

  	   	if(PlayerInfo[playerid][pDoenca] == 5)
  		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você esta com câncer de pulmão, vá ate um hospital se tratar !");
			return true;
  		}

  		if(!PlayerInfo[playerid][pIsqueiro])
			return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem um Isqueiro, compre um na 24/7!");

		if(GetPVarInt(playerid, "DrunkL") == 1)
			return SendClientMessage(playerid, COLOR_GRAD1,"Espere 3 segundos para poder fumar novamente.");

		new Str[53];

		PlayerInfo[playerid][pCigarros] --;

		SetPlayerHealth(playerid, vida + 7.0);

		format(Str, sizeof(Str), "* %s fumou um cigarro.", NomePlayer(playerid));
		SendClientMessageInRange(30.0, playerid, Str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		GameTextForPlayer(playerid, "~w~Voce esta~p~~n~relaxado", 1000, 1);

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
		ApplyAnimation(playerid,"SMOKING","M_smk_drag",4.1,0,1,1,0,0);

  		SetTimerEx("NormalDrunk", 3000, false, "i", playerid);
  		SetPVarInt(playerid, "DrunkL", 1);

		PlayerInfo[playerid][pDorgado] += 2;
	   	if(PlayerInfo[playerid][pDorgado] >= 300)
  		{
    		PlayerInfo[playerid][pDoenca] = 5;
    		PlayerInfo[playerid][pDorgado] = 0;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você esta com câncer de pulmão, vá ate um hospital se tratar !");
			SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 2300);
  	   	}
		return 1;
	}
	CMD:fabricar(playerid, x_Emprego[])
    {
			if(isnull(x_Emprego))
			{
		    	SendClientMessage(playerid, COLOR_WHITE, "|______________[ Fabricar ]______________|");
            	SendClientMessage(playerid, COLOR_GRAD1,"USE: /fabricar crack");
            	SendClientMessage(playerid, COLOR_GRAD1,"USE: /fabricar cocaina");
				return true;
			}
			if(!PlayerToPoint(10.0, playerid, 2131.9495,-974.0172,59.7856))
	    	{
				SendClientMessage(playerid, COLOR_GREY, "Você não está no Local de Fabricar Drogas(Tráfico)!");
			    return true;
			}
            if(IsACop(playerid))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você é um Policial, não pode fazer isto!");
				return 1;
			}
			if(PlayerInfo[playerid][pJailed] == 9)
		    {
				SendClientMessage(playerid,COLOR_GRAD1,"Você não pode usar este comando nas Celas da Administração!");
		      	return true;
		    }
     		if(!HaveAllIngedients(playerid))
	        {
	            SendClientMessage(playerid,COLOR_GRAD1," Complete sua Bolsa Antes! /bolsa");
		      	return true;
	        }
 			if(strcmp(x_Emprego,"cocaina",true) == 0)
			{
   					if(PlayerInfo[playerid][pDrogas2] > 4)
					{
     					new string[128];
						format(string, sizeof(string), "Você ainda tem %d gramas de cocaina, Venda tudo primeiro !", PlayerInfo[playerid][pDrogas2]);
						SendClientMessage(playerid, COLOR_GREY, string);
					    return true;
					}
			        PlayerInfo[playerid][pTempoFDrugs] = 15;
			        PlayerInfo[playerid][pDrugType] = 1;
                    SetPlayerCheckpoint(playerid, 1973.9019,-1444.6169,17.9239, 0.5);
                    PlayerInfo[playerid][pGam] -= 1;
					PlayerInfo[playerid][pPFc] -= 4;
					PlayerInfo[playerid][pMcr] -= 1;
					PlayerInfo[playerid][pCoc] -= 2;
					PlayerInfo[playerid][pVam] -= 2;
					PlayerInfo[playerid][pVsc] -= 4;
                    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vá Até o Checkpoint ao Lado Acompanhar sua Produção!");
					return true;
			}
			else if(strcmp(x_Emprego,"crack",true) == 0)
			{
			        if(PlayerInfo[playerid][pDrogas3] > 4)
					{
        				new string[128];
						format(string, sizeof(string), "Você ainda tem %d pedras de crack, Venda tudo primeiro !", PlayerInfo[playerid][pDrogas3]);
						SendClientMessage(playerid, COLOR_GREY, string);
					    return true;
					}
                    PlayerInfo[playerid][pTempoFDrugs] = 15;
			        PlayerInfo[playerid][pDrugType] = 2;
                    SetPlayerCheckpoint(playerid, 1973.9019,-1444.6169,17.9239, 0.5);
                    PlayerInfo[playerid][pGam] -= 1;
					PlayerInfo[playerid][pPFc] -= 4;
					PlayerInfo[playerid][pMcr] -= 1;
					PlayerInfo[playerid][pCoc] -= 2;
					PlayerInfo[playerid][pVam] -= 2;
					PlayerInfo[playerid][pVsc] -= 4;
                    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Vá Até o Checkpoint ao Lado Acompanhar sua Produção!");
					return true;
			}
			return true;
	}
	CMD:usardrogas(playerid, x_Emprego[])
    {
			if(isnull(x_Emprego))
			{
		    	SendClientMessage(playerid, COLOR_WHITE, "|______________[ Usar Drogas ]______________|");
		    	SendClientMessage(playerid, COLOR_GRAD1,"USE: /usardrogas maconha");
            	SendClientMessage(playerid, COLOR_GRAD1,"USE: /usardrogas crack");
            	SendClientMessage(playerid, COLOR_GRAD1,"USE: /usardrogas cocaina");
				return true;
			}

			if(PlayerInfo[playerid][pJailed] == 9)
		    {
				SendClientMessage(playerid,COLOR_GRAD1,"Você não pode usar este comando nas Celas da Administração!");
		      	return true;
		    }

			if(!PlayerInfo[playerid][pIsqueiro])
				return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem um Isqueiro, compre um na 24/7!");


			if(gettime() < GetPVarInt(playerid, "VarDano"))
				return SendClientMessage(playerid, COLOR_GRAD1,"Você só poderá equipar 3 minutos após tomar dano de alguém !");

   			new string[128];
    		if(strcmp(x_Emprego,"maconha",true) == 0)
			{
	   	    		if(PlayerInfo[playerid][pDorgado] >= 300)
  					{
    					PlayerInfo[playerid][pDoenca] = 5;
    					PlayerInfo[playerid][pDorgado] = 0;
			    		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você esta com câncer de pulmão, vá ate um hospital se tratar !");
			    		SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 2300);
			    		return true;
  	        		}
  	        		if(PlayerInfo[playerid][pDoenca] == 5)
  					{
			   	 		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você esta com câncer de pulmão, vá ate um hospital se tratar !");
			    		return true;
  	        		}
	   	    		if(PlayerInfo[playerid][pJailed] != 0)
	        		{
	           			SendClientMessage(playerid,COLOR_GREY,"Você não pode usar Drogas agora !");
	           		 	return true;
	        		}
					if(PlayerInfo[playerid][pDrogas] > 1)
   					{

						if(PlayerInfo[playerid][pDorgado] >= 180)
  						{
			    			SendClientMessage(playerid, COLOR_YELLOW, "* Seu pulmão está ficando estragado, não fume muita maconha, pois poderá pegar uma doença!");
  	        			}

						//SetPlayerDrunkLevel(playerid, 8000);
						//SetTimerEx("NormalDrunk", 20000, false, "i", playerid);
						//SetPVarInt(playerid, "DrunkL", 1);

                        PlayerStoned[playerid] += 1;
                        if(PlayerStoned[playerid] >= 50)
			    		{
							GameTextForPlayer(playerid,"~w~Voce esta~n~~g~chapado",4000,1);
							SetPlayerWeather(playerid, 126);
							SetTimerEx("NormalDrunk", 300000, false, "i", playerid);
						}
			    		new Float:PlayersArmour;
			    		GetPlayerArmour(playerid,PlayersArmour);
			    		PlayerInfo[playerid][pDrogas] -= 2;
			    		PlayerInfo[playerid][pDorgado] += 2;
                		new Dmelhoria = 1 * PlayerInfo[playerid][pDrugPerk]; Dmelhoria += 2;
			    		if(PlayersArmour >= 100)
    					{
			        		SetPlayerArmour(playerid, 100);
			        		SendClientMessage(playerid,COLOR_LIGHTRED,"* Você não pode mais usar drogas!");
			        		return true;
       	        		}
		        		else
		        		{
			    			SetPlayerArmour(playerid, PlayersArmour + Dmelhoria);
			    		}
			    		GetPlayerName(playerid, sendername, sizeof(sendername));
		    			format(string, sizeof(string), "* %s está fumando maconha.", PlayerName(playerid));
			    		SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
			    		SendClientMessage(playerid,COLOR_GREY,"Você não tem Gramas de Drogas Suficiente.!");
					}
					return true;
			}
 			else if(strcmp(x_Emprego,"cocaina",true) == 0)
			{
	   	    		if(PlayerInfo[playerid][pDorgado] >= 250)
  					{
    					PlayerInfo[playerid][pDoenca] = 5;
    					PlayerInfo[playerid][pDorgado] = 0;
			    		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você esta com câncer de pulmão, vá ate um hospital se tratar !");
			    		SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 2300);
						return true;
  	        		}
  	        		if(PlayerInfo[playerid][pDoenca] == 5)
  					{
			    		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você esta com câncer de pulmão, vá ate um hospital se tratar !");
			    		return true;
  	        		}
	   	    		if(PlayerInfo[playerid][pJailed] != 0)
	        		{
	            		SendClientMessage(playerid,COLOR_GREY,"Você não pode usar drogas agora !");
	            		return true;
	        		}
					if(PlayerInfo[playerid][pDrogas2] > 1)
					{

						//SetPlayerDrunkLevel(playerid, 8000);
						//SetTimerEx("NormalDrunk", 20000, false, "i", playerid);
						//SetPVarInt(playerid, "DrunkL", 1);

						if(PlayerInfo[playerid][pDorgado] >= 180)
  						{
			    			SendClientMessage(playerid, COLOR_YELLOW, "* Seu pulmão está ficando estragado, não cheire muita cocaina, pois poderá pegar uma doença!");
  	        			}

			    		PlayerStoned[playerid] += 1;
			    		if(PlayerStoned[playerid] >= 40)
			    		{
							GameTextForPlayer(playerid,"~w~Voce esta~n~~p~ligadao",4000,1);
							SetPlayerWeather(playerid, 190);
							SetTimerEx("NormalDrunk", 300000, false, "i", playerid);
						}
						new Float:PlayersArmour;
			    		GetPlayerArmour(playerid,PlayersArmour);
			    		PlayerInfo[playerid][pDrogas2] -= 2;
			    		PlayerInfo[playerid][pDorgado] += 2;
                		new Dmelhoria = 1 * PlayerInfo[playerid][pDrugPerk]; Dmelhoria += 2;
			    		if(PlayersArmour >= 100)
    					{
			        		SetPlayerArmour(playerid, 100);
			        		SendClientMessage(playerid,COLOR_LIGHTRED,"* Você não pode mais usar drogas!");
			        		return true;
       	        		}
		        		else
		        		{
			    			SetPlayerArmour(playerid, PlayersArmour + Dmelhoria);
			    		}
			    		GetPlayerName(playerid, sendername, sizeof(sendername));
		    			format(string, sizeof(string), "* %s está cheirando cocaina.", PlayerName(playerid));
			    		SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
			    		SendClientMessage(playerid,COLOR_GREY,"Você não tem Gramas de Drogas Suficiente.!");
					}
					return true;
			}
			else if(strcmp(x_Emprego,"crack",true) == 0)
			{
	   	    		if(PlayerInfo[playerid][pDorgado] >= 150)
  					{
    					PlayerInfo[playerid][pDoenca] = 5;
    					PlayerInfo[playerid][pDorgado] = 0;
			    		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você está com câncer de pulmão, vá ate um hospital se tratar !");
			    		SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 2300);
						return true;
  	        		}
  	        		if(PlayerInfo[playerid][pDoenca] == 5)
  					{
			    		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você está com câncer de pulmão, vá ate um hospital se tratar !");
			    		return true;
  	        		}
	   	    		if(PlayerInfo[playerid][pJailed] != 0)
	        		{
	           	 		SendClientMessage(playerid,COLOR_GREY,"Não pode usar drogas agora !");
	            		return true;
	       		 	}
		   			if(PlayerInfo[playerid][pDrogas3] > 1)
					{

						//SetPlayerDrunkLevel(playerid, 8000);
						//SetTimerEx("NormalDrunk", 20000, false, "i", playerid);
						//SetPVarInt(playerid, "DrunkL", 1);

						if(PlayerInfo[playerid][pDorgado] >= 180)
  						{
			    			SendClientMessage(playerid, COLOR_YELLOW, "* Seu pulmão está ficando estragado, não fume muito crack, pois poderá pegar uma doença!");
  	        			}

                        PlayerStoned[playerid] += 1;
                        if(PlayerStoned[playerid] >= 20)
			    		{
					    	GameTextForPlayer(playerid,"~w~Voce esta~n~~r~estralado",4000,1);
					    	SetPlayerWeather(playerid, 105);
					    	SetTimerEx("NormalDrunk", 300000, false, "i", playerid);
						}
			    		new Float:PlayersArmour;
			    		GetPlayerArmour(playerid,PlayersArmour);
			    		PlayerInfo[playerid][pDrogas3] -= 2;
			    		PlayerInfo[playerid][pDorgado] += 2;
                		new Dmelhoria = 1 * PlayerInfo[playerid][pDrugPerk]; Dmelhoria += 2;
			    		if(PlayersArmour >= 100)
    					{
			        		SetPlayerArmour(playerid, 100);
			        		SendClientMessage(playerid,COLOR_LIGHTRED,"* Você não pode mais usar drogas!");
			        		return true;
       	        		}
		        		else
		        		{
			    			SetPlayerArmour(playerid, PlayersArmour + Dmelhoria);
			    		}
			    		GetPlayerName(playerid, sendername, sizeof(sendername));
		    			format(string, sizeof(string), "* %s está fumando crack.", PlayerName(playerid));
			   	 		SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
			    		SendClientMessage(playerid,COLOR_GREY,"Você não tem Gramas de Drogas Suficiente.!");
					}
					return true;
			}
			return true;
	}
	BPF::NormalDrunk(playerid)
	{
        if(PlayerStoned[playerid] >= 1)
		{
			PlayerStoned[playerid] = 0;
			SetPlayerWeather(playerid, Weathersave);
			GameTextForPlayer(playerid,"~w~Voce esta~n~~b~Normal",4000,1);
		}
	    SetPVarInt(playerid, "DrunkL", 0);
	    return true;
	}
	CMD:continencia(playerid){

	    if(IsACop(playerid)){


			static
				string[78]
			;

			format(string, 78, "* %s bateu continência.", NomePlayer(playerid));

			SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	        ApplyAnimation(playerid,"ON_LOOKERS","Pointup_shout",4.1,0,1,1,0,0);
	    }
	    else SendClientMessage(playerid, COLOR_GREY, "  Você não é um policial !");
	    return 1;
	}

	CMD:abordar(playerid, params[]){

        if(sscanf(params, "u", giveplayerid))
        	return SendClientMessage(playerid, COLOR_GRAD2, "USE: /abordar [id]");

		if(!IsPlayerConnected(giveplayerid))
       		return SendClientMessage(playerid, COLOR_GRAD2, "Este jogador não está conectado!");

       // if(!IsACop(playerid))
		//	return SendClientMessage(playerid, COLOR_GREY, "   Você não é um policial!");

		if(IsACop(giveplayerid))
       		return SendClientMessage(playerid, COLOR_GRAD2, "Você não pode abordar um policial!");

		if(OnDuty[playerid] != 1)
		    return SendClientMessage(playerid, COLOR_GREY, "   Você não Bateu o cartão!");

		new string[256];
		if(giveplayerid != INVALID_PLAYER_ID){

      		if (ProxDetectorS(8.0, playerid, giveplayerid)){

				format(string, 256, "* Você está abordando %s, aguarde o mesmo escolher uma opção!", PlayerName(giveplayerid));
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				format(string, 256, "* O oficial %s esta abordando você, escolha uma opção!", PlayerName(playerid));
				SendClientMessage(giveplayerid, COLOR_LIGHTRED, string);
				format(string, sizeof(string), "*O oficial %s está abordando %s.", PlayerName(playerid), PlayerName(giveplayerid));
				SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				SendoAbordado[giveplayerid] = 1;
				SendoAbordadoPor[giveplayerid] = playerid;

				PlayerTextDrawSetString(giveplayerid, textAbordagem[playerid][4], #Y = Aceitar abordagem~n~N = Rejeitar abordagem);

				for(new i; i < sizeof(textAbordagem); ++i)
				PlayerTextDrawShow(giveplayerid, textAbordagem[playerid][i]);
				return 1;
		    }
		    else{

		        SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de Você !");
		    }
		    return 1;
		}
        return 1;
	}
//----------------------------------[SetCrim]-----------------------------------------------
	CMD:su(playerid, params[])
	{
 	    if(!IsACop(playerid))
		{
		    SendClientMessage(playerid, COLOR_GREY, "Você não é um policial!");
		    return true;
		}
		if(OnDuty[playerid] != 1)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Você não Bateu o cartão!");
		    return true;
		}
		if(PlayerInfo[playerid][pJailed] == 9)
  		{
			SendClientMessage(playerid,COLOR_GRAD1,"Você não pode usar este comando nas Celas da Administração!");
  			return true;
    	}
		new result[64];
		if(sscanf(params, "us[64]", giveplayerid, result))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USE: (/su)speito [ID do Player] [Descrição do Crime]");
			return true;
		}
		//Anti Divulguer
		if(AntiDivulguer(playerid, result))return 1;
      	if(IsPlayerConnected(giveplayerid))
		{
 			if(IsACop(giveplayerid))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não pode dar su em Policiais!");
				return true;
			}
			if(PlayerInfo[giveplayerid][pJailed] == 9)
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não pode aplicar /su em presos na cadeia da administração!");
				return 1;
			}
			if(PlayerInfo[giveplayerid][pAdmin] && admtrampando[giveplayerid])
  			{
				SendClientMessage(playerid, COLOR_GREY, "Você não pode colocar nível de procura em admins trabalhando!");
				return true;
   			}
   			if(WantedPoints[giveplayerid] >= 13)
			{
				SendClientMessage(playerid, COLOR_GRAD4, "O Suspeito está com Lvl de procura máximo.");
				return 1;
			}
			if(PlayerInfo[giveplayerid][pJailed] == 24 && PlayerInfo[giveplayerid][pJailed] == 25)
   			{
				if(strcmp(result,"AP",true) == 0)
			 	{
			 	}
			 	else
			 	{
			 	    SendClientMessage(playerid, COLOR_GRAD4, "Você nao pode Aplicar su em Presos!");
					return 1;
			 	}
			}
	   		if(giveplayerid != INVALID_PLAYER_ID)
	   		{
				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strcmp(result,"DOP",true) == 0) result = "Desobediência a Ordem Policial, Art. 330º.";
				else if(strcmp(result,"TH",true) == 0) result = "Tentativa de Homicídio, Art. 121º.";
				else if(strcmp(result,"AP",true) == 0) result = "Ajuste de Pena.";
				else if(strcmp(result,"PIA",true) == 0) result = "Porte Ilegal de Armas, Art. 342º.";
				else if(strcmp(result,"TE",true) == 0) result = "Tráfico de Entorpecentes, Art. 33º.";
				else if(strcmp(result,"LE",true) == 0) result = "Livrar-se de Entorpecentes, Art. 35º.";
				else if(strcmp(result,"TM",true) == 0) result = "Tráfico de Materiais, Art. 312º.";
				else if(strcmp(result,"LM",true) == 0) result = "Livrar-se de Materiais, Art. 314º.";
				else if(strcmp(result,"CA",true) == 0) result = "Contrabando de Armas, Art. 345º.";
				else if(strcmp(result,"RV",true) == 0) result = "Roubo de Veículo, Art. 157º.";
				else if(strcmp(result,"ACP",true) == 0) result = "Atentado contra Prefeitura, Art. 240º.";
				else if(strcmp(result,"RM",true) == 0) result = "Rejeição de Multa, Art. 360º.";
				else if(strcmp(result,"RP",true) == 0) result = "Resistência a Prisão, Art. 366º.";
				else if(strcmp(result,"IV",true) == 0) result = "Invasão a Local Restrito, Art. 39º.";
				else if(strcmp(result,"RMD",true) == 0) result = "Rejeição a Mostrar Documentos, Art. 82º.";
				else if(strcmp(result,"DA",true) == 0) result = "Desacato, Art. 331º.";
				else if(strcmp(result,"CF",true) == 0) result = "Cumplice de Fuga, Art. 366º.";
				else return SendClientMessage(playerid, COLOR_GRAD1, "  Crime Inválido.Use /crimes.");
				SetPlayerCriminal(giveplayerid,playerid, result);
				return true;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "  Esse jogador não está conectado.");
			return true;
		}
		return true;
 	}
 	CMD:crimes(playerid)
	{
 	    if(!IsACop(playerid))
		{
		    SendClientMessage(playerid, COLOR_GREY, "Você não é um policial!");
		    return true;
		}
		if(PlayerInfo[playerid][pJailed] == 9)
  		{
			SendClientMessage(playerid,COLOR_GRAD1,"Você não pode usar este comando nas Celas da Administração!");
  			return true;
    	}
    	    MEGAString[0]=EOS;

    	    strcat(MEGAString, "AP  = Ajuste de Pena(Somente em Presos).\n");
    	    strcat(MEGAString, "DOP = Desobediência a Ordem Policial.\n");
    	    strcat(MEGAString, "TH  = Tentativa de Homicídio.\n");
    	    strcat(MEGAString, "PIA = Porte Ilegal de Armas.\n");
    	    strcat(MEGAString, "TE  = Tráfico de Entorpecentes.\n");
    	    strcat(MEGAString, "LE  = Livrar-se de Entorpecentes.\n");
    	    strcat(MEGAString, "TM  = Tráfico de Materiais.\n");
    	    strcat(MEGAString, "LM  = Livrar-se de Materiais.\n");
    	    strcat(MEGAString, "CA  = Contrabando de Armas.\n");
    	    strcat(MEGAString, "RV  = Roubo de Veículo.\n");
    	    strcat(MEGAString, "ACP = Atentado contra Prefeitura.\n");
    	    strcat(MEGAString, "RM  = Rejeição de Multa.\n");
    	    strcat(MEGAString, "RP  = Resistência a Prisão.\n");
    	    strcat(MEGAString, "IV  = Invasão a Local Restrito.\n");
    	    strcat(MEGAString, "RMD = Rejeição a Mostrar Documentos.\n");
    	    strcat(MEGAString, "DA  = Desacato a Autoridade.\n");
    	    strcat(MEGAString, "CF  = Cumplice de Fuga.");

    		ShowPlayerDialog(playerid, 8724, DIALOG_STYLE_MSGBOX, "Lista de Descricao de Crimes", MEGAString, "Informado","");

		return true;
 	}
 		CMD:trancar(playerid, params[])
	{
			new carid;
			if(gLastCar[playerid] == 0 && PlayerInfo[playerid][pCarKey] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você não tem um carro de casa/alugado.");
				return true;
			}
			carid = PlayerInfo[playerid][pCarKey];
			if (PlayerInfo[playerid][pCarKey] == 0)
			{
				if(HireCar[playerid] == 0)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Voce não tem um carro.");
					return true;
				}
			}
			if(HireCar[playerid] > 0 && !SwitchKey[playerid])
			{
				carid = HireCar[playerid];
			}
			new lockstatus = VTrancado[carid];
			new Float:cx,Float:cy,Float:cz;
			GetVehiclePos(carid, cx, cy, cz);
			switch (lockstatus)
			{
				case 0:
				{
					if(HireCar[playerid] == 0 && PlayerInfo[playerid][pCarKey] == 0)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Voce não tem um carro");
						return true;
					}
					if(HireCar[playerid] == carid && !SwitchKey[playerid])
					{
						GameTextForPlayer(playerid, "~w~Veiculo Alugado~r~Fechado", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						VTrancado[carid] = 1;
						gCarLock[HireCar[playerid]] = 1;
						LockCar(carid);
					}
					else if(PlayerInfo[playerid][pCarKey] == carid)
					{
						GameTextForPlayer(playerid, "~w~Veiculo proprio ~r~Fechado", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						VTrancado[carid] = 1;
						LockCar(carid);
						return true;
					}
				}
				case 1:
				{
					if(HireCar[playerid] == 0 && PlayerInfo[playerid][pCarKey] == 0)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Voce não tem um carro");
						return true;
					}
					if(HireCar[playerid] == carid && !SwitchKey[playerid])
					{
						GameTextForPlayer(playerid, "~w~Veiculo Alugado~g~Aberto", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						VTrancado[carid] = 0;
						UnLockCar(carid);
					}
					if (PlayerInfo[playerid][pCarKey] == carid)
					{
						GameTextForPlayer(playerid, "~w~Veiculo proprio ~g~Aberto", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						VTrancado[carid] = 0;
						UnLockCar(carid);
						return true;
					}
				}
				default:
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Erro");
				}
			}
			if(carid == 256)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Voce não tem um carro!");
			}
			return true;
	}
    CMD:trancarcarro(playerid, params[])
	{
			new carid;
			if(PlayerInfo[playerid][pPFazkey] == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você não tem uma fazenda.");
				return true;
			}
			new carroid;
			if(sscanf(params, "d", carroid))
			{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /trancarcarro [1-2]");
					return 1;
    		}
			if(carroid == 1) carid = FBizzInfo[PlayerInfo[playerid][pPFazkey]][fIdCarro1];
			else if(carroid == 2) carid = FBizzInfo[PlayerInfo[playerid][pPFazkey]][fIdCarro2];
			new lockstatus = VTrancado[carid];
			new Float:cx,Float:cy,Float:cz;
			GetVehiclePos(carid, cx, cy, cz);
			switch (lockstatus)
			{
				case 0:
				{
					GameTextForPlayer(playerid, "~w~Veiculo Fazenda ~r~Fechado", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					VTrancado[carid] = 1;
					LockCar(carid);
				}
				case 1:
				{
					GameTextForPlayer(playerid, "~w~Veiculo Fazenda ~g~Aberto", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					VTrancado[carid] = 0;
					UnLockCar(carid);
				}
				default:
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Erro.");
				}
			}
			return true;
	}
	CMD:trocarchaves(playerid, params[])
	{
			if(SwitchKey[playerid] == 0)
			{
				if(HireCar[playerid] != 299)
				{
					SwitchKey[playerid] = 1;
					GameTextForPlayer(playerid, "~w~Voce controla o carro de sua casa", 5000, 6);
				}
				else
				{
					GameTextForPlayer(playerid, "~w~Voce nao alugou um carro", 5000, 6);
				}
				return 1;
			}
			else
			{
				SwitchKey[playerid] = 0;
				GameTextForPlayer(playerid, "~w~Voce controla o carro alugado", 5000, 6);
			}
			return 1;
	}


	CMD:chave(playerid, params[])
	{
	        for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]) || PlayerToPoint(3, playerid,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
				{
					if(PlayerInfo[playerid][pPHousekey] == i)
					{
						if(HouseInfo[i][hLock] == 1)
						{
							HouseInfo[i][hLock] = 0;
							GameTextForPlayer(playerid, "~w~Porta ~g~Aberta", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return true;
						}
						if(HouseInfo[i][hLock] == 0)
						{
							HouseInfo[i][hLock] = 1;
							GameTextForPlayer(playerid, "~w~Porta ~r~Fechada", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return true;
						}
					}
				}
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]) || PlayerToPoint(3, playerid,BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]))
				{
					if(PlayerInfo[playerid][pPbiskey] == i)
					{
						if(BizzInfo[i][bLocked] == 1)
						{
							BizzInfo[i][bLocked] = 0;
							GameTextForPlayer(playerid, "~w~Empresa ~g~Aberta", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return true;
						}
						if(BizzInfo[i][bLocked] == 0)
						{
							BizzInfo[i][bLocked] = 1;
							GameTextForPlayer(playerid, "~w~Empresa ~r~Fechada", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return true;
						}
					}
				}
			}
			for(new i = 0; i < sizeof(SBizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
				{
					if(PlayerInfo[playerid][pPbiskey] == i+100)
					{
						if(SBizzInfo[i][sbLocked] == 1)
						{
       						SBizzInfo[i][sbLocked] = 0;
							GameTextForPlayer(playerid, "~w~Empresa ~g~Aberta", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return true;
						}
						if(SBizzInfo[i][sbLocked] == 0)
						{
							SBizzInfo[i][sbLocked] = 1;
							GameTextForPlayer(playerid, "~w~Empresa ~r~Fechada", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return true;
						}
					}
				}
			}
   for(new i = 0; i < sizeof(FBizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,FBizzInfo[i][fbEntranceX], FBizzInfo[i][fbEntranceY], FBizzInfo[i][fbEntranceZ]))
				{
					if(PlayerInfo[playerid][pPFazkey] == i)
					{
						if(FBizzInfo[i][fbLocked] == 1)
						{
       						FBizzInfo[i][fbLocked] = 0;
							GameTextForPlayer(playerid, "~w~Fazenda ~g~Aberta", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return true;
						}
						if(FBizzInfo[i][fbLocked] == 0)
						{
							FBizzInfo[i][fbLocked] = 1;
							GameTextForPlayer(playerid, "~w~Fazenda ~r~Fechada", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return true;
						}
					}
				}
			}
	    	return true;
	}
	CMD:dado(playerid, params[])
	{
			new dice = random(6)+1;
			if (gDice[playerid] == 1)
			{
			    new string[128];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "* %s jogou um dado e caiu no número: {FF0000}%d", sendername,dice);
				SendClientMessageInRange(5.0, playerid, string, 0xB100B8AA,0xB100B8AA,0xB100B8AA,0xB100B8AA,0xB100B8AA);
                PlayerPlaySound(playerid, 33401, 0.0, 0.0, 0.0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você não possui dado, compre em um Mercado 24/7 (use: /gps » Propriedades).");
				return true;
			}
			return true;
	}
    CMD:banco(playerid, params[])
	{
	    if(PlayerToPoint(1.5, playerid,2310.5569,-7.8338,26.7422))
		{
			ShowPlayerDialog(playerid,DIALOG_CAIXA_ELETRONICO,DIALOG_STYLE_LIST,"Banco","Saque\nDeposito\nSaldo\nTransferir","Ok","Cancelar");
		}
		else if(GetPlayerCaixa(playerid))
		{
		    if(CaixaInfo[GetPlayerCaixa(playerid)][Caixa_Roubada])
		        return SendClientMessage(playerid, COLOR_GRAD1, " Este caixa eletronico foi roubado por assaltantes recentemente.");
			ShowPlayerDialog(playerid, DIALOG_CAIXA_ELETRONICO,DIALOG_STYLE_LIST,"Caixa Eletrônico","Saque\nDeposito\nSaldo\nTransferir\n{21DD00}ROUBAR","Confirmar", "Cancelar");
		}
		return 1;
	}
	CMD:transferir(playerid, params[])
	{
			if(PlayerInfo[playerid][pConnectTime] < 2)
			{
                SendClientMessage(playerid,0xFFFFFFAA,"Info: Você poderá transferir após {FFA54F}2{FFFFFF} horas jogadas.");
				return true;
			}
	    	if(PlayerToPoint(25.0,playerid,2310.5569,-7.8338,26.7422))//PlayerToPoint(1.0,playerid,1929.5409,-1785.1664,13.5469)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Você não esta no banco");
	            return true;
	        }
			if(sscanf(params, "ud", giveplayerid, moneys))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "/transferir [ID do Player] [quantidade]");
				return true;
			}
			new string[128];
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        new PlayerIP[128];
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerIp(playerid,PlayerIP, sizeof(PlayerIP));
					playerdinheiro = PlayerInfo[playerid][pConta] ;
					if (moneys > 0 && playerdinheiro >= moneys)
					{
					    if(!gPlayerLogged[giveplayerid])
					    {
					        SendClientMessage(playerid, COLOR_GRAD1, "Este jogador ainda não logou.");
					        return true;
						}
						PlayerInfo[playerid][pConta] -= moneys;
						PlayerInfo[giveplayerid][pConta] += moneys;
						format(string, sizeof(string), "Você transferiu R$%s para a conta bancária de %s [ID %d]", ConvertMoney(moneys), giveplayer,giveplayerid);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD1, string);
						format(string, sizeof(string), "Você recebeu R$%s em sua conta bancária, Nome do depositante: %s [ID %d]", ConvertMoney(moneys), sendername, playerid);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "[%s] %s Transferiu R$%d para %s.", PlayerIP,sendername, moneys, giveplayer);
						ABroadCast(COLOR_YELLOW,string,1);
						printf("%s", string);
						BPFLogs("transferencias", string);

						PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Transferência Invalida!");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "[ID]%d Não está ativo.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
			return true;
	}

	CMD:kingh350(playerid)
	{
	    MEGAString[0]=EOS;

		strcat(MEGAString, "Código\tNome\tPreço\n" \
		"{FFFFFF}1\tNumero de Celular\t{12FFEF}R$300\n" \
		"{FFFFFF}2\tAgenda\t{12FFEF}R$200\n" \
		"{FFFFFF}3\tDado\t{12FFEF}R$2\n" \
		"{FFFFFF}4\tCamisinha\t{12FFEF}R$2\n" \
		"{FFFFFF}5\tChave de Veiculo\t{12FFEF}R$5000\n" \
		"{FFFFFF}6\tFrango\t{12FFEF}R$10\n" \
		"{FFFFFF}7\tHamburger\t{12FFEF}R$10\n" \
		"{FFFFFF}8\tPizza\t{12FFEF}R$10\n");

		strcat(MEGAString, "{FFFFFF}9\t30 Creditos\t{12FFEF}R$20\n" \
		"{FFFFFF}10\t50 Creditos\t{12FFEF}R$50\n" \
		"{FFFFFF}11\tCapacete\t{12FFEF}R$25000\n" \
		"{FFFFFF}12\tComputador\t{12FFEF}R$2000\n" \
		"{FFFFFF}13\tCarteira de cigarro\t{12FFEF}R$5000\n" \
		"{FFFFFF}14\tGalão de Gasolina\t{12FFEF}R$5000\n" \
		"{FFFFFF}15\tIsqueiro\t{12FFEF}R$2000\n");

		strcat(MEGAString, "{FFFFFF}16\tPatins\t{12FFEF}R$20000\n" \
		"{FFFFFF}17\tTelevisao\t{12FFEF}R$100000\n" \
		"{FFFFFF}18\tGarrafa de Leite\t{12FFEF}R$1000\n" \
		"{FFFFFF}19\tRadio portatil\t{12FFEF}R$100000");
		ShowPlayerDialog(playerid, 6602, DIALOG_STYLE_TABLIST_HEADERS, "Menu - Loja 24/7", MEGAString, "Comprar", "Sair");
		return 1;
	}
	CMD:conthosp(playerid, params[])
 {
	if(gPlayerLogged[playerid] == 0)
    		{
     			SendClientMessage(playerid,0xff6347FF, "* Você não está conectado.");
       			return 1;
       		}
	    MEGAString[0] =EOS;
        strcat(MEGAString, "{FFFFFF}Produto\t{00AA00}Preço\t{00FFFF}Unidades\t{FFFFFF}Função\n" \
        "{FFFFFF}Contrato Hospitalar\t{00AA00}$1.990\t{FFFFFF}1 Unidade(s)\t{C2CBD1}Leva o paciênte até em casa\n" \
		"{FFFFFF}Contrato Hospitalar\t{00AA00}$3.900\t{FFFFFF}2 Unidade(s)\t{C2CBD1}Leva o paciênte até em casa\n" \
		"{FFFFFF}Contrato Hospitalar\t{00AA00}$8.950\t{FFFFFF}5 Unidade(s)\t{C2CBD1}Leva o paciênte até em casa\n");
 		ShowPlayerDialog(playerid, 10799, DIALOG_STYLE_TABLIST_HEADERS, "Menu Hospital", MEGAString, "Comprar", "Fechar");
        return true;
	}
	CMD:mercnegrinho(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0)
    		{
     			SendClientMessage(playerid,0xff6347FF, "* Você não está conectado.");
       			return 1;
       		}
	    MEGAString[0] =EOS;
        strcat(MEGAString, "Item\tPreço\tDano\n" \
        "{FFFFFF}Explosivo C4\t{00AA00}$15.000\t{DD0000}Morte\n" \
		"{FFFFFF}Mina Terrestre\t{00AA00}$25.000\t{DD0000}Morte\n" \
		"{FFFFFF}Semente de Maconha\t{00AA00}$15.000\t{FFFFFF}N/A\n" \
		"{FFFFFF}Coquetel Volotov(3 Unidades)\t{00AA00}$5.000\t{DD0000}-60\n" \
		"{FFFFFF}Lata de Spray\t{00AA00}$14.500\t{FFFFFF}N/A\n" \
		"{FFFFFF}Óculos de visão Noturna\t{00AA00}$45.000\t{FFFFFF}N/A\n" \
		"{FFFFFF}Óculos de visão Infravermelho\t{00AA00}$45.500\t{FFFFFF}N/A\n" \
		"{FFFFFF}Caixa de equipamentos Pequena\t{33AA33}$800.000\tN/A\n" \
		"{FFFFFF}Caixa de equipamentos Média\t{33AA33}$1.000.000\tN/A\n" \
		"{FFFFFF}Caixa de equipamentos Grande\t{33AA33}$2.000.000\tN/A\n");
 		ShowPlayerDialog(playerid, 10899, DIALOG_STYLE_TABLIST_HEADERS, "Mercado Negro", MEGAString, "Comprar", "Fechar");
        return true;
	}
	CMD:rmdiofarmacia60(playerid, params[])
    {

        if(PlayerToPoint(2.0, playerid,266.2977,1770.7728,9998.9424))
		{
		    new string[2000];

			string[0] = EOS;

		    strcat(string, "{FFFFFF}Produto\t{33AA33}Preço\t{00FFFF}Cura\t{FFFFFF}Unidades\n");
		    strcat(string, "{FFFFFF}Remédio pequeno\t{33AA33}$2.000\t{00FFFF}+40\t{FFFFFF}1 Unidade(s)\n");
		    strcat(string, "{FFFFFF}Remédio Normal\t{33AA33}$15.000\t{00FFFF}+60\t{FFFFFF}1 Unidade(s)\n");
		    strcat(string, "{FFFFFF}MedKit de chão\t{33AA33}$5.500\t{00FFFF}+5 p/seg\t{FFFFFF}1 Unidade(s)\n");
		    strcat(string, "{FFFFFF}Remédio pequeno\t{33AA33}$2.000\t{00FFFF}+40\t{FFFFFF}5 Unidade(s)\n");
		    strcat(string, "{FFFFFF}Remédio Normal\t{33AA33}$75.000\t{00FFFF}+60\t{FFFFFF}5 Unidade(s)\n");
		    strcat(string, "{FFFFFF}MedKit de chão\t{33AA33}$27.500\t{00FFFF}+5 p/seg\t{FFFFFF}5 Unidade(s)\n");

            ShowPlayerDialog(playerid, 3457, 5, "Farmácia 24'Horas", string, "Comprar", "Cancelar");
		}
		return 1;
	}
	CMD:voz(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0)
    		{
     			SendClientMessage(playerid,0xff6347FF, "* Você não está conectado.");
       			return 1;
       		}
       		if(!IsACop(playerid))
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não é um policial!");
			    return true;
			}
	    ShowPlayerDialog(playerid,10898,DIALOG_STYLE_LIST,"Policia voz em aúdio","Voz: Revista de rotina.\nVoz: Você é procurado.\nVoz: Liberado\nVoz: Saia do carro com as mãos para cima.\nVoz: Sabemos que você está ai saia.\nVoz: Você tem 10segundos para se render\nVoz: Renda-se ou abriremos fogo.","Selecionar","Cancelar");
        return true;
	}
	CMD:comprar(playerid, params[])
	{
			if (!PlayerToPoint(100, playerid,-30.875, -88.9609, 1004.53) && !PlayerToPoint(3.0, playerid,3.1651,-29.0123,1003.5494) && !PlayerToPoint(3.0, playerid,-22.2540,-55.6456,1003.5469) && !PlayerToPoint(3.0, playerid,-22.3265,-138.4765,1003.5469) && !PlayerToPoint(3.0, playerid,-30.3140,-28.3121,1003.5573))//centerpoint 24-7, ultimo mercearia.
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você não esta em uma 24-7 ou Mercado ! >> Vá até uma /gps <<");
				return true;
			}
			new item;
			if(sscanf(params, "d", item))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USE: /comprar [Numero do item]");
				SendClientMessage(playerid, COLOR_WHITE, "|______________ 24-7 ______________|");
				SendClientMessage(playerid, COLOR_GRAD1, "| 1: Numero de Telefone   R$100		2: Agenda 	   R$2");
				SendClientMessage(playerid, COLOR_GRAD2, "| 3: Dado 	   R$2		4: Camisinha   R$2");
				SendClientMessage(playerid, COLOR_GRAD4, "|	6: Frango 	   R$10  	5: Chave do Último veículo  R$5000");
				SendClientMessage(playerid, COLOR_GRAD5, "| 7: Hamburger   R$10			8: Pizza 	   R$10");
				SendClientMessage(playerid, COLOR_GRAD5, "| 9: 30 Creditos R$20      10: 50 Creditos R$50");
				SendClientMessage(playerid, COLOR_GRAD5, "| 11: Capacete R$25000        12: Computador R$2000");
                SendClientMessage(playerid, COLOR_GRAD5, "| 13: Carteira de Cigarro R$5000 14: Galão de Gasolina R$5000");
                SendClientMessage(playerid, COLOR_GRAD5, "| 15: Isqueiro R$2000      16: Patins R$20000");
                SendClientMessage(playerid, COLOR_GRAD5, "| 17: Televisao R$100.000  18: Garrafa de Leite R$1000");
                SendClientMessage(playerid, COLOR_GRAD5, "| 19: Radio Portatil R$100.000 20:Inventario Preço Por Tamanho");
				return true;
			}
			if (item == 1 && GetPlayerMoney(playerid) >= 300)
			{
			   ShowPlayerDialog(playerid,134,DIALOG_STYLE_MSGBOX,"Forma de Pagamento","Escolha a Forma de Pagamento","Dinheiro","Débito");
			}
			else if (item == 2 && GetPlayerMoney(playerid) >= 200)
			{
			   ShowPlayerDialog(playerid,135,DIALOG_STYLE_MSGBOX,"Forma de Pagamento","Escolha a Forma de Pagamento","Dinheiro","Débito");
			}
			else if (item == 3 && GetPlayerMoney(playerid) >= 2)
			{
			    ShowPlayerDialog(playerid,136,DIALOG_STYLE_MSGBOX,"Forma de Pagamento","Escolha a Forma de Pagamento","Dinheiro","Débito");
			}
			else if (item == 4 && GetPlayerMoney(playerid) >= 2)
			{
			    ShowPlayerDialog(playerid,137,DIALOG_STYLE_MSGBOX,"Forma de Pagamento","Escolha a Forma de Pagamento","Dinheiro","Débito");
			}
			else if(item == 5 && GetPlayerMoney(playerid) > 5000)
			{
				ShowPlayerDialog(playerid,138,DIALOG_STYLE_MSGBOX,"Forma de Pagamento","Escolha a Forma de Pagamento","Dinheiro","Débito");
			}
			else if (item == 6 && GetPlayerMoney(playerid) >= 10)
			{
			    ShowPlayerDialog(playerid,139,DIALOG_STYLE_MSGBOX,"Forma de Pagamento","Escolha a Forma de Pagamento","Dinheiro","Débito");
			}
			else if (item == 7 && GetPlayerMoney(playerid) >= 10)
			{
               ShowPlayerDialog(playerid,140,DIALOG_STYLE_MSGBOX,"Forma de Pagamento","Escolha a Forma de Pagamento","Dinheiro","Débito");
			}
			else if (item == 8 && GetPlayerMoney(playerid) >= 10)
			{
			    ShowPlayerDialog(playerid,141,DIALOG_STYLE_MSGBOX,"Forma de Pagamento","Escolha a Forma de Pagamento","Dinheiro","Débito");
			}
   			else if (item == 9 && GetPlayerMoney(playerid) >= 30)
			{
			    ShowPlayerDialog(playerid,142,DIALOG_STYLE_MSGBOX,"Forma de Pagamento","Escolha a Forma de Pagamento","Dinheiro","Débito");
			}
			else if (item == 10 && GetPlayerMoney(playerid) >= 50)
			{
				ShowPlayerDialog(playerid,143,DIALOG_STYLE_MSGBOX,"Forma de Pagamento","Escolha a Forma de Pagamento","Dinheiro","Débito");
			}
			else if (item == 11 && GetPlayerMoney(playerid) >= 30)
            {
		    	ShowPlayerDialog(playerid,144,DIALOG_STYLE_MSGBOX,"Forma de Pagamento","Escolha a Forma de Pagamento","Dinheiro","Débito");
			}
            else if (item == 12 && GetPlayerMoney(playerid) >= 2000)
			{
			    ShowPlayerDialog(playerid,145,DIALOG_STYLE_MSGBOX,"Forma de Pagamento","Escolha a Forma de Pagamento","Dinheiro","Débito");
			}
			else if (item == 13 && GetPlayerMoney(playerid) >= 5000)
            {
				ShowPlayerDialog(playerid,146,DIALOG_STYLE_MSGBOX,"Forma de Pagamento","Escolha a Forma de Pagamento","Dinheiro","Débito");
			}
			else if (item == 14 && GetPlayerMoney(playerid) >= 5000)
            {
				ShowPlayerDialog(playerid,147,DIALOG_STYLE_MSGBOX,"Forma de Pagamento","Escolha a Forma de Pagamento","Dinheiro","Débito");
			}
			else if (item == 15 && GetPlayerMoney(playerid) >= 2000)
            {
				ShowPlayerDialog(playerid,148,DIALOG_STYLE_MSGBOX,"Forma de Pagamento","Escolha a Forma de Pagamento","Dinheiro","Débito");
			}
			else if (item == 16 && GetPlayerMoney(playerid) >= 20000)
            {
				ShowPlayerDialog(playerid,149,DIALOG_STYLE_MSGBOX,"Forma de Pagamento","Escolha a Forma de Pagamento","Dinheiro","Débito");
			}
			else if(item == 17 && GetPlayerMoney(playerid) >= 100000)
            {
                ShowPlayerDialog(playerid,150,DIALOG_STYLE_MSGBOX,"Forma de Pagamento","Escolha a Forma de Pagamento","Dinheiro","Débito");
			}
			else if(item == 18 && GetPlayerMoney(playerid) >= 1000)
            {
				ShowPlayerDialog(playerid,151,DIALOG_STYLE_MSGBOX,"Forma de Pagamento","Escolha a Forma de Pagamento","Dinheiro","Débito");
			}
            else if (item == 19 && GetPlayerMoney(playerid) >= 100000)
            {
		     	ShowPlayerDialog(playerid,152,DIALOG_STYLE_MSGBOX,"Forma de Pagamento","Escolha a Forma de Pagamento","Dinheiro","Débito");
			}
			return true;
	}

stock CheckPlayerDistanceToVehicle(Float:radi, playerid, vehicleid)
{
	if(IsPlayerConnected(playerid))
	{
	    new Float:PX,Float:PY,Float:PZ,Float:X,Float:Y,Float:Z;
	    GetPlayerPos(playerid,PX,PY,PZ);
	    GetVehiclePos(vehicleid, X,Y,Z);
	    new Float:Distance = (X-PX)*(X-PX)+(Y-PY)*(Y-PY)+(Z-PZ)*(Z-PZ);
	    if(Distance <= radi*radi)
	        return 1;
	}
	return 0;
}


stock SaveTrunk()
{
	DOF2_RemoveFile("PortaMala.cfg");
	new idx;
	new File: file2;
	idx = 1;
	while (idx < MAX_VEHICLES)
	{
		new coordsstring[200];
		format(coordsstring, sizeof(coordsstring), "%i,%i,%i,%i,%i,%i,%i,%i,%i,%f,%i,%i\n",
		vehTrunk[idx][1],
		vehTrunkAmmo[idx][1],
		vehTrunk[idx][2],
		vehTrunkAmmo[idx][2],
		vehTrunk[idx][3],
		vehTrunkAmmo[idx][3],
		vehTrunk[idx][4],
		vehTrunkAmmo[idx][4],
		vehTrunkCounter[idx],
		vehTrunkArmour[idx],
		vehTrunkDroga[idx],
		vehTrunkMaterial[idx]);
		file2 = fopen("PortaMala.cfg", io_append);
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return true;
}
stock LoadTrunk()
{
	new arrCoords[13][64];
	new strFromFile2[200];
	if(!fexist("PortaMala.cfg"))return 1;
	new File: file = fopen("PortaMala.cfg", io_read);
	if (file)
	{
		new idx = 1;
		while (idx < MAX_VEHICLES)
		{
		    fread(file, strFromFile2);
		    split(strFromFile2, arrCoords, ',');
		    vehTrunk[idx][1] = strval(arrCoords[0]);
		    vehTrunkAmmo[idx][1] = strval(arrCoords[1]);
		    vehTrunk[idx][2] = strval(arrCoords[2]);
		    vehTrunkAmmo[idx][2] = strval(arrCoords[3]);
		    vehTrunk[idx][3] = strval(arrCoords[4]);
		    vehTrunkAmmo[idx][3] = strval(arrCoords[5]);
		    vehTrunk[idx][4] = strval(arrCoords[6]);
		    vehTrunkAmmo[idx][4] = strval(arrCoords[7]);
		    vehTrunkCounter[idx] = strval(arrCoords[8]);
		    vehTrunkArmour[idx] = floatstr(arrCoords[9]);
		    vehTrunkDroga[idx] = strval(arrCoords[10]);
		    vehTrunkMaterial[idx] = strval(arrCoords[11]);
		    idx++;
		}
	}
	fclose(file);
	return true;
}

CMD:portamalasantigotestando123(playerid, x_nr[])
{
	if(!strlen(x_nr))
	{
	    SendClientMessage(playerid, COLOR_GRAD1, "USE: /portamalas [nome]");
	    SendClientMessage(playerid, COLOR_GRAD1, "Nomes disponíveis:");
	    SendClientMessage(playerid, COLOR_GRAD1, "| Info | Colocardroga | Colocarmaterial | Colocarcolete | Guardararma |");
	    SendClientMessage(playerid, COLOR_GRAD1, "| Pegarcolete | Pegardroga | Pegarmaterial | Pegararma |");

		if(IsACop(playerid))
		        SendClientMessage(playerid, COLOR_WHITE, "POLICIAIS: | Revistar | Apreender |");

	    SendClientMessage(playerid, COLOR_WHITE,"==================================================================================");
	    return 1;
	}

	new counter = 0;
	new result;

	for(new i; i != MAX_VEHICLES; i++)
 	{
        new dist = CheckPlayerDistanceToVehicle(3.5, playerid, i);
	    if(dist){
	 		result = i;
		   	counter++;
		}
	}

	if(GetVehicleSpeed(result) > 15 && VeiculoOcupado(result)){
		SendClientMessage( playerid , COLOR_GRAD1 , "Você não pode abrir o porta-malas do carro em movimento!" ) ;
	}

	new thestring[128];
	if(strcmp(x_nr,"info",true)==0)
	{
		    switch(counter)
		    {
		        case 0:
		            return SendClientMessage(playerid, COLOR_GRAD1, " Nenhum carro com porta-malas perto de você.");

		        case 1:
		        {
		            if(IsPlayerInAnyVehicle(playerid))
		                return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode abrir o porta-malas de dentro do carro.");

					if(!IsACar(result))
	           			return SendClientMessage(playerid, COLOR_GRAD1, " Este veiculo não possui um porta-malas !");


					MEGAString[0] = EOS;

					strcat(MEGAString, "|_______ Porta-malas do carro _______|\n\n");

					strcat(MEGAString, "ARMAS:\n");
					for(new slot = 1; slot != MAX_TRUNK_SLOTS; slot++)
					{
					    new gunname[100];
					    if(vehTrunk[result][slot] != 0){

							GetWeaponName(vehTrunk[result][slot], gunname, sizeof(gunname));
					        format(thestring, sizeof(thestring), "| Slot %i: %s (Munição: %i)\n", slot, gunname, vehTrunkAmmo[result][slot]);
					      	strcat(MEGAString, thestring);
					    }

						else{

							format(thestring, sizeof(thestring), "| Slot %i: Vazio (Munição: Nenhuma)\n", slot);
					        strcat(MEGAString, thestring);
					    }
					}
					strcat(MEGAString, "\nOUTROS:\n");
					format(thestring, sizeof(thestring), "| Colete: %f%\n", vehTrunkArmour[result]);
					strcat(MEGAString, thestring);
					format(thestring, sizeof(thestring), "| Drogas: %d\n", vehTrunkDroga[result]);
					strcat(MEGAString, thestring);
					format(thestring, sizeof(thestring), "| Materiais: %d\n\n", vehTrunkMaterial[result]);
					strcat(MEGAString, thestring);
					strcat(MEGAString, "|_______________________________|");

	                ShowPlayerDialog(playerid, 8724, DIALOG_STYLE_MSGBOX, "--PORTA-MALAS--", MEGAString, "Informado","");

					format(thestring, sizeof(thestring), "%s abriu o porta-malas e checou o mesmo", NomePlayer(playerid));
	           		SendClientMessageInRange(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        }
		        default:
		            return SendClientMessage(playerid, COLOR_GRAD1, " Foram encontrados mais de um carro nas proximidades.");

			}
		    return 1;
	}
	else if(strcmp(x_nr,"colocarcolete",true)==0)
	{
		    switch(counter)
		    {
		        case 0:
		           	return SendClientMessage(playerid, COLOR_GRAD1, " Nenhum carro com porta-malas perto de você.");

		       case 1:
	           {
		            if(IsPlayerInAnyVehicle(playerid))
		                return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode abrir o porta-malas de dentro do carro.");

					if(!IsACar(result))
	        			return SendClientMessage(playerid, COLOR_GRAD1, " Este veiculo não possui um porta-malas !");

	                if(GetPlayerArmourEx(playerid) != 0){

						SetPlayerArmour(playerid, 0);
		                vehTrunkArmour[result] += GetPlayerArmourEx(playerid);
		                format(thestring, sizeof(thestring), "%s tirou o colete e colocou no porta-malas do carro.", NomePlayer(playerid));
		                SendClientMessageInRange(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		                return 1;
		            }
		            else
		                return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem nenhum colete ");
	     		}

		        default:
		            return SendClientMessage(playerid, COLOR_GRAD1, " encontrado mais de um carro na faixa");
			}
	}
	else if(strcmp(x_nr,"colocardroga",true)==0)
	{
	    	switch(counter)
	    	{
	      		case 0:
	         		return SendClientMessage(playerid, COLOR_GRAD1, " Nenhum carro com porta-malas perto de você.");

	        	case 1:{

	           		if(IsPlayerInAnyVehicle(playerid))
		               return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode abrir o porta-malas de dentro do carro.");

					if(!IsACar(result))
	           			return SendClientMessage(playerid, COLOR_GRAD1, " Este veiculo não possui um porta-malas !");

                    if(PlayerInfo[playerid][pDrogas] != 0)
		            {
		                vehTrunkDroga[result] += PlayerInfo[playerid][pDrogas];
		                PlayerInfo[playerid][pDrogas] = 0;

		                format(thestring, sizeof(thestring), "%s colocou todas suas drogas no porta-malas do carro.", NomePlayer(playerid));
		                SendClientMessageInRange(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		                return 1;
		            }
		            else
		                return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem nenhuma droga para por no porta-malas.");
		        }

		        default:
		            return SendClientMessage(playerid, COLOR_GRAD1, " Encontrado mais de um carro na proximidade.");
			}
		    return 1;
	}
	else if(strcmp(x_nr,"colocarmaterial",true)==0)
	{
		    switch(counter)
		    {
		        case 0:
		            return SendClientMessage(playerid, COLOR_GRAD1, " Nenhum carro com porta-malas perto de você.");

				case 1:{

		            if(IsPlayerInAnyVehicle(playerid))
		                return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode abrir o porta-malas de dentro do carro.");

					if(!IsACar(result))
	           			return SendClientMessage(playerid, COLOR_GRAD1, " Este veiculo não possui um porta-malas !");

                    if(PlayerInfo[playerid][pMats] != 0){

						vehTrunkMaterial[result] += PlayerInfo[playerid][pMats];
		                PlayerInfo[playerid][pMats] = 0;


		                format(thestring, sizeof(thestring), "%s colocou todos seus materiais no porta-malas do carro.", NomePlayer(playerid));
		                SendClientMessageInRange(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		                return 1;
		            }
		            else
		                return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem nenhum material para por no porta-malas.");
		        }

		        default:
		            return SendClientMessage(playerid, COLOR_GRAD1, " Encontrado mais de um carro na proximidade.");
			}
		    return 1;
	}
	else if(strcmp(x_nr,"pegarcolete",true)==0)
	{
		    switch(counter)
		    {
		        case 0:
		            return SendClientMessage(playerid, COLOR_GRAD1, "  Nenhum carro com porta-malas perto de você.");

		        case 1:{

		            if(IsPlayerInAnyVehicle(playerid))
		                return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode abrir o porta-malas de dentro do carro.");

					if(!IsACar(result))
	           			return SendClientMessage(playerid, COLOR_GRAD1, " Este veiculo não possui um porta-malas !");

		            if(vehTrunkArmour[result] != 0){

						SetPlayerArmour(playerid, vehTrunkArmour[result]);
		                vehTrunkArmour[result] = 0;


		                format(thestring, sizeof(thestring), "%s Pegou o colete de dentro do carro e colocou.", NomePlayer(playerid));
		                SendClientMessageInRange(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		                return 1;
		            }
		            else
		                return SendClientMessage(playerid, COLOR_GREY, " Não há nenhum colete no porta-malas do carro! ");
		        }

		        default:
		            return SendClientMessage(playerid, COLOR_GRAD1, " Encontrado mais de um carro na proximidade.");
			}
			return 1;
	}
	else if(strcmp(x_nr,"pegardroga",true)==0)
	{
		    switch(counter)
		    {
		        case 0:
		            return SendClientMessage(playerid, COLOR_GRAD1, "  Nenhum carro com porta-malas perto de você.");

		        case 1:{

		            if(IsPlayerInAnyVehicle(playerid))
		                return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode abrir o porta-malas de dentro do carro.");

					if(!IsACar(result))
	           			return SendClientMessage(playerid, COLOR_GRAD1, " Este veiculo não possui um porta-malas !");

		            if(vehTrunkDroga[result] != 0){

		                PlayerInfo[playerid][pDrogas] += vehTrunkDroga[result];
		                vehTrunkDroga[result] = 0;


		                format(thestring, sizeof(thestring), "%s Pegou as drogas de dentro do carro e colocou no bolso.", NomePlayer(playerid));
		                SendClientMessageInRange(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		                return 1;
		            }
		            else
		                return SendClientMessage(playerid, COLOR_GRAD1, " Não há nenhum colete no porta-malas do carro! ");
		        }

		        default:
		            return SendClientMessage(playerid, COLOR_GRAD1, " Encontrado mais de um carro na proximidade.");
			}
			return 1;
	}
	else if(strcmp(x_nr,"pegarmaterial",true)==0)
	{
		    switch(counter)
		    {
		        case 0:
		            return SendClientMessage(playerid, COLOR_GRAD1, "  Nenhum carro com porta-malas perto de você.");

		        case 1:{

		            if(IsPlayerInAnyVehicle(playerid))
		                return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode abrir o porta-malas de dentro do carro.");

					if(!IsACar(result))
	           			return SendClientMessage(playerid, COLOR_GRAD1, " Este veiculo não possui um porta-malas !");

		            if(vehTrunkMaterial[result] != 0)
		            {
		                PlayerInfo[playerid][pMats] += vehTrunkMaterial[result];
		                vehTrunkMaterial[result] = 0;


		                format(thestring, sizeof(thestring), "%s Pegou os materiais de dentro do carro e colocou no bolso.", NomePlayer(playerid));
		                SendClientMessageInRange(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		                return 1;
		            }
		            else
		                return SendClientMessage(playerid, COLOR_GRAD1, " Não há nenhum colete no porta-malas do carro! ");
		        }

		        default:
		            return SendClientMessage(playerid, COLOR_GRAD1, " Encontrado mais de um carro na proximidade.");
			}
			return 1;
	}
	else if(strcmp(x_nr,"guardararma",true) == 0)
	{
		    switch(counter)
		    {
		        case 0:{
		            SendClientMessage(playerid, COLOR_GREY, "Você não está perto de nenhum carro !");
		        }

		        case 1:{

		            if(vehTrunkCounter[result] != (MAX_TRUNK_SLOTS-1)){

		                if(IsPlayerInAnyVehicle(playerid)){
		                    return SendClientMessage(playerid, COLOR_GREY, "Você não pode abrir o porta-malas de dentro do carro");
		                }

		       			if(!IsACar(result))
	       					return SendClientMessage(playerid, COLOR_GRAD1, " Este veiculo não possui um porta-malas !");

                        new gunname[100];
                        new gunID = GetPlayerWeapon(playerid);
                        new gunAmmo = GetPlayerAmmo(playerid);

                        if(gunID != 0 && gunAmmo != 0){

                            GetWeaponName(gunID, gunname, sizeof(gunname));
                            vehTrunkCounter[result]++;
                            vehTrunk[result][vehTrunkCounter[result]] = gunID;
                            vehTrunkAmmo[result][vehTrunkCounter[result]] = gunAmmo;
                            format(thestring, sizeof(thestring), "Você guardou uma %s (Munição: %i) no porta-mala do carro.", gunname, gunAmmo);
                            SendClientMessage(playerid, COLOR_WHITE, thestring);
                            RemovePlayerWeapon(playerid, gunID);
                            format(thestring, sizeof(thestring), "* %s abre o porta-malas e guarda armas.", PlayerName(playerid));
                            SendClientMessageInRange(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            return true;
                        }
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_GREY, " Porta-mala cheio");
			            return true;
			        }
		      	}

		        default:
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Foi encontrado mais de um carro nesse raio");
		            return true;
		        }
		    }
		    return true;
	}
	else if(strcmp(x_nr,"pegararma",true) == 0)
	{
		    new plyName[MAX_PLAYER_NAME];

		    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);

		    switch(counter)
		    {
		        case 0:{
		            return SendClientMessage(playerid, COLOR_GREY, "Você não está perto de nenhum carro !");

				}
		        case 1:
		        {
		            if(IsPlayerInAnyVehicle(playerid)){
						return SendClientMessage(playerid, COLOR_GREY, "Você não pode abrir o porta-malas de dentro do carro");
		            }
					if(!IsACar(result))
	       				return SendClientMessage(playerid, COLOR_GRAD1, " Este veiculo não possui um porta-malas !");

		            if(vehTrunkCounter[result] != 0){

						new gunName[100];

		                GivePlayerWeapon(playerid, vehTrunk[result][vehTrunkCounter[result]], vehTrunkAmmo[result][vehTrunkCounter[result]]);
		                GetWeaponName(vehTrunk[result][vehTrunkCounter[result]], gunName, sizeof(gunName));
		                format(thestring, sizeof(thestring), "Você pegou uma %s (Munição: %i) do porta-mala do veiculo.", gunName, vehTrunkAmmo[result][vehTrunkCounter[result]]);
		                SendClientMessage(playerid, COLOR_WHITE, thestring);
		                vehTrunk[result][vehTrunkCounter[result]] = '\0';
		                vehTrunkAmmo[result][vehTrunkCounter[result]] = '\0';
		                vehTrunkCounter[result]--;
		                format(thestring, sizeof(thestring), "* %s abre o porta-malas e retira armas.", PlayerName(playerid));
		                SendClientMessageInRange(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		                return true;
		            }
		            else{
		                return SendClientMessage(playerid, COLOR_GREY, "   Porta-mala vazio ! ");
		            }
		        }

		        default:{
		            SendClientMessage(playerid, COLOR_GREY, "   Foi encontrado mais de um carro nesse raio");
		        }
		    }
		    return true;
	}
	else if(strcmp(x_nr,"apreender",true) == 0)
	{
		    if(IsACop(playerid)){

		    	switch(counter)
		    	{
		        	case 0:{
		            	SendClientMessage(playerid, COLOR_GREY, "Você não está perto de nenhum carro !");
		        	}

		        	case 1:{

		        	    new count=0;
		            	if(IsPlayerInAnyVehicle(playerid)){

							return SendClientMessage(playerid, COLOR_GREY, "Você não pode apreender o que está no porta-malas de dentro do carro");
           				}
						if(!IsACar(result))
	           				return SendClientMessage(playerid, COLOR_GRAD1, " Este veiculo não possui um porta-malas !");

               			if(vehTrunkCounter[result] != 0){

							new gunName[100];
			               	GetWeaponName(vehTrunk[result][vehTrunkCounter[result]], gunName, sizeof(gunName));
			               	GivePlayerWeapon(playerid, vehTrunk[result][vehTrunkCounter[result]], vehTrunkAmmo[result][vehTrunkCounter[result]]);
			               	format(thestring, sizeof(thestring), "Você apreendeu uma %s (Munição: %i) do porta-mala do veiculo.", gunName, vehTrunkAmmo[result][vehTrunkCounter[result]]);
			               	SendClientMessage(playerid, COLOR_WHITE, thestring);
			               	vehTrunk[result][vehTrunkCounter[result]] = '\0';
			               	vehTrunkAmmo[result][vehTrunkCounter[result]] = '\0';
			               	vehTrunkCounter[result]--;
			               	count = 1;
			           	}
			            if(vehTrunkMaterial[result] != 0){

							PlayerInfo[playerid][pMats] += vehTrunkMaterial[result];
			                vehTrunkMaterial[result] = 0;
                            count = 1;
			            }
			            if(vehTrunkDroga[result] != 0){

							PlayerInfo[playerid][pDrogas] += vehTrunkDroga[result];
			                vehTrunkDroga[result] = 0;

							count = 1;
						}
						if(count){

							format(thestring, sizeof(thestring), "Policial: %s apreendeu algum item suspeito do porta-malas.", NomePlayer(playerid));
			                SendClientMessageInRange(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			            }
		            	else{

							return SendClientMessage(playerid, COLOR_GREY, "   O porta-malas não contém um item suspeito ! ");
		            	}
		        	}

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Foi encontrado mais de um carro nesse raio");
			            return true;
			   	    }
		    	}
			}
			else{

				return SendClientMessage(playerid, COLOR_GREY, "Você não é um policial ! ");
			}
	}
	else if(strcmp(x_nr,"revistar",true)==0)
	{
		    if(IsACop(playerid))
		    {
		    	switch(counter)
		    	{
		        	case 0:
		            	return SendClientMessage(playerid, COLOR_GRAD1, "  Nenhum carro com porta-malas perto de você.");

		        	case 1:{

		            	if(IsPlayerInAnyVehicle(playerid))
		                	return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode abrir o porta-malas de dentro do carro.");

						if(!IsACar(result))
	           				return SendClientMessage(playerid, COLOR_GRAD1, " Este veiculo não possui um porta-malas !");

						MEGAString[0] = EOS;
						strcat(MEGAString, "|_______ Porta-malas do carro _______|\n\n");

						strcat(MEGAString, "ARMAS:\n");
						for(new slot = 1; slot != MAX_TRUNK_SLOTS; slot++)
						{
						    new gunname[100];
						    if(vehTrunk[result][slot] != 0){

								GetWeaponName(vehTrunk[result][slot], gunname, sizeof(gunname));
						        format(thestring, sizeof(thestring), "| Slot %i: %s (Munição: %i)\n", slot, gunname, vehTrunkAmmo[result][slot]);
						        strcat(MEGAString, thestring);
						    }

							else{

								format(thestring, sizeof(thestring), "| Slot %i: Vazio (Munição: Nenhuma)\n", slot);
						        strcat(MEGAString, thestring);
						    }
						}
						strcat(MEGAString, "\nOUTROS:\n");
						format(thestring, sizeof(thestring), "| Colete: %f%\n", vehTrunkArmour[result]);
						strcat(MEGAString, thestring);
						format(thestring, sizeof(thestring), "| Drogas: %d\n", vehTrunkDroga[result]);
						strcat(MEGAString, thestring);
						format(thestring, sizeof(thestring), "| Materiais: %d\n\n", vehTrunkMaterial[result]);
						strcat(MEGAString, thestring);
						strcat(MEGAString, "|_______________________________|");

		                ShowPlayerDialog(playerid, 8724, DIALOG_STYLE_MSGBOX, "--PORTA-MALAS--", MEGAString, "Informado","");



	                    format(thestring, sizeof(thestring), "*Policial: %s revistou o porta-malas do veículo.", NomePlayer(playerid));
    	          		SendClientMessageInRange(30.0, playerid, thestring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						return 1;
		        	}

			        default:
			            return SendClientMessage(playerid, COLOR_GRAD1, " Encontrado mais de um carro na proximidade.");
		    	}
			}
			else
			{
				return SendClientMessage(playerid, COLOR_GRAD1, "Você não e um policial! ");
			}
	}
	else
	{
		    SendClientMessage(playerid, COLOR_GRAD1, "USE: /portamalas [nome]");
		    SendClientMessage(playerid, COLOR_GRAD1, "Nomes disponíveis:");
		    SendClientMessage(playerid, COLOR_GRAD1, "| Info | Colocardroga | Colocarmaterial | Colocarcolete | Guardararma |");
		    SendClientMessage(playerid, COLOR_GRAD1, "| Pegarcolete | Pegardroga | Pegarmaterial | Pegararma |");

			if(IsACop(playerid))
	       		SendClientMessage(playerid, COLOR_WHITE, "POLICIAIS: | Revistar | Apreender |");

		    SendClientMessage(playerid, COLOR_WHITE,"==================================================================================");
	}
	return 1;
}
//------- Sistema de Mobiliar a casa ---------
	enum mob_I
	{
		mobCreated,
		Float:      mobX,
		Float:      mobY,
		Float:      mobZ,

		Float:      mobRX,
		Float:      mobRY,
		Float:      mobRZ,

		mobObject,
		mobModel,
	};
	new MobInfo[MAX_HOUSES][MAX_MOVEIS][mob_I];

	addMovel(casaid, modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, worlda){

		for(new m; m != MAX_MOVEIS; m++){

		    if(!MobInfo[casaid][m][mobCreated]){

		        MobInfo[casaid][m][mobCreated] 	= 1;

		        MobInfo[casaid][m][mobModel] 	= modelid;

				MobInfo[casaid][m][mobX] 		= x;
				MobInfo[casaid][m][mobY] 		= y;
				MobInfo[casaid][m][mobZ] 		= z;

				MobInfo[casaid][m][mobRX] 		= rx;
				MobInfo[casaid][m][mobRY] 		= ry;
				MobInfo[casaid][m][mobRZ] 		= rz;

				MobInfo[casaid][m][mobObject]   = CreateDynamicObject(modelid, x, y, z, rx, ry, rz, worlda);

		        return m;
		    }
		}
		return -1;
	}

	countMoveis(casaid){

		new count = 0;

		for(new x; x != MAX_MOVEIS; x++){

			if(MobInfo[casaid][x][mobCreated]){

				count ++;
			}
		}

		return count;
	}

	salvarMoveis(casaid){

		new
			file[80],
			string[25],
			stringMovel[128]
		;

		format(file, sizeof file, Pasta_Casas, casaid);

		for(new x; x != MAX_MOVEIS; x++){

			format(stringMovel, 128, "%d|%d|%f|%f|%f|%f|%f|%f",
			MobInfo[casaid][x][mobCreated],MobInfo[casaid][x][mobModel],
			MobInfo[casaid][x][mobX], MobInfo[casaid][x][mobY],MobInfo[casaid][x][mobZ],
			MobInfo[casaid][x][mobRX], MobInfo[casaid][x][mobRY], MobInfo[casaid][x][mobRZ]);

			format(string, sizeof string, "Movel_%d", x);

			DOF2_SetString(file, string, stringMovel);
		}

		DOF2_SaveFile();

		return 0;
	}


	carregarMoveis(casaid){

		new
			file[80],
			keyfile[24],
			string[128],
			strCoords[8][25]
		;

		format(file, sizeof file, Pasta_Casas, casaid);

		for(new x; x != MAX_MOVEIS; x++){


			format(keyfile, sizeof keyfile, "Movel_%d", x);

			format(string, sizeof string, DOF2_GetString(file, keyfile));

	        split(string, strCoords, '|');


			MobInfo[casaid][x][mobCreated]	= strval(strCoords[0]);
			MobInfo[casaid][x][mobModel] 	= strval(strCoords[1]);
		    //Posicao
			MobInfo[casaid][x][mobX]		= floatstr(strCoords[2]);
			MobInfo[casaid][x][mobY] 		= floatstr(strCoords[3]);
			MobInfo[casaid][x][mobZ] 		= floatstr(strCoords[4]);
			//Rotacao
			MobInfo[casaid][x][mobRX] 		= floatstr(strCoords[5]);
			MobInfo[casaid][x][mobRY] 		= floatstr(strCoords[6]);
			MobInfo[casaid][x][mobRZ] 		= floatstr(strCoords[7]);

			if(MobInfo[casaid][x][mobCreated]){

				MobInfo[casaid][x][mobObject]   = CreateDynamicObject(MobInfo[casaid][x][mobModel],
				                                                      MobInfo[casaid][x][mobX],
																	  MobInfo[casaid][x][mobY],
																	  MobInfo[casaid][x][mobZ],
																	  MobInfo[casaid][x][mobRX],
																	  MobInfo[casaid][x][mobRY],
																	  MobInfo[casaid][x][mobRZ],
																	  casaid);
			}
		}

		return 0;
	}


	isMovelRoubavel(modelid){


		switch(modelid){

		    case 14705,14772,1429,1518,2595,14532,2654,19055,19056,19058,932,
			1663,1704,1705,1708,1735,1811,2096,1954,2121,2123,2240,2069,2176,2701,
			2103,2077,2777,2225,2811,1815,2855,1782,1783,1785,1787,1788,1790:return 1;
		}

		return 0;
	}


	getMovelPerto(playerid){


		if(HouseEntered[playerid] != 500){

		    new
				casaid = HouseEntered[playerid]
			;

			if(casaid == PlayerInfo[playerid][pPHousekey])return 0;

		    for(new x; x != MAX_MOVEIS; x++){

		        if(MobInfo[casaid][x][mobCreated] && IsPlayerInRangeOfPoint(playerid, 1.8, MobInfo[casaid][x][mobX], MobInfo[casaid][x][mobY], MobInfo[casaid][x][mobZ]) && isMovelRoubavel(MobInfo[casaid][x][mobModel])){

		            return x;
		        }
		    }
		}

		return 0;
	}

		resetarMoveis(casaid){

		for(new x; x != MAX_MOVEIS; x++){

			if(MobInfo[casaid][x][mobCreated]){

				MobInfo[casaid][x][mobCreated] = 0;

				MobInfo[casaid][x][mobModel] = 0;

			    //Posicao
				MobInfo[casaid][x][mobX] = 0;
				MobInfo[casaid][x][mobY] = 0;
				MobInfo[casaid][x][mobZ] = 0;

				//Rotacao
				MobInfo[casaid][x][mobRX] = 0;
				MobInfo[casaid][x][mobRY] = 0;
				MobInfo[casaid][x][mobRZ] = 0;

				DestroyDynamicObject(MobInfo[casaid][x][mobObject]);
			}
		}

		salvarMoveis(casaid);
	}
		CMD:resetarmoveis(playerid){

		new House = PlayerInfo[playerid][pPHousekey];
		if (House != 500 && strcmp(NomePlayer(playerid), HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 0)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[House][hExitx], HouseInfo[House][hExity], HouseInfo[House][hExitz]))
		    {
				resetarMoveis(House);

				showBalao(playerid, "Voce resetou os moveis da sua casa", 5000);

	       		SendClientMessage(playerid, COLOR_YELLOW2, "  Todos os seus móveis foram resetados com sucesso !");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Você está longe do interior da sua casa!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Você não têm uma Casa!");
		}
		return 1;
	}
	CMD:selecionarmoveis(playerid){

		new House = PlayerInfo[playerid][pPHousekey];
		if (House != 500 && strcmp(NomePlayer(playerid), HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 0)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[House][hExitx], HouseInfo[House][hExity], HouseInfo[House][hExitz]))
		    {
				SelectObject(playerid);

				showBalao(playerid, "Selecione um dos moveis dentro da sua casa", 5000);

	       		SendClientMessage(playerid, COLOR_YELLOW2, "  Selecione um móvel existente na sua casa !");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Você está longe do interior da sua casa!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Você não têm uma Casa!");
		}
		return 1;
	}

	CMD:furtarmovel(playerid){

		new
			movelid = getMovelPerto(playerid),
			casaid = HouseEntered[playerid]
		;

		if(movelid){


			if(GetPVarInt(playerid, "movelRoubou"))
			    return SendClientMessage(playerid, COLOR_GRAD1, "Você ja roubou um móvel, agora venda ou troque por drogas !");

			if(!OrgsRoubo(playerid))
		  		return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode roubar residências !");

			if(isMovelRoubavel(MobInfo[casaid][movelid][mobModel])){

			    SetPVarInt(playerid, "movelGrana", random(5558)+4289);
			    SetPVarInt(playerid, "movelMaconha", random(87)+42);
			    SetPVarInt(playerid, "movelCrack", random(39)+14);
			    SetPVarInt(playerid, "movelCocaina", random(39)+14);
			    SetPVarInt(playerid, "movelRoubou", 1);

				SetPlayerFaceToPoint(playerid, MobInfo[casaid][movelid][mobX], MobInfo[casaid][movelid][mobY]);

				MobInfo[casaid][movelid][mobCreated] = 0;
				DestroyDynamicObject(MobInfo[casaid][movelid][mobObject]);
				salvarMoveis(casaid);

				SendClientMessage(playerid, COLOR_LIGHTRED, "* Você pegou esse móvel, o alarme foi acionado e os policiais ja foram avisados !");
		        SendClientMessage(playerid, COLOR_LIGHTRED, "* Agora ache um traficante e tente vende-lo ou trocar por drogas.");

				if(casaid != GetPVarInt(playerid, "casaRoubo")){

				    SendClientMessage(playerid, COLOR_GRAD1, "OBS1: Os visinhos escutaram barulhos e chamaram a polícia, saia daqui o mais rápido possível.");
		            SendClientMessage(playerid, COLOR_GRAD1, "OBS2: Art. 155 - Subtrair, para si ou para outrem, coisa alheia móvel.");
		            SetPlayerCriminal(playerid, 255, "Furto em residência");
				}

				showBalao(playerid, "Agora ache um traficante para vender ou trocar", 5000);

				SetPVarInt(playerid, "casaRoubo", casaid);

	            ApplyAnimation(playerid,"CARRY","liftup",7.1,0,1,1,0,0);

			    SetPlayerSpecialAction(playerid, 25);

			    SetPlayerAttachedObject(playerid, CountAttachedObjects(playerid), MobInfo[casaid][movelid][mobModel],6,0.162000,0.131000,-0.226000,63.999984,164.399963,-96.100028,1.000000);

			}
		}

		return 1;
	}
	CMD:comprarmovel(playerid){

		new House = PlayerInfo[playerid][pPHousekey];
		if (House != 500 && strcmp(NomePlayer(playerid), HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 0)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[House][hExitx], HouseInfo[House][hExity], HouseInfo[House][hExitz]))
		    {
	       		SendClientMessage(playerid, COLOR_YELLOW2, "  Escolha o tipo de movel que deseja comprar !");

	       		showBalao(playerid, "escolha um movel para comprar", 5000);

	       		ShowPlayerDialog(playerid, 7472, 5, "Escolha uma opção",
			   "Móveis\t >> \tCômodos\n\
	   			{999999}Móveis\t >> \t{FFFFFF} Quarto\n\
	   			{999999}Móveis\t >> \t{FFFFFF} Sala\n\
	    		{999999}Móveis\t >> \t{FFFFFF} Cozinha\n\
				{999999}Móveis\t >> \t{FFFFFF} Banheiro\n\
				{999999}Móveis\t >> \t{FFFFFF} Decoracão\n\
				{999999}Móveis\t >> \t{FFFFFF} Outros",
	   			"Escolher", "Sair");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Você está longe do interior da sua casa!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Você não têm uma Casa!");
		}
		return 1;
	}
stock IsPlayerInTraficante(playerid)
{
	if(PlayerToPoint(2.0,playerid,2175.9387,-1714.6055,13.5429)) return true;
	if(PlayerToPoint(2.0,playerid,2015.4384,-1030.5325,24.7961)) return true;
	if(PlayerToPoint(2.0,playerid,1072.3854,-1889.8309,13.5469)) return true;
	if(PlayerToPoint(2.0,playerid,361.1163,-1760.7209,5.5707)) return true;
	if(PlayerToPoint(2.0,playerid,2312.0962,-1222.4377,24.1184)) return true;
	if(PlayerToPoint(2.0,playerid,1395.6145,-914.0123,35.6142)) return true;
	if(PlayerToPoint(2.0,playerid,1044.3667,-1233.3158,16.7243)) return true;
	return false;
}
	showDialogMovel(playerid){

	new Float:pos[3];

	for(new i; i != MAX_PLAYERS; i++){

	    if(!IsPlayerInTraficante(i))continue;

	    if(!strcmp(NomePlayer(i), "BPF_Ajudante", true))continue;

		GetPlayerPos(i, pos[0], pos[1], pos[2]);

		if(IsPlayerInRangeOfPoint(playerid, 2.0, pos[0], pos[1], pos[2])){

			if(GetPVarInt(playerid, "movelRoubou")){

				new
				    string[78]
				;

				MEGAString[0] = EOS;

				format(string, sizeof string, "Vender este móvel por R$%d\n", GetPVarInt(playerid, "movelGrana"));
				strcat(MEGAString, string);
				format(string, sizeof string, "Trocar este móvel por %d gramas de maconha\n", GetPVarInt(playerid, "movelMaconha"));
				strcat(MEGAString, string);
				format(string, sizeof string, "Trocar este móvel por %d pedras de crack\n", GetPVarInt(playerid, "movelCrack"));
				strcat(MEGAString, string);
				format(string, sizeof string, "Trocar este móvel por %d carreirinhas de cocaina\n", GetPVarInt(playerid, "movelCocaina"));
				strcat(MEGAString, string);

				ShowPlayerDialog(playerid, 3763, DIALOG_STYLE_LIST, "Escolha uma opção", MEGAString, "Negociar", "Sair");
			}
			else SendClientMessage(playerid, COLOR_WHITE, "  Você não tem nada para negociar com este traficante !");
		}
	}
}
public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z){

	for(new h; h != MAX_HOUSES; h++){

	    for(new m; m != MAX_MOVEIS; m++){


			if(MobInfo[h][m][mobCreated] && objectid == MobInfo[h][m][mobObject]){

	            SetPVarInt(playerid, "editandoh", 999);

	            EditDynamicObject(playerid, MobInfo[h][m][mobObject]);

	            SetPVarInt(playerid, "editMovel", m);

				return 1;

	        }

	    }
	}
	return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz){

	if(response == 1 || response == 0){


               if(EditandoCaixa[playerid] > -1)
			   {

			    new i = EditandoCaixa[playerid];
			    DestroyDynamic3DTextLabel(SistemaCaixa[i][Caixa3d]);
			    //format(SistemaCaixa[i][CaixaText],300,"{CD853F}• {ffffff}Caixa de Itens{CD853F} •\n{CD853F}Dono: {ffffff}%s\n{CD853F}Itens: {ffffff}%d/50\nAperte ' {CD853F}F{ffffff} ' para usar.",NomePlayer(playerid),ItemsCaixa(i));
                format(SistemaCaixa[i][CaixaText],300,"Caixa de Itens\n\n\
				Proprietário: {00BFFF}%s\n\
				{FFFFFF}Itens: {00BFFF}%d/50\n\n\
				{FFFFFF}Aperte a letra {00aaff}ALT{FFFFFF} para usar",NomePlayer(playerid),ItemsCaixa(i));
				SendClientMessage(playerid, -1, "Voce salvou sua Caixa de Itens neste Local.");

			    SistemaCaixa[i][Caixa3d] = CreateDynamic3DTextLabel(SistemaCaixa[i][CaixaText], -1, x,y, z, 30, INVALID_PLAYER_ID, INVALID_VEHICLE_ID,  0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 100.0);
				format(SistemaCaixa[i][CaixaDono],40, NomePlayer(playerid));
				SistemaCaixa[i][CaixaX] = x;
			 	SistemaCaixa[i][CaixaY] = y;
				SistemaCaixa[i][CaixaZ] = z;
				SistemaCaixa[i][CaixaRX] = rx;
				SistemaCaixa[i][CaixaRY] = ry;
				SistemaCaixa[i][CaixaRZ] = rz;
				SistemaCaixa[i][CaixaInterior] = GetPlayerInterior(playerid);
				SistemaCaixa[i][CaixaMundo] = GetPlayerVirtualWorld(playerid);
				DestroyDynamicObject(SistemaCaixa[i][CaixaObj]);
				SistemaCaixa[i][CaixaObj] = CreateDynamicObject(1271, x,y,z,rx,ry,rz,GetPlayerInterior(playerid),GetPlayerVirtualWorld(playerid),-1,200,0);
			    Streamer_Update(playerid);

			    new Filea[60];
			    format(Filea,60,"Caixas/Caixa_%d.ini",i);
				if(IsValidDynamicObject(SistemaCaixa[i][CaixaObj]))
				{
					if(!DOF2_FileExists(Filea)) DOF2_CreateFile(Filea);

				    DOF2_SetString(Filea,"CaixaDono", SistemaCaixa[i][CaixaDono] );
				    //DOF2_SetString(Filea,"CaixaText", SistemaCaixa[i][CaixaText] );
				    DOF2_SetFloat(Filea,"CaixaX", SistemaCaixa[i][CaixaX] );
				    DOF2_SetFloat(Filea,"CaixaY", SistemaCaixa[i][CaixaY] );
				    DOF2_SetFloat(Filea,"CaixaZ", SistemaCaixa[i][CaixaZ] );
				    DOF2_SetFloat(Filea,"CaixaRX", SistemaCaixa[i][CaixaRX] );
				    DOF2_SetFloat(Filea,"CaixaRY", SistemaCaixa[i][CaixaRY] );
				    DOF2_SetFloat(Filea,"CaixaRZ", SistemaCaixa[i][CaixaRZ] );
					DOF2_SetInt(Filea,"CaixaInterior", SistemaCaixa[i][CaixaInterior] );
					DOF2_SetInt(Filea,"CaixaMundo",  SistemaCaixa[i][CaixaMundo] );

					new str[30];
					for(new o; o<50; o++)
					{
					format(str,30,"CaixaItem%d",o);
					DOF2_SetInt(Filea,str,SistemaCaixa[i][CaixaItem][o]);
					format(str,30,"CaixaUnidades%d",o);
					DOF2_SetInt(Filea,str,SistemaCaixa[i][CaixaUnidades][o]);
			 		}
                    EditandoCaixa[playerid] = -1;
				    DOF2_SaveFile();
				}

       return 1;
			}

            if(EditandoPortao[playerid] > -1)
			{
			    new i = EditandoPortao[playerid];
			    DestroyDynamic3DTextLabel(SistemaPortao[i][Portao3d]);
			    new str[300];
			    format(str,300,"{CD853F}Portao de {ffffff}%s{CD853F} buzine ou\ndigite {ffffff}/abrirportao{CD853F} para abrir",NomePlayer(playerid));
			    SendClientMessage(playerid, -1, "A posição do seu Portão foi salva neste Local ! Para mais informações use: /ajuda.");

				SistemaPortao[i][Portao3d] = CreateDynamic3DTextLabel(SistemaPortao[i][PortaoText], -1, x,y, z, 30, INVALID_PLAYER_ID, INVALID_VEHICLE_ID,  0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 100.0);
				format(SistemaPortao[i][PortaoDono],40, NomePlayer(playerid));
				SistemaPortao[i][PortaoX] = x;
			 	SistemaPortao[i][PortaoY] = y;
				SistemaPortao[i][PortaoZ] = z;
				SistemaPortao[i][PortaoRX] = rx;
				SistemaPortao[i][PortaoRY] = ry;
				SistemaPortao[i][PortaoRZ] = rz;
				SistemaPortao[i][PortaoInterior] = GetPlayerInterior(playerid);
				SistemaPortao[i][PortaoMundo] = GetPlayerVirtualWorld(playerid);
				DestroyDynamicObject(SistemaPortao[i][PortaoObj]);
				SistemaPortao[i][PortaoObj] = CreateDynamicObject(980, x,y,z,rx,ry,rz,GetPlayerInterior(playerid),GetPlayerVirtualWorld(playerid),-1,200,0);
			    //SetDynamicObjectPos(SistemaPortao[i][PortaoObj], x,y,z);
			    //SetDynamicObjectRot(SistemaPortao[i][PortaoObj], rx,ry,rz);

			    Streamer_Update(playerid);

			    new Filea[60];
			    format(Filea,60,"Portoes/Portao_%d.ini",i);
				if(IsValidDynamicObject(SistemaPortao[i][PortaoObj]))
				{
					if(!DOF2_FileExists(Filea)) DOF2_CreateFile(Filea);

				    DOF2_SetString(Filea,"PortaoDono", SistemaPortao[i][PortaoDono] );
				    DOF2_SetString(Filea,"PortaoText", SistemaPortao[i][PortaoText] );
				    DOF2_SetFloat(Filea,"PortaoX", SistemaPortao[i][PortaoX] );
				    DOF2_SetFloat(Filea,"PortaoY", SistemaPortao[i][PortaoY] );
				    DOF2_SetFloat(Filea,"PortaoZ", SistemaPortao[i][PortaoZ] );
				    DOF2_SetFloat(Filea,"PortaoRX", SistemaPortao[i][PortaoRX] );
				    DOF2_SetFloat(Filea,"PortaoRY", SistemaPortao[i][PortaoRY] );
				    DOF2_SetFloat(Filea,"PortaoRZ", SistemaPortao[i][PortaoRZ] );
					DOF2_SetInt(Filea,"PortaoInterior", SistemaPortao[i][PortaoInterior] );
					DOF2_SetInt(Filea,"PortaoMundo",  SistemaPortao[i][PortaoMundo] );

				    DOF2_SaveFile();
				}
			    EditandoPortao[playerid] = -1;
       return 1;
			}

            if(GetPVarInt(playerid, "editandoh") == 999){

            new
                m = GetPVarInt(playerid, "editMovel"),
			    casaid = PlayerInfo[playerid][pPHousekey]
            ;

			if(response == 1){

				MobInfo[casaid][m][mobX] 		= x;
				MobInfo[casaid][m][mobY] 		= y;
				MobInfo[casaid][m][mobZ] 		= z;

				MobInfo[casaid][m][mobRX] 		= rx;
				MobInfo[casaid][m][mobRY] 		= ry;
				MobInfo[casaid][m][mobRZ] 		= rz;

				DestroyDynamicObject(MobInfo[casaid][m][mobObject]);
				MobInfo[casaid][m][mobObject]	= CreateDynamicObject(MobInfo[casaid][m][mobModel], x, y, z, rx, ry, rz, GetPlayerVirtualWorld(playerid));
			}else{

			    MobInfo[casaid][m][mobCreated] = 0;

			    DestroyDynamicObject(MobInfo[casaid][m][mobObject]);
			}

            SetPVarInt(playerid, "editandoh", 0);

	        salvarMoveis(casaid);
		}
	}
	return 1;
}

showBalao(playerid, avisobalao[], tempo){

	if(PlayerInfo[playerid][pTimerBalao] != -1){

	    KillTimer(PlayerInfo[playerid][pTimerBalao]);
	}

	PlayerInfo[playerid][pTimerBalao] = SetTimerEx("hideBalao", tempo, 0, "i", playerid);

	PlayerTextDrawSetString(playerid, balaoAviso[playerid], avisobalao);

	PlayerTextDrawShow(playerid, balaoAviso[playerid]);

}
BPF:: hideBalao(playerid){

	if(PlayerInfo[playerid][pTimerBalao] != -1){

	    PlayerInfo[playerid][pTimerBalao] = -1;
	}

	return PlayerTextDrawHide(playerid, balaoAviso[playerid]);
}
BalaoPCPref(playerid, avisobalao[], tempo){

		if(PlayerInfo[playerid][pTimerBalao] != -1){

		    KillTimer(PlayerInfo[playerid][pTimerBalao]);
		}

		PlayerInfo[playerid][pTimerBalao] = SetTimerEx("UpdateBalaoPCPref", tempo, 0, "i", playerid);

		PlayerTextDrawSetString(playerid, balaoAviso[playerid], avisobalao);

		PlayerTextDrawShow(playerid, balaoAviso[playerid]);
		return 0;
	}
BPF::UpdateBalaoPCPref(playerid)
	{
		if(PlayerInfo[playerid][pTimerBalao] != -1)
		{
		    PlayerInfo[playerid][pTimerBalao] = -1;
		}
	 	CarregandoPCPref[playerid]++;
	 	new _s[40], string[40];
	 	_s[0] = EOS;
	 	strcat(_s, "~y~Carregando:~n~~w~");
		for(new ve = 0;ve < CarregandoPCPref[playerid]; ve++)
		{
			strcat(_s, "-");
		}
		format(string, sizeof string, " %d0%", CarregandoPCPref[playerid]);
		strcat(_s, string);
	 	if(CarregandoPCPref[playerid] > 10)
	 	{
	 	    if(!PlayerToPoint(1, playerid, 361.9699,169.5079,1025.7890))
    		{
	 	    	return SendClientMessage(playerid, COLOR_GRAD2, "Você precisa estar na maleta para Ler os Arquivos.");
	 	    }
	 	    PlayerTextDrawHide(playerid, balaoAviso[playerid]);
	 	    return VerificadoPCPref(playerid);
	 	}
		return BalaoPCPref(playerid, _s, 3000);
	}
BPF::VerificadoPCPref(playerid)
{
	new fstring[128];
	MEGAString[0] = EOS;
	format(fstring, 128, "corpolistraovotabuaamendointorradagelochavegranainvento\n");
	strcat(MEGAString,fstring);
	format(fstring, 128, "corpolistraovotabuaamendointorradagelochavegranainvento\n");
	strcat(MEGAString,fstring);
	format(fstring, 128, "corpolistraovotabuaamendointorradagelochavegranainvento\n");
	strcat(MEGAString,fstring);
	format(fstring, 128, "corpolistraovotabuaamendointorradagelochavegranainvento\n");
	strcat(MEGAString,fstring);
	format(fstring, 128, "corpolistraovotabuaamendointorradagelochavegranainvento\n");
	strcat(MEGAString,fstring);
	format(fstring, 128, "corpolistraovotabuaamendointorradagelochavegranainvento\n");
	strcat(MEGAString,fstring);
	format(fstring, 128, "corpolistraovotabuaamendointorradagelochavegranainvento\n");
	strcat(MEGAString,fstring);
	format(fstring, 128, "corpolistraovotabuaamendointorradagelochavegranainvento\n");
	strcat(MEGAString,fstring);
	format(fstring, 128, "corpolistraovotabuaamendointorradagelochavegranainvento\n");
	strcat(MEGAString,fstring);
	format(fstring, 128, "corpolistraovotabuaamendointorradagelochavegranainvento\n");
	strcat(MEGAString,fstring);
 	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Documentacao", MEGAString, "OK","");
	SendClientMessage(playerid, COLOR_GRAD2, "Verifique Todas As Linhas.");
	return 1;
}
	CMD:comprarcasa(playerid, params[])
	{
			new Float:oldposx, Float:oldposy, Float:oldposz,gstring[100];
			GetPlayerName(playerid, playername, sizeof(playername));
			GetPlayerPos(playerid, oldposx, oldposy, oldposz);
			for(new h = 0; h < sizeof(HouseInfo); h++)
			{
				if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 0)
				{
					format(gstring, sizeof(gstring), "Casa VIP");
     				if(strcmp(gstring, HouseInfo[h][hDiscription], true) == 0)
					{
					    if(PlayerInfo[playerid][pVIP] < 1)
						{
						    SendClientMessage(playerid, COLOR_GRAD5, "[ERRO] Esta casa é somente para jogadores VIP/S-VIP/Sócios!");
							return true;
						}
					}
					format(gstring, sizeof(gstring), "Mansao");
     				if(strcmp(gstring, HouseInfo[h][hDiscription], true) == 0)
					{
					    if(PlayerInfo[playerid][pVIP] < 6)
						{
						    SendClientMessage(playerid, COLOR_GRAD5, "[ERRO]: Apenas jogadores Sócio Gold/Platina podem possuir uma Mansão !");
							return true;
						}
					}
					format(gstring, sizeof(gstring), "Mansao Diamante");
     				if(strcmp(gstring, HouseInfo[h][hDiscription], true) == 0)
					{
					    if(PlayerInfo[playerid][pVIP] < 7)
						{
						    SendClientMessage(playerid, COLOR_GRAD5, "[ERRO]: Apenas jogadores Sócio Platina podem possuir uma Mansão Platina !");
							return true;
						}
					}
					new string[128];
					if(PlayerInfo[playerid][pLevel] < HouseInfo[h][hLevel] && PlayerInfo[playerid][pVIP] < 2)
					{
						format(string, sizeof(string), "Você precisa ter Nível %d Para comprar!", HouseInfo[h][hLevel]);
						SendClientMessage(playerid, COLOR_GRAD5, string);
						SendClientMessage(playerid, COLOR_WHITE, "Caso não queira esperar, seja jogador VIP Plus!");
						return true;
					}
					if(PlayerInfo[playerid][pPHousekey] != 500 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 0)
					{
						SendClientMessage(playerid, COLOR_WHITE, "Você tem uma casa para vender digite /vendercasa, você receberá o mesmo valor que foi pago!");
						return true;
					}
					if(GetPlayerMoney(playerid) > HouseInfo[h][hValue])
					{
						PlayerInfo[playerid][pPHousekey] = h;
						HouseInfo[h][hOwned] = 1;
					    HouseInfo[h][hRentabil] = 1;
					    HouseInfo[h][hLock] = 0;
					    HouseInfo[h][hRent] = 200;

						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(HouseInfo[h][hOwner], sendername, 0, strlen(sendername), 255);
						GiveDinheiro(playerid,-HouseInfo[h][hValue]);
						PlayerPlayMusic(playerid);
						PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
						GameTextForPlayer(playerid, "~w~Bem vindo em casa~n~Para sair digite /sair", 5000, 3);
						SendClientMessage(playerid, COLOR_WHITE, "Parabéns pela sua nova casa!");
						SendClientMessage(playerid, COLOR_WHITE, "{00BFFF}• {FFFFFF}Lembre-se: Se ficar 10 dias inativo ou +, sua casa é Liberda Automáticamente!");
						SetPlayerInterior(playerid,HouseInfo[h][hInt]);
						SetPlayerVirtualWorld(playerid,HouseInfo[h][hWorld]);
						SetPlayerPos(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
						PlayerInfo[playerid][pInt] = HouseInfo[h][hInt];
						PlayerInfo[playerid][pLocal] = h;
						HouseEntered[playerid] = h;
						SetPlayerVirtualWorld(playerid,HouseInfo[h][hWorld]);
						SendClientMessage(playerid, COLOR_WHITE, "Digite /ajuda Em caso de duvidas!");
						PlayerInfo[playerid][pSpawn] = 0;
						format(string, sizeof(string), "[CASAS]: %s[ID: %d] acaba de comprar a casa ID: %d", NomePlayer(playerid),playerid, h);
						SendClientMessageToAll(0xFFC06CFF, string);
						BPFLogs("casas", string);
					    DateProp(playerid);

						DestroyDynamicMapIcon(HouseInfo[h][hMapIcon]);
						HouseInfo[h][hMapIcon] = CreateDynamicMapIcon(HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 32, 0xE6E6E6E6, -1, -1, -1, 250.0);
						SaveCasa(h);
						Atualizar3Dtexts();
						return true;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "Você não tem dinheiro o suficiente. !");
						return true;
					}
				}
			}
			return true;
	}

	CMD:alugarquarto(playerid, params[])
	{
		new Float:oldposx, Float:oldposy, Float:oldposz;
		GetPlayerName(playerid, playername, sizeof(playername));
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		for(new h = 0; h < sizeof(HouseInfo); h++)
		{
			if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 1 &&  HouseInfo[h][hRentabil] == 1)
			{
				if(PlayerInfo[playerid][pPHousekey] != 500 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 0)
				{
					SendClientMessage(playerid, COLOR_WHITE, "Você tem uma casa, para vender digite /vendercasa, você receberá o mesmo valor que foi pago!");
					return true;
				}
				if(GetPlayerMoney(playerid) > HouseInfo[h][hRent])
				{
					PlayerInfo[playerid][pPhousekey] = h;
					GiveDinheiro(playerid,-HouseInfo[h][hRent]);
					HouseInfo[h][hTakings] = HouseInfo[h][hTakings]+HouseInfo[h][hRent];
					PlayerPlayMusic(playerid);
					SetPlayerInterior(playerid,HouseInfo[h][hInt]);
					HouseEntered[playerid] = h;
					SetPlayerPos(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
                    SaveCasa(h);
                    Atualizar3Dtexts();
					GameTextForPlayer(playerid, "~w~voce alugou esta casa ~n~~b~Para entrar digite /entrar", 5000, 3);
					SendClientMessage(playerid, COLOR_WHITE, "Parabéns pela sua nova casa, você pode entrar nela quando quizer!");
					SendClientMessage(playerid, COLOR_WHITE, "Digite /ajuda Em caso de duvidas!");
					return true;
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "Você não tem dinheiro o suficiente.");
					return true;
				}
			}
		}
		return true;
	}

    CMD:alugaraero(playerid)
	{
        if(IsPlayerConnected(playerid))
		{
			if(IsAAlugHeli(GetPlayerVehicleID(playerid)))
			{
				new hirefee = HireCost(GetPlayerVehicleID(playerid));
				if (GetPlayerMoney (playerid) <  SBizzInfo[18][sbEntranceCost])
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você não tem esse dinheiro !");
					RemovePlayerFromVehicleEx(playerid);
					return 1;
				}
				if(HireCar[playerid] > 0)
				{
					ShowPlayerDialog(playerid, 5025, DIALOG_STYLE_MSGBOX, "Desalugar", "Você já tem uma Aeronave alugada.\nDeseja desaluga-la?", "Sim", "Não");
					return 1;
				}
				for(new i=0; i<MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i))
					{
				    if(HireCar[i] == GetPlayerVehicleID(playerid))
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Alguem já alugou esse veiculo !");
				        Controle(playerid, 1);
				        RemovePlayerFromVehicleEx(playerid);
				        return 1;
				    }
				    }
				}
				if(SBizzInfo[18][sbProducts] == 0)
				{
					GameTextForPlayer(playerid, "~r~falta produtos", 5000, 1);
					//Controle(playerid, 1);
					//RemovePlayerFromVehicleEx(playerid);
					//return 1;
				}
				GiveDinheiro(playerid,-SBizzInfo[15][sbEntranceCost]);
				if(SBizzInfo[18][sbProducts] > 0)
				{
					SBizzInfo[18][sbTill] += SBizzInfo[15][sbEntranceCost];
					ExtortionSBiz(18, SBizzInfo[15][sbEntranceCost]);
					SBizzInfo[18][sbProducts]--;
				}
				new string[128];
				HireCar[playerid] = GetPlayerVehicleID(playerid);
				SaveCasas();
				Atualizar3Dtexts();
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Voce pode ~r~/desalugaraero~n~~g~ou /trancar ~w~ para trancar o heli.",hirefee);
				Controle(playerid, 1);
				format(string, sizeof(string), "• {FFFFFF}Empresa que recebeu pela sua compra: {00BFFF}%s", SBizzInfo[18][sbMessage]);
                SendClientMessage(playerid, 0x00BFFFAA, string);
				GameTextForPlayer(playerid, string, 5000, 3);
				SwitchKey[playerid] = 0;
				return 1;
			}
		}
		return 1;
	}
    CMD:desalugaraero(playerid)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(HireCar[playerid] != 299)
			{
			    new idcar = GetPlayerVehicleID(playerid);
			    if(idcar == HireCar[playerid])
			    {
			        Controle(playerid, 1);
			    }
			    SetVehicleToRespawn(HireCar[playerid]);
				VTrancado[HireCar[playerid]] = 0;
				UnLockCar(HireCar[playerid]);
				HireCar[playerid] = 0;
				GameTextForPlayer(playerid, "~w~Voce desalugou o heli", 5000, 3);
			}
		}
		return 1;
	}
	stock CarroPerto(playerid, Float:range)
	{
		new Float:pdis = 100000.000,
			Float:x, Float:y, Float:z;
		new pcar = -1;
		for (new carid = 0; carid < MAX_VEHICLES; carid++)
		{
		    GetVehiclePos(carid, x, y, z);
		    if(IsPlayerInRangeOfPoint(playerid, range, x, y, z))
		    {
	  			new Float:dist = GetPlayerDistanceFromPoint(playerid, x, y, z);
			    if ((dist < pdis))
				{
			         pdis = dist;
			         pcar = carid;
	   			}
			}
		}
		return pcar;
	}
	CMD:desalugar(playerid, params[])
	{
			if(PlayerInfo[playerid][pPhousekey] != 500)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Você desalugou uma casa, e agora está desabrigado!");
				PlayerInfo[playerid][pPhousekey] = 500;
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não alugou nenhuma casa.");
			}
			return true;
	}

	CMD:cofrecasa(playerid, params[])
	{
			GetPlayerName(playerid, playername, sizeof(playername));
			new borse = PlayerInfo[playerid][pPHousekey];
			if(PlayerInfo[playerid][pPHousekey] != 500 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 0)
			{
			    new cashdeposit;
			    new string[128];
				if(sscanf(params, "d", cashdeposit))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /cofrecasa [retirar quantidade]");
					format(string, sizeof(string), "Você tem R$%d em seu cofre.", HouseInfo[borse][hTakings]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
					return true;
				}
				if (cashdeposit >  HouseInfo[borse][hTakings] || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você não tem tudo isso !");
					return true;
				}
				if (!PlayerToPoint(100, playerid,HouseInfo[borse][hExitx],HouseInfo[borse][hExity],HouseInfo[borse][hExitz]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você está longe de sua casa !");
					return true;
				}
				else
				{
					GiveDinheiro(playerid,cashdeposit);
					HouseInfo[borse][hTakings]=HouseInfo[borse][hTakings]-cashdeposit;
					format(string, sizeof(string), "Você retirou R$%s de seu cofre Total: R$%s ", ConvertMoney(cashdeposit),ConvertMoney(HouseInfo[borse][hTakings]));
					SaveCasa(borse);
					Atualizar3Dtexts();
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return true;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não tem uma casa.");
			}
			return true;
	}
    CMD:admvemp(playerid, params[]) return ForT:avenderempresa(playerid, params);
	CMD:avenderempresa(playerid, params[])
	{
			GetPlayerName(playerid, playername, sizeof(playername));
			new biz;
			if(sscanf(params, "d", biz))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: /avenderempresa [empresa id]");
				return true;
			}
			if (PlayerInfo[playerid][pAdmin] >= 5000)
			{
			    new string[74];
				BizzInfo[biz][bLocked] = 1;
				BizzInfo[biz][bOwned] = 0;
				strmid(BizzInfo[biz][bOwner], "Ninguém", 0, strlen("Ninguém"), 255);
				strmid(BizzInfo[biz][bExtortion], "Ninguém", 0, strlen("Ninguém"), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Voce vendeu a empresa ID:%d", biz);
				GameTextForPlayer(playerid, string, 10000, 3);
				SalvarEmpresa(biz);
				Atualizar3Dtexts();
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não tem permissão para usar esse comando !");
			}
			return true;
	}
    CMD:admvsemp(playerid, params[]) return ForT:avendersempresa(playerid, params);
	CMD:avendersempresa(playerid, params[])
	{
			GetPlayerName(playerid, playername, sizeof(playername));
			new sbiz;
			if(sscanf(params, "d", sbiz))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: /avendersempresa [sempresa id]");
				return true;
			}
			if (PlayerInfo[playerid][pAdmin] >= 5000)
			{
       			if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 3000)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo Admin USE: /trabalhar");
					return true;
				}
    			new string[128];
				SBizzInfo[sbiz][sbLocked] = 1;
				SBizzInfo[sbiz][sbOwned] = 0;
				strmid(SBizzInfo[sbiz][sbOwner], "Ninguém", 0, strlen("Ninguém"), 255);
				strmid(SBizzInfo[sbiz][sbExtortion], "Ninguém", 0, strlen("Ninguém"), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Voce vendeu a empresa ID:%d", sbiz);
				GameTextForPlayer(playerid, string, 10000, 3);
				SalvarSEmpresa(sbiz);
				Atualizar3Dtexts();
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não tem permissão para usar esse comando !");
			}
			return true;
	}
	CMD:admvfaz(playerid, params[]) return ForT:avenderfazenda(playerid, params);
	CMD:avenderfazenda(playerid, params[])
	{
			GetPlayerName(playerid, playername, sizeof(playername));
			new fbiz;
			if(sscanf(params, "d", fbiz))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: /avenderfazenda [fazenda id]");
				return true;
			}
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
       			if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 3000)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo Admin USE: /trabalhar");
					return true;
				}
    			new string[128];
				FBizzInfo[fbiz][fbLocked] = 1;
				FBizzInfo[fbiz][fbOwned] = 0;
				strmid(FBizzInfo[fbiz][fbOwner], "Ninguém", 0, strlen("Ninguém"), 255);
				strmid(FBizzInfo[fbiz][fbExtortion], "Ninguém", 0, strlen("Ninguém"), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Voce vendeu a empresa ID:%d", fbiz);
				GameTextForPlayer(playerid, string, 10000, 3);
				SalvarFEmpresa(fbiz);
				Atualizar3Dtexts();
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não tem permissão para usar esse comando !");
			}
			return true;
	}
    CMD:admvcasa(playerid, params[]) return ForT:avendercasa(playerid, params);
	CMD:avendercasa(playerid, params[])
	{
		    new incasa = 0;
			GetPlayerName(playerid, playername, sizeof(playername));
			if (PlayerInfo[playerid][pAdmin] < 5000)return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando.");
	        for(new House = 0; House < sizeof(HouseInfo); House++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[House][hEntrancex], HouseInfo[House][hEntrancey], HouseInfo[House][hEntrancez]))
				{
				    new string[128];
				    incasa = 1;
					HouseInfo[House][hHel] = 0;
					HouseInfo[House][hArm] = 0;
					HouseInfo[House][hHealthx] = 0;
					HouseInfo[House][hHealthy] = 0;
					HouseInfo[House][hHealthz] = 0;
					HouseInfo[House][hArmorrx] = 0;
					HouseInfo[House][hArmorry] = 0;
					HouseInfo[House][hArmorrz] = 0;
					HouseInfo[House][hLock] = 1;
					HouseInfo[House][hOwned] = 0;
					HouseInfo[House][hVcol1] = -1;
					HouseInfo[House][hVcol2] = -1;
					strmid(HouseInfo[House][hOwner], "O estado", 0, strlen("O estado"), 255);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "~w~Voce vendeu a propriedade ID:%d", House);
					GameTextForPlayer(playerid, string, 10000, 3);
					format(string, sizeof(string), "AdmCmd: Admin %s vendeu a casa ID: %d", PlayerName(playerid), House);
					BPFLogs("casas", string);

					DestroyDynamicMapIcon(HouseInfo[House][hMapIcon]);
					HouseInfo[House][hMapIcon] = CreateDynamicMapIcon(HouseInfo[House][hEntrancex], HouseInfo[House][hEntrancey], HouseInfo[House][hEntrancez], 31, 0xE6E6E6E6, -1, -1, -1, 250.0);

					SaveCasa(House);
					Atualizar3Dtexts();
					return true;
				}
			}
			if (incasa == 0)return SendClientMessage(playerid, COLOR_GRAD1, "Você não está perto de nenhuma casa");
			return true;
	}

	CMD:vendercasa(playerid, params[])
	{
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPHousekey] == 500)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Você não tem casa.");
				return true;
			}
			if(PlayerInfo[playerid][pMarried] > 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Você é casado(a) não pode vender a casa !");
		        return true;
		    }
			if(PlayerInfo[playerid][pPHousekey] != 500 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 0)
			{
			    new string[128];
				new House = PlayerInfo[playerid][pPHousekey];
				HouseInfo[House][hHel] = 0;
				HouseInfo[House][hArm] = 0;
				HouseInfo[House][hHealthx] = 0;
				HouseInfo[House][hHealthy] = 0;
				HouseInfo[House][hHealthz] = 0;
				HouseInfo[House][hArmorrx] = 0;
				HouseInfo[House][hArmorry] = 0;
				HouseInfo[House][hArmorrz] = 0;
				HouseInfo[House][hLock] = 1;
				HouseInfo[House][hOwned] = 0;
				HouseInfo[House][hVcol1] = -1;
				HouseInfo[House][hVcol2] = -1;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(HouseInfo[House][hOwner], "O estado", 0, strlen("O estado"), 255);
				GiveDinheiro(playerid,HouseInfo[House][hValue]);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Parabens~n~ Voce vendeu a casa por ~n~~g~R$%s", ConvertMoney(HouseInfo[House][hValue]));
				GameTextForPlayer(playerid, string, 10000, 3);
				format(string, sizeof(string), "[CASAS]: %s[ID: %d] acaba de vender a casa ID: %d", NomePlayer(playerid),playerid, House);
				SendClientMessageToAll(0xFFC06CFF, string);
				BPFLogs("casas", string);
				PlayerInfo[playerid][pPHousekey] = 500;
				if(PlayerInfo[playerid][pLocal] == House)
				{
					SetPlayerInterior(playerid,0);

					SetPlayerPos(playerid,HouseInfo[House][hEntrancex],HouseInfo[House][hEntrancey],HouseInfo[House][hEntrancez]);
					PlayerInfo[playerid][pInt] = 0;
				}

				DestroyDynamicMapIcon(HouseInfo[House][hMapIcon]);
				HouseInfo[House][hMapIcon] = CreateDynamicMapIcon(HouseInfo[House][hEntrancex], HouseInfo[House][hEntrancey], HouseInfo[House][hEntrancez], 31, 0xE6E6E6E6, -1, -1, -1, 250.0);
				SaveCasa(House);
				Atualizar3Dtexts();
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não tem casa.");
			}
			return true;
	}
    CMD:vendercasa66656(playerid, params[])
	{
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPHousekey] == 500)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Você não tem casa.");
				return true;
			}
			if(PlayerInfo[playerid][pMarried] > 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Você é casado(a) não pode vender a casa !");
		        return true;
		    }
			if(PlayerInfo[playerid][pPHousekey] != 500 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 0)
			{
			    new string[128];
				new House = PlayerInfo[playerid][pPHousekey];
				HouseInfo[House][hHel] = 0;
				HouseInfo[House][hArm] = 0;
				HouseInfo[House][hHealthx] = 0;
				HouseInfo[House][hHealthy] = 0;
				HouseInfo[House][hHealthz] = 0;
				HouseInfo[House][hArmorrx] = 0;
				HouseInfo[House][hArmorry] = 0;
				HouseInfo[House][hArmorrz] = 0;
				HouseInfo[House][hLock] = 1;
				HouseInfo[House][hOwned] = 0;
				HouseInfo[House][hVcol1] = -1;
				HouseInfo[House][hVcol2] = -1;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(HouseInfo[House][hOwner], "O estado", 0, strlen("O estado"), 255);
				GiveDinheiro(playerid,HouseInfo[House][hValue]);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Parabens~n~ Voce vendeu a casa por ~n~~g~R$%s", ConvertMoney(HouseInfo[House][hValue]));
				GameTextForPlayer(playerid, string, 10000, 3);
                format(string, sizeof(string), "[CASAS]: %s[ID: %d] acaba de vender a casa ID: %d", NomePlayer(playerid),playerid, House);
				SendClientMessageToAll(0xFFC06CFF, string);
				BPFLogs("casas", string);
				PlayerInfo[playerid][pPHousekey] = 500;
				if(PlayerInfo[playerid][pLocal] == House)
				{
					SetPlayerInterior(playerid,0);

					SetPlayerPos(playerid,HouseInfo[House][hEntrancex],HouseInfo[House][hEntrancey],HouseInfo[House][hEntrancez]);
					PlayerInfo[playerid][pInt] = 0;
				}

				DestroyDynamicMapIcon(HouseInfo[House][hMapIcon]);
				HouseInfo[House][hMapIcon] = CreateDynamicMapIcon(HouseInfo[House][hEntrancex], HouseInfo[House][hEntrancey], HouseInfo[House][hEntrancez], 31, 0xE6E6E6E6, -1, -1, -1, 250.0);
				SaveCasa(House);
				Atualizar3Dtexts();
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não tem casa.");
			}
			return true;
	}
	CMD:incendio(playerid)
	{

	    if(!IsAMember(playerid))
		    return SendClientMessage(playerid, COLOR_GREY, "Você não pode criar um incêndio.");

		if(!PlayerInfo[playerid][pGalao])
			return SendClientMessage(playerid, COLOR_GRAD1, "Você não possui um Galão de Gasolina, compre em um Mercado 24/7 (use: /gps » Propriedades).");

		if(!PlayerInfo[playerid][pIsqueiro])
			return SendClientMessage(playerid, COLOR_GRAD1, "Você não possui um Isqueiro, compre em um Mercado 24/7 (use: /gps » Propriedades).");

		if(IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode estar dentro de um carro!");

		if(IsPlayerInRC(playerid))
			return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode criar um incêndio em areas neutras!");

        if(PlayerInfo[playerid][pLevel] < 10)
			return SendClientMessage(playerid, COLOR_GRAD1, "Você precisa ser lvl 10+ para Criar um Incêndio.");

		if(gettime() < timeinc)
			return SendClientMessage(playerid, COLOR_GRAD1, " Espere 2 minutos após alguem ter criado um incêndio!");

	    new Str[128];
	    new Float:x, Float:y, Float:z;
	    GetPlayerPos(playerid, x, y, z);

        ApplyAnimation(playerid,"BOMBER","BOM_Plant_2Idle",4.1,0,1,1,0,0);

		if(GetPlayerInterior(playerid) == 0)
			format(Str, sizeof(Str), "[INCÊNDIO]: Acaba de iniciar um incêndio de pequena proporção em %s.", GetPoint2DZone(x, y, z));
		else
			format(Str, sizeof(Str), "[INCÊNDIO]: Acaba de iniciar um incêndio de pequena proporção em Algum Interior.");

		SendClientMessageToAll(0xF05353FF, Str);
		format(Str, sizeof Str, " - Suspeita-se que o incêndio foi iniciado por: %s[ID: %d].", NomePlayer(playerid), playerid);
        SendClientMessageToAll(0xF05353FF, Str);

		timeinc = gettime()+120;//2 Minutos pra criar outro incêndio

        SetPlayerCriminal(playerid,155,"Incendiando");

        PlayerInfo[playerid][pGalao] = false;

		SendClientMessage(playerid, COLOR_LIGHTBLUE, " Saia de perto, este local irá pegar fogo em 5 segundos!");

		SetTimerEx("TacarFogo", 5000, 0, "dfff", playerid, x, y, z);
		return 1;
	}

	BPF::TacarFogo(playerid, Float:fogox, Float:fogoy, Float:fogoz)
	{
	    AddFire(fogox, fogoy, fogoz);

	    for(new i; i < 4; i++)
	    {
	        AddFire(fogox+random(5), fogoy-random(6), fogoz);
	    }

	    SendClientMessage(playerid, COLOR_LIGHTRED, " » O Incêndio foi iniciado!");
	    return 1;
	}
		BPF::RouboMercadoNegro(playerid)
{
	KillTimer(tempomerc);
	if(!IsACop(playerid))
	if(!PlayerToPoint(8.0,playerid,957.7492,2096.6238,1011.0220))
    {
        new gstring[200];
        format(gstring, sizeof(gstring), "[Roubo %s] {FFFFFF}%s[%d]: Não Conseguiram roubar o cofre do Mercado Negro!", NomeORG(playerid), PlayerName(playerid) , playerid);
        SendClientMessageToAll(GetPlayerColor(playerid), gstring);
       	RemovePlayerAttachedObject(playerid,4);
        SendClientMessage(playerid, COLOR_GREY, "Você não está no cofre do Mercado Negro.");
        Provocomerc[playerid] = 0; roubando[playerid] = 0; roubomerc = 0; KillTimer(tempomerc); temporoubomerc = 0;
        ClearAnimations(playerid);
        KillTimer(TempoContagem[playerid]);
        return 1;
    }
	ForPlayers(i)
	{
		if(PlayerToPoint(10.0,i,957.7492,2096.6238,1011.0220))
		if(!IsACop(playerid))
		{
			if(Provocomerc[playerid] == 1)
            {
                new gstring[200];
                format(gstring, sizeof(gstring), "[Roubo %s] {FFFFFF}%s[%d]: Conseguiram roubar o cofre do Mercado Negro!", NomeORG(playerid), PlayerName(playerid) , playerid);
                SendClientMessageToAll(GetPlayerColor(playerid), gstring);
            	roubando[playerid] = 0; roubomerc = 0; Provocomerc[playerid] = 0;
            	RemovePlayerAttachedObject(playerid,4);
            	ClearAnimations(playerid);
            	KillTimer(TempoContagem[playerid]);
			}
			if(!IsACop(i))
			{
                new gstring[200];
                new Dinheiromerc = 95000 + random(10000);
                GivePlayerMoney(i, Dinheiromerc);
				SetPlayerCriminal(i,255, "Roubo o Mercado Negro");
				format(gstring, sizeof(gstring), "Você e os %s roubaram R$[%d] do cofre do Mercado Negro e Ganhou [1] de respeito!",NomeORG(playerid), Dinheiromerc);
            	SendClientMessage(i, COLOR_YELLOW, gstring);
            	ClearAnimations(i);
            	PlayerInfo[i][pExp] += 1;
            	RemovePlayerAttachedObject(i,4);
			}
		}
	}
	return 1;
}
	BPF::RouboIlhaPirata(playerid)
{
	KillTimer(tempoilha);
	if(!IsACop(playerid))
	if(!PlayerToPoint(8.0,playerid,2230.7861,1596.8997,999.9646))
    {
        new gstring[200];
        format(gstring, sizeof(gstring), "[Roubo %s] {FFFFFF}%s[%d]: Não Conseguiram roubar o cofre do Mercado 24/7!", NomeORG(playerid), PlayerName(playerid) , playerid);
        SendClientMessageToAll(GetPlayerColor(playerid), gstring);
       	RemovePlayerAttachedObject(playerid,4);
        SendClientMessage(playerid, COLOR_GREY, "Você não está no cofre do Mercado 24/7.");
        Provocoilha[playerid] = 0; roubando[playerid] = 0; rouboilha = 0; KillTimer(tempoilha); temporouboilha = 0;
        ClearAnimations(playerid);
        KillTimer(TempoContagem[playerid]);
        return 1;
    }
	ForPlayers(i)
	{
		if(PlayerToPoint(10.0,i,2230.7861,1596.8997,999.9646))
		if(!IsACop(playerid))
		{
			if(Provocoilha[playerid] == 1)
            {
                new gstring[200];
                format(gstring, sizeof(gstring), "[Roubo %s] {FFFFFF}%s[%d]: Conseguiram roubar o cofre do Mercado 24/7!", NomeORG(playerid), PlayerName(playerid) , playerid);
                SendClientMessageToAll(GetPlayerColor(playerid), gstring);
            	roubando[playerid] = 0; rouboilha = 0; Provocoilha[playerid] = 0;
            	RemovePlayerAttachedObject(playerid,4);
            	ClearAnimations(playerid);
            	KillTimer(TempoContagem[playerid]);
			}
			if(!IsACop(i))
			{
                new gstring[200];
                new Dinheiroilha = 95000 + random(10000);
                GivePlayerMoney(i, Dinheiroilha);
				SetPlayerCriminal(i,255, "Roubo o Mercado 24/7");
				format(gstring, sizeof(gstring), "Você e os %s roubaram R$[%d] do cofre do Mercado 24/7 e Ganhou [1] de respeito!",NomeORG(playerid), Dinheiroilha);
            	SendClientMessage(i, COLOR_YELLOW, gstring);
            	ClearAnimations(i);
            	PlayerInfo[i][pExp] += 1;
            	RemovePlayerAttachedObject(i,4);
			}
		}
	}
	return 1;
}
		BPF::RouboMotel(playerid)
{
	KillTimer(tempomotel);
	if(!IsACop(playerid))
	if(!PlayerToPoint(8.0,playerid,293.1318,-57.6038,1001.5156))
    {
        new gstring[200];
        format(gstring, sizeof(gstring), "[Roubo %s] {FFFFFF}%s[%d]: Não Conseguiram roubar o cofre da Ammu Nation!", NomeORG(playerid), PlayerName(playerid) , playerid);
        SendClientMessageToAll(GetPlayerColor(playerid), gstring);
       	RemovePlayerAttachedObject(playerid,4);
        SendClientMessage(playerid, COLOR_GREY, "Você não está na Ammu Nation.");
        ProvocoMotel[playerid] = 0; roubando[playerid] = 0; roubomotel = 0; KillTimer(tempomotel); temporoubomotel = 0;
        ClearAnimations(playerid);
        KillTimer(TempoContagem[playerid]);
        return 1;
    }
	ForPlayers(i)
	{
		if(PlayerToPoint(8.0,i,293.1318,-57.6038,1001.5156))
		if(!IsACop(playerid))
		{
			if(ProvocoMotel[playerid] == 1)
            {
			    new gstring[200];
                format(gstring, sizeof(gstring), "[Roubo %s] {FFFFFF}%s[%d]: Conseguiram roubar o cofre da Ammu Nation!", NomeORG(playerid), PlayerName(playerid) , playerid);
                SendClientMessageToAll(GetPlayerColor(playerid), gstring);
            	roubando[playerid] = 0; roubomotel = 0; ProvocoMotel[playerid] = 0;
            	RemovePlayerAttachedObject(playerid,4);
            	KillTimer(TempoContagem[playerid]);
			}
			if(!IsACop(i))
			{
                new gstring[200];
                new DinheiroMotel = 30000 + random(10000);
                GivePlayerMoney(i, DinheiroMotel);
				SetPlayerCriminal(i,255, "Roubo ao Ammu Nation");
				format(gstring, sizeof(gstring), "Você e os %s roubaram R$[%d] do cofre da Ammu Nation e Ganhou [1] de respeito!",NomeORG(playerid), DinheiroMotel);
            	SendClientMessage(i, COLOR_YELLOW, gstring);
            	ClearAnimations(i);
            	PlayerInfo[i][pExp] += 1;
            	RemovePlayerAttachedObject(i,4);
            	rouboportas[playerid] = SetTimerEx("RouboPortas", 20000, 0, "i", playerid);
			}
		}
	}
	return 1;
}
	BPF::RouboPut(playerid)
{
	KillTimer(tempoput);
	if(!IsACop(playerid))
	if(!PlayerToPoint(8.0,playerid,2172.2217,1602.1212,999.9678))
    {
        new gstring[200];
        format(gstring, sizeof(gstring), "[Roubo %s] {FFFFFF}%s[%d]: Não Conseguiram roubar o cofre do Centro de Licenças!", NomeORG(playerid), PlayerName(playerid) , playerid);
        SendClientMessageToAll(GetPlayerColor(playerid), gstring);
       	RemovePlayerAttachedObject(playerid,4);
        SendClientMessage(playerid, COLOR_GREY, "Você não está no Centro de Licenças.");
        ProvocoPut[playerid] = 0; roubando[playerid] = 0; rouboput = 0; KillTimer(tempoput); temporouboput = 0;
        ClearAnimations(playerid);
        KillTimer(TempoContagem[playerid]);
        return 1;
    }
	ForPlayers(i)
	{
		if(PlayerToPoint(8.0,i,2172.2217,1602.1212,999.9678))
		if(!IsACop(playerid))
		{
			if(ProvocoPut[playerid] == 1)
            {
                new gstring[200];
                format(gstring, sizeof(gstring), "[Roubo %s] {FFFFFF}%s[%d]: Conseguiram roubar o cofre do Centro de Licenças!", NomeORG(playerid), PlayerName(playerid) , playerid);
                SendClientMessageToAll(GetPlayerColor(playerid), gstring);
            	roubando[playerid] = 0; rouboput = 0; ProvocoPut[playerid] = 0;
            	RemovePlayerAttachedObject(playerid,4);
            	KillTimer(TempoContagem[playerid]);
			}
			if(!IsACop(i))
			{
                new gstring[200];
                new DinheiroPut = 30000 + random(10000);
                GivePlayerMoney(i, DinheiroPut);
				SetPlayerCriminal(i,255, "Roubo ao Centro de Licenças");
				format(gstring, sizeof(gstring), "Você e os %s roubaram R$[%d] do cofre do Centro de Licenças e Ganhou [1] de respeito!",NomeORG(playerid), DinheiroPut);
            	SendClientMessage(i, COLOR_YELLOW, gstring);
            	ClearAnimations(i);
            	PlayerInfo[i][pExp] += 1;
            	RemovePlayerAttachedObject(i,4);
			}
		}
	}
	return 1;
}
		BPF::RouboNavio(playerid)
{
	KillTimer(temponavio);
	if(!IsACop(playerid))
	if(!PlayerToPoint(8.0,playerid,-1434.8153,1479.9121,1.8672))
    {
        new gstring[200];
        format(gstring, sizeof(gstring), "[Roubo %s] {FFFFFF}%s[%d]: Não Conseguiram roubar o cofre do navio!", NomeORG(playerid), PlayerName(playerid) , playerid);
        SendClientMessageToAll(GetPlayerColor(playerid), gstring);
       	RemovePlayerAttachedObject(playerid,4);
        SendClientMessage(playerid, COLOR_GREY, "Você não está no cofre do navio.");
        Provoconavio[playerid] = 0; roubando[playerid] = 0; roubonavio = 0; KillTimer(temponavio); temporoubonavio = 0;
        ClearAnimations(playerid);
        KillTimer(TempoContagem[playerid]);
        return 1;
    }
	ForPlayers(i)
	{
		if(PlayerToPoint(10.0,i,-1434.8153,1479.9121,1.8672))
		if(!IsACop(playerid))
		{
			if(Provoconavio[playerid] == 1)
            {
                new gstring[200];
                format(gstring, sizeof(gstring), "[Roubo %s] {FFFFFF}%s[%d]: Conseguiram roubar o cofre do navio!", NomeORG(playerid), PlayerName(playerid) , playerid);
                SendClientMessageToAll(GetPlayerColor(playerid), gstring);
            	roubando[playerid] = 0; roubonavio = 0; Provoconavio[playerid] = 0;
            	RemovePlayerAttachedObject(playerid,4);
            	ClearAnimations(playerid);
            	KillTimer(TempoContagem[playerid]);
			}
			if(!IsACop(i))
			{
                new gstring[200];
                new Dinheironavio = 95000 + random(10000);
                GivePlayerMoney(i, Dinheironavio);
				SetPlayerCriminal(i,255, "Roubo ao Navio");
				format(gstring, sizeof(gstring), "Você e os %s roubaram R$[%d] do cofre do Navio e Ganhou [1] de respeito!",NomeORG(playerid), Dinheironavio);
            	SendClientMessage(i, COLOR_YELLOW, gstring);
            	ClearAnimations(i);
            	PlayerInfo[i][pExp] += 1;
            	AbrirPortaNavio[playerid] = 1;
            	MoveObject(portanavio2,-1383, 1494.1, 4.6, 20.0);
	            rouboportas[playerid] = SetTimerEx("RouboPortas", 20000, 0, "i", playerid);
            	RemovePlayerAttachedObject(i,4);
			}
		}
	}
	return 1;
}
	BPF::RouboLoja1(playerid)
{
	KillTimer(tempoloja1);
	if(!IsACop(playerid))
	if(!PlayerToPoint(8.0,playerid,303.1141,-168.5879,999.5938))
    {
        new gstring[200];
        format(gstring, sizeof(gstring), "[Roubo %s] {FFFFFF}%s[%d]: Não Conseguiram roubar o cofre da Loja de Armas 1!", NomeORG(playerid), PlayerName(playerid) , playerid);
        SendClientMessageToAll(GetPlayerColor(playerid), gstring);
        SendClientMessage(playerid, COLOR_GREY, "Você não está na Loja de Armas 1.");
        RemovePlayerAttachedObject(playerid,4);
        ProvocoLoja1[playerid] = 0; roubando[playerid] = 0; rouboloja1 = 0; KillTimer(tempoloja1); temporouboloja1 = 0;
        ClearAnimations(playerid);
        KillTimer(TempoContagem[playerid]);
        return 1;
    }
	ForPlayers(i)
	{
		if(PlayerToPoint(8.0,i,303.1141,-168.5879,999.5938))
		if(!IsACop(playerid))
		{
			if(ProvocoLoja1[playerid] == 1)
            {
                new gstring[200];
                format(gstring, sizeof(gstring), "[Roubo %s] {FFFFFF}%s[%d]: Conseguiram roubar o cofre da Loja de Armas 1!", NomeORG(playerid), PlayerName(playerid) , playerid);
                SendClientMessageToAll(GetPlayerColor(playerid), gstring);
           	 	roubando[playerid] = 0; rouboloja1 = 0; ProvocoLoja1[playerid] = 0;
           	 	RemovePlayerAttachedObject(playerid,4);
           	 	KillTimer(TempoContagem[playerid]);
			}
			if(!IsACop(i))
			{
		    	new gstring[200];
                new DinheiroArmas = 35000 + random(10000);
                GivePlayerMoney(i, DinheiroArmas);
				SetPlayerCriminal(i, 255, "Roubo a Loja de Armas 1");
				format(gstring, sizeof(gstring), "Você e os %s roubaram R$[%d] do cofre da Loja de Armas 1 e Ganhou [1] de respeito!",NomeORG(playerid), DinheiroArmas);
            	SendClientMessage(i, COLOR_YELLOW, gstring);
            	ClearAnimations(i);
            	PlayerInfo[i][pExp] += 1;
            	RemovePlayerAttachedObject(playerid,4);
            	RemovePlayerAttachedObject(i,4);
			}
		}
	}
	return 1;
}
	BPF::RouboLot(playerid)
    {
	KillTimer(tempolot);
	if(!IsACop(playerid))
	if(!PlayerToPoint(8.0,playerid,2150.8096,1619.9636,1000.9688))
    {
        new gstring[200];
        format(gstring, sizeof(gstring), "[Roubo %s] {FFFFFF}%s[%d]: Não Conseguiram roubar o cofre da Lotérica LS!", NomeORG(playerid), PlayerName(playerid) , playerid);
        SendClientMessageToAll(GetPlayerColor(playerid), gstring);
       	RemovePlayerAttachedObject(playerid,4);
        SendClientMessage(playerid, COLOR_GREY, "Você não está no cofre da Lotérica.");
        ProvocoLot[playerid] = 0; roubando[playerid] = 0; roubolot = 0; KillTimer(tempolot); temporoubolot = 0;
        ClearAnimations(playerid);
        KillTimer(TempoContagem[playerid]);
        return 1;
    }
	ForPlayers(i)
	{
		if(PlayerToPoint(5.0,i,2150.8096,1619.9636,1000.9688))
		if(!IsACop(playerid))
		{
			if(ProvocoLot[playerid] == 1)
            {
                new gstring[200];
                format(gstring, sizeof(gstring), "[Roubo %s] {FFFFFF}%s[%d]: Conseguiram roubar o cofre da Lotérica LS!", NomeORG(playerid), PlayerName(playerid) , playerid);
                SendClientMessageToAll(GetPlayerColor(playerid), gstring);
            	roubando[playerid] = 0; roubolot = 0; ProvocoLot[playerid] = 0;
            	RemovePlayerAttachedObject(playerid,4);
            	KillTimer(TempoContagem[playerid]);
			}
			if(!IsACop(i))
			{
		    	new gstring[200];
                new DinheiroLot = 30000 + random(10000);
                GivePlayerMoney(i, DinheiroLot);
				SetPlayerCriminal(i,255, "Roubo a Lotérica");
				format(gstring, sizeof(gstring), "Você e os %s roubaram R$[%d] do cofre da Lotérica LS e Ganhou [1] de respeito!",NomeORG(playerid), DinheiroLot);
            	SendClientMessage(i, COLOR_YELLOW, gstring);
            	ClearAnimations(i);
            	PlayerInfo[i][pExp] += 1;
            	RemovePlayerAttachedObject(i,4);
			}
		}
	}
	return 1;
}
	BPF::RouboBanco(playerid)
{
	KillTimer(tempobanco);
	if(!IsACop(playerid))
	if(!PlayerToPoint(8.0,playerid,2144.1604,1641.3688,993.5761))
    {
       	new gstring[200];
        format(gstring, sizeof(gstring), "[Roubo %s] {FFFFFF}%s[%d]: Não Conseguiram roubar o cofre do Banco LS!", NomeORG(playerid), PlayerName(playerid) , playerid);
        SendClientMessageToAll(GetPlayerColor(playerid), gstring);
       	RemovePlayerAttachedObject(playerid,4);
        SendClientMessage(playerid, COLOR_GREY, "Você não está no cofre do banco.");
        ProvocoBanco[playerid] = 0; roubando[playerid] = 0; roubobanco = 0; KillTimer(tempobanco); temporoubobanco = 0;
        ClearAnimations(playerid);
        KillTimer(TempoContagem[playerid]);
        return 1;
    }
	ForPlayers(i)
	{
		if(PlayerToPoint(10.0,i,2144.1604,1641.3688,993.5761))
		if(!IsACop(playerid))
		{
			if(ProvocoBanco[playerid] == 1)
            {
       	        new gstring[200];
                format(gstring, sizeof(gstring), "[Roubo %s] {FFFFFF}%s[%d]: Conseguiram roubar o cofre do Banco LS!", NomeORG(playerid), PlayerName(playerid) , playerid);
                SendClientMessageToAll(GetPlayerColor(playerid), gstring);
            	roubando[playerid] = 0; roubobanco = 0; ProvocoBanco[playerid] = 0;
            	RemovePlayerAttachedObject(playerid,4);
            	ClearAnimations(playerid);
            	KillTimer(TempoContagem[playerid]);
			}
			if(!IsACop(i))
			{
                new gstring[200];
                new DinheiroBanco = 45000 + random(10000);
                GivePlayerMoney(i, DinheiroBanco);
				SetPlayerCriminal(i,255, "Roubo ao Banco");
				format(gstring, sizeof(gstring), "Você e os %s roubaram R$[%d] do cofre do Banco LS e Ganhou [1] de respeito!",NomeORG(playerid), DinheiroBanco);
            	SendClientMessage(i, COLOR_YELLOW, gstring);
            	ClearAnimations(i);
            	PlayerInfo[i][pExp] += 1;
            	MoveObject(portabanco, 2144.2, 1627.1, 994.29999,20.0);
            	AbrirPortaBanco[playerid] = 1;
            	RemovePlayerAttachedObject(i,4);
            	rouboportas[playerid] = SetTimerEx("RouboPortas", 20000, 0, "i", playerid);
			}
		}
	}
	return 1;
}
	CMD:mv(playerid, params[])
	{
			new House = PlayerInfo[playerid][pPHousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (House != 500 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 0)
			{
			    new item;
				if(sscanf(params, "d", item))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USE: /moveis [Numero do iten]");
					SendClientMessage(playerid, COLOR_WHITE, "|______________[ Moveis da casa ]______________|");
					SendClientMessage(playerid, COLOR_GRAD2, "| 1: Vida  R$50.000");
					SendClientMessage(playerid, COLOR_GRAD3, "| 2: Colete R$100.000");
					return true;
				}
				switch (item)
				{
					case 1:
					{
						if(GetPlayerMoney(playerid) < 100)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "Você não tem R$100!");
							return true;
						}
						HouseInfo[House][hHel] = 1;
						GiveDinheiro(playerid,-100);
						SBizzInfo[6][sbTill] += 100;//vida buisness
						ExtortionSBiz(6, 100);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD5, "Sua gora tem upgrade de vida, Digite /vida.");
					}
					case 2:
					{
					    if(!IsACop(playerid))
					    {
							SendClientMessage(playerid, COLOR_GREY, "Você não pode comprar isso, você não é um policial !");
							return true;
					    }
						if(GetPlayerMoney(playerid) < 300)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "Você não tem R$300!");
							return true;
						}
						HouseInfo[House][hArm] = 1;
						GiveDinheiro(playerid,-300);
						SBizzInfo[6][sbTill] += 300;//vida buisness
						ExtortionSBiz(6, 300);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD5, "Sua casa agora tem upgrade de colete, Digite /vida.");
					}
					default:
					{
						SendClientMessage(playerid, COLOR_GREY, "Número de móvel desconhecido.");
					}
				}
				SaveCasa(House);
				Atualizar3Dtexts();
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Você nao tem uma casa");
			}
			return true;
	}

	CMD:aluguel(playerid, params[])
	{
			new borse = PlayerInfo[playerid][pPHousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (borse != 500 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 0)
			{
			    new alug;
				if(sscanf(params, "d", alug))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /aluguel [Preço]");
					return true;
				}
				if(alug < 1 || alug > 900)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Preço Mínimo R$1, Maximo R$900.");
					return true;
				}
    			new string[128];
				HouseInfo[borse][hRent] = alug;
				SaveCasa(borse);
				Atualizar3Dtexts();
				format(string, sizeof(string), "Aluguel definido para: R$%d", HouseInfo[borse][hRent]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Você nao tem uma casa");
			}
			return true;
	}

	CMD:despejartodos(playerid, params[])
	{
			new borse = PlayerInfo[playerid][pPHousekey];
			if (borse != 500 && strcmp(NomePlayer(playerid), HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 0)
			{
				foreach(Player, i)
				{
					if(i != playerid)
					{
						if (PlayerInfo[i][pPHousekey] == PlayerInfo[playerid][pPHousekey] )
						{
							SendClientMessage(i, COLOR_WHITE, "Você foi despejado de sua casa.");
							PlayerInfo[i][pPHousekey] = 500;
						}
					}
				}
				SendClientMessage(playerid, COLOR_WHITE, "Você expulsou todos de sua casa.");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você não é dono de uma casa !");
				return true;
			}
			return true;
	}
	CMD:alugarcarro(playerid)
	{
        if(IsPlayerConnected(playerid))
		{
            new string[200];
			if(AluguelCarros1(GetPlayerVehicleID(playerid)))//Aluguel 1
		    {
				new hirefee = HireCost(GetPlayerVehicleID(playerid));
                if (GetPlayerMoney (playerid) <  SBizzInfo[15][sbEntranceCost])
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você não tem esse dinheiro !");
					return 1;
				}
				if(HireCar[playerid] > 0)
				{
					gCarLock[HireCar[playerid]] = 0;
					UnLockCar(HireCar[playerid]);
					SendClientMessage(playerid, COLOR_GREY, "Você tem que desalugar o outro veiculo ! (/desalugarcarro)");
					return 1;
				}
				for(new i=0; i<MAX_PLAYERS; i++)
				{
				    if(HireCar[i] == GetPlayerVehicleID(playerid))
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Alguem já alugou esse veiculo !");
				        return 1;
				    }
				}
                GivePlayerMoney(playerid,-SBizzInfo[15][sbEntranceCost]);
				SBizzInfo[15][sbTill] += SBizzInfo[15][sbEntranceCost];
				ExtortionSBiz(15, SBizzInfo[15][sbEntranceCost]);
				HireCar[playerid] = GetPlayerVehicleID(playerid);
                PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                format(string, sizeof(string), "~w~Carro Alugado!~n~~r~/desalugarcarro = desalugar~n~~g~/trancar = trancar ou abrir",hirefee);
                TogglePlayerControllable(playerid, 1);
				GameTextForPlayer(playerid, string, 5000, 3);
				return 1;
			}
			else if(AluguelCarros2(GetPlayerVehicleID(playerid)))//Aluguel 2
		    {
				new hirefee = HireCost(GetPlayerVehicleID(playerid));
				if (GetPlayerMoney (playerid) <  SBizzInfo[15][sbEntranceCost])
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você não tem esse dinheiro !");
					return 1;
				}
				if(HireCar[playerid] > 0)
				{
					gCarLock[HireCar[playerid]] = 0;
					UnLockCar(HireCar[playerid]);
					SendClientMessage(playerid, COLOR_GREY, "Você tem que desalugar o outro veiculo ! (/desalugarcarro)");
					return 1;
				}
				for(new i=0; i<MAX_PLAYERS; i++)
				{
				    if(HireCar[i] == GetPlayerVehicleID(playerid))
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Alguem já alugou esse veiculo !");
				        return 1;
				    }
				}
				GivePlayerMoney(playerid,-SBizzInfo[15][sbEntranceCost]);
				SBizzInfo[15][sbTill] += SBizzInfo[15][sbEntranceCost];
				ExtortionSBiz(15, SBizzInfo[15][sbEntranceCost]);
				HireCar[playerid] = GetPlayerVehicleID(playerid);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Carro Alugado!~n~~r~/desalugarcarro = desalugar~n~~g~/trancar = trancar ou abrir",hirefee);
				TogglePlayerControllable(playerid, 1);
				GameTextForPlayer(playerid, string, 5000, 3);
				return 1;
			}
			else if(AluguelCarros3(GetPlayerVehicleID(playerid)))// Aluguel 3
		    {
				new hirefee = HireCost(GetPlayerVehicleID(playerid));
				if (GetPlayerMoney (playerid) <  SBizzInfo[15][sbEntranceCost])
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você não tem esse dinheiro !");
					return 1;
				}
				if(HireCar[playerid] > 0)
				{
					gCarLock[HireCar[playerid]] = 0;
					UnLockCar(HireCar[playerid]);
					SendClientMessage(playerid, COLOR_GREY, "Você tem que desalugar o outro veiculo ! (/desalugarcarro)");
					return 1;
				}
				for(new i=0; i<MAX_PLAYERS; i++)
				{
				    if(HireCar[i] == GetPlayerVehicleID(playerid))
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Alguem já alugou esse veiculo !");
				        return 1;
				    }
				}
				GivePlayerMoney(playerid,-SBizzInfo[15][sbEntranceCost]);
				SBizzInfo[15][sbTill] += SBizzInfo[15][sbEntranceCost];
				ExtortionSBiz(15, SBizzInfo[15][sbEntranceCost]);
				HireCar[playerid] = GetPlayerVehicleID(playerid);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Carro Alugado!~n~~r~/desalugarcarro = desalugar~n~~g~/trancar = trancar ou abrir",hirefee);
				TogglePlayerControllable(playerid, 1);
				GameTextForPlayer(playerid, string, 5000, 3);
				return 1;
			}
			else if(AluguelCarros4(GetPlayerVehicleID(playerid)))// Aluguel 4 LV
		    {
				new hirefee = HireCost(GetPlayerVehicleID(playerid));
				if (GetPlayerMoney (playerid) <  SBizzInfo[15][sbEntranceCost])
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você não tem esse dinheiro !");
					return 1;
				}
				if(HireCar[playerid] > 0)
				{
					gCarLock[HireCar[playerid]] = 0;
					UnLockCar(HireCar[playerid]);
					SendClientMessage(playerid, COLOR_GREY, "Você tem que desalugar o outro veiculo ! (/desalugarcarro)");
					return 1;
				}
				for(new i=0; i<MAX_PLAYERS; i++)
				{
				    if(HireCar[i] == GetPlayerVehicleID(playerid))
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Alguem já alugou esse veiculo !");
				        return 1;
				    }
				}
				GivePlayerMoney(playerid,-SBizzInfo[15][sbEntranceCost]);
				SBizzInfo[15][sbTill] += SBizzInfo[15][sbEntranceCost];
				ExtortionSBiz(15, SBizzInfo[15][sbEntranceCost]);
				HireCar[playerid] = GetPlayerVehicleID(playerid);
				SaveCasas();
				Atualizar3Dtexts();
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Carro Alugado!~n~~r~/desalugarcarro = desalugar~n~~g~/trancar = trancar ou abrir",hirefee);
				TogglePlayerControllable(playerid, 1);
				GameTextForPlayer(playerid, string, 5000, 3);
				return 1;
			}
			else if(AeroAluguel(GetPlayerVehicleID(playerid)))//Aluguel Aeros
		    {
				new hirefee = HireCost(GetPlayerVehicleID(playerid));
				if (GetPlayerMoney (playerid) <  SBizzInfo[15][sbEntranceCost])
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você não tem esse dinheiro !");
					return 1;
				}
				if(HireCar[playerid] > 0)
				{
					gCarLock[HireCar[playerid]] = 0;
					UnLockCar(HireCar[playerid]);
					SendClientMessage(playerid, COLOR_GREY, "Você tem que desalugar o outro veiculo ! (/desalugarcarro)");
					return 1;
				}
				for(new i=0; i<MAX_PLAYERS; i++)
				{
				    if(HireCar[i] == GetPlayerVehicleID(playerid))
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Alguem já alugou esse veiculo !");
				        return 1;
				    }
				}
				GivePlayerMoney(playerid,-SBizzInfo[15][sbEntranceCost]);
				SBizzInfo[15][sbTill] += SBizzInfo[15][sbEntranceCost];
				ExtortionSBiz(15, SBizzInfo[15][sbEntranceCost]);
				HireCar[playerid] = GetPlayerVehicleID(playerid);
				SaveCasas();
				Atualizar3Dtexts();
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Carro Alugado!~n~~r~/desalugarcarro = desalugar~n~~g~/trancar = trancar ou abrir",hirefee);
				TogglePlayerControllable(playerid, 1);
				GameTextForPlayer(playerid, string, 5000, 3);
				return 1;
			}
			else if(BarcosAluguel(GetPlayerVehicleID(playerid)))//Aluguel Barcos
		    {
				new hirefee = HireCost(GetPlayerVehicleID(playerid));
				if (GetPlayerMoney (playerid) <  SBizzInfo[15][sbEntranceCost])
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você não tem esse dinheiro !");
					return 1;
				}
				if(HireCar[playerid] > 0)
				{
					gCarLock[HireCar[playerid]] = 0;
					UnLockCar(HireCar[playerid]);
					SendClientMessage(playerid, COLOR_GREY, "Você tem que desalugar o outro veiculo ! (/desalugarcarro)");
					return 1;
				}
				for(new i=0; i<MAX_PLAYERS; i++)
				{
				    if(HireCar[i] == GetPlayerVehicleID(playerid))
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Alguem já alugou esse veiculo !");
				        return 1;
				    }
				}
                GivePlayerMoney(playerid,-SBizzInfo[15][sbEntranceCost]);
				SBizzInfo[15][sbTill] += SBizzInfo[15][sbEntranceCost];
				ExtortionSBiz(19, SBizzInfo[1][sbEntranceCost]);
				HireCar[playerid] = GetPlayerVehicleID(playerid);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Carro Alugado!~n~~r~/desalugarcarro = desalugar~n~~g~/trancar = trancar ou abrir",hirefee);
				TogglePlayerControllable(playerid, 1);
				GameTextForPlayer(playerid, string, 5000, 3);
				return 1;
			}
		}
		return 1;
	}
	CMD:alugarcasa(playerid, params[])
	{
		    new idd;
			new borse = PlayerInfo[playerid][pPHousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (borse != 500 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 0)
			{
				if(sscanf(params, "d", idd))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USE: /alugarcasa [0 - Nao / 1 - Sim]");
				}
    	    	new string[128];
				HouseInfo[borse][hRentabil] = idd;
				format(string, sizeof(string), "Status do aluguel da casa setado para - %d.", HouseInfo[borse][hRentabil]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SaveCasa(borse);
				Atualizar3Dtexts();
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você não é dono de uma casa !");
			}
			return true;
	}

	CMD:ligar(playerid, params[])
	{
 			if(NaCamera[playerid] > 3)
	    	{
		   		SendClientMessage(playerid,COLOR_YELLOW,"Você não pode falar agora!");
		   		return true;
	    	}
		    if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, 0xA92BF6F6, "Você não pode falar, pois foi calado");
				return true;
			}
			if(PlayerInfo[playerid][pJailed] == 9)
		    {
				SendClientMessage(playerid,COLOR_GRAD1,"Você não pode usar este comando nas Celas da Administração!");
		      	return true;
		    }
		    if(PlayerInfo[playerid][pJailed] != 0)
		    {
				SendClientMessage(playerid,COLOR_YELLOW,"Você não pode usar celular na cadeia!");
		      	return true;
		    }
			new phonenumb;
			if(sscanf(params, "d", phonenumb))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /ligar [Telefone]");
				return true;
			}
			if(PlayerInfo[playerid][pConnectTime] < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você precisa jogar pelo menos 1 horas para fazer ligações!");
				return true;
			}
			if(PlayerInfo[playerid][pPnumber] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você não tem um celular");
				return true;
			}
			if(phonenumb == 000)
			{
			    SendClientMessage(playerid, COLOR_YELLOW ,"SMS: BUUUUU!!, enviou: Agência Telefônica (555)");
			    return true;
			}
			if(phonenumb == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você está ligando para ninguém");
				return true;
			}
			if(phonenumb == PlayerInfo[playerid][pPnumber])
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você não pode ligar para si mesmo");
				return true;
			}
			if(phonenumb == 190)
			{
    			Mobile[playerid] = 190;
				SendClientMessage(playerid, COLOR_DBLUE, "Linha De Emergência: Policia ou Samu?");
				return true;
			}
			if(phonenumb == 192)
			{
				ForT:servico(playerid, "medico");
				return true;
			}
			if(Mobile[playerid] != 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você ja está em uma ligação...");
				return true;
			}
			new string[128];
  			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "* %s pega o celular.", PlayerName(playerid));
			SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerPlaySound(playerid, 3600,  0.0, 0.0, 0.0);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			//SetPlayerAttachedObject(SlotReal,playerid, Slot_Celular, PlayerInfo[playerid][pTelColor], 6);
			new id = CountAttachedObjects(playerid);
			SetPlayerAttachedObject(playerid, id, PlayerInfo[playerid][pTelColor], 6,0.102000,0.000000,-0.002000,-104.100006,-14.999977,172.200164,1.000000,1.000000,1.000000);
			SetPlayerAttachedObjectEx(PlayerInfo[playerid][pTelColor],Vaga_Celular,playerid,id);
			foreach(Player, i)
			{
				if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
				{
					giveplayerid = i;
					Mobile[playerid] = giveplayerid; //caller connecting
				 	if(PhoneOnline[giveplayerid] > 0)
				  	{
				       	SendClientMessage(playerid, COLOR_GREY, "   O celular chamado está desligado !");
				       	return true;
				   	}
					if (Mobile[giveplayerid] == 255)
					{
						format(string, sizeof(string), "Seu celular esta tocando (/At) Chamada de: %s", PlayerName(playerid));
						SendClientMessage(giveplayerid, COLOR_YELLOW, string);
						GetPlayerName(giveplayerid, sendername, sizeof(sendername));
						RingTone[giveplayerid] = 10;
						PlayerPlaySound(giveplayerid, 23000, 0.0, 0.0, 0.0);
						PlayerPlaySound(playerid, 23000, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, 0x934FF6F6, "Server: Use 'T' para falar, digite /des para desligar");
						SendClientMessage(playerid, 0x934FF6F6, "Server: Obs: Se Não desligar,digite /cellout !");
						format(string, sizeof(string), "* %s's está tocando o celular.", PlayerName(i));
						SendClientMessageInRange(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						CellTime[playerid] = 1;
					    SBizzInfo[2][sbTill] += 1000;
			            ExtortionSBiz(2, 1000);
			            DepositarOrgGrana(7,10000);
						return true;
					}
				}
			}
			SendClientMessage(playerid, COLOR_GRAD2, "Você acabou de ligar para um número ocupado...");
			return true;
	}
	CMD:orelhao(playerid, params[])
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerToPoint(3.0, playerid,1186.5955,-1369.3601,13.5585) || PlayerToPoint(3.0, playerid,1284.6503,-1271.6322,13.5395) || PlayerToPoint(3.0, playerid,1148.3153,-1772.2413,16.5992) || PlayerToPoint(3.0, playerid,1355.52319,-1744.27759,13.38360) || PlayerToPoint(3.0, playerid,1550.9573,-1669.7095,13.5614)  || PlayerToPoint(3.0, playerid,1585.3466,-2271.1980,-2.6792) || PlayerToPoint(3.0, playerid,1726.5822,-1867.4376,13.5702)
			|| PlayerToPoint(3.0, playerid,1496.6431,-1749.4452,15.4453) || PlayerToPoint(3.0, playerid,1277.95300, -1720.07397, 13.36860) || PlayerToPoint(3.0, playerid,1721.2019,-1720.4240,13.5414) || PlayerToPoint(3.0, playerid,2069.4717,-1766.6563,13.5627) || PlayerToPoint(3.0, playerid,1711.2948,-1605.5697,13.5469) || PlayerToPoint(3.0, playerid,1806.6991,-1599.9753,13.5469) || PlayerToPoint(3.0, playerid,1808.6942,-1598.2676,13.5469))
            {
			new phonenumb;
			if(sscanf(params, "d", phonenumb))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /orelhao [Nº TELEFONE]");
				return true;
			}
			new string[128];
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "* %s disca algum numero no telefone.", sendername);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			if(phonenumb == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você está ligando para ninguém");
				return 1;
			}
			if(phonenumb == PlayerInfo[playerid][pPnumber])
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Voce não pode ligar para si mesmo");
				return 1;
			}
			if(Mobile[playerid] != 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Voce ja está em uma ligação...");
				return 1;
			}
			foreach(Player, i)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
					{
						giveplayerid = i;
						Mobile[playerid] = giveplayerid; //caller connecting
						if(IsPlayerConnected(giveplayerid))
						{
						    if(giveplayerid != INVALID_PLAYER_ID)
						    {
						        if(PhoneOnline[giveplayerid] > 0)
						        {
						            SendClientMessage(playerid, COLOR_GREY, "O celular chamado está fora da área de cobertura ou está desligado !");
						            return 1;
						        }
								if (Mobile[giveplayerid] == 255)
								{
									format(string, sizeof(string), "Seu celular está tocando (/At) Chamando: %s", sendername);
									SendClientMessage(giveplayerid, COLOR_YELLOW, string);
									GetPlayerName(giveplayerid, sendername, sizeof(sendername));
									RingTone[giveplayerid] = 10;
									format(string, sizeof(string), "* %s's está tocando o celular.", sendername);
									ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									SendClientMessage(playerid, 0x934FF6F6, "USE: 'T' para falar, digite /des para desligar");
									CellTime[playerid] = 1;
									SBizzInfo[20][sbTill] += 500;
                                    ExtortionSBiz(20, 500);
									return 1;
								}
							}
						}
					}
				}
			}
			SendClientMessage(playerid, COLOR_GRAD2, "Você acabou de ligar para um número ocupado...");}
		}
		return 1;
	}
 	CMD:deso(playerid, params[])return ForT:desligarorelhao(playerid, params);
	CMD:desligarorelhao(playerid, params[])
	{
	    if(IsPlayerConnected(playerid))
		{
			new caller = Mobile[playerid];
			if(IsPlayerConnected(caller))
			{
			    if(caller != INVALID_PLAYER_ID)
			    {
					if(caller != 255)
					{
						if(caller < 255)
						{
							SendClientMessage(caller,  COLOR_GRAD2, "Desligou.");
							CellTime[caller] = 0;
							CellTime[playerid] = 0;
							SendClientMessage(playerid,  COLOR_GRAD2, "Desligou.");
							Mobile[caller] = 255;
						}
						Mobile[playerid] = 255;
						CellTime[playerid] = 0;
						RingTone[playerid] = 0;
						return 1;
					}
				}
			}
			SendClientMessage(playerid,  COLOR_GRAD2, "Colocou o orelhão no gancho.");
			new pSpecialAction = GetPlayerSpecialAction(playerid);
			if (pSpecialAction == SPECIAL_ACTION_USECELLPHONE)
			{
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
			}
		}
		return 1;
	}
	CMD:t(playerid, params[])return ForT:sms(playerid, params);
	CMD:sms(playerid, params[])
	{
		  	if(NaCamera[playerid] > 3)
		    {
			   SendClientMessage(playerid,COLOR_YELLOW,"Você não pode falar agora!");
			   return true;
		    }
	    	if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, 0xA92BF6F6, "Você não pode falar, pois foi calado");
				return true;
			}
		    if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Você não está logado!");
	            return true;
	        }
	        if(PlayerInfo[playerid][pJailed] != 0)
		    {
				SendClientMessage(playerid,COLOR_YELLOW,"Você não pode usar celular na cadeia!");
		      	return true;
		    }
			if(PlayerInfo[playerid][pConnectTime] < 3)
			{
				SendClientMessage(playerid, 0xFFFFFFFF, "Info: Você poderá mandar mensagens após {FFA54F}3{FFFFFF} horas jogadas.");
				return true;
			}
			if(PlayerInfo[playerid][pJailed] == 9)
		    {
				SendClientMessage(playerid,COLOR_GRAD1,"Você não pode usar este comando nas Celas da Administração!");
		 		return true;
		  	}
			new result[64], phonenumb;
			if(sscanf(params, "ds[64]", phonenumb, result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /sms [telefone] [texto]");
				return true;
			}
			if(PlayerInfo[playerid][pPnumber] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você não tem um celular, compre um na 24/7");
				return true;
			}
			new string[128];
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "* %s pegou o celular.", PlayerName(playerid));
			SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			//Anti Divulguer
			if(AntiDivulguer(playerid, result))return 1;

			foreach(Character, i)
			{
				if(PlayerInfo[i][pPnumber] == phonenumb)
				{
					giveplayerid = i;
					Mobile[playerid] = giveplayerid; //caller connecting
				    if(PhoneOnline[giveplayerid] > 0)
				   	{
				      	SendClientMessage(playerid, COLOR_GREY, "   O celular chamado está desligado !");
				     	return true;
				   	}
				   	SendClientMessage(playerid, COLOR_WHITE, "SMS Enviado com Sucesso!");
					format(string, sizeof(string), "SMS: %s, enviou: %s (%d)", result,sendername,PlayerInfo[playerid][pPnumber]);
					GetPlayerName(giveplayerid, sendername, sizeof(sendername));
					SendClientMessage(giveplayerid, COLOR_YELLOW, string);
					SendClientMessage(playerid,  COLOR_YELLOW, string);
					foreach(Player, adm)
					{
					    if(VerSMS[adm] && PlayerInfo[adm][pAdmin] > 0)
					    {
					        format(string, sizeof string, "SMS: %s[ID: %d] para %s [ID: %d]: %s", NomePlayer(playerid),playerid, NomePlayer(i),i, result);
					        SendClientMessage(adm, COLOR_YELLOW, string);
						}
					}
					format(string, sizeof string, "SMS: %s(ID: %d) para %s(ID: %d): %s", NomePlayer(playerid),playerid, NomePlayer(i),i, result);
                    SendGrampoMessage(playerid, string);
					RingTone[giveplayerid] = 20;
					PlayerPlaySound(playerid, 3600,  0.0, 0.0, 0.0);
					PlayerPlaySound(giveplayerid, 3600,  0.0, 0.0, 0.0);
					print(string);
					GameTextForPlayer(playerid,"~r~ -R$50", 5000, 1);
					SBizzInfo[2][sbTill] += 50;
                    ExtortionSBiz(2, 50);
				  	Mobile[playerid] = 255;
				  	format(string, sizeof(string), "SMS: %s, enviou: %s para %s", result,playername,PlayerName(playerid));
				   	BPFLogs("sms", string);
					return true;
				}
			}
			SendClientMessage(playerid, COLOR_GRAD2, " Falha ao enviar a mensagem!");
			return true;
	}
	stock SendGrampoMessage(playerid, message[])
	{
	    foreach(Player, i)
	    {
	        if(PlayerInfo[i][pGrampo] == playerid)
	        {
	            SendClientMessage(i, 0xFF0050FF, message);
	        }
	    }
	    return 0;
	}

	CMD:prego(playerid)return ForT:pregos(playerid);
 	CMD:pregos(playerid)
	{
		if(PlayerInfo[playerid][pJailed] != 0)return SendClientMessage(playerid,COLOR_YELLOW,"Você não pode usar esse comando na cadeia!");
		if (!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Você não é COP!");
		if(GetPlayerInterior(playerid) > 0 || IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, AMARELO_COR, "Você não pode colocar pregos dentro de um veiculo ou em algum interior!");
		new prid = 999;
		new string[128];
		for(new i; i < MAX_PREGOS; i++){
		    if(SpikeInfo[i][sCreated]){
				if (SpikeInfo[i][sID] == playerid) return SendClientMessage(playerid, COLOR_GREY, "Você só pode implantar 1 prego por vez, /rpr - para remover seu tapete de pregos.");
			}
		}

		for(new i; i < MAX_PREGOS; i++){
		    if(!SpikeInfo[i][sCreated]){
				prid = i;
				break;
			}
		}

		if (prid == 999) return SendClientMessage(playerid, COLOR_GREY, " Há muitos pregos plantados no servidor!");
		new Float:X, Float:Y, Float:Z, Float:A;

		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, A);
		SpikeInfo[prid][sID]=playerid;
		SpikeInfo[prid][sCreated]=1;
        SpikeInfo[prid][sX]=X;
        SpikeInfo[prid][sY]=Y;
        SpikeInfo[prid][sZ]=Z-3.1;
        SpikeInfo[prid][sObject] = CreateDynamicObject(2892, X, Y, Z-0.9, 0, 0, A-90);
		GameTextForPlayer(playerid, "~w~Pregos ~r~Criados", 5000, 5);

        format(string, sizeof string, "[Tapete de Pregos]\nCriado por: %s[ID: %d]", NomePlayer(playerid), playerid);
		SpikeInfo[prid][sText] = Create3DTextLabel(string,0x77BBFFFF,X, Y, Z-1.0 ,5.0, 0);

		format(string, sizeof(string), "[%s] %s plantou um tapete de pregos.", NomeORG(playerid),PlayerName(playerid));
		foreach(Player, i)
		{
			if(IsACop(i))
			{
				SendClientMessage(i, TEAM_BLUE_COLOR, string);
			}
		}
		return true;
	}
 	CMD:rpr(playerid)
	{
		if (!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Você não é um Policial!");
		for(new i; i < MAX_PREGOS; i++)
		{
		    if(SpikeInfo[i][sCreated] && SpikeInfo[i][sID] == playerid)
			{
			    new string[128];
				SendClientMessage(playerid, COLOR_GREY, "Você retirou seu tapete de pregos!");
                SpikeInfo[i][sID]=999;
                SpikeInfo[i][sCreated]=0;
                Delete3DTextLabel(SpikeInfo[i][sText]);
                DestroyDynamicObject(SpikeInfo[i][sObject]);
				format(string, sizeof(string), "[%s] %s removeu seu tapete de pregos.", NomeORG(playerid),PlayerName(playerid));
				foreach(Player, p)
				{
					if(IsACop(p))
					{
						SendClientMessage(p, TEAM_BLUE_COLOR, string);
					}
				}
				return true;
			}
		}
		SendClientMessage(playerid, COLOR_GRAD1, "Você não plantou nenhum tapete de pregos!");
		return true;
	}
 	CMD:dpregos(playerid)
	{
		if ((!IsACop(playerid) || PlayerInfo[playerid][pCargo] < 5) && !PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Você não é um Policial e ter cargo maior que 5.");
		//new tpt = 0;
		ForPlayers(i)
		{
                if(IsPlayerConnected(i))
                {
                    if(GetPlayerOrg(playerid) == GetPlayerOrg(i))
			    	{
						if(SpikeInfo[i][sCreated])
						{
	     					RemoveRoadPregos(i);
	     					//tpt = 1;
						}
					}
				}
		}
		//if(tpt == 0)return SendClientMessage(playerid, COLOR_GRAD1, "Nenhum tapete de prego plantado.");
		new string[128];
		format(string, sizeof(string), "[%s] %s removeu todos os pregos de sua organização.", NomeORG(playerid),PlayerName(playerid));
		foreach(Player, p)
		{
			if(IsACop(p))
			{
				SendClientMessage(p, TEAM_BLUE_COLOR, string);
			}
		}
		return true;
	}
//----------------------------------[Skin]-----------------------------------------------
	CMD:meuskin(playerid, params[])
	{
		if(PlayerToPoint(10.0,playerid,205.1173,-159.3505,1000.5234) || PlayerToPoint(10.0,playerid,207.9093,-104.6899,1005.1328) || PlayerToPoint(3.0,playerid,414.1574,2536.4773,10.00008) || PlayerToPoint(50.0,playerid,162.6288,-86.3102,1001.8047))
		{
			//if(PlayerInfo[playerid][pMembro] > 1) return SendClientMessage(playerid, COLOR_GREY, " * Você possui uma profissão, só pode usar as skins dela,digite /roupas");
			new skin;
			if(sscanf(params, "d", skin))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /meuskin [id da skin] - Custo R$ 250.");
				return 1;
			}
			if(skin==3 || skin==4 || skin==25 || skin==24 || skin==5 || skin==6 || skin==12 || skin==282 || skin==288 || skin==283 || skin==281 || skin==280 || skin==72 || skin==287 || skin==115 || skin==116 || skin==173 || skin==174 || skin==175 || skin==176 || skin==41 || skin==216 || skin==121 || skin==122
		    || skin==169 || skin==179 || skin==127 || skin==165 || skin==186 || skin==93 || skin==141 || skin==105  || skin==219 || skin==269 || skin==195 || skin==271 || skin==106 || skin==107 || skin==30 || skin==47 || skin==48 || skin==285 || skin==191 || skin==73 || skin==103 || skin==104
		    || skin==109 || skin==110 || skin==21 || skin==28 || skin==29 || skin==265 || skin==267 || skin==287 || skin==228 || skin==114 || skin==120 || skin==147 || skin==294 || skin==227 || skin==61 || skin==171 || skin==123 || skin==59 || skin==102 || skin==108 || skin==117
		    || skin==171 || skin==217 || skin==203 || skin==247 || skin==248 || skin==249 || skin==254 || skin==204 || skin==118 || skin==186 || skin==13 || skin==15 || skin==19 || skin==43
		    || skin==46 || skin==153 || skin==163 || skin==164 || skin==166 || skin==298 || skin==295 || skin==299 || skin==296 || skin==181 || skin==211 || skin>=300) return SendClientMessage(playerid, COLOR_GREY, "Esta Skin é De Uma Profissão !");
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você comprou nova skin por R$250. A roupa está no seu inventário, coloque-a quando quizer!");
			GiveDinheiro(playerid,-250);
			SBizzInfo[3][sbTill] += 250;
			ExtortionSBiz(3, 250);
			SBizzInfo[3][sbProducts]--;
			for(new i = 0; i<75; i++)
                {
 	               if(InventarioInfo[playerid][i][iSlot] == 19382)
	              {
		  		   InventarioInfo[playerid][i][iSlot] = skin;
		  	       InventarioInfo[playerid][i][iUnidades] = 1;
		  	       return 1;
		  		  	   }
		  		      }
			return 1;
		}
		return true;
	}
public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	new string[128];
	if(listid == SkinsList)
	{
	    if(response)
	    {
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você comprou nova skin por R$1000");
			GiveDinheiro(playerid,-1000);
			SBizzInfo[3][sbTill] += 1000;
			ExtortionSBiz(3, 1000);
			PlayerInfo[playerid][pSkin] = modelid;
			SetPlayerSkin(playerid, modelid);
	    }
	    else
		{
			SendClientMessage(playerid, 0xFFA500F6, "Você cancelou o menu de skins!");
	    	Controle(playerid, 1);
		}
	}
	else if(listid == CarrosVipList)
	{
	    if(response)
	    {
	        new str[74];
		    new Veiculo = GetPVarInt(playerid, "modelovip");
		    new carid = GetPVarInt(playerid, "carrovip");
			CarInfo[Veiculo][cModel] = modelid;
			GameTextForPlayer(playerid, "~w~Modelo do seu Carro Premium Mudado ~r~-R$300.", 10000, 3);
			DestroyVehicle(carid);
			SendClientMessage(playerid, COLOR_YELLOW, "Vá buscar o seu veículo onde você estacionou.");
			CreateVehicle(CarInfo[Veiculo][cModel],CarInfo[Veiculo][cLocationx],CarInfo[Veiculo][cLocationy],CarInfo[Veiculo][cLocationz]+1.0,CarInfo[Veiculo][cAngle],CarInfo[Veiculo][cColorOne],CarInfo[Veiculo][cColorTwo],60000);
			Controle(playerid, 1);
			GiveDinheiro(playerid,-300);
			SalvarCarro(Veiculo);
			format(str, sizeof str, "{000000}BPF-%04d", carid);
	    	SetVehicleNumberPlate(carid, str);
	    	SetVehicleToRespawn(carid);
		}
		else
		{
			SendClientMessage(playerid, 0xFFA500F6, "Você cancelou o menu de carros VIP!");
			Controle(playerid, 1);
		}
	}
	else if(listid == MoveisList
	|| listid == QuartoList
	|| listid == SalaList
	|| listid == BanheiroList
	|| listid == CozinhaList
	|| listid == DecoracaoList){

	    if(response){

	        new
				Float:x,
				Float:y,
				Float:z,
				casaid = PlayerInfo[playerid][pPHousekey]
			;

	        if(GetPlayerMoney(playerid) < 900){

				return SendClientMessage(playerid, COLOR_GREY, " Você não tem R$900 para comprar um móvel !");
			}

			GiveDinheiro(playerid,-900);
			SBizzInfo[3][sbTill] += 900;//vida buisness
			ExtortionSBiz(3, 900);
			SalvarSEmpresa(3);
			Atualizar3Dtexts();

			format(string, sizeof(string), "• {FFFFFF}Empresa que recebeu os lucros da compra: {00BFFF}%s", SBizzInfo[3][sbMessage]);
            SendClientMessage(playerid, 0x00BFFFAA, string);

	        GetPlayerPos(playerid, x, y, z);

	        GetXYInFrontOfPlayer(playerid, x, y, 1.5);

	        SetPVarInt(playerid, "editMovel", addMovel(casaid, modelid, x, y, z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid)));

	        SetPVarInt(playerid, "editandoh", 999);

	        EditDynamicObject(playerid, MobInfo[casaid][GetPVarInt(playerid, "editMovel")][mobObject]);

			format(string, sizeof string, " Você acaba de comprar um móvel para sua casa [%d/%d]", countMoveis(casaid), MAX_MOVEIS);
			SendClientMessage(playerid, 0xFFA500F6, string);
		}
	    else SendClientMessage(playerid, 0xFFA500F6, "Você cancelou o menu de Móveis!");
	}
	return 1;
}
//----------------------------------[pickup]-----------------------------------------------
	CMD:at(playerid)
	{
	    	if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, 0xA92BF6F6, "Você não pode falar, pois foi calado");
				return true;
			}
			if(Mobile[playerid] != 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você já está em uma ligação.");
				return true;
			}
    	    new string[128];
			foreach(Player, i)
			{
					if(Mobile[i] == playerid)
					{
						Mobile[playerid] = i; //caller connecting
						SendClientMessage(i,  COLOR_GRAD2, "Atendeu o celular.");
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s atendeu o celular.", PlayerName(playerid));
						SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
						new id = CountAttachedObjects(playerid);
						SetPlayerAttachedObject(playerid, id, PlayerInfo[playerid][pTelColor], 6,0.102000,0.000000,-0.002000,-104.100006,-14.999977,172.200164,1.000000,1.000000,1.000000);
                        SetPlayerAttachedObjectEx(PlayerInfo[playerid][pTelColor],Vaga_Celular,playerid,id);
						RingTone[playerid] = 0;
					}
			}
			return true;
	}
	CMD:des(playerid, params[])
	{
			new caller = Mobile[playerid];
			if(IsPlayerConnected(caller))
			{
			    if(caller != INVALID_PLAYER_ID)
			    {
					if(caller != 255)
					{
						if(caller < 255)
						{
							SendClientMessage(caller,  COLOR_GRAD2, "   Desligaram do outro lado da linha.");
							CellTime[caller] = 0;
							CellTime[playerid] = 0;
							SendClientMessage(playerid,  COLOR_GRAD2, "Você desligou seu celular.");
							Mobile[caller] = 255;
						}
						Mobile[playerid] = 255;
						CellTime[playerid] = 0;
						RingTone[playerid] = 0;
						return true;
					}
				}
			}
			SendClientMessage(playerid,  COLOR_GRAD2, "Você guardou seu celular no bolso.");
			new pSpecialAction = GetPlayerSpecialAction(playerid);
			if (pSpecialAction == SPECIAL_ACTION_USECELLPHONE)
			{
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
			}
			RemovePlayerAttachedObjectEx(playerid, Vaga_Celular);
			return true;
	}
//--------------------[RONDA]--------------------
     CMD:ronda(playerid, params[])
    {
	        if(IsACop(playerid))
			{
           	    new string[128];
			    if(EmpregoDuty[playerid] >= 1)
			    {
			        GetPlayerName(playerid,sendername,sizeof(sendername));
			        format(string, sizeof(string), "* Oficial %s saiu da ronda.", sendername);
					SendClientMessageInRange(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você não esta mais em serviço.");
			        EmpregoDuty[playerid] = 0;
			        Copsronda -= 1;
			    }
			    else
			    {
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Agora você está de serviço  e poderá receber chamadas de pessoas que precisam.");
			        EmpregoDuty[playerid] = 2;
			        GetPlayerName(playerid,sendername,sizeof(sendername));
			        format(string, sizeof(string), "Oficial %s está rondando, (/servico policia).", PlayerName(playerid));
	    			OOCNews(COLOR_LIGHTBLUE,string);
			        Copsronda += 1;
				}
			}
			return true;
	}

//----------------------{HouseS}-------------------
    CMD:ircasa(playerid, params[])
	{
	        if(PlayerInfo[playerid][pAdmin] < 1337)
			{
	            SendClientMessage(playerid, COLOR_GREY, "Você não tem autorização para usar esse comando!");
	            return true;
	        }
         	if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 3000)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo Admin USE: /trabalhar");
				return true;
			}
			new Casa;
			if(sscanf(params, "d", Casa))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /ircasa [ID]");
				return 1;
			}
			if(Casa >= MAX_HOUSES)
			{
				new string[80];
			    format(string, sizeof(string), "Casas de 0 até %d", MAX_HOUSES-1);
				SendClientMessage(playerid, COLOR_GRAD2, string);
				return 1;
			}
			SetPlayerPos(playerid,HouseInfo[Casa][hEntrancex],HouseInfo[Casa][hEntrancey],HouseInfo[Casa][hEntrancez]);
			return true;
	}

	CMD:seditar(playerid, params[])
	{
			if(PlayerInfo[playerid][pAdmin] < 1340)
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não tem autorização para usar esse comando!");
				return true;
			}
			new x_Emprego[32], proplev;
			if(sscanf(params, "s[25]d", x_Emprego, proplev))
			{
				SendClientMessage(playerid, COLOR_WHITE, "|______________ Editar ______________|");
				SendClientMessage(playerid, COLOR_WHITE, "USE: /seditar [nome] [quantidade] (Use para casas e empresas)");
				SendClientMessage(playerid, COLOR_GREY, "/seditar level [level]");
				SendClientMessage(playerid, COLOR_GREY, "/seditar preco [preço]");
				SendClientMessage(playerid, COLOR_GREY, "/seditar carro [id do carro]");
				SendClientMessage(playerid, COLOR_GREY, "/seditar chave [0 ou 1] (0 aberto - 1 fechado)");
				SendClientMessage(playerid, COLOR_GREY, "/seditar produto [quantidade])");
				SendClientMessage(playerid, COLOR_GREY, "/seditar maxproduto [quantidade])");
				SendClientMessage(playerid, COLOR_GREY, "/seditar precoproduto [quantidade])");
				SendClientMessage(playerid, COLOR_GREY, "/seditar produtoreq [quantidade])");
				return true;
			}
    	    new string[128];
	        for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				{
					format(string, sizeof(string), "Casa: %d", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					if(proplev > 0)
					{
					    if(strcmp(x_Emprego,"level",true) == 0)
					    {
							HouseInfo[i][hLevel] = proplev;
							SaveCasa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"preco",true) == 0)
					    {
							HouseInfo[i][hValue] = proplev;
							SaveCasa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"chave",true) == 0)
					    {
							HouseInfo[i][hLock] = proplev;
							SaveCasa(i);
							Atualizar3Dtexts();
						}
					}
				}
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
				{
					format(string, sizeof(string), "Empresa: %d (Empresa com interior)", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					if(proplev > 0)
					{
					    if(strcmp(x_Emprego,"level",true) == 0)
					    {
							BizzInfo[i][bLevelNeeded] = proplev;
							SalvarEmpresa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"preco",true) == 0)
					    {
							BizzInfo[i][bBuyPrice] = proplev;
							SalvarEmpresa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"fundos",true) == 0)
					    {
							BizzInfo[i][bTill] = proplev;
							SalvarEmpresa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"chave",true) == 0)
					    {
							BizzInfo[i][bLocked] = proplev;
							SalvarEmpresa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"produto",true) == 0)
					    {
					    	BizzInfo[i][bProducts] = proplev;
							SalvarEmpresa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"precoproduto",true) == 0)
					    {
					    	BizzInfo[i][bPriceProd] = proplev;
							SalvarEmpresa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"maxproduto",true) == 0)
					    {
					    	BizzInfo[i][bMaxProducts] = proplev;
							SalvarEmpresa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"produtoreq",true) == 0)
					    {
					    	BizzInfo[i][bProductsReq] = proplev;
							SalvarEmpresa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"interior",true) == 0)
					    {
					    	BizzInfo[i][bInterior] = proplev;
							SalvarEmpresa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"world",true) == 0)
					    {
					    	BizzInfo[i][bWorld] = proplev;
							SalvarEmpresa(i);
							Atualizar3Dtexts();
						}
					}
				}
			}
			for(new i = 0; i < sizeof(SBizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
				{
					format(string, sizeof(string), "SEmpresa: %d (Empresa sem interior)", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					if(proplev > 0)
					{
					    if(strcmp(x_Emprego,"level",true) == 0)
					    {
							SBizzInfo[i][sbLevelNeeded] = proplev;
							SalvarSEmpresa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"preco",true) == 0)
					    {
							SBizzInfo[i][sbBuyPrice] = proplev;
							SalvarSEmpresa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"fundos",true) == 0)
					    {
							SBizzInfo[i][sbTill] = proplev;
							SalvarSEmpresa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"chave",true) == 0)
					    {
							SBizzInfo[i][sbLocked] =  proplev;
							SalvarSEmpresa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"produto",true) == 0)
					    {
					    	SBizzInfo[i][sbProducts] = proplev;
							SalvarSEmpresa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"precoproduto",true) == 0)
					    {
					    	SBizzInfo[i][sbPriceProd] = proplev;
							SalvarSEmpresa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"maxproduto",true) == 0)
					    {
					    	SBizzInfo[i][sbMaxProducts] = proplev;
							SalvarSEmpresa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"produtoreq",true) == 0)
					    {
					    	SBizzInfo[i][sbProductsReq] = proplev;
							SalvarSEmpresa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"interior",true) == 0)
					    {
					    	SBizzInfo[i][sbInterior] = proplev;
							SalvarSEmpresa(i);
							Atualizar3Dtexts();
						}
					}
				}
			}
			for(new i = 0; i < sizeof(FBizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,FBizzInfo[i][fbEntranceX], FBizzInfo[i][fbEntranceY], FBizzInfo[i][fbEntranceZ]))
				{
					format(string, sizeof(string), "Fazenda: %d", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					if(proplev > 0)
					{
					    if(strcmp(x_Emprego,"level",true) == 0)
					    {
							FBizzInfo[i][fbLevelNeeded] = proplev;
							SalvarFEmpresa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"preco",true) == 0)
					    {
							FBizzInfo[i][fbBuyPrice] = proplev;
							SalvarFEmpresa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"fundos",true) == 0)
					    {
							FBizzInfo[i][fbTill] = proplev;
							SalvarFEmpresa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"tipo",true) == 0)
					    {
							FBizzInfo[i][fbDiscription] = proplev;
							SalvarFEmpresa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"chave",true) == 0)
					    {
							FBizzInfo[i][fbLocked] =  proplev;
							SalvarFEmpresa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"produto",true) == 0)
					    {
							FBizzInfo[i][fbProducts] =  proplev;
							SalvarFEmpresa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"precoproduto",true) == 0)
					    {
							FBizzInfo[i][fbPriceProd] =  proplev;
							SalvarFEmpresa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"maxproduto",true) == 0)
					    {
							FBizzInfo[i][fbMaxProducts] =  proplev;
							SalvarFEmpresa(i);
							Atualizar3Dtexts();
						}
						else if(strcmp(x_Emprego,"produtoreq",true) == 0)
					    {
							FBizzInfo[i][fbProductsReq] =  proplev;
							SalvarFEmpresa(i);
							Atualizar3Dtexts();
						}
					}
				}
			}
			format(string, sizeof(string), "Você ajustou: %s", x_Emprego);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return true;
	}
	CMD:editarchave(playerid, params[])
	{
			if(PlayerInfo[playerid][pAdmin] < 1337)
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não tem autorização para usar esse comando!");
				return true;
			}
			new x_Emprego[32], proplev;
			if(sscanf(params, "udd", giveplayerid, x_Emprego, proplev))
			{
				SendClientMessage(playerid, COLOR_WHITE, "|______________ Editar chave ______________|");
				SendClientMessage(playerid, COLOR_WHITE, "USE: /editarchave [playerid] [slot(1-5)] [Numero da Chave] (Carros VIP)");
				return true;
			}
			if(IsPlayerConnected(giveplayerid))
	    		{
        			if(strcmp(x_Emprego,"1",true) == 0)
				    {
						PlayerInfo[giveplayerid][pCarKey] = proplev;
						PlayerInfo[giveplayerid][pVeiculo] = proplev;
					}
     				else if(strcmp(x_Emprego,"2",true) == 0)
	    			{
						PlayerInfo[giveplayerid][pCarKey2] = proplev;
						PlayerInfo[giveplayerid][pVeiculo2] = proplev;
					}
     				else if(strcmp(x_Emprego,"3",true) == 0)
	    			{
						PlayerInfo[giveplayerid][pCarKey3] = proplev;
						PlayerInfo[giveplayerid][pVeiculo3] = proplev;
					}
     				else if(strcmp(x_Emprego,"4",true) == 0)
				    {
						PlayerInfo[giveplayerid][pCarKey4] = proplev;
						PlayerInfo[giveplayerid][pVeiculo4] = proplev;
					}
     				else if(strcmp(x_Emprego,"5",true) == 0)
				    {
						PlayerInfo[giveplayerid][pCarKey5] = proplev;
						PlayerInfo[giveplayerid][pVeiculo5] = proplev;
					}
					new string[128];
					format(string, sizeof(string), "Você setou a Chave de %s do Slot Nº:[%d]\
				 	de Carro Vip para: %d", PlayerName(giveplayerid), x_Emprego, proplev);
					SendClientMessage(playerid, COLOR_WHITE, string);
			}
			return true;
	}
	CMD:editarcontrato(playerid, params[])
	{
			if(PlayerInfo[playerid][pAdmin] < 1337)
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não tem autorização para usar esse comando!");
				return true;
			}
			new x_Emprego[32], proplev,string [256];
			if(sscanf(params, "udd", giveplayerid, x_Emprego, proplev))
			{
				SendClientMessage(playerid, COLOR_WHITE, "|______________ Editar Contrato ______________|");
				SendClientMessage(playerid, COLOR_WHITE, "USE: /editarconrato [playerid] [triad/hitman] [Valor]");
				return true;
			}
			if(IsPlayerConnected(giveplayerid))
	    		{
			    	if(strcmp(x_Emprego,"triad",true) == 0)
				    {
						PlayerInfo[giveplayerid][pHeadValueT] = proplev;
                        format(string, sizeof(string), "TRIADS: Um Contrato foi editado pelo ADM %s em %s, para $%d.", playerid, giveplayerid, proplev);
                        SendFamilyMessage(22, COLOR_YELLOW, string);
					}
					else if(strcmp(x_Emprego,"hitman",true) == 0)
	    			{
						PlayerInfo[giveplayerid][pHeadValue] = proplev;
                        format(string, sizeof(string), "HITMANS: Um Contrato foi editado pelo ADM %s em %s, para $%d.", playerid, giveplayerid, proplev);
                        SendFamilyMessage(8, COLOR_YELLOW, string);
					}
					format(string, sizeof(string), "Você setou o Contrato de %s[ID:%d] da Org:[%s] para: %d", PlayerName(giveplayerid), giveplayerid, x_Emprego, proplev);
					SendClientMessage(playerid, COLOR_WHITE, string);
			}
			return true;
	}
	CMD:meucontrato(playerid, params[])
	{
	    new string[128];
		if(GoChase[playerid] == 999)return SendClientMessage(playerid, COLOR_GRAD1, "Você não possui um contrato");
		else
		    format(string, sizeof(string), "Seu contrato está em %s [ID: %d].", PlayerName(GoChase[playerid]), GoChase[playerid]);
  		return SendClientMessage(playerid, COLOR_GRAD2, string);
	}
	CMD:largarcontrato(playerid, params[])
	{
	    new string[128];
		if(GoChase[playerid] == 999)return SendClientMessage(playerid, COLOR_GRAD1, "Você não possui um contrato");
		else
		{
			if(GetPlayerOrg(playerid) == 8)
			{
			    format(string, sizeof string, "HITMAN: O assassino %s largou seu contrato, que estava em %s",NomePlayer(playerid), NomePlayer(GoChase[playerid]));
			    SendFamilyMessage(8,COLOR_YELLOW, string);
			    GotHit[GoChase[playerid]] = 0;
			}
			if(GetPlayerOrg(playerid) == 22)
			{
			    format(string, sizeof string, "TRIAD: O assassino %s largou seu contrato, que estava em %s",NomePlayer(playerid), NomePlayer(GoChase[playerid]));
			    SendFamilyMessage(22,COLOR_YELLOW, string);
			    GotTri[GoChase[playerid]] = 0;
			}
			GetChased[GoChase[playerid]] = 999;
			GoChase[playerid] = 999;
		}
		return true;
	}


	CMD:infocontrato(playerid, params[])
	{
	    if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pAdminTemp] < 1)return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando");

	    if(!admtrampando[playerid])
				return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

		new id;
		if(sscanf(params, "d", id))
		{
		    return SendClientMessage(playerid, COLOR_YELLOW, "USE: /infocontrato [playerid]");
		}
		new string[128];
		if(GoChase[id] == 999)return SendClientMessage(playerid, COLOR_GRAD1, "O player não tem um contrato");
		else
		    format(string, sizeof(string), "INFO-CONTRATO: %s está com um contrato em %s[ID: %d]", PlayerName(id), PlayerName(GoChase[id]), GoChase[id]);
  		return SendClientMessage(playerid, COLOR_YELLOW, string);
	}

	CMD:localizarveiculo(playerid, params[])
	{
	        new item;
			if(sscanf(params, "d", item))
			{
				SendClientMessage(playerid, COLOR_DBLUE, "|____| Localizar Veículo |____|");
				SendClientMessage(playerid, COLOR_YELLOW, "USE: /localizarveiculo [Numero do Veiculo(1 a 5)]");
				return true;
			}
			switch(item)
			{
			    case 1:
			    {
				    if(PlayerInfo[playerid][pCarKey] >= 1)
		        	{
				    	new Float:x,Float:y,Float:z;
				    	GetVehiclePos(PlayerInfo[playerid][pCarKey], x, y, z);
				    	SetPlayerCheckpoint(playerid,x,y,z,6.0);
				    	SendClientMessage(playerid, COLOR_DBLUE, "Seu Veiculo 1 foi marcado de Vermelho no Mapa!");
				    	return true;
				    }
				    else
				    {
				        SendClientMessage(playerid,COLOR_GRAD2,"Você não tem um Veiculo VIP!");
					    return true;
				    }
				}
				case 2: // localizar seu veiculo vip 2
				{
				    if(PlayerInfo[playerid][pCarKey2] >= 1)
		        	{
				    	new Float:x,Float:y,Float:z;
				    	GetVehiclePos(PlayerInfo[playerid][pCarKey2], x, y, z);
				    	SetPlayerCheckpoint(playerid,x,y,z,6.0);
				    	SendClientMessage(playerid, COLOR_DBLUE, "Seu Veiculo 2 foi marcado de Vermelho no Mapa!");
				    	return true;
				    }
				    else
				    {
				        SendClientMessage(playerid,COLOR_GRAD2,"Você não tem um 2º Veiculo VIP!");
					    return true;
				    }
				}
				case 3:
				{
				    if(PlayerInfo[playerid][pCarKey3] >= 1)
		        	{
				    	new Float:x,Float:y,Float:z;
				    	GetVehiclePos(PlayerInfo[playerid][pCarKey3], x, y, z);
				    	SetPlayerCheckpoint(playerid,x,y,z,6.0);
				    	SendClientMessage(playerid, COLOR_DBLUE, "Seu Veiculo 3 foi marcado de Vermelho no Mapa!");
				    	return true;
				    }
				    else
				    {
				        SendClientMessage(playerid,COLOR_GRAD2,"Você não tem um 3º Veiculo VIP!");
					    return true;
				    }
				}
				case 4:
				{
				    if(PlayerInfo[playerid][pCarKey4] >= 1)
		        	{
				    	new Float:x,Float:y,Float:z;
				    	GetVehiclePos(PlayerInfo[playerid][pCarKey4], x, y, z);
				    	SetPlayerCheckpoint(playerid,x,y,z,6.0);
				    	SendClientMessage(playerid, COLOR_DBLUE, "Seu Veiculo 4 foi marcado de Vermelho no Mapa!");
				    	return true;
				    }
				    else
				    {
				        SendClientMessage(playerid,COLOR_GRAD2,"Você não tem um 4º Veiculo VIP!");
					    return true;
				    }
				}
	 			case 5:
				{
				    if(PlayerInfo[playerid][pCarKey5] >= 1)
		        	{
				    	new Float:x,Float:y,Float:z;
				    	GetVehiclePos(PlayerInfo[playerid][pCarKey5], x, y, z);
				    	SetPlayerCheckpoint(playerid,x,y,z,6.0);
				    	SendClientMessage(playerid, COLOR_DBLUE, "Seu Veiculo 5 foi marcado de Vermelho no Mapa!");
				    	return true;
				    }
				    else
				    {
				        SendClientMessage(playerid,COLOR_GRAD2,"Você não tem um 5º Veiculo VIP!");
					    return true;
				    }
				}
                default:
                {
					SendClientMessage(playerid, COLOR_YELLOW, "USE: /localizarveiculo [1 a 5]");
				}
			}
	        return true;
	}

	CMD:enterexit(playerid, params[])
	{
	        new string[128];
	        if (PlayerToPoint(30.0, playerid,616.7890,-74.8150,997.8872))
            {
                return 1;
            }
            if (PlayerToPoint(30.0, playerid,617.5709,-1.9912,1000.6075))
            {
                return 1;
            }
            if (PlayerToPoint(30.0, playerid,615.2846,-124.2390,997.6894))
            {
                return 1;
            }
            if (PlayerToPoint(30.0, playerid,617.6002,-1.9676,1000.6074))
            {
                return 1;
            }
            if (PlayerToPoint(30.0, playerid,617.6149,-1.9330,1000.6208))
            {
                return 1;
            }
            if(CarShopping[playerid] == true)
            {
                DestroyVehicle(ShopCar[playerid]);
			    TogglePlayerControllable(playerid, true);
			    CarShopping[playerid] = false;
			    carbrowse[playerid] = 0;
		    	showBalao(playerid, "Voce Cancelou", 5000);
		    	PlayerTextDrawHide(playerid, AjudaConce1[playerid]);
 				PlayerTextDrawHide(playerid, AjudaConce2[playerid]);
			    SetPlayerPos(playerid, OrgX[playerid], OrgY[playerid], OrgZ[playerid]);
		 		SetPlayerFacingAngle(playerid, OrgA[playerid]);
		   		SetPlayerVirtualWorld(playerid, 0);
			    SetCameraBehindPlayer(playerid);
                return 1;
            }
	    	if(HouseEntered[playerid] < 500)
	    	{
				if (PlayerToPoint(2.0, playerid,HouseInfo[HouseEntered[playerid]][hExitx], HouseInfo[HouseEntered[playerid]][hExity], HouseInfo[HouseEntered[playerid]][hExitz]))
				{
					SetPlayerInterior(playerid,0);
					SetPlayerPos(playerid,HouseInfo[HouseEntered[playerid]][hEntrancex],HouseInfo[HouseEntered[playerid]][hEntrancey],HouseInfo[HouseEntered[playerid]][hEntrancez]);
					PlayerInfo[playerid][pInt] = 0;
					PlayerInfo[playerid][pLocal] = 255;
					HouseEntered[playerid] = 500;
					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerHealth(playerid, 100.0);
					return true;
				}
			}
			for(new i = 0; i <  sizeof(BizzInfo); i++)
			{
				if (PlayerToPoint(1, playerid,BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]))
				{
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerPos(playerid,BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ]);
					PlayerInfo[playerid][pLocal] = 255;
					return true;
				}
			}
			if(GetPlayerVehicleID(playerid) > 0)
			{
				Controle(playerid, 1);
				RemovePlayerFromVehicle(playerid);
				PlayerInfo[playerid][pInt] = 0;
				return true;
			}


         	else if(IsPlayerInRangeOfPoint(playerid, 2.5, 1797.5494,-1579.0006,14.0865))
			{//penitenciária entrada
                GameTextForPlayer(playerid, "~w~Penitenciaria", 5000, 1);
				SetPlayerPos(playerid, 2267.6323,1962.3939,39.3827);
   				SetPlayerFacingAngle(playerid, 96.2459);
		    	SetPlayerInterior(playerid, 1);
   				SetPlayerVirtualWorld(playerid, 0);
   				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2.5, 2267.6323,1962.3939,39.3827))
			{//penitenciária saida
            if(PlayerInfo[playerid][pJailed] >= 1)
	    		{
	    			SendClientMessage(playerid, COLOR_LIGHTRED, "* Você ainda é um detento !");
	    			return 1;
	    		}
   			    SetPlayerPos(playerid, 1797.5494,-1579.0006,14.0865);
                GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
			    SetPlayerFacingAngle(playerid, 344.2101);
		    	SetPlayerInterior(playerid, 0);
			    SetPlayerVirtualWorld(playerid, 0);
			}

			else if (PlayerToPoint(3, playerid,691.5710,-1276.1722,13.5607))
            {//Entrada
                SetPlayerPos(playerid, -2636.6841,1402.5623,906.4609);
                GameTextForPlayer(playerid, "~r~~h~Familia LincoTz",5000,1);
                SetPlayerInterior(playerid,3);
                SetPlayerFacingAngle(playerid, 0);
                PlayerInfo[playerid][pInt] = 3;
                SetPlayerVirtualWorld(playerid, 0);
            }
            else if (PlayerToPoint(3, playerid,-2636.6841,1402.5623,906.4609))
            {//Saida
                SetPlayerPos(playerid, 691.5710,-1276.1722,13.5607);
                SetPlayerInterior(playerid,0);
                SetPlayerFacingAngle(playerid, 0);
                PlayerInfo[playerid][pInt] = 0;
                SetPlayerVirtualWorld(playerid, 0);
            }

			else if (PlayerToPoint(3, playerid,1548.8167,-1366.2247,326.2109))
			{
	    		SetPlayerPos(playerid, 1572.1115,-1332.5288,16.4844);
	    		PlayerInfo[playerid][pInt] = 0;
			}

			else if (PlayerToPoint(2, playerid,2476.0576,-1750.4755,13.5469))
			{
			    if(PlayerInfo[playerid][pHelper] < 1)
			    {
			        SendClientMessage(playerid, 0x55F6ACFF, "[ERRO] Você não é um Helper e não pode entrar na HQ deles!");
			        return true;
			    }
				SetPlayerPos(playerid,421.1092,2536.4766,10.0000);
				GameTextForPlayer(playerid, "~w~HQ HELPER", 5000, 1);
				PlayerInfo[playerid][pInt] = 10;
				SetPlayerInterior(playerid,10);
				SetPlayerVirtualWorld(playerid, 1);
			}
			else if (PlayerToPoint(2, playerid,421.1092,2536.4766,10.0000))
			{
				SetPlayerPos(playerid,2476.0576,-1750.4755,13.5469);
				GameTextForPlayer(playerid, "~w~LOS SANTOS", 5000, 1);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid, 0);
			}
			else if(PlayerToPoint(1.0, playerid,-2027.0715,-103.6059,1035.1818))
			{
                SetPlayerPos(playerid,952.5583,-909.3518,45.7656);
				PlayerInfo[playerid][pInt] = 0;
				PlayerInfo[playerid][pLocal] = 255;
				SetPlayerInterior(playerid, 0);
			}
	        else if(PlayerToPoint(3.0, playerid,246.5878,62.7877,1003.6406))
            {
		    	SetPlayerVirtualWorld(playerid, 0);
		    	SetPlayerInterior(playerid, 0);
		    	SetPlayerPos(playerid,1554.9537,-1675.6584,16.1953);
		    	PlayerInfo[playerid][pInt] = 0;
		    	PlayerInfo[playerid][pLocal] = 255;
		    	storeexit[playerid] = 0;
			}
            else if(PlayerToPoint(3.0, playerid,346.7058,159.8978,1025.7891))
            {
		    	SetPlayerVirtualWorld(playerid, 0);
		    	SetPlayerInterior(playerid, 0);
		    	SetPlayerPos(playerid,1117.7146,-2043.5776,74.4297);
		    	PlayerInfo[playerid][pInt] = 0;
		    	PlayerInfo[playerid][pLocal] = 255;
		    	storeexit[playerid] = 0;
			}
    		else if(PlayerToPoint(4.0, playerid,390.4640,173.8098,1008.3828))
            {
            	if (storeexit[playerid] == 1717)
				{//prefLS saida (Commerce)
		    		SetPlayerVirtualWorld(playerid, 0);
		    		SetPlayerInterior(playerid, 0);
		    		SetPlayerPos(playerid,1481.0503,-1771.9502,18.7958);
		    		PlayerInfo[playerid][pInt] = 0;
		    		PlayerInfo[playerid][pLocal] = 255;
		    		storeexit[playerid] = 0;
				}
				else if(storeexit[playerid] == 1718)
				{//prefSF saida (Country Club)
					SetPlayerVirtualWorld(playerid, 0);
		    		SetPlayerInterior(playerid, 0);
				    SetPlayerPos(playerid,-2720.1074,-318.5733,7.8438);
				    PlayerInfo[playerid][pInt] = 0;
		    		PlayerInfo[playerid][pLocal] = 255;
		    		storeexit[playerid] = 0;
				}
				else if(storeexit[playerid] == 2589)
				{//prefLS saida (East Beach)
					SetPlayerVirtualWorld(playerid, 0);
		    		SetPlayerInterior(playerid, 0);
				    SetPlayerPos(playerid,2793.6682,-1087.5436,30.7188);
				    PlayerInfo[playerid][pInt] = 0;
		    		PlayerInfo[playerid][pLocal] = 255;
		    		storeexit[playerid] = 0;
				}
				else if(storeexit[playerid] == 1719)
				{//prefSF saida (Downtown)
					SetPlayerVirtualWorld(playerid, 0);
		    		SetPlayerInterior(playerid, 0);
				    SetPlayerPos(playerid,-1882.6202,824.2709,35.1751);
				    PlayerInfo[playerid][pInt] = 0;
		    		PlayerInfo[playerid][pLocal] = 255;
		    		storeexit[playerid] = 0;
				}
			}
	        else if(PlayerToPoint(3.0, playerid,207.7336,-108.6231,1005.1328))
	        {//Saida Binco


            	SetPlayerVirtualWorld(playerid, 0);
	     		SetPlayerInterior(playerid, 0);
	    		SetPlayerPos(playerid,2244.5669,-1664.4495,15.4766);
	    		PlayerInfo[playerid][pInt] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
	    	}
	    	else if (PlayerToPoint(3.0, playerid,161.3350,-95.0194,1001.8047))
	        {//Saida ZIP

     			SetPlayerPos(playerid, 1456.9010,-1137.6941,23.9617);
     			SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid,0);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
        	}
   			else if (PlayerToPoint(3.0, playerid,226.293991,-7.431529,1002.210937))
	        {//Saida VICTIM


     			SetPlayerPos(playerid, -1694.5050,950.8621,24.8906);
     			SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid,0);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
        	}

			else if(PlayerToPoint(1.0, playerid,501.8770,-67.7092,998.7578))
            {
				if(barexit[playerid] == 1)
				{//BAR PERTO DA GROOVE
                    UpdateBarText(barexit[playerid]);
					SetPlayerVirtualWorld(playerid, 0);
		    		SetPlayerInterior(playerid, 0);
		    		SetPlayerFacingAngle(playerid, 130.5600);
				    SetPlayerPos(playerid,2309.7676,-1643.7872,14.8270);
				    PlayerInfo[playerid][pInt] = 0;
		    		PlayerInfo[playerid][pLocal] = 255;
		    		barexit[playerid] = 0;
				}
				if(barexit[playerid] == 2)
				{//BAR PERTO DA GROOVE
                    UpdateBarText(barexit[playerid]);
					SetPlayerVirtualWorld(playerid, 0);
		    		SetPlayerInterior(playerid, 0);
		    		SetPlayerFacingAngle(playerid, 130.5600);
				    SetPlayerPos(playerid,1323.9729,-1841.6465,13.5469);
				    PlayerInfo[playerid][pInt] = 0;
		    		PlayerInfo[playerid][pLocal] = 255;
		    		barexit[playerid] = 0;
				}
				if(barexit[playerid] == 3)
				{//BAR PERTO DA GROOVE
                    UpdateBarText(barexit[playerid]);
					SetPlayerVirtualWorld(playerid, 0);
		    		SetPlayerInterior(playerid, 0);
		    		SetPlayerFacingAngle(playerid, 130.5600);
				    SetPlayerPos(playerid,776.4116,-1036.1841,24.2753);
				    PlayerInfo[playerid][pInt] = 0;
		    		PlayerInfo[playerid][pLocal] = 255;
		    		barexit[playerid] = 0;
				}
				if(barexit[playerid] == 4)
				{//BAR PERTO DA GROOVE
                    UpdateBarText(barexit[playerid]);
					SetPlayerVirtualWorld(playerid, 0);
		    		SetPlayerInterior(playerid, 0);
		    		SetPlayerFacingAngle(playerid, 130.5600);
				    SetPlayerPos(playerid,2354.3938,-1511.7820,24.0000);
				    PlayerInfo[playerid][pInt] = 0;
		    		PlayerInfo[playerid][pLocal] = 255;
		    		barexit[playerid] = 0;
				}
				if(barexit[playerid] == 5)
				{//BAR PERTO DA GROOVE
                    UpdateBarText(barexit[playerid]);
					SetPlayerVirtualWorld(playerid, 0);
		    		SetPlayerInterior(playerid, 0);
		    		SetPlayerFacingAngle(playerid, 130.5600);
				    SetPlayerPos(playerid,2850.9463,-1532.4783,11.0991);
				    PlayerInfo[playerid][pInt] = 0;
		    		PlayerInfo[playerid][pLocal] = 255;
		    		barexit[playerid] = 0;
				}
			}
	    	else if(PlayerToPoint(3.0, playerid,493.3891,-22.7212,1000.6797))
	        {//Saida Alhambra

	    		SetPlayerInterior(playerid, 0);
	     		SetPlayerVirtualWorld(playerid, 0);
	     		SetPlayerPos(playerid,1836.4064,-1682.4403,13.3493);
	    		PlayerInfo[playerid][pInt] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
	    		StopAudioStreamForPlayer(playerid);
        	}
        	else if(PlayerToPoint(1.0, playerid,-1352.1919,497.4284,11.1953))
	        {//Exercito Saida
	     		SetPlayerPos(playerid,-1412.5397,486.6541,7.6836);
        	}
        	else if(PlayerToPoint(2.0, playerid,1204.8965,-13.5596,1000.9219))
         	{//saida pigpen

	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid, 0);
	    		SetPlayerPos(playerid,2421.4998,-1219.2438,25.5617);
	    		PlayerInfo[playerid][pInt] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
	        }
	        else if(PlayerToPoint(2.0, playerid,771.9399,-2.2574,1000.7292))
	        {//Saida Ginasio de Lutas


	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid, 0);
	    		SetPlayerPos(playerid,2229.9011,-1721.2582,13.5613);
	    		PlayerInfo[playerid][pInt] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
        	}
        	else if (PlayerToPoint(5.0, playerid,366.0324,-72.6400,1001.5078))
        	{
	    	//entrada Burger Shot 1


	     		SetPlayerPos(playerid, 1200.4497,-918.7695,43.1105);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid,0);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 0;
	    		InAFoodPlace[playerid] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
        	}
        	else if (PlayerToPoint(5.0, playerid,681.5034,-452.0092,-25.6172))
        	{
	    	//Saida Burger Shot 2
	     		SetPlayerPos(playerid, 810.4855,-1616.1888,13.5469);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid,0);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
	    		InAFoodPlace[playerid] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
        	}

	        else if(PlayerToPoint(5.0, playerid,365.7793,-9.1699,1001.8516))
            {
            	if (InAFoodPlace[playerid] == 1)
				{//clukin


	     		SetPlayerPos(playerid, 927.6217,-1353.0105,13.3438);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid, 0);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 0;
	    		InAFoodPlace[playerid] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
				}
				else if(InAFoodPlace[playerid] == 7)
				{//perto da groove


	     		SetPlayerPos(playerid, 2419.8442,-1509.4996,24.0000);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid, 0);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 0;
	    		InAFoodPlace[playerid] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
				}
			}
        	else if (PlayerToPoint(5.0, playerid,372.4117,-130.4577,1001.4922))
        	{
	    	//Saida Well Stacked Pizza


	     		SetPlayerPos(playerid, 2105.4858,-1806.4725,13.5547);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid,0);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 0;
	    		InAFoodPlace[playerid] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
        	}
        	else if (PlayerToPoint(5.0, playerid,377.5237,-191.6597,1000.6328))
        	{
	    	//SaidaLanchonete


	     		SetPlayerPos(playerid, 975.4691,-1335.9618,13.5319);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid, 0);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 0;
	    		InAFoodPlace[playerid] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
        	}
//=-=-=-=-=-=-=-=-=| HOTEL SAÍDA |=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=<|
    		else if (PlayerToPoint(2.0, playerid,2228.4087,-1150.5686,1025.7969))
			{
				//Hotel Saida


				SetPlayerPos(playerid, 2231.7896,-1159.8646,25.8906);
				SetPlayerInterior(playerid,0);
				SetPlayerFacingAngle(playerid, 0);
				PlayerInfo[playerid][pInt] = 0;
				PlayerInfo[playerid][pLocal] = 255;
				SetPlayerVirtualWorld(playerid, 0);
			}
			else if (PlayerToPoint(3.0, playerid,2190.1182,-1179.7944,1033.7896))
			{
				//Hotel Saida 2


				SetPlayerPos(playerid, 2231.7896,-1159.8646,25.8906);
				SetPlayerInterior(playerid,0);
				SetPlayerFacingAngle(playerid, 0);
				PlayerInfo[playerid][pInt] = 0;
				PlayerInfo[playerid][pLocal] = 255;
				SetPlayerVirtualWorld(playerid, 0);
			}
			else if (PlayerToPoint(3.0, playerid,2238.9316,-1192.4878,1033.7969))
			{
				//Hotel Saida 3


				SetPlayerPos(playerid, 2231.7896,-1159.8646,25.8906);
				SetPlayerInterior(playerid,0);
				SetPlayerFacingAngle(playerid, 0);
				PlayerInfo[playerid][pInt] = 0;
				PlayerInfo[playerid][pLocal] = 255;
				SetPlayerVirtualWorld(playerid, 0);
			}
			else if (PlayerToPoint(3.0, playerid,2193.3254,-1138.6238,1029.7969))
			{
				//Hotel Saida 4


				SetPlayerPos(playerid, 2231.7896,-1159.8646,25.8906);
				SetPlayerInterior(playerid,0);
				SetPlayerFacingAngle(playerid, 0);
				PlayerInfo[playerid][pInt] = 0;
				PlayerInfo[playerid][pLocal] = 255;
				SetPlayerVirtualWorld(playerid, 0);
			}
//=-=-=-=-=-=-=-=-=| SAÍDA HQ'S DAS ORGANIZAÇÕES |=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=<|
	       	else if (PlayerToPoint(2.0, playerid,-2171.3071,645.2919,1057.5938))
	        {//SAIDA HQ PCC
	        	if(storeexit[playerid] == 21)
	            {


  		 			SetPlayerPos(playerid, 2232.2180,-1458.5508,24.0173);
		   		 	SetPlayerInterior(playerid,0);
			    	SetPlayerFacingAngle(playerid, 0);
			    	PlayerInfo[playerid][pInt] = 0;
			    	PlayerInfo[playerid][pLocal] = 255;
	            	SetPlayerVirtualWorld(playerid, 0);
	            	storeexit[playerid] = 0;
	            }
	        }
			else if (PlayerToPoint(1.0, playerid,1436.6419,-979.6736,57.5156))
			{//Cofre Banco Saida
				SetPlayerInterior(playerid, 1);
				PlayerInfo[playerid][pInt] = 1;
				SetPlayerVirtualWorld(playerid, 10);
				SetPlayerPos(playerid,342.8699,116.3759,1007.9657);
			}
			else if (PlayerToPoint(3.0, playerid,246.4452,108.4379,1003.2188))
	        {
	    	    if(storeexit[playerid] == 2)
	    	    {
		    		SetPlayerPos(playerid, 328.0614,-1512.2689,36.0325);
		    		SetPlayerInterior(playerid,0);
		    		SetPlayerFacingAngle(playerid, 0);
		    		PlayerInfo[playerid][pInt] = 0;
		    		PlayerInfo[playerid][pLocal] = 255;
		    		SetPlayerVirtualWorld(playerid, 0);
		    		storeexit[playerid] = 0;
				}
	        }

            else if (PlayerToPoint(2.0, playerid,238.7043,139.0727,1003.0234))
	        {
	    	    if(storeexit[playerid] == 11)
	    	    {
		    		SetPlayerPos(playerid, 914.8825,-1004.4962,37.9821);
		    		SetPlayerInterior(playerid,0);
		    		SetPlayerFacingAngle(playerid, 0);
		    		PlayerInfo[playerid][pInt] = 0;
		    		PlayerInfo[playerid][pLocal] = 255;
		    		SetPlayerVirtualWorld(playerid, 0);
		    		storeexit[playerid] = 0;
				}
	        }
	        else if (PlayerToPoint(2.0, playerid,1726.8353,-1638.3109,20.2232))
	        {
	    	    if(storeexit[playerid] == 16)
	    	    {
		    		SetPlayerPos(playerid, 1783.4891,-1786.8514,13.5305);
		    		SetPlayerInterior(playerid,0);
		    		SetPlayerFacingAngle(playerid, 0);
		    		PlayerInfo[playerid][pInt] = 0;
		    		PlayerInfo[playerid][pLocal] = 255;
		    		SetPlayerVirtualWorld(playerid, 0);
		    		storeexit[playerid] = 0;
				}
	        }
	        else if(PlayerToPoint(2.0, playerid,238.7194,141.7792,1003.0234))
	        {
				if(DPExit[playerid] == 1)
				{
			    	SetPlayerInterior(playerid, 0);
			    	SetPlayerPos(playerid,919.311462,-1252.192504,16.210937);
			    	PlayerInfo[playerid][pInt] = 0;
			    	SetPlayerVirtualWorld(playerid, 0);
			    	PlayerInfo[playerid][pLocal] = 255;
			    	DPExit[playerid] = 0;
				}
	        }

        	else if(PlayerToPoint(2.0, playerid,2270.1592,-1210.4899,1047.5625))
        	{//SAIDA HQ BALLAS
        	    if(storeexit[playerid] == 17)
        	    {

	    			SetPlayerInterior(playerid, 0);
	    			SetPlayerPos(playerid,1154.4968,-1180.8517,32.8187);
	    			SetPlayerFacingAngle(playerid, 82.4074);
	    			PlayerInfo[playerid][pInt] = 0;
	    			SetPlayerVirtualWorld(playerid, 0);
	    			PlayerInfo[playerid][pLocal] = 255;
	    			storeexit[playerid] = 0;
	    		}
        	}

        	else if(PlayerToPoint(2.0, playerid,1673.656616,-2122.438476,14.146014))
        	{//entrada HQ AZTECAS


	    		GameTextForPlayer(playerid, "~w~HQ Los Aztecas", 5000, 1);
	    		SetPlayerInterior(playerid, 5);
	    		SetPlayerPos(playerid,22.8858,1405.1282,1084.4297);
	    		PlayerInfo[playerid][pInt] = 5;
	    		SetPlayerVirtualWorld(playerid, 0);
	    		PlayerInfo[playerid][pLocal] = 255;
	    		storeexit[playerid] = 5;
	        }
			else if (PlayerToPoint(1.0, playerid,343.4222,116.4533,1007.9656))
			{//Cofre banco Entrada
				PlayerInfo[playerid][pLocal] = 999;
		        GameTextForPlayer(playerid, "~w~Cofre Banco", 5000, 1);
				SetPlayerInterior(playerid, 0);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerVirtualWorld(playerid, 1);
				SetPlayerPos(playerid,1439.3590,-979.6736,57.5156);
				Controle(playerid, 0);
				GameTextForPlayer(playerid, "~b~Carregando", 1000, 5);
        	    SetTimerEx("Carregar", 1000, 0, "i", playerid);
             }
			//entrada casa para receber
			else if(IsPlayerInRangeOfPoint(playerid,1.0,2370.1055,-1034.5626,54.4106))
				{
				    if(GetPlayerVirtualWorld(playerid) == 15)
				    {
						PlayerInfo[playerid][pLocal] = 255;
						SetPlayerPos(playerid,245.7718,304.7670,999.1484);
						SetPlayerInterior(playerid,1);
						PlayerInfo[playerid][pInt] = 1;
						SetPlayerVirtualWorld(playerid,15);
					}
					if(GetPlayerVirtualWorld(playerid) == 0)
				    {
				        if(!IsACop(playerid))
				        {
				            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Somente Cops podem Invadir o Local de Gambista.");
							return 1;
				        }
						PlayerInfo[playerid][pLocal] = 255;
						SetPlayerPos(playerid,245.7718,304.7670,999.1484);
						SetPlayerInterior(playerid,1);
						PlayerInfo[playerid][pInt] = 1;
						SetPlayerVirtualWorld(playerid,15);
					}
					//PlayerInfo[playerid][pVirWorld]=2;
			 }
			 //saida casa para receber
			else if(IsPlayerInRangeOfPoint(playerid,1.0,243.7224,304.9727,999.1484))
				{
					PlayerInfo[playerid][pLocal] = 255;
					SetPlayerPos(playerid,2372.7520,-1040.8934,54.2025);
			        SetPlayerInterior(playerid,0);
			        PlayerInfo[playerid][pInt] = 0;
					SetPlayerVirtualWorld(playerid,0);
					//PlayerInfo[playerid][pVirWorld]=0;
				}
            else if (PlayerToPoint(1.0, playerid,2261.4253,-1906.6353,14.9375))
			{//Entrada Traficantes
				PlayerInfo[playerid][pLocal] = 999;
		        GameTextForPlayer(playerid, "~w~Area de Trafico", 5000, 1);
				SetPlayerInterior(playerid, 2);
				SetPlayerVirtualWorld(playerid, 1);
				PlayerInfo[playerid][pInt] = 1;
				SetPlayerPos(playerid,1449.7476,-1090.1858,213.3828);
				PlayerInfo[playerid][pLocal] = 4;
				Controle(playerid, 0);
				GameTextForPlayer(playerid, "~b~Carregando", 1000, 5);
        	    SetTimerEx("Carregar", 1000, 0, "i", playerid);
        	    if(PlayerInfo[playerid][pTempoFDrugs] > 0)
				{
				    SetPlayerCheckpoint(playerid, 1973.9019,-1444.6169,17.9239, 0.5);
				}
			}
			else if (PlayerToPoint(1.0, playerid,1449.7476,-1090.1858,213.3828))
			{//Saida Traficantes
				PlayerInfo[playerid][pLocal] = 999;
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerPos(playerid,2261.4253,-1906.6353,14.9375);
			}
			//--------------
			else if (PlayerToPoint(1.0, playerid,1289.1768,-1271.5176,13.5400))
			{//Entrada Sedex
				PlayerInfo[playerid][pLocal] = 999;
		        GameTextForPlayer(playerid, "~g~Correios", 5000, 1);
				SetPlayerInterior(playerid, 1);
				SetPlayerVirtualWorld(playerid, 0);
				PlayerInfo[playerid][pInt] = 1;
				SetPlayerPos(playerid,-2158.695800,643.097412,1052.375000);
				Controle(playerid, 0);
				GameTextForPlayer(playerid, "~b~Carregando", 1000, 5);
        	    SetTimerEx("Carregar", 1000, 0, "i", playerid);
                if(IsACop(playerid)){}else{SavArmasLocais(playerid);}
        	    if(PlayerInfo[playerid][pTempoFDrugs] > 0)
				{
				    SetPlayerCheckpoint(playerid, 1973.9019,-1444.6169,17.9239, 0.5);
				}
			}
			else if (PlayerToPoint(1.0, playerid,-2158.695800,643.097412,1052.375000))
			{//Saida Sedex
				PlayerInfo[playerid][pLocal] = 999;
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerPos(playerid,1289.1768,-1271.5176,13.5400);
				if(IsACop(playerid)){}else{SetArmasLocais(playerid);}
			}
            //-----------
			else if (PlayerToPoint(1.0, playerid,1498.4534,-1581.5217,13.5498))
			{//Entrada MERCADO NEGRO
				PlayerInfo[playerid][pLocal] = 999;
		        GameTextForPlayer(playerid, "~w~Agencia de Empregos", 5000, 1);
				SetPlayerInterior(playerid, 3);
				SetPlayerVirtualWorld(playerid, 0);
				PlayerInfo[playerid][pInt] = 3;
				SetPlayerPos(playerid,1494.4652,1303.5785,1093.2891);
				Controle(playerid, 0);
				GameTextForPlayer(playerid, "~b~Carregando", 1000, 5);
        	    SetTimerEx("Carregar", 1000, 0, "i", playerid);
                if(IsACop(playerid)){}else{SavArmasLocais(playerid);}
        	    if(PlayerInfo[playerid][pTempoFDrugs] > 0)
				{
				    SetPlayerCheckpoint(playerid, 1973.9019,-1444.6169,17.9239, 0.5);
				}
			}
			else if (PlayerToPoint(1.0, playerid,1494.4652,1303.5785,1093.2891))
			{//Saida MERCADO NEGRO
				PlayerInfo[playerid][pLocal] = 999;
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerPos(playerid,1498.4534,-1581.5217,13.5498);
				if(IsACop(playerid)){}else{SetArmasLocais(playerid);}
			}
			if(PlayerToPoint(1.5,playerid, 2695.4438,-1704.5880,11.8438))
            {
                new sexo[256];
                format(sexo, sizeof(sexo), "Arena de Stunt Com Motos e Bikes\nEntrada: R$1000, Clique em Pagar Para Entrar\nEm Cancelar para não Entrar", playerid);
                ShowPlayerDialog(playerid, 5567, DIALOG_STYLE_MSGBOX, "Arena",sexo,"Entrar", "Cancelar");
            }
            //Arena de Stunt com Moto e Bike
            if(PlayerToPoint(1.5,playerid, -1348.2019,1654.8229,1052.5313))
            {
                GameTextForPlayer(playerid, "~y~Los Santos", 5000, 1);
                SetPlayerPos(playerid, 2695.4438,-1704.5880,11.8438);
                SetPlayerInterior(playerid, 0);
                SetArmasLocais(playerid);
            }
			//--------------
			else if (PlayerToPoint(1.0, playerid,2233.8225,-1333.2725,23.9816))
			{//igreja LS
				PlayerInfo[playerid][pLocal] = 999;
		        GameTextForPlayer(playerid, "~w~Igreja LS", 5000, 1);
				SetPlayerInterior(playerid, 1);
				PlayerInfo[playerid][pInt] = 1;
				SetPlayerPos(playerid,1964.0472,-349.9243,1092.9454);
				PlayerInfo[playerid][pLocal] = 3;
				Controle(playerid, 0);
				GameTextForPlayer(playerid, "~b~Carregando", 2000, 5);
        	    SetTimerEx("Carregar", 2000, 0, "i", playerid);
        	    if(IsACop(playerid)){}else{SavArmasLocais(playerid);}
			}
			else if (PlayerToPoint(3.0, playerid,1964.0472,-349.9243,1092.9454))
			{//Saida Igreja LS
				PlayerInfo[playerid][pLocal] = 999;
				SetPlayerInterior(playerid, 0);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerPos(playerid,2233.8225,-1333.2725,23.9816);
				if(IsACop(playerid)){}else{SetArmasLocais(playerid);}
			}
			else if (PlayerToPoint(8.0, playerid,1613.0029,-1559.9917,14.1684))
			{//Saida Mercado Negro
				mercadoexit[playerid] = 6;
			}
			else if (PlayerToPoint(5.0, playerid,932.6458,2150.4231,1011.0234))
			{//Saida Mercado Negro
				mercadoexit[playerid] = 0;
			}
	        else if(PlayerToPoint(1.0, playerid,22.8858,1405.1282,1084.4297))
        	{//SAIDA HQ AZTECAS
        	    if(storeexit[playerid] == 5)
        	    {

	    			SetPlayerInterior(playerid, 0);
	    			SetPlayerPos(playerid,1673.656616,-2122.438476,14.146014);
	    			PlayerInfo[playerid][pInt] = 0;
	    			SetPlayerVirtualWorld(playerid, 0);
	    			PlayerInfo[playerid][pLocal] = 255;
	    			storeexit[playerid] = 0;
	    		}
	        }

	        else if (PlayerToPoint(1.0, playerid,2496.0398,-1692.0844,1014.7422))
        	{
        	    if(storeexit[playerid] == 14)
        	    {
	    	//HQ Groove Street Saida
	     			SetPlayerPos(playerid,2495.2939,-1690.3051,14.7656);
	     			SetPlayerInterior(playerid,0);
	     			SetPlayerFacingAngle(playerid, 4.0967);
	    			PlayerInfo[playerid][pInt] = 0;
	    			SetPlayerVirtualWorld(playerid, 0);
	    			PlayerInfo[playerid][pLocal] = 255;
	    			storeexit[playerid] = 0;
	    		}
	        }

	        else if(PlayerToPoint(1.0, playerid,343.7183,304.9376,999.1484))
        	{//SAIDA HQ HITMANS


	     		SetPlayerInterior(playerid, 0);
	     		SetPlayerPos(playerid,2281.1196,-2364.9805,13.5469);
	     		PlayerInfo[playerid][pInt] = 0;
	     		SetPlayerVirtualWorld(playerid, 0);
	     		PlayerInfo[playerid][pLocal] = 255;
     		}

        	else if(PlayerToPoint(1.0, playerid,2308.5269,-1211.2737,1049.0234))
        	{//SAIDA HQ CV


	    		SetPlayerInterior(playerid, 0);
	    		SetPlayerPos(playerid,2141.179199,-1801.976318,16.147472);
	    		PlayerInfo[playerid][pInt] = 0;
	    		SetPlayerVirtualWorld(playerid, 0);
	    		PlayerInfo[playerid][pLocal] = 255;
        	}
	        else if (PlayerToPoint(2.0, playerid,295.1739,1472.2755,1080.2578))
	        {//SAIDA HQ VAGOS
	            if(storeexit[playerid] == 18)
	            {
			  	    SetPlayerPos(playerid, 2808.0623,-1190.4780,25.3426);
		  		  	SetPlayerInterior(playerid,0);
			    	SetPlayerFacingAngle(playerid, 0);
   	 				PlayerInfo[playerid][pInt] = 0;
     		 		PlayerInfo[playerid][pLocal] = 255;
       		 		SetPlayerVirtualWorld(playerid, 0);
	            	storeexit[playerid] = 0;
	            }
	        }


   for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3.5, HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				{
					if(PlayerInfo[playerid][pPHousekey] == i || HouseInfo[i][hLock] == 0 || PlayerInfo[playerid][pAdmin] >= 1337)
					{
						SetPlayerInterior(playerid,HouseInfo[i][hInt]);
						SetPlayerPos(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
						GameTextForPlayer(playerid, "~w~Bem vindo em casa", 5000, 1);

						PlayerInfo[playerid][pInt] = HouseInfo[i][hInt];
						PlayerInfo[playerid][pLocal] = i;
						HouseEntered[playerid] = i;
						SetPlayerVirtualWorld(playerid,HouseInfo[i][hWorld]);
						return true;
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Fechado", 5000, 1);
						return true;
					}
				}
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 3.5,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
				{
				ShowPlayerDialog(playerid,5894,DIALOG_STYLE_LIST,"Escolha uma opção","Entrar na empresa\nEntrar no cofre","Entrar", "Fechar");
				}
		    }
			for(new i = 0; i < sizeof(SBizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
				{
					if(PlayerInfo[playerid][pPbiskey] == i || GetPlayerMoney(playerid) >= SBizzInfo[i][sbEntranceCost])
					{
						if(PlayerInfo[playerid][pPbiskey] != i)
						{
                   			if(SBizzInfo[i][sbProducts] < 1)
							{
								GameTextForPlayer(playerid, "~r~Empresa sem produtos", 5000, 1);
								return true;
							}
							if(SBizzInfo[i][sbLocked] == 1)
							{
								GameTextForPlayer(playerid, "~r~Empresa fechada", 5000, 1);
								return 1;
							}
							switch(i)
							{
							    case 10, 11, 25:
							    {
							        if(i == 25 && !corridainiciada)return 1;
									SBizzInfo[i][sbProducts] -= 3;
									GiveDinheiro(playerid,-SBizzInfo[i][sbEntranceCost]);
									SBizzInfo[i][sbTill] += SBizzInfo[i][sbEntranceCost];
									ExtortionSBiz(i, SBizzInfo[i][sbEntranceCost]);
									new dood[MAX_PLAYER_NAME];
									GetPlayerName(playerid, dood, sizeof(dood));
									format(string, sizeof(string), "%s pagou $%d para entrar na empresa %d", dood, SBizzInfo[i][sbEntranceCost], i);
									printf("%s", string);
									BPFLogs("pay", string);
									SalvarSEmpresa(i);
									Atualizar3Dtexts();
								}
							}
						}
						if(i == 10)
						{
						    PaintballPlayers ++;
						    PlayerPaintballing[playerid] = 1;
						    PlayerPaintballKills[playerid] = 0;
						    Controle(playerid, 0);
						    antihands[playerid] = 1;
						    new rand = random(sizeof(PaintballSpawns));
							SetPlayerPos(playerid, PaintballSpawns[rand][0], PaintballSpawns[rand][1], PaintballSpawns[rand][2]);
							SetPlayerVirtualWorld(playerid, 0);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você entrou no paint ball, espere começar!");
						}
						else if(i == 11)
						{
						    PlayerKarting[playerid] = 1;
						    SendClientMessage(playerid, TEAM_GROVE_COLOR, "Agora você pode participar da corrida de Kart, pegue um.");
						}
						return true;
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Você não possui dinheiro suficiente", 5000, 1);
						return true;
					}
				}
			}
            for(new i = 0; i < sizeof(FBizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,FBizzInfo[i][fbEntranceX], FBizzInfo[i][fbEntranceY], FBizzInfo[i][fbEntranceZ]))
				{
					if(PlayerInfo[playerid][pPFazkey] == i || GetPlayerMoney(playerid) >= FBizzInfo[i][fbEntranceCost])
					{
						if(PlayerInfo[playerid][pPFazkey] != i)
						{
                   			if(FBizzInfo[i][fbProducts] < 1)
							{
								GameTextForPlayer(playerid, "~r~Fazenda sem produtos", 5000, 1);
								return true;
							}
							if(FBizzInfo[i][fbLocked] == 1)
							{
								GameTextForPlayer(playerid, "~r~Fazenda fechada", 5000, 1);
								return 1;
							}
						}
						return true;
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Você não possui dinheiro suficiente", 5000, 1);
						return true;
					}
				}
			}
			if (PlayerToPoint(1, playerid,2150.4678,1602.8265,1001.9705))
			{
				SetPlayerPos(playerid,1412.0570,-1700.0341,13.5395);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerInterior(playerid,0);
			}
			if (PlayerToPoint(1, playerid,942.0542,2113.2874,1011.0303))
			{
				SetPlayerPos(playerid,1613.0029,-1559.9917,14.1684);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerInterior(playerid,0);
			}
			if (PlayerToPoint(1, playerid,305.0506,-159.2978,999.5938))
			{
				SetPlayerPos(playerid,1791.2120,-1164.6317,23.8281);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerInterior(playerid,0);
			}
			if (PlayerToPoint(1, playerid,2148.3474,1605.1732,1001.8270))
			{
				SetPlayerPos(playerid,1631.8547,-1172.5637,24.0843);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerInterior(playerid,0);
			}
			if (PlayerToPoint(1, playerid,2204.8562,1551.2562,1008.5510))
			{
				SetPlayerPos(playerid,1352.4357,-1759.0243,13.5078);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerInterior(playerid,0);
			}
			if (PlayerToPoint(1, playerid,301.7170,-75.3184,1001.5156))
			{
				SetPlayerPos(playerid,1366.1761,-1279.8679,13.5469);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerInterior(playerid,0);
			}
   			else if (PlayerToPoint(2, playerid,1481.0503,-1771.9502,18.7958))
   			{//Prefeitura LS(Commerce)
			    SetPlayerInterior(playerid,3);
			    SetPlayerVirtualWorld(playerid, 0);
				SetPlayerPos(playerid,390.4640,173.8098,1008.3828);
				GameTextForPlayer(playerid, "~w~Bem vindo a ~n~~b~Prefeitura !", 5000, 1);
				PlayerInfo[playerid][pInt] = 3;
	  			storeexit[playerid] = 1717;
			}
			else if (PlayerToPoint(2, playerid,1117.7146,-2043.5776,74.4297))
   			{//Prefeitura LS(Commerce)
			    SetPlayerInterior(playerid,3);
			    SetPlayerVirtualWorld(playerid, 0);
				SetPlayerPos(playerid,346.7058,159.8978,1025.7891);
				GameTextForPlayer(playerid, "~w~Sala do Prefeito", 5000, 1);
				PlayerInfo[playerid][pInt] = 3;
	  			storeexit[playerid] = 1717;
			}

			else if (PlayerToPoint(3, playerid,2793.6682,-1087.5436,30.7188))
			{//Prefeitura LS(East Beach)
			    SetPlayerInterior(playerid,3);
			    SetPlayerVirtualWorld(playerid, 2);
				SetPlayerPos(playerid,390.4640,173.8098,1008.3828);
				GameTextForPlayer(playerid, "~w~Bem vindo a ~n~~b~Prefeitura !", 5000, 1);
				PlayerInfo[playerid][pInt] = 3;
	  			storeexit[playerid] = 2589;
			}

			else if(IsPlayerInRangeOfPoint(playerid, 2.5, 1172.455810,-1323.404174,15.403120))
			{//hospital entrada
				SetPlayerPos(playerid, 1175.553100,-1325.960693,-44.283576);
   				SetPlayerFacingAngle(playerid, 96.2459);
		    	SetPlayerInterior(playerid, 10);
   				SetPlayerVirtualWorld(playerid, 0);
   				return 1;
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2.5, 1175.553100,-1325.960693,-44.283576))
			{//hospital saida
			    if(PlayerInfo[playerid][pTempoHospital] >= 1)
	    		{
	    			SendClientMessage(playerid, COLOR_GREY, "  Enquanto você estiver Hospitalizado, não poderá sair do Hospital!");
	    			return 1;
	    		}
   				SetPlayerPos(playerid, 1172.455810,-1323.404174,15.403120);
			    SetPlayerFacingAngle(playerid, 344.2101);
		    	SetPlayerInterior(playerid, 0);
			    SetPlayerVirtualWorld(playerid, 0);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2.5, 690.7985,-1275.9355,13.5602))
			{//Yakuza
			    SetPlayerPos(playerid, 2468.0916,-1698.3778,1013.5078);
			    SetPlayerInterior(playerid, 2);
			    SetPlayerVirtualWorld(playerid, 0);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2.5, 2468.0916,-1698.3778,1013.5078))
			{//Yakuza
			    SetPlayerPos(playerid, 690.7985,-1275.9355,13.5602);
			    SetPlayerInterior(playerid, 0);
			    SetPlayerVirtualWorld(playerid, 0);
			}

			else if(IsPlayerInRangeOfPoint(playerid, 2.5, 1496.89,-688.01,95.56))
			{//russa
			    SetPlayerPos(playerid, 2261.0310,-1135.9053,1050.6328);
			    SetPlayerInterior(playerid, 10);
			    SetPlayerVirtualWorld(playerid, 0);
			}
			else if(IsPlayerInRangeOfPoint(playerid, 2.5, 2261.0310,-1135.9053,1050.6328))
			{//russa
			    SetPlayerPos(playerid, 1496.89,-688.01,95.56);
			    SetPlayerInterior(playerid, 0);
			    SetPlayerVirtualWorld(playerid, 0);
			}

   			else if (PlayerToPoint(2, playerid,-2720.1074,-318.5733,7.8438))
   			{//Prefeitura SF(Country Club)
			    SetPlayerInterior(playerid,3);
			    SetPlayerVirtualWorld(playerid, 1);
				SetPlayerPos(playerid,390.4640,173.8098,1008.3828);
				GameTextForPlayer(playerid, "~w~Bem vindo a ~n~~b~Prefeitura !", 5000, 1);
				PlayerInfo[playerid][pInt] = 3;
	  			storeexit[playerid] = 1718;
			}

   			else if (PlayerToPoint(2, playerid,-1882.6202,824.2709,35.1751))
			{//Prefeitura SF (Downtown)
			    SetPlayerInterior(playerid,3);
			    SetPlayerVirtualWorld(playerid, 3);
				SetPlayerPos(playerid,390.4640,173.8098,1008.3828);
				GameTextForPlayer(playerid, "~w~Bem vindo a ~n~~b~Prefeitura !", 5000, 1);
				PlayerInfo[playerid][pInt] = 3;
	  			storeexit[playerid] = 1719;
			}
//------------------------------------
			//Sex Shop
			else if (PlayerToPoint(3, playerid,1087.5569,-922.4803,43.3906))
			{
			    if(PlayerInfo[playerid][pAge] < 18)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "[ERRO] Você precisa ter mais de 18 anos para entrar em um SexShop digite /minhaidade!");
			        return true;
			    }
				SetPlayerPos(playerid,-100.3403,-24.6412,1000.7188);
				GameTextForPlayer(playerid, "~p~Sex Shop", 5000, 1);
				PlayerInfo[playerid][pInt] = 3;
				SetPlayerVirtualWorld(playerid,0);
				SetPlayerInterior(playerid,3);
				storeexit[playerid] = 1;
			}
			else if (PlayerToPoint(3, playerid,2360.4719,-1532.8904,24.0000))
			{
			    if(PlayerInfo[playerid][pAge] < 18)
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "[ERRO] Você precisa ter mais de 18 anos para entrar em um SexShop!");
			        return true;
			    }
				SetPlayerPos(playerid,-100.3403,-24.6412,1000.7188);
				GameTextForPlayer(playerid, "~p~Sex Shop", 5000, 1);
				PlayerInfo[playerid][pInt] = 3;
				SetPlayerVirtualWorld(playerid,1);
				SetPlayerInterior(playerid,3);
				storeexit[playerid] = 2;
			}
			//sex shop saida
			else if (PlayerToPoint(2, playerid,-100.3403,-24.6412,1000.7188))
			{
			    if(storeexit[playerid] == 1)
			    {
					SetPlayerPos(playerid,1087.5569,-922.4803,43.3906);
					GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerInterior(playerid,0);
					SetPlayerVirtualWorld(playerid,0);
					storeexit[playerid] = 0;
				}
				if(storeexit[playerid] == 2)
				{
					SetPlayerPos(playerid,2360.4719,-1532.8904,24.0000);
					GameTextForPlayer(playerid, "~w~Los Santos", 5000, 1);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerVirtualWorld(playerid,0);
					SetPlayerInterior(playerid,0);
					storeexit[playerid] = 0;
				}
			}

//======= AlQaeda entrada ================
			else if (PlayerToPoint(3, playerid,-329.7025,1536.6123,76.6117))
			{//AlQaeda entrada
				SetPlayerPos(playerid,260.8988,1286.0612,1080.2578);
				GameTextForPlayer(playerid, "~y~HQ AlQaeda", 5000, 1);
				PlayerInfo[playerid][pInt] = 4;
				SetPlayerInterior(playerid,4);
				storeexit[playerid] = 15;
			}
			else if (PlayerToPoint(2, playerid,260.8988,1286.0612,1080.2578))
			{//AlQaeda saida
				if(storeexit[playerid] == 15)
				{
					SetPlayerPos(playerid,-329.7025,1536.6123,76.6117);
					GameTextForPlayer(playerid, "~w~Las Venturas", 5000, 1);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerInterior(playerid,0);
					storeexit[playerid] = 0;
				}
			}

//======= GI entrada ================
			else if (PlayerToPoint(3, playerid,-2281.4895,2288.3999,4.9679))
			{//GI entrada
				SetPlayerPos(playerid,-69.0297,1354.1414,1080.2109);
				GameTextForPlayer(playerid, "~w~HQ GI", 5000, 1);
				PlayerInfo[playerid][pInt] = 6;
				SetPlayerInterior(playerid,6);
				storeexit[playerid] = 23;
			}
			else if (PlayerToPoint(2, playerid,-69.0297,1354.1414,1080.2109))
			{
			//GI saida
				if(storeexit[playerid] == 23)
				{
					SetPlayerPos(playerid,-2281.4895,2288.3999,4.9679);
					GameTextForPlayer(playerid, "~w~San Fierro", 5000, 1);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerInterior(playerid,0);
					storeexit[playerid] = 0;
				}
			}
//================================================================

			else if(PlayerToPoint(2, playerid,919.311462,-1252.192504,16.210937))
			{
			    DPExit[playerid] = 1;
   				 SetPlayerPos(playerid, 238.7194,141.7792,1003.0234);
                SetPlayerInterior(playerid,3);
                SetPlayerFacingAngle(playerid, 0);
                //localizardppc[playerid] = 1;
                PlayerInfo[playerid][pInt] = 3;
                SetPlayerVirtualWorld(playerid, 10);
				GameTextForPlayer(playerid, "~w~HQ Policia Civil", 5000, 3);
			}
			else if(PlayerToPoint(2, playerid,210.5386,267.9687,270.4615))
			{
		        SetPlayerInterior(playerid,0);
		        PlayerInfo[playerid][pInt] = 0;
            	SetPlayerPos(playerid,1687.9614,-1255.4989,14.8064);
			}
			else if(PlayerToPoint(2, playerid,1166.0673,-1333.1899,31.4813))
			{
				SetPlayerPos(playerid,1172.4783,-1361.4822,13.9531);
			}
			else if(PlayerToPoint(1.2, playerid,1172.4783,-1361.4822,13.9531))
			{
				SetPlayerPos(playerid,1166.0673,-1333.1899,31.4813);
			}
			else if(PlayerToPoint(2, playerid,359.821380,-1485.839355,76.539062))
			{
				SetPlayerPos(playerid,352.980102,-1490.095825,36.039062);
			}
			else if(PlayerToPoint(1.2, playerid,352.980102,-1490.095825,36.039062))
			{
				SetPlayerPos(playerid,359.821380,-1485.839355,76.539062);
			}

			else if(PlayerToPoint(2, playerid,2806.9973,-1174.4667,32.6688))
			{
				SetPlayerPos(playerid,808.0867,-1176.2185,25.3784);
			}
			else if(PlayerToPoint(1.2, playerid,808.0867,-1176.2185,25.3784))
			{
				SetPlayerPos(playerid,2806.9973,-1174.4667,32.6688);
			}

			else if(PlayerToPoint(2, playerid,895.346984,-1272.573608,14.684859))
			{
				SetPlayerPos(playerid,901.739135,-1277.156005,23.086109);
			}
			else if(PlayerToPoint(1.2, playerid,901.739135,-1277.156005,23.086109))
			{
				SetPlayerPos(playerid,895.346984,-1272.573608,14.684859);
			}

			else if(PlayerToPoint(2, playerid,1495.3594,-1467.1915,40.5234))
			{
				SetPlayerPos(playerid,1539.3928,-1477.5098,9.5000);
			}
			else if(PlayerToPoint(1.2, playerid,1539.3928,-1477.5098,9.5000))
			{
				SetPlayerPos(playerid,1495.3594,-1467.1915,40.5234);
			}

			else if(PlayerToPoint(2, playerid,1306.5503,-1730.0454,20.9956))
			{
				SetPlayerPos(playerid,1306.1578,-1730.0601,13.5469);
			}
			else if(PlayerToPoint(1.2, playerid,1306.1578,-1730.0601,13.5469))
			{
				SetPlayerPos(playerid,1306.5503,-1730.0454,20.9956);
			}

			else if (PlayerToPoint(1, playerid,1570.3828,-1333.8882,16.4844))
			{
	    		SetPlayerPos(playerid, 1545.0068,-1366.5094,327.2868);
			}

   			else if(PlayerToPoint(1, playerid,349.1003,199.0484,1019.9844))
			{
				SetPlayerPos(playerid, 349.1000,199.0489,2019.9844);
				SetPlayerInterior(playerid, 3);
				GameTextForPlayer(playerid, "~w~Bem vindo ao Motel", 5000, 1);
			}
			else if(PlayerToPoint(1.0, playerid,-1412.5397,486.6541,7.6836))
	        {//Exercito Entrance
	    		GameTextForPlayer(playerid, "~w~Exercito", 5000, 1);
	     		SetPlayerPos(playerid,-1352.1919,497.4284,11.1953);
        	}
			else if(PlayerToPoint(3, playerid,1554.9537,-1675.6584,16.1953))
	        {//Departamento de Policia Los Santos
		    	GameTextForPlayer(playerid, "~w~Departamento da Policia Militar", 5000, 1);
		    	SetPlayerInterior(playerid, 6);
		    	SetPlayerVirtualWorld(playerid, 0);
		    //	localizardppm[playerid] = 1;
		    	storeexit[playerid] = 66;
		    	SetPlayerPos(playerid,246.5878,62.7877,1003.6406);
		    	PlayerInfo[playerid][pInt] = 6;
	        }

			else if(PlayerToPoint(3, playerid,2244.5669,-1664.4495,15.4766))
	        {//entrada Binco
	    		GameTextForPlayer(playerid, "~w~Binco", 5000, 1);
            	SetPlayerVirtualWorld(playerid, 0);
	    		SendClientMessage(playerid, COLOR_WHITE, "DICA: Vá até o icone para mudar sua roupa");
	    		SendClientMessage(playerid, COLOR_WHITE, "Ou use /meuskin.");
	     		SetPlayerInterior(playerid, 15);
	    		SetPlayerPos(playerid,207.7336,-108.6231,1005.1328);
	    		PlayerInfo[playerid][pInt] = 15;
	        }
	        else if (PlayerToPoint(3, playerid,1456.9010,-1137.6941,23.9617))
	        {//entrada ZIP
     			SetPlayerPos(playerid, 161.3350,-95.0194,1001.8047);
	    		GameTextForPlayer(playerid, "~w~Zip",5000,1);
     			SetPlayerVirtualWorld(playerid, 0);
	    		SendClientMessage(playerid, COLOR_WHITE, "DICA: Use /meuskin para mudar sua roupa");
	    		SetPlayerInterior(playerid,18);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 18;
        	}
	        else if (PlayerToPoint(3, playerid,-1694.5050,950.8621,24.8906))
	        {//entrada VICTIM
     			SetPlayerPos(playerid, 226.293991,-7.431529,1002.210937);
	    		GameTextForPlayer(playerid, "~w~VICTIM",5000,1);
     			SetPlayerVirtualWorld(playerid, 0);
	    		SendClientMessage(playerid, COLOR_WHITE, "DICA: Use /meuskin para mudar sua roupa");
	    		SetPlayerInterior(playerid,5);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 5;
        	}
	        else if (PlayerToPoint(2, playerid,1635.6626,590.6415,-35.4693))
	        {//entrada Predio
     			SetPlayerPos(playerid, 1481.3530,-1790.3047,156.7533);
	    		GameTextForPlayer(playerid, "~w~~b~Predio",5000,1);
	    		SendClientMessage(playerid, COLOR_WHITE, "DICA: USE /sair para sair do PrediO '-'");
				SetPlayerInterior(playerid,0);
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
	    		PlayerInfo[playerid][pInt] = 0;
        	}
	        else if(PlayerToPoint(3, playerid,1836.4064,-1682.4403,13.3493))
	        {//Alhambra Entrance
	    		GameTextForPlayer(playerid, "~w~Alhambra", 5000, 1);
	    		SetPlayerInterior(playerid, 17);
	     		SetPlayerVirtualWorld(playerid, 0);
	     		SetPlayerPos(playerid,493.3891,-22.7212,1000.6797);
	    		PlayerInfo[playerid][pInt] = 17;
	    		PlayAudioStreamForPlayer(playerid,
	    		"http://198.178.123.11:7746");
        	}
        	else if(PlayerToPoint(3, playerid,2421.4998,-1219.2438,25.5617))
         	{//Pigpen entrada
	     		GameTextForPlayer(playerid, "~w~The Pig Pen", 5000, 1);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid, 2);
	    		SetPlayerPos(playerid,1204.8965,-13.5596,1000.9219);
	    		PlayerInfo[playerid][pInt] = 2;
	        }
	        else if(PlayerToPoint(3, playerid,2229.9011,-1721.2582,13.5613))
	        {//entrada Ginasio de Lutas
	     		GameTextForPlayer(playerid, "~w~Ginasio de Lutas", 5000, 1);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid, 5);
	    		SetPlayerPos(playerid,771.9399,-2.2574,1000.7292);
	    		PlayerInfo[playerid][pInt] = 5;
        	}

        	else if (PlayerToPoint(3, playerid,1200.4497,-918.7695,43.1105))
        	{//entrada Burger Shot 1
	     		SetPlayerPos(playerid, 366.0324,-72.6400,1001.5078);
	    		GameTextForPlayer(playerid, "~w~Vinewood Burger Shot",5000,1);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid,10);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 10;
	    		InAFoodPlace[playerid] = 2;
	    		SetPlayerCheckpoint(playerid, 376.8571,-67.6620,1001.5151, 1.0);
        	}
        	else if (PlayerToPoint(3, playerid,810.4855,-1616.1888,13.5469))
        	{//entrada Burger Shot 2
				SetPlayerPos(playerid, 681.5034,-452.0092,-25.6172);
		    	GameTextForPlayer(playerid, "~w~Marina Burger Shot",5000,1);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid,1);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 1;
	    		InAFoodPlace[playerid] = 5;
	    		SetPlayerCheckpoint(playerid, 683.9015,-456.7076,-25.6099, 1.0);
    		}
        	else if (PlayerToPoint(3, playerid,927.6217,-1353.0105,13.3438))
        	{//entrada Cluckin Bell
	     		SetPlayerPos(playerid, 365.7793,-9.1699,1001.8516);
	    		GameTextForPlayer(playerid, "~w~Cluckin Bell", 5000, 1);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid, 9);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 9;
	    		InAFoodPlace[playerid] = 1;
	    		SetPlayerCheckpoint(playerid, 368.9714,-6.2486,1001.8516, 1.0);
        	}
        	else if (PlayerToPoint(3, playerid,2419.8442,-1509.4996,24.0000))
        	{//entrada Cluckin Bell Perto da Groove
	     		SetPlayerPos(playerid, 365.7793,-9.1699,1001.8516);
	    		GameTextForPlayer(playerid, "~w~Cluckin Bell", 5000, 1);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid, 9);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 9;
	    		InAFoodPlace[playerid] = 7;
	    		SetPlayerCheckpoint(playerid, 368.9714,-6.2486,1001.8516, 1.0);
        	}
        	else if (PlayerToPoint(3, playerid,2105.4858,-1806.4725,13.5547))
        	{//entrada Well Stacked Pizza
	     		SetPlayerPos(playerid, 372.4117,-130.4577,1001.4922);
	    		GameTextForPlayer(playerid, "~w~Well Stacked Pizza", 5000, 1);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid, 5);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 5;
	    		InAFoodPlace[playerid] = 3;
	    		SetPlayerCheckpoint(playerid, 375.6895,-118.9683,1001.4995, 1.5);
        	}
        	else if (PlayerToPoint(3, playerid,975.4691,-1335.9618,13.5319))
			{
	     		SetPlayerPos(playerid, 377.5237,-191.6597,1000.6328);
	    		GameTextForPlayer(playerid, "~w~Lachonete", 5000, 1);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid, 17);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 17;
	    		InAFoodPlace[playerid] = 4;
	    		SetPlayerCheckpoint(playerid, 379.0611,-186.6032,1000.6328, 1.0);
        	}
//=-=-=-=-=-=-=-=-=| HOTEL |=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=<|
    		else if (PlayerToPoint(3, playerid,681.7535,-473.5503,16.5363))
			{//Hotel entrada
				SetPlayerPos(playerid, 1261.2651,-785.3102,1091.9063);
				GameTextForPlayer(playerid, "~w~Hotel Sons of Anarchy",5000,1);
				SetPlayerInterior(playerid,5);
				SetPlayerFacingAngle(playerid, 0);
				PlayerInfo[playerid][pInt] = 5;
				SetPlayerVirtualWorld(playerid, 0);
			}
            else if (PlayerToPoint(3, playerid,1261.2651,-785.3102,1091.9063))
			{//Hotel saida
				SetPlayerPos(playerid, 681.7535,-473.5503,16.5363);
				SetPlayerInterior(playerid,0);
				SetPlayerFacingAngle(playerid, 0);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerVirtualWorld(playerid, 0);
			}
            else if(PlayerToPoint(3.0, playerid,2143.3303,1610.0770,993.6882))
	        {//SAIDA COFRE BANCO
            SetPlayerInterior(playerid, 0);
            PlayerInfo[playerid][pInt] = 0;
            SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pLocal] = 999;
            StopAudioStreamForPlayer(playerid);
            SetPlayerPos(playerid,1462.2650,-1011.5679,26.8438);
	        }
//=-=-=-=-=-=-=-=-=| HQ'S DAS ORGANIZAÇÕES |=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=<|
            else if (PlayerToPoint(3, playerid,2232.2180,-1458.5508,24.0173))
			{//entrada PCC LS
                SetPlayerPos(playerid, -2171.3071,645.2919,1057.5938);
                GameTextForPlayer(playerid, "~y~HQ PCC",5000,1);
                SetPlayerInterior(playerid,1);
                SetPlayerFacingAngle(playerid, 0);
                PlayerInfo[playerid][pInt] = 1;
                storeexit[playerid] = 21;
                SetPlayerVirtualWorld(playerid, 0);
            }
            else if (PlayerToPoint(3, playerid,328.0614,-1512.2689,36.0325))
			{//BOPE LS entrada
                GameTextForPlayer(playerid, "~w~Departamento B.O.P.E", 5000, 1);
                SetPlayerFacingAngle(playerid, 0);
                SetPlayerInterior(playerid,10);
				SetPlayerPos(playerid,246.4452,108.4379,1003.2188);
				PlayerInfo[playerid][pInt] = 10;
                SetPlayerVirtualWorld(playerid, 0);
                storeexit[playerid] = 2;
            }
            else if (PlayerToPoint(3, playerid,1783.4891,-1786.8514,13.5305))
			{//ROTA entrada
                SetPlayerPos(playerid, 1726.8353,-1638.3109,20.2232);
                GameTextForPlayer(playerid, "~w~Departamento ROTA",5000,1);
                SetPlayerInterior(playerid,18);
                SetPlayerFacingAngle(playerid, 0);
                //localizardppc[playerid] = 1;
                PlayerInfo[playerid][pInt] = 18;
                SetPlayerVirtualWorld(playerid, 12);
                storeexit[playerid] = 16;
            }
            else if (PlayerToPoint(3, playerid,914.8825,-1004.4962,37.9821))
			{//PF entrada
                SetPlayerPos(playerid, 238.7194,141.7792,1003.0234);
                GameTextForPlayer(playerid, "~w~Departamento Policia Federal",5000,1);
                SetPlayerInterior(playerid,3);
                SetPlayerFacingAngle(playerid, 0);
                //localizardppc[playerid] = 1;
                PlayerInfo[playerid][pInt] = 3;
                SetPlayerVirtualWorld(playerid, 11);
                storeexit[playerid] = 11;
            }

            else if(PlayerToPoint(3, playerid,1154.4968,-1180.8517,32.8187))
			{//entrada HQ BALLAS
                GameTextForPlayer(playerid, "~w~HQ Ballas", 5000, 1);
                SetPlayerInterior(playerid, 10);
                SetPlayerPos(playerid,2268.3950,-1210.5328,1047.7491);
                PlayerInfo[playerid][pInt] = 10;
                SetPlayerVirtualWorld(playerid, 0);
                storeexit[playerid] = 17;
            }

            else if (PlayerToPoint(3, playerid,2495.3481,-1691.1355,14.7656))
			{//HQ Groove Street entrada
                SetPlayerPos(playerid,2496.0061,-1693.5201,1014.7422);
                GameTextForPlayer(playerid, "~g~Groove Street HQ",5000,1);
                SetPlayerInterior(playerid,3);
                SetPlayerFacingAngle(playerid, 181);
                PlayerInfo[playerid][pInt] = 3;
                storeexit[playerid] = 14;
                SetPlayerVirtualWorld(playerid, 0);
            }

            else if (PlayerToPoint(2, playerid,2309.9460,-1643.6337,14.8270))
			{//Bar Groove entrada
                SetPlayerPos(playerid,501.8770,-67.7092,998.7578);
                GameTextForPlayer(playerid, "~r~Bar ",5000,1);
                SetPlayerInterior(playerid,11);
                SetPlayerFacingAngle(playerid, 178.1566);
                barexit[playerid] = 1;
                PlayerInfo[playerid][pInt] = 11;
                SetPlayerVirtualWorld(playerid, 0);
            }
            else if (PlayerToPoint(2, playerid,1323.9729,-1841.6465,13.5469))
			{//Bar Groove entrada
                SetPlayerPos(playerid,501.8770,-67.7092,998.7578);
                GameTextForPlayer(playerid, "~r~Bar ",5000,1);
                SetPlayerInterior(playerid,11);
                SetPlayerFacingAngle(playerid, 178.1566);
                barexit[playerid] = 2;
                PlayerInfo[playerid][pInt] = 11;
                SetPlayerVirtualWorld(playerid, 1);
            }
            else if (PlayerToPoint(2, playerid,776.4116,-1036.1841,24.2753))
			{//Bar Groove entrada
                SetPlayerPos(playerid,501.8770,-67.7092,998.7578);
                GameTextForPlayer(playerid, "~r~Bar ",5000,1);
                SetPlayerInterior(playerid,11);
                SetPlayerFacingAngle(playerid, 178.1566);
                barexit[playerid] = 3;
                PlayerInfo[playerid][pInt] = 11;
                SetPlayerVirtualWorld(playerid, 2);
            }
            else if (PlayerToPoint(2, playerid,2354.3938,-1511.7820,24.0000))
			{//Bar Groove entrada
                SetPlayerPos(playerid,501.8770,-67.7092,998.7578);
                GameTextForPlayer(playerid, "~r~Bar ",5000,1);
                SetPlayerInterior(playerid,11);
                SetPlayerFacingAngle(playerid, 178.1566);
                barexit[playerid] = 4;
                PlayerInfo[playerid][pInt] = 11;
                SetPlayerVirtualWorld(playerid, 3);
            }
            else if (PlayerToPoint(2, playerid,2850.9463,-1532.4783,11.0991))
			{//Bar Groove entrada
                SetPlayerPos(playerid,501.8770,-67.7092,998.7578);
                GameTextForPlayer(playerid, "~r~Bar ",5000,1);
                SetPlayerInterior(playerid,11);
                SetPlayerFacingAngle(playerid, 178.1566);
                barexit[playerid] = 5;
                PlayerInfo[playerid][pInt] = 11;
                SetPlayerVirtualWorld(playerid, 4);
            }
           	else if(PlayerToPoint(3, playerid,2141.179199,-1801.976318,16.147472))
        	{//entrada HQ CV
	    		GameTextForPlayer(playerid, "~w~HQ Comando Vermelho", 5000, 1);
	    		SetPlayerInterior(playerid, 6);
	    		SetPlayerPos(playerid,2308.5269,-1211.2737,1049.0234);
	    		PlayerInfo[playerid][pInt] = 6;
	    		SetPlayerVirtualWorld(playerid, 0);
        	}
	        else if (PlayerToPoint(3, playerid,2808.0623,-1190.4780,25.3426))
			{//HQ VAGOS
                SetPlayerPos(playerid,295.1389,1474.4699,1080.5198);
                GameTextForPlayer(playerid, "~w~HQ Los Vagos",5000,1);
                SetPlayerInterior(playerid,15);
                SetPlayerFacingAngle(playerid, 0);
                PlayerInfo[playerid][pInt] = 15;
                storeexit[playerid] = 18;
                SetPlayerVirtualWorld(playerid, 0);
            }

            else if(PlayerToPoint(2, playerid,2281.1196,-2364.9805,13.5469))
			{//entrada HQ HITMANS
                GameTextForPlayer(playerid, "~w~HQ Hitmans", 5000, 1);
                SetPlayerInterior(playerid, 6);
                SetPlayerPos(playerid,343.7183,304.9376,999.1484);
                PlayerInfo[playerid][pInt] = 6;
                SetPlayerVirtualWorld(playerid, 0);
            }
			return true;
	}

	CMD:mapacasa(playerid, params[])
	{
			if(PlayerInfo[playerid][pPHousekey] != 500)
			{
				SetPlayerCheckpoint(playerid,HouseInfo[PlayerInfo[playerid][pPHousekey]][hEntrancex], HouseInfo[PlayerInfo[playerid][pPHousekey]][hEntrancey], HouseInfo[PlayerInfo[playerid][pPHousekey]][hEntrancez], 4.0);
				GameTextForPlayer(playerid, "~r~Mapa da Casa Marcado!", 5000, 1);
				gPlayerCheckpointStatus[playerid] = 12;
			}
			else
			{
				GameTextForPlayer(playerid, "~w~Voce nao tem casa", 5000, 1);
			}
			return true;
	}
//----------------------------------[BIZZ]-----------------------------------------------
	CMD:comprarempresa(playerid, params[])
	{
			new Float:oldposx, Float:oldposy, Float:oldposz;
			GetPlayerName(playerid, playername, sizeof(playername));
			GetPlayerPos(playerid, oldposx, oldposy, oldposz);
			if(PlayerInfo[playerid][pVIP] < 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "Apenas players VIPs podem comprar uma empresa");
				return true;
			}
			if(PlayerInfo[playerid][pPbiskey] != 255)
			{
				SendClientMessage(playerid, COLOR_GREY, "Você ja tem uma empresa, Digite /venderempresa para comprar outra.");
				return true;
			}
			new string[128];
			for(new b = 0; b < sizeof(SBizzInfo); b++)
			{
				if(PlayerToPoint(2.0, playerid, SBizzInfo[b][sbEntranceX], SBizzInfo[b][sbEntranceY], SBizzInfo[b][sbEntranceZ]) && SBizzInfo[b][sbOwned] == 0)
				{
					if(PlayerInfo[playerid][pLevel] < SBizzInfo[b][sbLevelNeeded])
					{
						format(string, sizeof(string), "Você precisa ser nível %d para comprar essa empresa",SBizzInfo[b][sbLevelNeeded]);
						SendClientMessage(playerid, COLOR_GRAD5, string);
						return true;
					}
					if(GetPlayerMoney(playerid) > SBizzInfo[b][sbBuyPrice])
					{
						PlayerInfo[playerid][pPbiskey] = b+100;
						SBizzInfo[b][sbOwned] = 1;
						SBizzInfo[b][sbLocked] = 0;
						SBizzInfo[b][sbTill] = 0;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(SBizzInfo[b][sbOwner], sendername, 0, strlen(sendername), 255);
						GiveDinheiro(playerid,-SBizzInfo[b][sbBuyPrice]);
						PlayerPlayMusic(playerid);
						SendClientMessage(playerid, COLOR_WHITE, "Parabens, Você comprou uma empresa.");
						SendClientMessage(playerid, COLOR_WHITE, "Digite /ajuda para ver os comandos de sua empresa.");
						SalvarSEmpresa(b);
						Atualizar3Dtexts();
						DateProp(playerid);

			        	format(string, sizeof(string), "[EMPRESA]: %s[ID: %d] acaba de comprar a empresa ID: %d", NomePlayer(playerid),playerid, b);
			            SendClientMessageToAll(0xFFC06CFF, string);
						BPFLogs("sempresas", string);
						return true;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Você não tem grana suficiente");
						return true;
					}
				}
			}
			for(new b = 0; b < sizeof(BizzInfo); b++)
			{
				if(PlayerToPoint(2.0, playerid, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]) && BizzInfo[b][bOwned] == 0)
				{
					if(PlayerInfo[playerid][pLevel] < BizzInfo[b][bLevelNeeded])
					{
						format(string, sizeof(string), "Você precisa ser nível %d para comprar essa empresa",BizzInfo[b][bLevelNeeded]);
						SendClientMessage(playerid, COLOR_GRAD5, string);
						return true;
					}
					if(GetPlayerMoney(playerid) > BizzInfo[b][bBuyPrice])
					{
						PlayerInfo[playerid][pPbiskey] = b;
						BizzInfo[b][bOwned] = 1;
						BizzInfo[b][bLocked] = 0;
						BizzInfo[b][bTill] = 0;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(BizzInfo[b][bOwner], sendername, 0, strlen(sendername), 255);
						GiveDinheiro(playerid,-BizzInfo[b][bBuyPrice]);
						PlayerPlayMusic(playerid);

						SetPlayerInterior(playerid,BizzInfo[b][bInterior]);
						SetPlayerVirtualWorld(playerid, BizzInfo[b][bWorld]);
						PlayerInfo[playerid][pInt] = BizzInfo[b][bInterior];
						SetPlayerPos(playerid,BizzInfo[b][bExitX],BizzInfo[b][bExitY],BizzInfo[b][bExitZ]);
						GameTextForPlayer(playerid, "~w~Bem Vindo~n~Voce pode sair da sua empresa digitando /sair", 5000, 3);
						PlayerInfo[playerid][pInt] = BizzInfo[b][bInterior];
						PlayerInfo[playerid][pLocal] = b ;
						SendClientMessage(playerid, COLOR_WHITE, "Parabens, Você comprou esta empresa.");
						SendClientMessage(playerid, COLOR_WHITE, "Digite /ajuda para ver os comandos de sua empresa.");
						SalvarEmpresa(b);
						Atualizar3Dtexts();
						DateProp(playerid);
			        	format(string, sizeof(string), "[EMPRESA]: %s[ID: %d] acaba de comprar a empresa ID: %d", NomePlayer(playerid),playerid, b);
			            SendClientMessageToAll(0xFFC06CFF, string);
						BPFLogs("empresas", string);
						return true;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Você nao tem grana o suficiente");
						return true;
					}
				}
			}
			return true;
	}
	CMD:comprarfazenda(playerid, params[])
	{
			new Float:oldposx, Float:oldposy, Float:oldposz;
			GetPlayerName(playerid, playername, sizeof(playername));
			GetPlayerPos(playerid, oldposx, oldposy, oldposz);
			if(PlayerInfo[playerid][pVIP] < 2)
			{
				SendClientMessage(playerid, COLOR_GREY, "Apenas players Sócios podem comprar uma fazenda");
				return true;
			}
			if(PlayerInfo[playerid][pPFazkey] != 255)
			{
				SendClientMessage(playerid, COLOR_GREY, "Você ja tem uma fazenda, Digite /venderfazenda ou para comprar outra.");
				return true;
			}
			new string[128];
			for(new b = 0; b < sizeof(FBizzInfo); b++)
			{
				if(PlayerToPoint(2.0, playerid, FBizzInfo[b][fbEntranceX], FBizzInfo[b][fbEntranceY], FBizzInfo[b][fbEntranceZ]) && FBizzInfo[b][fbOwned] == 0)
				{
					if(PlayerInfo[playerid][pLevel] < FBizzInfo[b][fbLevelNeeded])
					{
						format(string, sizeof(string), "Você precisa ser nível %d para comprar essa fazenda",FBizzInfo[b][fbLevelNeeded]);
						SendClientMessage(playerid, COLOR_GRAD5, string);
						return true;
					}
					if(GetPlayerMoney(playerid) > FBizzInfo[b][fbBuyPrice])
					{
						PlayerInfo[playerid][pPFazkey] = b;
						FBizzInfo[b][fbOwned] = 1;
						FBizzInfo[b][fbLocked] = 0;
						FBizzInfo[b][fbTill] = 0;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(FBizzInfo[b][fbOwner], sendername, 0, strlen(sendername), 255);
						GiveDinheiro(playerid,-FBizzInfo[b][fbBuyPrice]);
						PlayerPlayMusic(playerid);
						SendClientMessage(playerid, COLOR_WHITE, "Parabens, Você comprou uma Fazenda.");
						SendClientMessage(playerid, COLOR_WHITE, "Digite /ajuda para ver os comandos de sua Fazenda.");
						SalvarFEmpresa(b);
						Atualizar3Dtexts();
                        DateProp(playerid);

			        	format(string, sizeof(string), "[FAZENDA]: %s[ID: %d] acaba de comprar a Fazenda ID: %d", NomePlayer(playerid),playerid, b);
			            SendClientMessageToAll(0xFFC06CFF, string);
						BPFLogs("fempresas", string);
						return true;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Você não tem grana suficiente");
						return true;
					}
				}
			}
			return true;
	}
	CMD:venderempresa(playerid, params[])
	{
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPbiskey] == 255)
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não possui uma empresa.");
				return true;
			}
			if(PlayerInfo[playerid][pMarried] > 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Você é casado(a), não pode vender a empresa!");
		        return true;
		    }
		    new string[128];
			if(PlayerInfo[playerid][pPbiskey] >= 100 && PlayerInfo[playerid][pPbiskey] < 200 && strcmp(playername, SBizzInfo[PlayerInfo[playerid][pPbiskey]-100][sbOwner], true) == 0)
			{
				new borse = PlayerInfo[playerid][pPbiskey]-100;
				GiveDinheiro(playerid,SBizzInfo[borse][sbBuyPrice]);
				SBizzInfo[borse][sbLocked] = 0;
				SBizzInfo[borse][sbOwned] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(SBizzInfo[borse][sbOwner], "Ninguém", 0, strlen("Ninguém"), 255);
				strmid(SBizzInfo[borse][sbExtortion], "Ninguém", 0, strlen("Ninguém"), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Parabens~n~ Voce vendeu imoveis por ~n~~g~R$%d", SBizzInfo[borse][sbBuyPrice]);
				GameTextForPlayer(playerid, string, 10000, 3);
				PlayerInfo[playerid][pPbiskey] = 255;
				format(string, sizeof(string), "[EMPRESA]: %s[ID: %d] acaba de vender a empresa ID: %d", NomePlayer(playerid),playerid, borse);
			    SendClientMessageToAll(0xFFC06CFF, string);
				BPFLogs("sempresas", string);
				SalvarSEmpresa( borse );
				Atualizar3Dtexts();
				return true;
			}
			if(strcmp(playername, BizzInfo[PlayerInfo[playerid][pPbiskey]][bOwner], true) == 0)
			{
				new borse = PlayerInfo[playerid][pPbiskey];
				BizzInfo[borse][bLocked] = 0;
				BizzInfo[borse][bOwned] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(BizzInfo[borse][bOwner], "Ninguém", 0, strlen("Ninguém"), 255);
				strmid(BizzInfo[borse][bExtortion], "Ninguém", 0, strlen("Ninguém"), 255);
				GiveDinheiro(playerid,BizzInfo[borse][bBuyPrice]);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Parabens~n~ Voce vendeu imoveis por ~n~~g~R$%d", BizzInfo[borse][bBuyPrice]);
				GameTextForPlayer(playerid, string, 10000, 3);
				PlayerInfo[playerid][pPbiskey] = 255;
                format(string, sizeof(string), "[EMPRESA]: %s[ID: %d] acaba de vender a empresa ID: %d", NomePlayer(playerid),playerid, borse);
			    SendClientMessageToAll(0xFFC06CFF, string);
				BPFLogs("empresas", string);
				SalvarEmpresa(borse);
				Atualizar3Dtexts();
				return true;
			}
			if(PlayerInfo[playerid][pPbiskey] != 255)
			{
                PlayerInfo[playerid][pPbiskey] = 255;
                return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Você não tem uma Empresa.");
			}
			return true;
	}
	CMD:venderempresa66656(playerid, params[])
	{
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPbiskey] == 255)
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não possui uma empresa.");
				return true;
			}
		    new string[128];
			if(PlayerInfo[playerid][pPbiskey] >= 100 && PlayerInfo[playerid][pPbiskey] < 200 && strcmp(playername, SBizzInfo[PlayerInfo[playerid][pPbiskey]-100][sbOwner], true) == 0)
			{
				new borse = PlayerInfo[playerid][pPbiskey]-100;
				GiveDinheiro(playerid,SBizzInfo[borse][sbBuyPrice]);
				SBizzInfo[borse][sbLocked] = 0;
				SBizzInfo[borse][sbOwned] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(SBizzInfo[borse][sbOwner], "Ninguém", 0, strlen("Ninguém"), 255);
				strmid(SBizzInfo[borse][sbExtortion], "Ninguém", 0, strlen("Ninguém"), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Parabens~n~ Voce vendeu imoveis por ~n~~g~R$%d", SBizzInfo[borse][sbBuyPrice]);
				GameTextForPlayer(playerid, string, 10000, 3);
				PlayerInfo[playerid][pPbiskey] = 255;
				format(string, sizeof(string), "[EMPRESA]: O jogador: %s vendeu sua mini empresa ID: [%d]", PlayerName(playerid), borse);
				SendClientMessageToAll(0xFFC06CFF, string);
				BPFLogs("sempresas", string);
				SalvarSEmpresa( borse );
				Atualizar3Dtexts();
				return true;
			}
			if(strcmp(playername, BizzInfo[PlayerInfo[playerid][pPbiskey]][bOwner], true) == 0)
			{
				new borse = PlayerInfo[playerid][pPbiskey];
				BizzInfo[borse][bLocked] = 0;
				BizzInfo[borse][bOwned] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(BizzInfo[borse][bOwner], "Ninguém", 0, strlen("Ninguém"), 255);
				strmid(BizzInfo[borse][bExtortion], "Ninguém", 0, strlen("Ninguém"), 255);
				GiveDinheiro(playerid,BizzInfo[borse][bBuyPrice]);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Parabens~n~ Voce vendeu imoveis por ~n~~g~R$%d", BizzInfo[borse][bBuyPrice]);
				GameTextForPlayer(playerid, string, 10000, 3);
				PlayerInfo[playerid][pPbiskey] = 255;
                format(string, sizeof(string), "[EMPRESA]: %s[ID: %d] acaba de vender a empresa ID: %d", NomePlayer(playerid),playerid, borse);
			    SendClientMessageToAll(0xFFC06CFF, string);
				BPFLogs("empresas", string);
				SalvarEmpresa(borse);
				Atualizar3Dtexts();
				return true;
			}
			if(PlayerInfo[playerid][pPbiskey] != 255)
			{
                PlayerInfo[playerid][pPbiskey] = 255;
                return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Você não tem uma Empresa.");
			}
			return true;
	}
	CMD:venderfazenda(playerid, params[])
	{
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPFazkey] == 255)
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não possui uma fazenda.");
				return true;
			}
		    new string[128];
			if(PlayerInfo[playerid][pPFazkey] < 255 && strcmp(playername, FBizzInfo[PlayerInfo[playerid][pPFazkey]][fbOwner], true) == 0)
			{
				new borse = PlayerInfo[playerid][pPFazkey];
				GiveDinheiro(playerid,FBizzInfo[borse][fbBuyPrice]);
				FBizzInfo[borse][fbLocked] = 0;
				FBizzInfo[borse][fbOwned] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(FBizzInfo[borse][fbOwner], "Ninguém", 0, strlen("Ninguém"), 255);
				strmid(FBizzInfo[borse][fbExtortion], "Ninguém", 0, strlen("Ninguém"), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Parabens~n~ Voce vendeu terrenos por ~n~~g~R$%d", FBizzInfo[borse][fbBuyPrice]);
				GameTextForPlayer(playerid, string, 10000, 3);
				PlayerInfo[playerid][pPFazkey] = 255;
                format(string, sizeof(string), "[FAZENDA]: %s[ID: %d] acaba de vender a fazenda ID: %d", NomePlayer(playerid),playerid, borse);
			    SendClientMessageToAll(0xFFC06CFF, string);
				BPFLogs("fempresas", string);
				SalvarFEmpresa( borse );
				Atualizar3Dtexts();
				return true;
			}
			if(PlayerInfo[playerid][pPFazkey] != 255)
			{
                PlayerInfo[playerid][pPFazkey] = 255;
                return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Você não tem uma Fazenda.");
			}
			return true;
	}
	CMD:venderfazenda66656(playerid, params[])
	{
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPFazkey] == 255)
			{
				//SendClientMessage(playerid, COLOR_GREY, "Você não possui uma fazenda.");
				return true;
			}
		    new string[128];
			if(PlayerInfo[playerid][pPFazkey] < 255 && strcmp(playername, FBizzInfo[PlayerInfo[playerid][pPFazkey]][fbOwner], true) == 0)
			{
				new borse = PlayerInfo[playerid][pPFazkey];
				GiveDinheiro(playerid,FBizzInfo[borse][fbBuyPrice]);
				FBizzInfo[borse][fbLocked] = 0;
				FBizzInfo[borse][fbOwned] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(FBizzInfo[borse][fbOwner], "Ninguém", 0, strlen("Ninguém"), 255);
				strmid(FBizzInfo[borse][fbExtortion], "Ninguém", 0, strlen("Ninguém"), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Parabens~n~ Voce vendeu terrenos por ~n~~g~R$%d", FBizzInfo[borse][fbBuyPrice]);
				GameTextForPlayer(playerid, string, 10000, 3);
				PlayerInfo[playerid][pPFazkey] = 255;
                format(string, sizeof(string), "[FAZENDA]: %s[ID: %d] acaba de vender a fazenda ID: %d", NomePlayer(playerid),playerid, borse);
			    SendClientMessageToAll(0xFFC06CFF, string);
				BPFLogs("fempresas", string);
				SalvarFEmpresa( borse );
				Atualizar3Dtexts();
				return true;
			}
			if(PlayerInfo[playerid][pPFazkey] != 255)
			{
                PlayerInfo[playerid][pPFazkey] = 255;
                return true;
			}
			return true;
	}
	CMD:infoempresa(playerid, params[])
	{
			new borse = PlayerInfo[playerid][pPbiskey];
			if(borse == 255)
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não tem uma empresa.");
				return true;
			}
			if (borse >= 100)
			{
				PrintSBizInfo(playerid,borse-100);
			}
			else
			{
				PrintBizInfo(playerid,borse);
			}
			return true;
	}
	CMD:infofazenda(playerid, params[])
	{
			new borse = PlayerInfo[playerid][pPFazkey];
			if(borse == 255)
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não tem uma Fazenda.");
				return true;
			}
			if (borse < 255)
			{
				PrintFBizInfo(playerid,borse);
			}
			return true;
	}
	CMD:entradaempresa(playerid, params[])
	{
		    new quant;
			new borse = PlayerInfo[playerid][pPbiskey];
			if (borse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você não tem uma Empresa !");
				return true;
			}
			if(sscanf(params, "d", quant))
			{
				return SendClientMessage(playerid, COLOR_WHITE, "USE: /entradadaempresa [preço]");
			}
			if(quant < 1 || quant > 900)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Preço da entrada mínimo R$1, máximo R$900.");
				return true;
			}
			new string[55];
			if (borse >= 100 && borse < 200)
			{
				SBizzInfo[borse-100][sbEntranceCost] = quant;
				SalvarSEmpresa(borse-100);
				Atualizar3Dtexts();
				format(string, sizeof(string), "Entrada Definida Para: R$%d.", SBizzInfo[borse-100][sbEntranceCost]);
			}
			if (borse < 100)
			{
				BizzInfo[borse][bEntranceCost] = quant;
				SalvarEmpresa(borse);
				Atualizar3Dtexts();
				format(string, sizeof(string), "Entrada Definida Para: R$%d.", BizzInfo[borse][bEntranceCost]);
			}
			SendClientMessage(playerid, COLOR_WHITE, string);
			return true;
	}
    CMD:entradafazenda(playerid, params[])
	{
		    new quant;
			new borse = PlayerInfo[playerid][pPFazkey];
			if (borse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você não tem uma Fazenda !");
				return true;
			}
			if(sscanf(params, "d", quant))
			{
				return SendClientMessage(playerid, COLOR_WHITE, "USE: /entradadafazenda [preço]");
			}
			if(quant < 1 || quant > 5000)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Preço da entrada mínimo R$1, máximo R$5000.");
				return true;
			}
			new string[55];
			if (borse < 255)
			{
				FBizzInfo[borse][fbEntranceCost] = quant;
				SalvarFEmpresa(borse);
				Atualizar3Dtexts();
				format(string, sizeof(string), "Entrada Definida Para: R$%d.", FBizzInfo[borse][fbEntranceCost]);
			}
			SendClientMessage(playerid, COLOR_WHITE, string);
			return true;
	}
	CMD:aentradaemp(playerid, params[])
	{
 			if (PlayerInfo[playerid][pAdmin] < 1337)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você não pode usar este comando");
				return true;
			}
		    new quant, id;
			if(sscanf(params, "dd", id, quant))
			{
				return SendClientMessage(playerid, COLOR_WHITE, "USE: /aentradadaempresa [id] [preço]");
			}
			new string[50];
			BizzInfo[id][bEntranceCost] = quant;
			SalvarEmpresa(id);
			Atualizar3Dtexts();
			format(string, sizeof(string), "Entrada Definida Para: R$%d.", BizzInfo[id][bEntranceCost]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return true;
	}
	CMD:aentradasemp(playerid, params[])
	{
 			if (PlayerInfo[playerid][pAdmin] < 1337)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você não pode usar este comando");
				return true;
			}
		    new quant, id;
			if(sscanf(params, "dd", id, quant))
			{
				return SendClientMessage(playerid, COLOR_WHITE, "USE: /aentradadasemp [id] [preço]");
			}
			new string[50];
			SBizzInfo[id][sbEntranceCost] = quant;
			SalvarSEmpresa(id);
			Atualizar3Dtexts();
			format(string, sizeof(string), "Entrada Definida Para: R$%d.", SBizzInfo[id][sbEntranceCost]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return true;
	}
	CMD:aentradafemp(playerid, params[])
	{
 			if (PlayerInfo[playerid][pAdmin] < 1337)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você não pode usar este comando");
				return true;
			}
		    new quant, id;
			if(sscanf(params, "dd", id, quant))
			{
				return SendClientMessage(playerid, COLOR_WHITE, "USE: /aentradafemp [id] [preço]");
			}
			new string[50];
			FBizzInfo[id][fbEntranceCost] = quant;
			SalvarFEmpresa(id);
			Atualizar3Dtexts();
			format(string, sizeof(string), "Entrada Definida Para: R$%d.", FBizzInfo[id][fbEntranceCost]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return true;
	}
	CMD:vendercarro(playerid, params[])
	{
	        if(PlayerInfo[playerid][pEmprego] != 12)
			{
			    SendClientMessage(playerid,COLOR_GREY,"Você nao e Vendedor De Carros !");
			    return 1;
			}
			if(!IsPlayerInAnyVehicle(playerid))
			{
			    SendClientMessage(playerid,COLOR_GREY,"Você nao esta em um carro!");
			    return 1;
			}
			new money;
			if(sscanf(params, "ud", giveplayerid, money))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USE: /vendercarro [id] [preco]");
				return 1;
			}
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "  Preço de R$1 a R$99999 !"); return 1; }
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Você não pode vender carro para voce mesmo!");
					        return 1;
					    }
					    if(CarCalls[giveplayerid] > 0)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Este player ja tem um carro comprado !");
					        return 1;
					    }
					    new string[128];
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Voce ofereceu para %s comprar o seu carro por R$%d .", giveplayer, money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Vendedor De Carros %s quer vender seu carro para você R$%d, (USE /aceitar carro) para comprar.", sendername, money);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						CarOffer[giveplayerid] = playerid;
						CarPrice[giveplayerid] = money;
						CarID[giveplayerid] = GetPlayerVehicleID(playerid);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador esta longe de voce !");
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Invalid ID/Name !");
			    return 1;
			}
			return 1;
	}
	CMD:chamarcarro(playerid)
	{
		    if(CarCalls[playerid] > 0)
		    {
		        new string[128];
		        new Float:plocx,Float:plocy,Float:plocz;
	            GetPlayerPos(playerid, plocx, plocy, plocz);
				SetVehiclePos(CarID[playerid],plocx,plocy+4, plocz);
				SendClientMessage(playerid, COLOR_YELLOW2, "* Seu carro comprado chegou!");
				CarCalls[playerid] -= 1;
				format(string, sizeof(string), "* Você chamou o carro comprado, agora restam mais %d chamadas.", CarCalls[playerid]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* %s chamou seu carro comprado", PlayerName(playerid));
				SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Você não tem um carro comprado, ou suas chamadas se esgotaram !");
		    }
	    	return 1;
	}

	CMD:rank(playerid)
	{

		MEGAString[0]=EOS;

		strcat(MEGAString, "{B4B5B7} » Nível\n");
		strcat(MEGAString, "{B4B5B7} » Horas jogadas\n");
		strcat(MEGAString, "{B4B5B7} » Kills\n");
		strcat(MEGAString, "{B4B5B7} » Mortes\n");
		strcat(MEGAString, "{B4B5B7} » Dinheiro\n");
		strcat(MEGAString, "{B4B5B7} » Crimes cometidos\n");
		strcat(MEGAString, "{B4B5B7} » Materiais\n");
		strcat(MEGAString, "{B4B5B7} » Maconha\n");
		strcat(MEGAString, "{B4B5B7} » Cocaina\n");
		strcat(MEGAString, "{B4B5B7} » Crack\n");
		strcat(MEGAString, "{B4B5B7} » Contratos cumpridos\n");
		strcat(MEGAString, "{B4B5B7} » Cash ({00FF00}NEW{B4B5B7})\n");

		ShowPlayerDialog(playerid, 5009, DIALOG_STYLE_LIST, "Ranks", MEGAString, "Ver", "Cancelar");

		return 1;
	}

	CMD:extorcao(playerid, params[])
	{
			new borse = PlayerInfo[playerid][pPbiskey];
			if (borse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você não tem uma Empresa!");
				return true;
			}
			if(sscanf(params, "d", giveplayerid))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "USE: /extorcao [ID do Player] (ou 555 para Ninguém)");
			    return true;
			}
			new string[128];
			GetPlayerName(playerid, sendername, sizeof(sendername));
   			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			if(giveplayerid == 555)
			{
			    if (borse >= 100 && borse < 200)
				{
				    format(string, sizeof(string), "Ninguém");
					strmid(SBizzInfo[borse-100][sbExtortion], string, 0, sizeof(string), 255);
					format(string, sizeof(string), "Novo dono da Extorsão: %s",SBizzInfo[borse-100][sbExtortion]);
                    SalvarSEmpresa(borse-100);
                    Atualizar3Dtexts();
				}
				if (borse < 100)
				{
				    format(string, sizeof(string), "Ninguém");
					strmid(BizzInfo[borse][bExtortion], string, 0, sizeof(string), 255);
					format(string, sizeof(string), "Novo dono da Extorsão: %s",BizzInfo[borse][bExtortion]);
                    SalvarEmpresa(borse);
                    Atualizar3Dtexts();
				}
				SendClientMessage(playerid, COLOR_WHITE, string);
				return 1;
			}
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        format(string, sizeof(string), "* %s está na extorsão de sua empresa.",giveplayer);
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			        format(string, sizeof(string), "* Agora você está na Extorsão da empresa de %s.",PlayerName(playerid));
			        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			        if (borse >= 100 && borse < 200)
					{
					    format(string, sizeof(string), "%s",giveplayer);
						strmid(SBizzInfo[borse-100][sbExtortion], string, 0, sizeof(string), 255);
						format(string, sizeof(string), "Novo dono da Extorsão: %s",SBizzInfo[borse-100][sbExtortion]);
                        SalvarSEmpresa(borse-100);
                        Atualizar3Dtexts();
					}
					if (borse < 100)
					{
					    format(string, sizeof(string), "%s",giveplayer);
						strmid(BizzInfo[borse][bExtortion], string, 0, sizeof(string), 255);
						format(string, sizeof(string), "Novo dono da Extorsão: %s",BizzInfo[borse][bExtortion]);
                        SalvarEmpresa(borse);
                        Atualizar3Dtexts();
					}
					SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   O Jogador esta offline !");
			    return true;
			}
			return true;
	}
	CMD:extorcaofaz(playerid, params[])
	{
			new forse = PlayerInfo[playerid][pPFazkey];
			if (forse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você não tem uma Fazenda!");
				return true;
			}
			if(sscanf(params, "d", giveplayerid))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "USE: /extorcaofaz [ID do Player] (ou 555 para Ninguém)");
			    return true;
			}
			new string[128];
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(giveplayerid == 555)
			{
				if (forse < 255)
				{
				    format(string, sizeof(string), "Ninguém");
					strmid(FBizzInfo[forse][fbExtortion], string, 0, sizeof(string), 255);
					format(string, sizeof(string), "Novo dono da Extorsão: %s",FBizzInfo[forse][fbExtortion]);
                    SalvarFEmpresa(forse);
                    Atualizar3Dtexts();
				}
				SendClientMessage(playerid, COLOR_WHITE, string);
				return 1;
			}
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        format(string, sizeof(string), "* %s está na extorsão de sua fazenda.",PlayerName(giveplayerid));
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			        format(string, sizeof(string), "* Agora você está na Extorsão da fazenda de %s.",PlayerName(playerid));
			        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					if (forse < 255)
					{
					    format(string, sizeof(string), "%s",PlayerName(giveplayerid));
						strmid(FBizzInfo[forse][fbExtortion], string, 0, sizeof(string), 255);
						format(string, sizeof(string), "Novo dono da Extorsão: %s",FBizzInfo[forse][fbExtortion]);
                        SalvarFEmpresa(forse);
                        Atualizar3Dtexts();
					}
					SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   O Jogador esta offline !");
			    return true;
			}
			return true;
	}
	CMD:nomeempresa(playerid, params[])
	{
			new borse = PlayerInfo[playerid][pPbiskey];
			if (borse == 255)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Você não tem uma empresa!");
			    return true;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Peça para um admin Master mudar o nome da sua empresa!");
			}
			return true;
	}
	CMD:nomefazenda(playerid, params[])
	{
			new borse = PlayerInfo[playerid][pPFazkey];
			if (borse == 255)
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Você não tem uma fazenda!");
			    return true;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Peça para um admin Master mudar o nome da sua fazenda!");
			}
			return true;
	}
	CMD:sacarempresa(playerid, params[])
	{
			new borse = PlayerInfo[playerid][pPbiskey];
			if (borse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você não tem uma Empresa");
				return true;
			}
			new quant;
    	    new string[128];
			if(sscanf(params, "d", quant))
			{
				if (borse >= 100 && borse < 200)
				{
					format(string, sizeof(string), "Você tem R$%d no cofre da empresa.", SBizzInfo[borse-100][sbTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				if (borse < 100)
				{
					format(string, sizeof(string), "Você tem R$%d no cofre da empresa.", BizzInfo[borse][bTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /sacarempresa [quantidade]");
				return true;
			}
			new cashdeposit = quant;
			if (borse >= 100 && borse < 200)
			{
				if(cashdeposit > SBizzInfo[borse-100][sbTill] || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você nao tem essa quantia.");
					return true;
				}
			}
			if (borse < 100)
			{
				if (cashdeposit > BizzInfo[borse][bTill] || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você nao tem essa quantia.");
					return true;
				}
			}
			if (borse >= 100 && borse < 200)
			{
				if(!PlayerToPoint(100, playerid,SBizzInfo[borse-100][sbEntranceX],SBizzInfo[borse-100][sbEntranceY],SBizzInfo[borse-100][sbEntranceZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  Sua empresa esta longe de você.");
					return true;
				}
				else
				{
					GiveDinheiro(playerid,cashdeposit);
					SBizzInfo[borse-100][sbTill] -= cashdeposit;
					format(string, sizeof(string), "Você retirou R$%d de sua empresa - restante: R$%d ", cashdeposit,SBizzInfo[borse-100][sbTill]);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					SalvarSEmpresa(borse-100);
					Atualizar3Dtexts();
				}
			}
			if (borse < 100)
			{
				if (!PlayerToPoint(100, playerid,BizzInfo[borse][bExitX],BizzInfo[borse][bExitY],BizzInfo[borse][bExitZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Sua empresa esta longe de você.");
					return true;
				}
				else
				{
					GiveDinheiro(playerid,cashdeposit);
					BizzInfo[borse][bTill] -= cashdeposit;
					format(string, sizeof(string), "Você retirou R$%d de sua empresa - restante: R$%d ", cashdeposit,BizzInfo[borse][bTill]);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					SalvarEmpresa(borse);
					Atualizar3Dtexts();
				}
			}
			return true;
	}
 CMD:sacarfazenda(playerid, params[])
	{
			new borse = PlayerInfo[playerid][pPFazkey];
			if (borse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Você não tem uma Empresa");
				return true;
			}
			new quant;
    	    new string[128];
			if(sscanf(params, "d", quant))
			{
				if (borse < 255)
				{
					format(string, sizeof(string), "  Você tem R$%d no cofre da fazenda.", FBizzInfo[borse][fbTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /sacarfazenda [quantidade]");
				return true;
			}
			new cashdeposit = quant;
			if (borse < 255)
			{
				if(cashdeposit > FBizzInfo[borse][fbTill] || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Você nao tem essa quantia em sua Fazenda.");
					return true;
				}
			}
			if (borse < 255)
			{
				if(!PlayerToPoint(100, playerid,FBizzInfo[borse][fbEntranceX],FBizzInfo[borse][fbEntranceY],FBizzInfo[borse][fbEntranceZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "  Sua Fazenda esta longe de você.");
					return true;
				}
				else
				{
					GiveDinheiro(playerid,cashdeposit);
					FBizzInfo[borse][fbTill] -= cashdeposit;
					format(string, sizeof(string), "  Você retirou R$%d de sua fazenda - restante: R$%d ", cashdeposit,FBizzInfo[borse][fbTill]);
					SendClientMessage(playerid, COLOR_YELLOW, string);
					SalvarFEmpresa(borse);
					Atualizar3Dtexts();
				}
			}
			return true;
	}
	CMD:depositarempresa(playerid, params[])
	{
			new borse = PlayerInfo[playerid][pPbiskey];
			if (borse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você não tem uma empresa.");
				return true;
			}
			new quant;
    	    new string[128];
			if(sscanf(params, "d", quant))
			{
				if (borse >= 100 && borse < 200)
				{
					format(string, sizeof(string), "Você tem R$%d de saldo em sua empresa.", SBizzInfo[borse-100][sbTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
                if (borse < 100)
				{
					format(string, sizeof(string), "Você tem R$%d de saldo em sua empresa.", BizzInfo[borse][bTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /depositarempresa [quantidade]");
				return true;
			}
			new cashdeposit = quant;
			if (cashdeposit > GetPlayerMoney(playerid) || cashdeposit < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você não tem tanto");
				return true;
			}
			if (borse >= 100)
			{
				if(!PlayerToPoint(100, playerid,SBizzInfo[borse-100][sbEntranceX],SBizzInfo[borse-100][sbEntranceY],SBizzInfo[borse-100][sbEntranceZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você está longe de sua empresa");
					return true;
				}
				else
				{
					GiveDinheiro(playerid,-cashdeposit);
					SBizzInfo[borse-100][sbTill] += cashdeposit;
					format(string, sizeof(string), "Você guardou R$%d no cofre de sua empresa. O saldo de sua empresa: R$%d", cashdeposit,SBizzInfo[borse-100][sbTill]);
					SendClientMessage(playerid, COLOR_YELLOW, string);
                    SalvarSEmpresa(borse-100);
                    Atualizar3Dtexts();
    			}
			}
		    if (borse < 100)
			{
				if (!PlayerToPoint(100, playerid,BizzInfo[borse][bExitX],BizzInfo[borse][bExitY],BizzInfo[borse][bExitZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você está longe de sua empresa");
					return true;
				}
				else
				{
					GiveDinheiro(playerid,-cashdeposit);
					BizzInfo[borse][bTill] += cashdeposit;
					format(string, sizeof(string), "Você depositou R$%d no cofre de sua empresa Total: R$%d", cashdeposit,BizzInfo[borse][bTill]);
					SendClientMessage(playerid, COLOR_YELLOW, string);
                    SalvarEmpresa(borse);
                    Atualizar3Dtexts();
				}
			}
			return true;
	}
	CMD:depositarfazenda(playerid, params[])
	{
			new borse = PlayerInfo[playerid][pPFazkey];
			if (borse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você não tem uma Fazenda.");
				return true;
			}
			new quant;
    	    new string[128];
			if(sscanf(params, "d", quant))
			{
                if (borse < 255)
				{
					format(string, sizeof(string), "Você tem R$%d de saldo em sua Fazenda.", FBizzInfo[borse][fbTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /depositarfazenda [quantidade]");
				return true;
			}
			new cashdeposit = quant;
			if (cashdeposit > GetPlayerMoney(playerid) || cashdeposit < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você não tem tanto");
				return true;
			}
			if (borse < 255)
			{
				if(!PlayerToPoint(100, playerid,FBizzInfo[borse-200][fbEntranceX],FBizzInfo[borse-200][fbEntranceY],FBizzInfo[borse-200][fbEntranceZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você está longe de sua fazenda");
					return true;
				}
				else
				{
					GiveDinheiro(playerid,-cashdeposit);
					FBizzInfo[borse][fbTill] += cashdeposit;
					format(string, sizeof(string), "Você guardou R$%d no cofre de sua fazenda. O saldo de sua fazenda: R$%d", cashdeposit,FBizzInfo[borse-200][fbTill]);
					SendClientMessage(playerid, COLOR_YELLOW, string);
                    SalvarFEmpresa(borse);
                    Atualizar3Dtexts();
    			}
			}
			return true;
	}
		CMD:tunarautokt(playerid)
		{
		{
		{
		if(!IsPlayerInAnyVehicle(playerid))
		{
		SendClientMessage(playerid,-1,"{0099FF}(INFO){CCCCFF} Você não consegue tunar seu próprio corpo.");
		}
		new var5 = 0;
		var5 = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
		{
		AddVehicleComponent(var5, 1046);
		AddVehicleComponent(var5, 1171);
		AddVehicleComponent(var5, 1149);
		AddVehicleComponent(var5, 1035);
		AddVehicleComponent(var5, 1147);
		AddVehicleComponent(var5, 1036);
		AddVehicleComponent(var5, 1040);
		ChangeVehiclePaintjob(var5, 4);
		ChangeVehicleColor(var5, 6, 6);
		AddVehicleComponent(var5, 1010);
		AddVehicleComponent(var5, 1097);
		AddVehicleComponent(var5, 1087);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
		{
		AddVehicleComponent(var5, 1028);
		AddVehicleComponent(var5, 1169);
		AddVehicleComponent(var5, 1141);
		AddVehicleComponent(var5, 1032);
		AddVehicleComponent(var5, 1138);
		AddVehicleComponent(var5, 1026);
		AddVehicleComponent(var5, 1027);
		ChangeVehiclePaintjob(var5, 0);
		AddVehicleComponent(var5, 1010);
		AddVehicleComponent(var5, 1097);
		AddVehicleComponent(var5, 1087);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 565)
		{
		AddVehicleComponent(var5, 1046);
		AddVehicleComponent(var5, 1153);
		AddVehicleComponent(var5, 1150);
		AddVehicleComponent(var5, 1054);
		AddVehicleComponent(var5, 1049);
		AddVehicleComponent(var5, 1047);
		AddVehicleComponent(var5, 1051);
		AddVehicleComponent(var5, 1010);
		AddVehicleComponent(var5, 1097);
		AddVehicleComponent(var5, 1087);
		ChangeVehiclePaintjob(var5, 4);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
		{
		AddVehicleComponent(var5, 1065);
		AddVehicleComponent(var5, 1160);
		AddVehicleComponent(var5, 1159);
		AddVehicleComponent(var5, 1067);
		AddVehicleComponent(var5, 1162);
		AddVehicleComponent(var5, 1069);
		AddVehicleComponent(var5, 1071);
		AddVehicleComponent(var5, 1010);
		AddVehicleComponent(var5, 1097);
		AddVehicleComponent(var5, 1087);
		ChangeVehiclePaintjob(var5, 4);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 561)
		{
		AddVehicleComponent(var5, 1064);
		AddVehicleComponent(var5, 1155);
		AddVehicleComponent(var5, 1154);
		AddVehicleComponent(var5, 1055);
		AddVehicleComponent(var5, 1158);
		AddVehicleComponent(var5, 1056);
		AddVehicleComponent(var5, 1062);
		AddVehicleComponent(var5, 1010);
		AddVehicleComponent(var5, 1097);
		AddVehicleComponent(var5, 1087);
		ChangeVehiclePaintjob(var5, 4);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
		{
		AddVehicleComponent(var5, 1089);
		AddVehicleComponent(var5, 1166);
		AddVehicleComponent(var5, 1168);
		AddVehicleComponent(var5, 1088);
		AddVehicleComponent(var5, 1164);
		AddVehicleComponent(var5, 1090);
		AddVehicleComponent(var5, 1094);
		AddVehicleComponent(var5, 1010);
		AddVehicleComponent(var5, 1097);
		AddVehicleComponent(var5, 1087);
		ChangeVehiclePaintjob(var5, 4);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 575)
		{
		AddVehicleComponent(var5, 1044);
		AddVehicleComponent(var5, 1174);
		AddVehicleComponent(var5, 1176);
		AddVehicleComponent(var5, 1042);
		AddVehicleComponent(var5, 1099);
		AddVehicleComponent(var5, 1010);
		AddVehicleComponent(var5, 1097);
		AddVehicleComponent(var5, 1087);
		ChangeVehiclePaintjob(var5, 4);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534)
		{
		AddVehicleComponent(var5, 1126);
		AddVehicleComponent(var5, 1179);
		AddVehicleComponent(var5, 1180);
		AddVehicleComponent(var5, 1122);
		AddVehicleComponent(var5, 1101);
		AddVehicleComponent(var5, 1125);
		AddVehicleComponent(var5, 1123);
		AddVehicleComponent(var5, 1100);
		AddVehicleComponent(var5, 1010);
		AddVehicleComponent(var5, 1097);
		AddVehicleComponent(var5, 1087);
		ChangeVehiclePaintjob(var5, 4);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 536)
		{
		AddVehicleComponent(var5, 1104);
		AddVehicleComponent(var5, 1182);
		AddVehicleComponent(var5, 1184);
		AddVehicleComponent(var5, 1108);
		AddVehicleComponent(var5, 1107);
		AddVehicleComponent(var5, 1010);
		AddVehicleComponent(var5, 1097);
		AddVehicleComponent(var5, 1087);
		ChangeVehiclePaintjob(var5, 4);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 567)
		{
		AddVehicleComponent(var5, 1129);
		AddVehicleComponent(var5, 1189);
		AddVehicleComponent(var5, 1187);
		AddVehicleComponent(var5, 1102);
		AddVehicleComponent(var5, 1133);
		AddVehicleComponent(var5, 1010);
		AddVehicleComponent(var5, 1097);
		AddVehicleComponent(var5, 1087);
		ChangeVehiclePaintjob(var5, 4);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 420)
		{
		AddVehicleComponent(var5, 1010);
		AddVehicleComponent(var5, 1087);
		AddVehicleComponent(var5, 1097);
		AddVehicleComponent(var5, 1139);
		AddVehicleComponent(var5, 1147);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 400)
		{
		AddVehicleComponent(var5, 1010);
		AddVehicleComponent(var5, 1087);
		AddVehicleComponent(var5, 1018);
		AddVehicleComponent(var5, 1013);
		AddVehicleComponent(var5, 1097);
		AddVehicleComponent(var5, 1086);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 444)
		{
		AddVehicleComponent(var5, 1010);
		AddVehicleComponent(var5, 1097);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 556)
		{
		AddVehicleComponent(var5, 1010);
		AddVehicleComponent(var5, 1097);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 557)
		{
		AddVehicleComponent(var5, 1010);
		AddVehicleComponent(var5, 1097);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 401)
		{
		AddVehicleComponent(var5, 1086);
		AddVehicleComponent(var5, 1139);
		AddVehicleComponent(var5, 1097);
		AddVehicleComponent(var5, 1010);
		AddVehicleComponent(var5, 1087);
		AddVehicleComponent(var5, 1012);
		AddVehicleComponent(var5, 1013);
		AddVehicleComponent(var5, 1042);
		AddVehicleComponent(var5, 1043);
		AddVehicleComponent(var5, 1018);
		AddVehicleComponent(var5, 1006);
		AddVehicleComponent(var5, 1007);
		AddVehicleComponent(var5, 1017);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 576)
		{
		ChangeVehiclePaintjob(var5, 0);
		AddVehicleComponent(var5, 1191);
		AddVehicleComponent(var5, 1193);
		AddVehicleComponent(var5, 1010);
		AddVehicleComponent(var5, 1018);
		AddVehicleComponent(var5, 1097);
		AddVehicleComponent(var5, 1087);
		AddVehicleComponent(var5, 1134);
		AddVehicleComponent(var5, 1137);
		}
		else
		{
		AddVehicleComponent(var5, 1010);
		AddVehicleComponent(var5, 1097);
		AddVehicleComponent(var5, 1087);
		}
		}
		}
	return 1;
	}
	CMD:tunar(playerid)
	{
	    if(gPlayerLogged[playerid] == 0)return 1;
	    if(PlayerToPoint(5, playerid, 1620.488037,-1887.855468,13.274709))
		{
		    if(IsPlayerInAnyVehicle(playerid))
			{
			    new Float:Velocity[3];
				GetVehicleVelocity(GetPlayerVehicleID(playerid), Velocity[0], Velocity[1], Velocity[2]);
				if(Velocity[0] == 0 && Velocity[1] == 0 && Velocity[2] == 0 && TunningOn[playerid] == 0)
				{
				    if(IsAMoto(GetPlayerVehicleID(playerid)))
			    	{
			    		GameTextForPlayer(playerid, "~w~Motos Nao podem ser tunadas", 5000, 5);
			        	return 1;
			    	}
					if(IsPlayerInAnyVehicle(playerid))
					{
						MenuTuning(playerid);
					}
				}
			}
		}
		return 1;
	}
	CMD:tunarvip(playerid)
	{
	    if(gPlayerLogged[playerid] == 0)return 1;
        if(PlayerInfo[playerid][pVIP] < 1)
		{
			SendClientMessage(playerid, COLOR_GREY, "Apenas players VIP's podem tunar carros!");
			return true;
		}
		    if(IsPlayerInAnyVehicle(playerid))
			{
			    new Float:Velocity[3];
				GetVehicleVelocity(GetPlayerVehicleID(playerid), Velocity[0], Velocity[1], Velocity[2]);
				if(Velocity[0] == 0 && Velocity[1] == 0 && Velocity[2] == 0 && TunningOn[playerid] == 0)
				{
				    if(IsAMoto(GetPlayerVehicleID(playerid)))
			    	{
			    		GameTextForPlayer(playerid, "~w~Motos Nao podem ser tunadas", 5000, 5);
			        	return 1;
			    	}
					if(IsPlayerInAnyVehicle(playerid))
					{
						MenuTuning(playerid);
					}
				}
			}
		return 1;
	}
	stock MenuTuning(playerid)
	{
		switch(pmodelid[playerid])
		{
	        case 562,565,559,561,560,575,534,567,536,535,576,411,579,602,496,518,527,589,597,419,
			533,526,474,545,517,410,600,436,580,439,549,491,445,604,507,585,587,466,492,546,551,516,
			426, 547, 405, 409, 550, 566, 540, 421,	529,431,438,437,420,525,552,416,433,427,490,528,
			407,544,470,598,596,599,601,428,499,609,524,578,486,406,573,455,588,403,514,423,
			414,443,515,456,422,482,530,418,572,413,440,543,583,478,554,402,542,603,475,568,504,457,
	        483,508,429,541,415,480,434,506,451,555,477,400,404,489,479,442,458,467,558:
			{
				TunningOn[playerid] = 1;
    			Controle(playerid, 0);
			    ShowMenuForPlayer(TuningMenu, playerid);
			    TunC = playerid;
	 			return SendClientMessage(playerid, COLOR_LIGHTBLUE, "[INFO] Use o ESPAÇO e as SETAS.");
			}
			default:
			{
				Controle(playerid, 1);
		        TunningOn[playerid] = 0;
				TunC = -1;
				return SendClientMessage(playerid, COLOR_LIGHTBLUE,"[ERRO] Você não pode tunar este veículo.");
            }
		}
		return 1;
	}
//-----------------------------------[HEAL]-------------------------------------------------------------------------
	CMD:vida(playerid, params[])
	{
	        new string[128];
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new location = PlayerInfo[playerid][pLocal];
			if(location != 255)
			{
				if(location < 99)
				{
					if(HouseInfo[location][hArm] == 1 && IsACop(playerid))
					{
						format(string, sizeof(string), "* %s pega seu colete.", PlayerName(playerid));
						SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						Controle(playerid, 1);
						GetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
						Unspec[playerid][sPint] = PlayerInfo[playerid][pInt];
						Unspec[playerid][sLocal] = PlayerInfo[playerid][pLocal];
						SetPlayerPos(playerid,1527.5,-12.1,1002.0);
						PlayerInfo[playerid][pLocal] = 255;
						SetPlayerInterior(playerid,99);
						Spectate[playerid] = 257;
					}
					else if(HouseInfo[location][hHel] == 1)
					{
						SetPlayerHealth(playerid,100.0);
						PlayerInfo[playerid][pDoenca] = 0;
						SetPlayerDrunkLevel (playerid, 0);
						PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você foi curado.");
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY,"Este lugar nao tem lugar de se curar.");
					}
					return true;
				}
				else if(location == 101)//Restaurant
				{
				    SetPlayerHealth(playerid,100.0);
					SetPlayerArmour(playerid,100.0);
					PlayerInfo[playerid][pDoenca] = 0;
					SetPlayerDrunkLevel (playerid, 0);
					PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você foi curado.");
				}
				else if(location == 102 && IsACop(playerid))//Police Armorry
				{
				    SetPlayerHealth(playerid,100.0);
				    format(string, sizeof(string), "* %s Foi Curado.", PlayerName(playerid));
					SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					Controle(playerid, 0);
					GetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
					Unspec[playerid][sPint] = PlayerInfo[playerid][pInt];
					Unspec[playerid][sLocal] = PlayerInfo[playerid][pLocal];
					SetPlayerPos(playerid,1527.5,-12.1,1002.0);
					PlayerInfo[playerid][pLocal] = 255;
					SetPlayerInterior(playerid,99);
					Spectate[playerid] = 257;
				}
			}
			new mon;
			if(sscanf(params, "ud", giveplayerid, mon))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "USE: /vida [ID do Player] [price]");
				return true;
			}
			if(mon < 1 || mon > 1000) { SendClientMessage(playerid, COLOR_GREY, "   O Preço não pode passar de 1000 !"); return true; }
			if (giveplayerid == playerid)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não pode se curar!");
				return true;
			}
			if(!ProxDetectorS(10.0, playerid, giveplayerid))return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está muito longe de você !");
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					if(PlayerInfo[playerid][pMembro]==4||PlayerInfo[playerid][pLider]==4||PlayerInfo[playerid][pMembro]==31||PlayerInfo[playerid][pLider]==31)//model
					{
						new Veh = GetPlayerVehicleID(playerid);
						if(IsAnAmbulanceCar(Veh) || IsAMedicosSFCar(Veh))
						{
						    if(!IsPlayerInVehicle(playerid, Veh) && !IsPlayerInVehicle(giveplayerid, Veh))
							{
								SendClientMessage(playerid, COLOR_GRAD1, "Vocês dois precisam estar no veículo!");
								return true;
							}
							format(string, sizeof(string), "~y~Voce foi curado ~n~~w~%s~n~~g~R$%d", giveplayer,mon);
							GameTextForPlayer(playerid, string, 5000, 1);
							GiveDinheiro(playerid,mon);
							GiveDinheiro(giveplayerid,-mon);
							new hp = 0;
						    if(PlayerInfo[playerid][pPainPerk] > 0)
						    {
						        hp = 20 * PlayerInfo[playerid][pPainPerk];
								hp += 100;
								SetPlayerHealth(giveplayerid, hp);
						    }
						    else
						    {
						        hp = 100;
						        SetPlayerHealth(giveplayerid, 100);
						        PlayerInfo[giveplayerid][pDoenca] = 0;
						    }
							PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
							PlayerPlaySound(giveplayerid, 1150, 0.0, 0.0, 0.0);
							format(string, sizeof(string), "Você foi curado pelo %s, %d de saude por -R$%d",NomePlayer(playerid), hp,mon);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE,string);
							if(PlayerInfo[giveplayerid][pDoenca] > 0)
				            {
								PlayerInfo[giveplayerid][pDoenca] = 0;
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "* Você não está infectado com nenhuma doença, por causa de cuidados medicos!");
							}
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar o comando!");
						return true;
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, " Esse jogador está offline");
			}
			return true;
	}
stock CheckSlot()
{
	for(new slot = 0; slot < MAX_MACONHA; slot++)
	{
	    if(MaconhaInfo[slot][PodeUsar] == true)
	    {
	       	MaconhaInfo[slot][PodeUsar] = false;
	        return slot;
		}
	}
	return -1;
}
stock CountPlantacao(playerid)
{

	new count = 0;

	for(new maconhaid=0;maconhaid < MAX_MACONHA;maconhaid++)
	{
	    if(MaconhaInfo[maconhaid][PodeUsar] == false && strcmp(MaconhaInfo[maconhaid][Dono], NomePlayer(playerid), true)==0)
		{
		    count++;
		}
	}

	return count;
}
BPF::AnimatioN(playerid)
{
	ApplyAnimation(playerid,"BOMBER","BOM_Plant_Loop",2.0,1,0,0,0,0);
	return true;
}

stock GetPlayerSpeedEx(playerid)
{
	static Float: posS[ 3 ] ;
	GetPlayerVelocity(playerid , posS [ 0 ] , posS [ 1 ] , posS [ 2 ] ) ;
	return floatround(floatmul(floatsqroot(floatadd(floatpower(posS[ 0 ] , 2 ) ,floatpower(posS [ 1 ] , 2 ))), 170.0));
}

stock PertoMaconha(playerid)
{
	new count = 0;

	for(new mac = 0; mac < MAX_MACONHA; mac++)
    {
        if(!MaconhaInfo[mac][PodeUsar] && IsPlayerInRangeOfPoint(playerid, 200.0, MaconhaInfo[mac][mX],MaconhaInfo[mac][mY],MaconhaInfo[mac][mZ]))
		{
		    count++;
		}
    }

	return count;
}
	// Sistema de acessórios

stock CriarAcessorios(playerid){

    format(Erquivo, sizeof Erquivo, "Acessorios/%s.ini", pNamo[playerid]);

    if(!DOF2_FileExists(Erquivo)){

		DOF2_CreateFile(Erquivo);
	}

	new str[22];
	for(new i = 0; i != 10; ++i){

		format(str, sizeof str, "Slot%d", i);
		DOF2_SetInt(Erquivo, str, 0);
		format(str, sizeof str, "Model%d",i);
		DOF2_SetInt(Erquivo, str, 0);
		format(str, sizeof str, "Local%d",i);
		DOF2_SetInt(Erquivo, str, 0);
		format(str, sizeof str, "aX%d",i);
		DOF2_SetFloat(Erquivo, str, 0);
		format(str, sizeof str, "aY%d",i);
		DOF2_SetFloat(Erquivo, str, 0);
		format(str, sizeof str, "aZ%d",i);
		DOF2_SetFloat(Erquivo, str, 0);
		format(str, sizeof str, "aRX%d",i);
		DOF2_SetInt(Erquivo, str, 0);
		format(str, sizeof str, "aRY%d",i);
		DOF2_SetInt(Erquivo, str, 0);
		format(str, sizeof str, "aRZ%d",i);
		DOF2_SetFloat(Erquivo, str, 0);
		format(str, sizeof str, "aTX%d",i);
		DOF2_SetFloat(Erquivo, str, 0);
		format(str, sizeof str, "aTY%d",i);
		DOF2_SetFloat(Erquivo, str, 0);
		format(str, sizeof str, "aTZ%d",i);
		DOF2_SetFloat(Erquivo, str, 0);
	}
	DOF2_SaveFile();
}

stock CarregarAcessorios(playerid){

    format(Erquivo, sizeof Erquivo, "Acessorios/%s.ini", pNamo[playerid]);

    if(DOF2_FileExists(Erquivo)){

        new str[22];
        for(new i = 0; i != 10; ++i){

         format(str, sizeof str, "Slot%d", i);
         AcessorioInfo[playerid][i][aSlot] = DOF2_GetInt(Erquivo, str);
         format(str, sizeof str, "Model%d", i);
         AcessorioInfo[playerid][i][aModel] = DOF2_GetInt(Erquivo, str);
         format(str, sizeof str, "Local%d", i);
         AcessorioInfo[playerid][i][aLocal] = DOF2_GetInt(Erquivo, str);
         format(str, sizeof str, "aX%d", i);
         AcessorioInfo[playerid][i][aX] = DOF2_GetFloat(Erquivo, str);
         format(str, sizeof str, "aY%d", i);
         AcessorioInfo[playerid][i][aY] = DOF2_GetFloat(Erquivo, str);
         format(str, sizeof str, "aZ%d", i);
         AcessorioInfo[playerid][i][aZ] = DOF2_GetFloat(Erquivo, str);
         format(str, sizeof str, "aRX%d", i);
         AcessorioInfo[playerid][i][aRX] = DOF2_GetFloat(Erquivo, str);
         format(str, sizeof str, "aRY%d", i);
         AcessorioInfo[playerid][i][aRY] = DOF2_GetFloat(Erquivo, str);
         format(str, sizeof str, "aRZ%d", i);
         AcessorioInfo[playerid][i][aRZ] = DOF2_GetFloat(Erquivo, str);
         format(str, sizeof str, "aTX%d", i);
         AcessorioInfo[playerid][i][aTX] = DOF2_GetFloat(Erquivo, str);
         format(str, sizeof str, "aTY%d", i);
         AcessorioInfo[playerid][i][aTY] = DOF2_GetFloat(Erquivo, str);
         format(str, sizeof str, "aTZ%d", i);
         AcessorioInfo[playerid][i][aTZ] = DOF2_GetFloat(Erquivo, str);
        }
    }
}

stock SalvarAcessorios(playerid){

    format(Erquivo, sizeof Erquivo, "Acessorios/%s.ini", pNamo[playerid]);

	new str[22];
	for(new i = 0; i != 10; i++){

	    format(str, sizeof str, "Slot%d", i);
		DOF2_SetInt(Erquivo, str, AcessorioInfo[playerid][i][aSlot]);
		format(str, sizeof str, "Model%d",i);
		DOF2_SetInt(Erquivo, str, AcessorioInfo[playerid][i][aModel]);
		format(str, sizeof str, "Local%d",i);
		DOF2_SetInt(Erquivo, str, AcessorioInfo[playerid][i][aLocal]);
		format(str, sizeof str, "aX%d",i);
		DOF2_SetFloat(Erquivo, str, AcessorioInfo[playerid][i][aX]);
		format(str, sizeof str, "aY%d",i);
		DOF2_SetFloat(Erquivo, str, AcessorioInfo[playerid][i][aY]);
		format(str, sizeof str, "aZ%d",i);
		DOF2_SetFloat(Erquivo, str, AcessorioInfo[playerid][i][aZ]);
		format(str, sizeof str, "aRX%d",i);
		DOF2_SetFloat(Erquivo, str, AcessorioInfo[playerid][i][aRX]);
		format(str, sizeof str, "aRY%d",i);
		DOF2_SetFloat(Erquivo, str, AcessorioInfo[playerid][i][aRY]);
		format(str, sizeof str, "aRZ%d",i);
		DOF2_SetFloat(Erquivo, str, AcessorioInfo[playerid][i][aRZ]);
		format(str, sizeof str, "aTX%d",i);
		DOF2_SetFloat(Erquivo, str, AcessorioInfo[playerid][i][aTX]);
		format(str, sizeof str, "aTY%d",i);
		DOF2_SetFloat(Erquivo, str, AcessorioInfo[playerid][i][aTY]);
		format(str, sizeof str, "aTZ%d",i);
		DOF2_SetFloat(Erquivo, str, AcessorioInfo[playerid][i][aTZ]);
    }
    DOF2_SaveFile();
}

stock LocalAcessorio(number)
{
	new str[18];
    if(number == 0) format(str,18,"Nenhum");
	if(number == 1) format(str,18,"Nenhum");
	if(number == 1) format(str,18,"Espinha");
	if(number == 2) format(str,18,"Cabeça");
	if(number == 3) format(str,18,"Braço esquerdo");
	if(number == 4) format(str,18,"Braço direito");
	if(number == 5) format(str,18,"Mão esquerda");
	if(number == 6) format(str,18,"Mão direita");
	if(number == 7) format(str,18,"Pé esquerdo");
    if(number == 8) format(str,18,"Panturrilha direita");
    if(number == 9) format(str,18,"Panturrilha esquerda");
    if(number == 10) format(str,18,"Antebraço esquerdo");
    if(number == 11) format(str,18,"Antebraço direito");
    if(number == 12) format(str,18,"Ombro esquerdo");
    if(number == 13) format(str,18,"Ombro direito");
    if(number == 14) format(str,18,"Pescoço");
    if(number == 14) format(str,18,"Mandíbula");
	return str;
}
stock CriarInventario(playerid){

	format(Erquivo, sizeof Erquivo, "Inventario/%s.ini", pNamo[playerid]);

    if(!DOF2_FileExists(Erquivo)){

		DOF2_CreateFile(Erquivo);
	}

	new str[22];
	for(new i = 0; i != 75; ++i){

		format(str, sizeof str, "Slot%d", i);
		DOF2_SetInt(Erquivo, str, 19382);
		format(str, sizeof str, "Unidades%d",i);
		DOF2_SetInt(Erquivo, str, 0);
	}
	DOF2_SaveFile();
	return 1;
}
carregarFamilias(){

	new
		file[78],
		Str[78],
		idx = 0
	;
    while(idx < MAX_FAMILIAS){

        format(file, sizeof file, "Familias/Familia%d.ini", idx);
	    if(DOF2_FileExists(file)){

	        FamiliaInfo[idx][fID] = DOF2_GetInt(file, "ID");
	        format(FamiliaInfo[idx][fName], 24, DOF2_GetString(file, "Name"));
	        format(FamiliaInfo[idx][fLeader], 24, DOF2_GetString(file, "Leader"));
	        format(FamiliaInfo[idx][fSubLeader], 24, DOF2_GetString(file, "SubLeader"));

	        FamiliaInfo[idx][fSpawnX] = DOF2_GetFloat(file, "SpawnX");
			FamiliaInfo[idx][fSpawnY] = DOF2_GetFloat(file, "SpawnY");
			FamiliaInfo[idx][fSpawnZ] = DOF2_GetFloat(file, "SpawnZ");

            FamiliaInfo[idx][fPickup] = CreateDynamicPickup(1314, 23, FamiliaInfo[idx][fSpawnX], FamiliaInfo[idx][fSpawnY], FamiliaInfo[idx][fSpawnZ]);

			format(Str, 78, "HQ da família %s", FamiliaInfo[idx][fName]);
			FamiliaInfo[idx][fText] = CreateDynamic3DTextLabel(Str, 0xCD853FFF, FamiliaInfo[idx][fSpawnX], FamiliaInfo[idx][fSpawnY], FamiliaInfo[idx][fSpawnZ], 15.0);


			FamiliaInfo[idx][fInt] = DOF2_GetInt(file, "Int");
			FamiliaInfo[idx][fWorld] = DOF2_GetInt(file, "World");
			FamiliaInfo[idx][fMoney] = DOF2_GetInt(file, "Money");
			FamiliaInfo[idx][fVIP] = DOF2_GetInt(file, "VIP");
			FamiliaInfo[idx][fTime] = DOF2_GetInt(file, "Time");

			for(new veh; veh < 5; veh++){

				format(Str, 22, "Vehicle%d", veh);
				FamiliaInfo[idx][fVehicle][veh] = DOF2_GetInt(file, Str);
				format(Str, 22, "VehicleX%d", veh);
				FamiliaInfo[idx][fVehicleX][veh] = DOF2_GetFloat(file, Str);
				format(Str, 22, "VehicleY%d", veh);
				FamiliaInfo[idx][fVehicleY][veh] = DOF2_GetFloat(file, Str);
				format(Str, 22, "VehicleZ%d", veh);
				FamiliaInfo[idx][fVehicleZ][veh] = DOF2_GetFloat(file, Str);
				format(Str, 22, "VehicleA%d", veh);
				FamiliaInfo[idx][fVehicleA][veh] = DOF2_GetFloat(file, Str);
				format(Str, 22, "VehicleColor1%d", veh);
				FamiliaInfo[idx][fVehicleColor1][veh] = DOF2_GetInt(file, Str);
				format(Str, 22, "VehicleColor2%d", veh);
				FamiliaInfo[idx][fVehicleColor2][veh] = DOF2_GetInt(file, Str);
				FamiliaInfo[idx][fVehicleID] = AddStaticVehicleEx(FamiliaInfo[idx][fVehicle][veh], FamiliaInfo[idx][fVehicleX][veh], FamiliaInfo[idx][fVehicleY][veh], FamiliaInfo[idx][fVehicleZ][veh], FamiliaInfo[idx][fVehicleA][veh], FamiliaInfo[idx][fVehicleColor1][veh], FamiliaInfo[idx][fVehicleColor2][veh],-1);

			}

			for(new a; a < MAX_MEMBERS; a++){

                format(Str, 25, "Membro%d", a);
				DOF2_GetStringEx(file, Str, MemberList[idx][a], 25);
			}
	    }
	    idx++;
    }
}

salvarFamilias(){

    new file[78], Str[78];
    for(new f; f != MAX_FAMILIAS; f++){

        format(file, sizeof file, "Familias/Familia%d.ini", f);

        if(DOF2_FileExists(file)){

        	DOF2_SetInt(file, "ID", FamiliaInfo[f][fID]);
			DOF2_SetString(file, "Name", FamiliaInfo[f][fName]);
			DOF2_SetString(file, "Leader", FamiliaInfo[f][fLeader]);
			DOF2_SetString(file, "SubLeader", FamiliaInfo[f][fSubLeader]);
			DOF2_SetFloat(file, "SpawnX", FamiliaInfo[f][fSpawnX]);
			DOF2_SetFloat(file, "SpawnY", FamiliaInfo[f][fSpawnY]);
			DOF2_SetFloat(file, "SpawnZ", FamiliaInfo[f][fSpawnZ]);
			DOF2_SetInt(file, "Int", FamiliaInfo[f][fInt]);
			DOF2_SetInt(file, "World", FamiliaInfo[f][fWorld]);
			DOF2_SetInt(file, "Money", FamiliaInfo[f][fMoney]);
			DOF2_SetInt(file, "VIP", FamiliaInfo[f][fVIP]);
			DOF2_SetInt(file, "Time", FamiliaInfo[f][fTime]);

			for(new veh; veh < 5; veh++){

				format(Str, 22, "Vehicle%d", veh);
				DOF2_SetInt(file, Str, FamiliaInfo[f][fVehicle][veh]);
				format(Str, 22, "VehicleX%d", veh);
				DOF2_SetFloat(file, Str, FamiliaInfo[f][fVehicleX][veh]);
				format(Str, 22, "VehicleY%d", veh);
				DOF2_SetFloat(file, Str, FamiliaInfo[f][fVehicleY][veh]);
				format(Str, 22, "VehicleZ%d", veh);
				DOF2_SetFloat(file, Str, FamiliaInfo[f][fVehicleZ][veh]);
				format(Str, 22, "VehicleA%d", veh);
				DOF2_SetFloat(file, Str, FamiliaInfo[f][fVehicleA][veh]);
				format(Str, 22, "VehicleColor1%d", veh);
				DOF2_SetInt(file, Str, FamiliaInfo[f][fVehicleColor1][veh]);
				format(Str, 22, "VehicleColor2%d", veh);
				DOF2_SetInt(file, Str, FamiliaInfo[f][fVehicleColor2][veh]);
			}

	  		for(new a; a < MAX_MEMBERS; a++){

	            format(Str, 25, "Membro%d", a);
				DOF2_SetString(file, Str, MemberList[f][a]);
			}

	    	DOF2_SaveFile();
     	}
    }
}

salvarFamilia(f){

	new file[78], Str[78];
    format(file, sizeof file, "Familias/Familia%d.ini", f);

   	if(DOF2_FileExists(file)){

		DOF2_SetInt(file, "ID", FamiliaInfo[f][fID]);
		DOF2_SetString(file, "Name", FamiliaInfo[f][fName]);
		DOF2_SetString(file, "Leader", FamiliaInfo[f][fLeader]);
		DOF2_SetString(file, "SubLeader", FamiliaInfo[f][fSubLeader]);
		DOF2_SetFloat(file, "SpawnX", FamiliaInfo[f][fSpawnX]);
		DOF2_SetFloat(file, "SpawnY", FamiliaInfo[f][fSpawnY]);
		DOF2_SetFloat(file, "SpawnZ", FamiliaInfo[f][fSpawnZ]);
		DOF2_SetInt(file, "Int", FamiliaInfo[f][fInt]);
		DOF2_SetInt(file, "World", FamiliaInfo[f][fWorld]);
		DOF2_SetInt(file, "Money", FamiliaInfo[f][fMoney]);
		DOF2_SetInt(file, "VIP", FamiliaInfo[f][fVIP]);
		DOF2_SetInt(file, "Time", FamiliaInfo[f][fTime]);

		for(new veh; veh < 5; veh++){

			format(Str, 22, "Vehicle%d", veh);
			DOF2_SetInt(file, Str, FamiliaInfo[f][fVehicle][veh]);
			format(Str, 22, "VehicleX%d", veh);
			DOF2_SetFloat(file, Str, FamiliaInfo[f][fVehicleX][veh]);
			format(Str, 22, "VehicleY%d", veh);
			DOF2_SetFloat(file, Str, FamiliaInfo[f][fVehicleY][veh]);
			format(Str, 22, "VehicleZ%d", veh);
			DOF2_SetFloat(file, Str, FamiliaInfo[f][fVehicleZ][veh]);
			format(Str, 22, "VehicleA%d", veh);
			DOF2_SetFloat(file, Str, FamiliaInfo[f][fVehicleA][veh]);
			format(Str, 22, "VehicleColor1%d", veh);
			DOF2_SetInt(file, Str, FamiliaInfo[f][fVehicleColor1][veh]);
			format(Str, 22, "VehicleColor2%d", veh);
			DOF2_SetInt(file, Str, FamiliaInfo[f][fVehicleColor2][veh]);
  		}

		for(new a; a < MAX_MEMBERS; a++){

	 	    format(Str, 25, "Membro%d", a);
		 	DOF2_SetString(file, Str, MemberList[f][a]);
		}
		DOF2_SaveFile();
 	}
}

createFamilia(playerid, familianame[], familialeader[]){

	new
		file[78],
		Str[78],
		f = 1
	;
    while(f < MAX_FAMILIAS){

        format(file, sizeof file, "Familias/Familia%d.ini", f);
        if(!DOF2_FileExists(file)){

			DOF2_CreateFile(file);

			DOF2_SetInt(file, "ID", f);
			DOF2_SetString(file, "Name", familianame);
			DOF2_SetString(file, "Leader", familialeader);
			DOF2_SetString(file, "SubLeader", "Ninguém");
			DOF2_SetFloat(file, "SpawnX", 0);
			DOF2_SetFloat(file, "SpawnY", 0);
			DOF2_SetFloat(file, "SpawnZ", 0);
			DOF2_SetInt(file, "Int", 0);
			DOF2_SetInt(file, "World", 0);
			DOF2_SetInt(file, "Money", 0);
			DOF2_SetInt(file, "Time", gettime() + (1 * 2592000));
			DOF2_SetInt(file, "VIP", 0);

			for(new veh; veh < 5; veh++){

				format(Str, 22, "Vehicle%d", veh);
				DOF2_SetInt(file, Str, 0);
				format(Str, 22, "VehicleX%d", veh);
				DOF2_SetFloat(file, Str, 0);
				format(Str, 22, "VehicleY%d", veh);
				DOF2_SetFloat(file, Str, 0);
				format(Str, 22, "VehicleZ%d", veh);
				DOF2_SetFloat(file, Str, 0);
				format(Str, 22, "VehicleA%d", veh);
				DOF2_SetFloat(file, Str, 0);
				format(Str, 22, "VehicleColor1%d", veh);
				DOF2_SetInt(file, Str, 0);
				format(Str, 22, "VehicleColor2%d", veh);
				DOF2_SetInt(file, Str, 0);
			}

			for(new a; a < MAX_MEMBERS; a++){

                format(Str, 25, "Membro%d", a);
				DOF2_SetString(file, Str, "Ninguém");
			}


		    PlayerInfo[playerid][pFamiliaID] = f;
		    PlayerInfo[playerid][pFamiliaLeader] = f;

		    DOF2_SaveFile();

		    format(Str, sizeof Str, "[FAMÍLIA]: {FFFFFF}%s {2641FE}criou a família {FFFFFF}%s.", PlayerName(playerid), familianame);
			SendClientMessageToAll(COLOR_DBLUE, Str);
		    carregarFamilias();
		    return 1;
		}
  		f++;
	}
	return 1;
}

BPF::InviteFamilia(invited[], familiaid)
{
	new gArchive[64], iString[64];
	format(gArchive, 64, "Familias/Familia%d.ini", familiaid);
	for(new i; i < MAX_MEMBERS; ++i)
	{
		if(strcmp(MemberList[familiaid][i], "Ninguém", true) == 0)
		{
			format(MemberList[familiaid][i], 25, invited);
			printf("DEBUG: %s", MemberList[familiaid][i]);
			format(iString, 64, "Member%d", i);
			DOF2_SetString(gArchive, iString, invited);
			DOF2_SaveFile();
			break;
		}
	}
	return 1;
}

BPF::ClearMember(expulsed[], familiaid)
{
	new gArchive[64], iString[64];
	format(gArchive, 64, "Familias/Familia%d.ini", familiaid);
	for(new i; i < MAX_MEMBERS; ++i)
	{
	    if(strcmp(expulsed, MemberList[familiaid][i], true) == 0)
	    {
			strmid(MemberList[familiaid][i], "Ninguém", 0, strlen("Ninguém"), 156);
			format(iString, 64, "Member%d", i);
			DOF2_SetString(gArchive, iString, "Ninguém");
			DOF2_SaveFile();
		}
	}
	return 1;
}

stock ShowInfoFamilia(playerid, familiaid){

    new fString[128], text[58];
	MEGAString[0] = EOS;

	format(fString, 128, "	         {1E90FF}Familia: {FFFFFF}%s\n\n", FamiliaInfo[familiaid][fName]);
	strcat(MEGAString, fString);
	format(fString, 128, "{1E90FF}Líder da família: {FFFFFF}%s %s\n", FamiliaInfo[familiaid][fLeader], IsPlayerOnline(FamiliaInfo[familiaid][fLeader]) ? ("{33AA33}[Online]") : ("{B4B5B7}[Offline]"));
    strcat(MEGAString, fString);
    format(fString, 128, "{1E90FF}Sub-Líder da família: {FFFFFF}%s %s\n\n", FamiliaInfo[familiaid][fSubLeader], IsPlayerOnline(FamiliaInfo[familiaid][fSubLeader]) ? ("{33AA33}[Online]") : ("{B4B5B7}[Offline]"));
    strcat(MEGAString, fString);
    format(fString, 128, "{1E90FF}Spawn da família: {FFFFFF}%f, %f, %f\n", FamiliaInfo[familiaid][fSpawnX], FamiliaInfo[familiaid][fSpawnY], FamiliaInfo[familiaid][fSpawnZ]);
    strcat(MEGAString, fString);

    if(FamiliaInfo[familiaid][fTime] == 259200)
		text = "{FC0015}VENCIDO";
	else
	    format(text, 58, timec(FamiliaInfo[familiaid][fTime]));

    format(fString, 128, "{1E90FF}Vencimento: {FFFFFF}%s\n", text);
    strcat(MEGAString, fString);
    format(fString, 128, "{1E90FF}Interior: {FFFFFF}%d\n", FamiliaInfo[familiaid][fInt]);
    strcat(MEGAString, fString);
    format(fString, 128, "{1E90FF}World: {FFFFFF}%d\n", FamiliaInfo[familiaid][fWorld]);
    strcat(MEGAString, fString);
    format(fString, 128, "{1E90FF}Dinheiro: {FFFFFF}%s\n", ConvertMoney(FamiliaInfo[familiaid][fMoney]));
    strcat(MEGAString, fString);
    format(fString, 128, "{1E90FF}VIP: {FFFFFF}%s\n\n", FamiliaInfo[familiaid][fVIP] ? ("SIM") : ("NÃO"));
    strcat(MEGAString, fString);
    strcat(MEGAString, "{B4B5B7}Carros da família:\n");
    for(new i; i < 5; i++){

		if(FamiliaInfo[familiaid][fVehicle][i] == 0)
		    text = "Nenhum";
		else
			format(text, 25, veehName[GetVehicleModel(FamiliaInfo[familiaid][fVehicle][i])-400]);

		format(fString, 128, "{1E90FF}Veiculo%d: {FFFFFF}%s\n", i+1, text);
		strcat(MEGAString, fString);
	}
    strcat(MEGAString, "\n{B4B5B7}Membros da família:\n");
    for(new i; i < MAX_MEMBERS; i++){

        format(fString, 128, "%s	{1E90FF}Vaga %d: {FFFFFF}%s\n", IsPlayerOnline(FamiliaInfo[familiaid][fSubLeader]) ? ("{33AA33}[Online]") : ("{B4B5B7}[Offline]"), i+1, MemberList[familiaid][i]);
    	strcat(MEGAString, fString);
    }
    ShowPlayerDialog(playerid, 2409+1, DIALOG_STYLE_MSGBOX, "Informações da família", MEGAString, "Localizar HQ", "Voltar");
}

stock CountFamilias()
{
	new count = 0, file[78];
	for(new f; f != MAX_FAMILIAS; f++){
		format(file, sizeof file, "Familias/Familia%d.ini", f);
	    if(DOF2_FileExists(file)){
	        count++;
	    }
	}
	return count;
}
stock CarregarInventario(playerid){

    format(Erquivo, sizeof Erquivo, "Inventario/%s.ini", pNamo[playerid]);

    if(DOF2_FileExists(Erquivo)){

        new str[22];
        for(new i = 0; i != 75; ++i){

         format(str, sizeof str, "Slot%d", i);
         InventarioInfo[playerid][i][iSlot] = DOF2_GetInt(Erquivo, str);
         format(str, sizeof str, "Unidades%d", i);
         InventarioInfo[playerid][i][iUnidades] = DOF2_GetInt(Erquivo, str);
        }
    }
    return 1;
}

carregarAnuncios(){

    new str[22];
    if(!DOF2_FileExists("Anuncios.cfg")){

		DOF2_CreateFile("Anuncios.cfg");
		for(new i = 1; i < MAX_ANUNCIOS; ++i){

		    format(str, sizeof str, "Anuncio%d", i);
		    DOF2_SetInt("Anuncios.cfg", str, 0);
		    format(str, sizeof str, "Preco%d", i);
		    DOF2_SetInt("Anuncios.cfg", str, 0);
		    format(str, sizeof str, "Nome%d", i);
		    DOF2_SetString("Anuncios.cfg", str, "Ninguém");
		}
		DOF2_SaveFile();
    }

    for(new i = 1; i < MAX_ANUNCIOS; ++i){

        format(str, sizeof str, "Anuncio%d", i);
        AnuncioInfo[i][AnuncioCash] = DOF2_GetInt("Anuncios.cfg", str);
        format(str, sizeof str, "Preco%d", i);
        AnuncioInfo[i][PrecoCash] = DOF2_GetInt("Anuncios.cfg", str);
        format(str, sizeof str, "Nome%d", i);
        format(AnuncioInfo[i][NomeCash], 24, DOF2_GetString("Anuncios.cfg", str));
    }
    return 1;
}

atualizarAnuncios(){

	new str[22];
    for(new i = 1; i < MAX_ANUNCIOS; ++i){

        format(str, sizeof str, "Anuncio%d", i);
        AnuncioInfo[i][AnuncioCash] = DOF2_GetInt("Anuncios.cfg", str);
        format(str, sizeof str, "Preco%d", i);
        AnuncioInfo[i][PrecoCash] = DOF2_GetInt("Anuncios.cfg", str);
        format(str, sizeof str, "Nome%d", i);
        format(AnuncioInfo[i][NomeCash], 24, DOF2_GetString("Anuncios.cfg", str));
    }
    return 1;
}
stock SalvarInventario(playerid){

    format(Erquivo, sizeof Erquivo, "Inventario/%s.ini", pNamo[playerid]);

	new str[22];
	for(new i = 0; i != 75; i++){

	    format(str, sizeof str, "Slot%d", i);
		DOF2_SetInt(Erquivo, str, InventarioInfo[playerid][i][iSlot]);
		format(str, sizeof str, "Unidades%d",i);
		DOF2_SetInt(Erquivo, str, InventarioInfo[playerid][i][iUnidades]);
    }
    DOF2_SaveFile();
    return 1;
}

stock AbrirInventario(playerid){

    for(new i = 0; i != 7; i++){

	    PlayerTextDrawShow(playerid, invText[playerid][i]);
 	}
	if(!IsPlayerInAnyVehicle(playerid)){

		ApplyAnimation(playerid, "BOMBER", "BOM_Plant_Loop", 4.1, 1, 0, 0, 0, 0, 1);
		SetPlayerAttachedObject(playerid, 9, 19559, 5, 0.073999, 0.111999, 0.091000, -152.600006, -2.80008, 121.500045, 1, 1, 1);
 	}
 	SelectTextDraw(playerid, 0x00FFFFFF);

	new str[256];

	format(str,300,"Pagina_%d-5",PaginaInventario[playerid]);
	PlayerTextDrawSetString(playerid,invText[playerid][4],str);

	new itens;
	for(new i = 0; i < 75; i++){

		if(InventarioInfo[playerid][i][iSlot] != 19382) itens++;
		format(str, sizeof str, "Inventario_de:_~b~~h~%s_~w~Itens:_~b~~h~%d/75", pNamo[playerid], itens);
 		PlayerTextDrawSetString(playerid, invText[playerid][5], str);
	}
	InventarioAberto[playerid] = 1;

	if(PaginaInventario[playerid] == 1){

		for(new i=0; i < 15; i++){

			if(InventarioInfo[playerid][i][iUnidades] > 0){

                format(str, sizeof str, "%s ~b~~h~%d", NomeItemInventario(InventarioInfo[playerid][i][iSlot]), InventarioInfo[playerid][i][iUnidades]);
				PlayerTextDrawSetString(playerid, invName[playerid][i], str);
				PlayerTextDrawShow(playerid, invName[playerid][i]);
			}
			PlayerTextDrawSetPreviewModel(playerid, invPreview[playerid][i], InventarioInfo[playerid][i][iSlot]);
			PlayerTextDrawShow(playerid, invPreview[playerid][i]);

        	if(InventarioInfo[playerid][i][iSlot] == 19382){

				PlayerTextDrawSetPreviewModel(playerid, invPreview[playerid][i], 18631);
				PlayerTextDrawShow(playerid, invPreview[playerid][i]);
			}
		}
	}

	if(PaginaInventario[playerid] == 2){

    	for(new i = 15; i < 30; i++){

            if(InventarioInfo[playerid][i][iUnidades] > 0){

                format(str, sizeof str, "%s ~b~~h~%d", NomeItemInventario(InventarioInfo[playerid][i][iSlot]), InventarioInfo[playerid][i][iUnidades]);
				PlayerTextDrawSetString(playerid, invName[playerid][i], str);
				PlayerTextDrawShow(playerid, invName[playerid][i]);
			}
			PlayerTextDrawSetPreviewModel(playerid, invPreview[playerid][i], InventarioInfo[playerid][i][iSlot]);
			PlayerTextDrawShow(playerid, invPreview[playerid][i]);

        	if(InventarioInfo[playerid][i][iSlot] == 19382){

				PlayerTextDrawSetPreviewModel(playerid, invPreview[playerid][i], 18631);
				PlayerTextDrawShow(playerid, invPreview[playerid][i]);
			}
		}
	}

	if(PaginaInventario[playerid] == 3){

	    for(new i=30; i != 45; i++){

            if(InventarioInfo[playerid][i][iUnidades] > 0){

                format(str, sizeof str, "%s ~b~~h~%d", NomeItemInventario(InventarioInfo[playerid][i][iSlot]), InventarioInfo[playerid][i][iUnidades]);
				PlayerTextDrawSetString(playerid, invName[playerid][i], str);
				PlayerTextDrawShow(playerid, invName[playerid][i]);
			}
			PlayerTextDrawSetPreviewModel(playerid, invPreview[playerid][i], InventarioInfo[playerid][i][iSlot]);
			PlayerTextDrawShow(playerid, invPreview[playerid][i]);

       		if(InventarioInfo[playerid][i][iSlot] == 19382){

				PlayerTextDrawSetPreviewModel(playerid, invPreview[playerid][i], 18631);
				PlayerTextDrawShow(playerid, invPreview[playerid][i]);
			}
		}
	}

	if(PaginaInventario[playerid] == 4){

	    for(new i=45; i != 60; i++){

	    if(InventarioInfo[playerid][i][iUnidades] > 0){

                format(str, sizeof str, "%s ~b~~h~%d", NomeItemInventario(InventarioInfo[playerid][i][iSlot]), InventarioInfo[playerid][i][iUnidades]);
				PlayerTextDrawSetString(playerid, invName[playerid][i], str);
				PlayerTextDrawShow(playerid, invName[playerid][i]);
			}
			PlayerTextDrawSetPreviewModel(playerid, invPreview[playerid][i], InventarioInfo[playerid][i][iSlot]);
			PlayerTextDrawShow(playerid, invPreview[playerid][i]);

        	if(InventarioInfo[playerid][i][iSlot] == 19382){

				PlayerTextDrawSetPreviewModel(playerid, invPreview[playerid][i], 18631);
				PlayerTextDrawShow(playerid, invPreview[playerid][i]);
			}
		}
	}
    if(PaginaInventario[playerid] == 5){

	    for(new i=60; i != 75; i++){
	        if(InventarioInfo[playerid][i][iUnidades] > 0){

                format(str, sizeof str, "%s ~b~~h~%d", NomeItemInventario(InventarioInfo[playerid][i][iSlot]), InventarioInfo[playerid][i][iUnidades]);
				PlayerTextDrawSetString(playerid, invName[playerid][i], str);
				PlayerTextDrawShow(playerid, invName[playerid][i]);
			}
			PlayerTextDrawSetPreviewModel(playerid, invPreview[playerid][i], InventarioInfo[playerid][i][iSlot]);
			PlayerTextDrawShow(playerid, invPreview[playerid][i]);

        	if(InventarioInfo[playerid][i][iSlot] == 19382){

				PlayerTextDrawSetPreviewModel(playerid, invPreview[playerid][i], 18631);
				PlayerTextDrawShow(playerid, invPreview[playerid][i]);
			}
		}
	}
	return 1;
}

stock FecharInventario(playerid){

	if(!IsPlayerInAnyVehicle(playerid)) ClearAnimations(playerid);
 	if(!IsPlayerInAnyVehicle(playerid)) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
    RemovePlayerAttachedObject(playerid, 9);
    InventarioAberto[playerid] = 0;

 for(new i = 0; i != 7; i++){

	    PlayerTextDrawHide(playerid, invText[playerid][i]);
 	}
    for(new i = 0; i != 75; i++){

	    PlayerTextDrawHide(playerid, invPreview[playerid][i]);
	    PlayerTextDrawHide(playerid, invName[playerid][i]);
 	}
	return 1;
}
//======================= Sistema de Caixa de itens ==================
stock CarregarCaixas()
{
	new Filea[40];
	new str[30];

	for(new i; i<1000; i++)
	{
		format(Filea,40,"Caixas/Caixa_%d.ini",i);
	    if(DOF2_FileExists(Filea))
	    {

	        for(new o; o<50; o++)
			{
			format(str,30,"CaixaItem%d",o);
            SistemaCaixa[i][CaixaItem][o] = DOF2_GetInt(Filea,str);
           	format(str,30,"CaixaUnidades%d",o);
            SistemaCaixa[i][CaixaUnidades][o] = DOF2_GetInt(Filea,str);
            }

			format(SistemaCaixa[i][CaixaDono],40,DOF2_GetString(Filea,"CaixaDono"));
			//format(SistemaCaixa[i][CaixaText],300,"{CD853F}• {ffffff}Caixa de Itens{CD853F} •\n{CD853F}Dono: {ffffff}%s\n{CD853F}Itens: {ffffff}%d/50\nAperte ' {CD853F}F{ffffff} ' para usar.",SistemaCaixa[i][CaixaDono],ItemsCaixa(i));
            format(SistemaCaixa[i][CaixaText],300,"Caixa de Itens\n\n\
			Proprietário: {00FFFF}%s\n\
			{FFFFFF}Itens: {00FFFF}%d/50\n\n\
			{FFFFFF}Aperte a letra {00aaff}ENTER{FFFFFF} para usar",SistemaCaixa[i][CaixaDono],ItemsCaixa(i));

			//format(SistemaCaixa[i][CaixaText],300,DOF2_GetString(Filea,"CaixaText"));

	        SistemaCaixa[i][CaixaInterior] = DOF2_GetInt(Filea,"CaixaInterior");
	        SistemaCaixa[i][CaixaMundo] = DOF2_GetInt(Filea,"CaixaMundo");

	        SistemaCaixa[i][CaixaX] = DOF2_GetFloat(Filea,"CaixaX");
	        SistemaCaixa[i][CaixaY] = DOF2_GetFloat(Filea,"CaixaY");
	        SistemaCaixa[i][CaixaZ] = DOF2_GetFloat(Filea,"CaixaZ");
	        SistemaCaixa[i][CaixaRX] = DOF2_GetFloat(Filea,"CaixaRX");
	        SistemaCaixa[i][CaixaRY] = DOF2_GetFloat(Filea,"CaixaRY");
	        SistemaCaixa[i][CaixaRZ] = DOF2_GetFloat(Filea,"CaixaRZ");

	        SistemaCaixa[i][CaixaObj] = CreateDynamicObject(1271, SistemaCaixa[i][CaixaX],SistemaCaixa[i][CaixaY], SistemaCaixa[i][CaixaZ], SistemaCaixa[i][CaixaRX], SistemaCaixa[i][CaixaRY], SistemaCaixa[i][CaixaRZ], SistemaCaixa[i][CaixaMundo], SistemaCaixa[i][CaixaInterior], -1, 800.0);
            SistemaCaixa[i][Caixa3d] = CreateDynamic3DTextLabel(SistemaCaixa[i][CaixaText], -1, SistemaCaixa[i][CaixaX],SistemaCaixa[i][CaixaY], SistemaCaixa[i][CaixaZ], 30, INVALID_PLAYER_ID, INVALID_VEHICLE_ID,  0, SistemaCaixa[i][CaixaMundo], SistemaCaixa[i][CaixaInterior], -1, 100.0);

	    }
	}

	return 1;
}

stock SalvarCaixas()
{
    new Filea[40];
	new str[30];

	for(new i; i<1000; i++)
	{
	    format(Filea,40,"Caixas/Caixa_%d.ini",i);

	    if(IsValidDynamicObject( SistemaCaixa[i][CaixaObj] ))
	    {
		    for(new o; o<50; o++)
			{
			format(str,30,"CaixaItem%d",o);
			DOF2_SetInt(Filea,str,SistemaCaixa[i][CaixaItem][o]);
			format(str,30,"CaixaUnidades%d",o);
			DOF2_SetInt(Filea,str,SistemaCaixa[i][CaixaUnidades][o]);
	 		}


		 	DOF2_SetString(Filea,"CaixaDono",SistemaCaixa[i][CaixaDono]);
		 	//DOF2_SetString(Filea,"CaixaText",SistemaCaixa[i][CaixaText]);
			DOF2_SetInt(Filea,"CaixaInterior",SistemaCaixa[i][CaixaInterior]);
			DOF2_SetInt(Filea,"CaixaMundo",SistemaCaixa[i][CaixaMundo]);
            DOF2_SetFloat(Filea,"CaixaX", SistemaCaixa[i][CaixaX]);
            DOF2_SetFloat(Filea,"CaixaY", SistemaCaixa[i][CaixaY]);
            DOF2_SetFloat(Filea,"CaixaZ", SistemaCaixa[i][CaixaZ]);
            DOF2_SetFloat(Filea,"CaixaRX", SistemaCaixa[i][CaixaRX]);
            DOF2_SetFloat(Filea,"CaixaRY", SistemaCaixa[i][CaixaRY]);
            DOF2_SetFloat(Filea,"CaixaRZ", SistemaCaixa[i][CaixaRZ]);

	    }



	}

	return 1;
}
stock ItemsCaixa(caix)
{
	new aaa;
	for(new i; i<50; i++)
	{
	    if(SistemaCaixa[caix][CaixaItem][i] !=  19382)
	    {
	    	aaa ++;
	    }
	}
	return aaa;
}

stock salvarcaixa(i)
{
		new Filea[40];
		new str[30];


	    format(Filea,40,"Caixas/Caixa_%d.ini",i);

	    if(IsValidDynamicObject( SistemaCaixa[i][CaixaObj] ))
	    {
		    for(new o; o<50; o++)
			{
			format(str,30,"CaixaItem%d",o);
			DOF2_SetInt(Filea,str,SistemaCaixa[i][CaixaItem][o]);
			format(str,30,"CaixaUnidades%d",o);
			DOF2_SetInt(Filea,str,SistemaCaixa[i][CaixaUnidades][o]);
	 		}


		 	DOF2_SetString(Filea,"CaixaDono",SistemaCaixa[i][CaixaDono]);
		 	//DOF2_SetString(Filea,"CaixaText",SistemaCaixa[i][CaixaText]);
			DOF2_SetInt(Filea,"CaixaInterior",SistemaCaixa[i][CaixaInterior]);
			DOF2_SetInt(Filea,"CaixaMundo",SistemaCaixa[i][CaixaMundo]);
            DOF2_SetFloat(Filea,"CaixaX", SistemaCaixa[i][CaixaX]);
            DOF2_SetFloat(Filea,"CaixaY", SistemaCaixa[i][CaixaY]);
            DOF2_SetFloat(Filea,"CaixaZ", SistemaCaixa[i][CaixaZ]);
            DOF2_SetFloat(Filea,"CaixaRX", SistemaCaixa[i][CaixaRX]);
            DOF2_SetFloat(Filea,"CaixaRY", SistemaCaixa[i][CaixaRY]);
            DOF2_SetFloat(Filea,"CaixaRZ", SistemaCaixa[i][CaixaRZ]);

	    }
		return  1;
}
stock NomeItemInventario(idx)
{
	new nomedoitem[100];
	format( nomedoitem, 100, "Desconhecido");


    if(idx == 0) format( nomedoitem, 50, "Desconhecido");
	if(idx == 19941) format( nomedoitem, 50, "Respeito");
	if(idx == 1212) format( nomedoitem, 50, "Dinheiro");
	if(idx == 1650) format( nomedoitem, 50, "Gasolina");
	if(idx == 2226) format( nomedoitem, 50, "Radio Portatil");
	if(idx == 18976) format( nomedoitem, 50, "Capacete");
	if(idx == 980) format( nomedoitem, 50, "Portao");
	if(idx == 11738) format( nomedoitem, 50, "Remedio pequeno");
	if(idx == 11739) format( nomedoitem, 50, "Remedio Normal");
	if(idx == 11736) format( nomedoitem, 50, "MedKit");
	if(idx == 1271) format( nomedoitem, 50, "Caixa de Itens");
	if(idx == 19570) format( nomedoitem, 50, "Garrafa d'Agua");
	if(idx == 1581) format( nomedoitem, 50, "Titulo Personalizado");

	if(idx == 2881) format( nomedoitem, 50, "Pizza");
 	if(idx == 2768) format( nomedoitem, 50, "Hamburguer");
 	if(idx == 19562) format( nomedoitem, 50, "Cereal");
 	if(idx == 1654) format( nomedoitem, 50, "Explosivo");

    if(idx == 2919) format( nomedoitem, 50, "Bolsa Tunning");

	if(idx == 19054) format( nomedoitem, 50, "Caixa Surpresa Pequena");
	if(idx == 19058) format( nomedoitem, 50, "Caixa Surpresa Gigante");
	if(idx == 19055) format( nomedoitem, 50, "Caixa Surpresa Media");
	if(idx == 19057) format( nomedoitem, 50, "Caixa Surpresa Extreme");
	if(idx == 19056) format( nomedoitem, 50, "Caixa Surpresa Grande");
	if(idx == 19060) format( nomedoitem, 50, "Caixa Surpresa Natal");
	if(idx == 19059) format( nomedoitem, 50, "Caixa Surpresa Reveillon");
	if(idx == 1210) format( nomedoitem, 50, "Maleta");
	
	if(idx == 11733) format( nomedoitem, 50, "Cavalo");
	if(idx == 11735) format( nomedoitem, 50, "Bota");
	
	if(idx == 3016) format( nomedoitem, 50, "Caixa de Equipamentos P");
	if(idx == 3052) format( nomedoitem, 50, "Caixa de Equipamentos M");
	if(idx == 3014) format( nomedoitem, 50, "Caixa de Equipamentos G");

	if(idx == 441) format( nomedoitem, 50, "RC Bandit");
	if(idx == 564) format( nomedoitem, 50, "RC Tiger");
	if(idx == 465) format( nomedoitem, 50, "RC Raider");
	if(idx == 464) format( nomedoitem, 50, "RC Baron");

	if(idx == 370) format( nomedoitem, 50, "JetPack");
	if(idx == 2901) format( nomedoitem, 50, "Semente de Maconha");
	if(idx == 1609) format( nomedoitem, 50, "Tartaruga");

		//itens novos
	if(idx == 18632) format( nomedoitem, 50, "Vara de Pescar");
	if(idx == 18637) format( nomedoitem, 50, "Escudo de Policia");
	if(idx == 18638) format( nomedoitem, 50, "Capacete");
	if(idx == 18639) format( nomedoitem, 50, "Bone Preto");
	if(idx == 18642) format( nomedoitem, 50, "Taser");
	if(idx == 18643) format( nomedoitem, 50, "Laser Vermelho");
	if(idx == 19080) format( nomedoitem, 50, "Laser Azul");
	if(idx == 19081) format( nomedoitem, 50, "Laser Rosa");
	if(idx == 19082) format( nomedoitem, 50, "Laser Laranja");
	if(idx == 19083) format( nomedoitem, 50, "Laser Verde");
	if(idx == 19084) format( nomedoitem, 50, "Laser Amarelo");
	if(idx == 18644) format( nomedoitem, 50, "Chave de Fenda");
	if(idx == 18875) format( nomedoitem, 50, "Pager");
	if(idx == 18890) format( nomedoitem, 50, "Rastelo");
	if(idx == 18921) format( nomedoitem, 50, "Boina Azul");
	if(idx == 18922) format( nomedoitem, 50, "Boina Vermelha");
	if(idx == 18923) format( nomedoitem, 50, "Boina Azul claro");
	if(idx == 18924) format( nomedoitem, 50, "Boina Exercito");
	if(idx == 18925) format( nomedoitem, 50, "Boina Vermelha rara");
	if(idx == 18952) format( nomedoitem, 50, "Capacete Boxe");
	if(idx == 18953) format( nomedoitem, 50, "Gorro");
	if(idx == 18954) format( nomedoitem, 50, "Gorro raro");
	if(idx > 19064 && idx < 19066) format( nomedoitem, 50, "Gorro de Natal");
	if(idx == 19094) format( nomedoitem, 50, "Chapeu Hamburguer");
	if(idx == 19346) format( nomedoitem, 50, "Cachorro Quente");
	if(idx == 19347) format( nomedoitem, 50, "Estrela");
	if(idx == 19515) format( nomedoitem, 50, "Colete Cinza");

	if(idx == 18693) format( nomedoitem, 50, "Efeito Blaster");
	if(idx == 18729) format( nomedoitem, 50, "Efeito super raro");
	if(idx == 18688) format( nomedoitem, 50, "Efeito de Fogo");
	if(idx == 18635) format( nomedoitem, 50, "Martelo raro");
	if(idx == 19631) format( nomedoitem, 50, "Martelo");
	if(idx == 19625) format( nomedoitem, 50, "Cigarro");
	if(idx == 19078) format( nomedoitem, 50, "Arara");
	if(idx == 19086) format( nomedoitem, 50, "Pinto raro");
	if(idx == 2499) format( nomedoitem, 50, "Pipa");
	if(idx == 19528) format( nomedoitem, 50, "Chapeu de Bruxa");
	if(idx == 18641) format( nomedoitem, 50, "Lanterna");
	if(idx == 19137) format( nomedoitem, 50, "Cabeca de Frango");
	if(idx == 1240) format( nomedoitem, 50, "Coracao");
	if(idx == 2469) format( nomedoitem, 50, "Aviaozinho");
	if(idx == 321) format( nomedoitem, 50, "Pinto");
	if(idx == 19317) format( nomedoitem, 50, "Guitarra");
	if(idx == 19319) format( nomedoitem, 50, "Guitarra");
	if(idx == 19094) format( nomedoitem, 50, "Item Raro");
	if(idx == 18974) format( nomedoitem, 50, "Item Raro");
	if(idx == 19142) format( nomedoitem, 50, "Colete");
	if(idx == 19555) format( nomedoitem, 50, "Luva esquerda");
	if(idx == 19556) format( nomedoitem, 50, "Luva direita");
	if(idx == 1736) format( nomedoitem, 50, "Cabeca de touro");
	if(idx == 2052) format( nomedoitem, 50, "CJ Tommy Hat");
	if(idx == 2053) format( nomedoitem, 50, "CJ Jerry Hat");
	if(idx == 2114) format( nomedoitem, 50, "Bola de Basquete");
	if(idx == 6865) format( nomedoitem, 50, "Cabeça de cervo");
	if(idx == 3528) format( nomedoitem, 50, "Cabeca de dragao");
	if(idx == 1262) format( nomedoitem, 50, "Cabeca de semaforo");
	if(idx == 19067) format( nomedoitem, 50, "Bandana gangster");
	if(idx == 19136) format( nomedoitem, 50, "Oculos e cabelo");
	if(idx == 19320) format( nomedoitem, 50, "Cabeca de abobora");
	if(idx == 19348) format( nomedoitem, 50, "Bengala");
	if(idx == 19042) format( nomedoitem, 50, "Relogio de ouro");
	if(idx > 2404 && idx < 2406) format( nomedoitem, 50, "Prancha de Surf");
	if(idx == 1276) format( nomedoitem, 50, "Ursinho");
	if(idx == 18636) format( nomedoitem, 50, "Chapeu de Policia");
	if(idx == 19136) format( nomedoitem, 50, "Mascara");
	if(idx == 19557) format( nomedoitem, 50, "Mascara Stripp");
	if(idx == 11704) format( nomedoitem, 50, "Mascara DEMON");
	if(idx == 954) format( nomedoitem, 50, "Ferradura");
	if(idx == 1247) format( nomedoitem, 50, "Estrela");
	if(idx == 1274) format( nomedoitem, 50, "Sifrao");
	if(idx == 2918) format( nomedoitem, 50, "Bola aquatica");
	if(idx == 19121) format( nomedoitem, 50, "Luz Branca");
	if(idx == 19122) format( nomedoitem, 50, "Luz Azul");
	if(idx == 19123) format( nomedoitem, 50, "Luz Verde");
	if(idx == 19124) format( nomedoitem, 50, "Luz Vermelha");
	if(idx == 19125) format( nomedoitem, 50, "Luz Amarela");
	if(idx == 19126) format( nomedoitem, 50, "Luz Azul Bebe");
	if(idx == 19127) format( nomedoitem, 50, "Luz Roxa");
	//Comidas
	if(idx == 19094) format( nomedoitem, 50, "Hamburguer");
	if(idx == 19570) format( nomedoitem, 50, "Leite");
	if(idx == 19576) format( nomedoitem, 50, "Maca");
	if(idx == 19578) format( nomedoitem, 50, "Banana");
	if(idx == 19630) format( nomedoitem, 50, "Peixe");
	if(idx == 19835) format( nomedoitem, 50, "Coca Cola");
	if(idx == 19811) format( nomedoitem, 50, "Lanche");
	if(idx == 19580) format( nomedoitem, 50, "Pizza");
	if(idx == 19574) format( nomedoitem, 50, "Laranja");
	if(idx == 2647) format( nomedoitem, 50, "Refrigerante");

	if(idx == 19382) format( nomedoitem, 50, "Nenhum Item");
	if(idx > 0 && idx < 312 ) format( nomedoitem, 50, "Skin %d",idx); // se for skin
	if(idx > 399 && idx < 612 ) format( nomedoitem, 50, "%s",VehicleNames[idx - 400]); //  se for veiculo
	if(idx >= 331 && idx < 372) format( nomedoitem, 50, NomeArmaInventario(idx)); // se for arma

	return nomedoitem;
}
stock NomeItemInventarioInventario(id,playerid){

	new str[100];
	new idx = InventarioInfo[playerid][id][iSlot];
    format(str,100,NomeItemInventario(idx));
	return str;
}
stock NomeArmaInventario(weaponid)
{
	new str[30];
	if(weaponid == 0) str = "Soco";
	if(weaponid == 1 || weaponid == 331) str = "Soqueira";
	if(weaponid == 2 || weaponid == 333) str = "Taco de Golf";
	if(weaponid == 3 || weaponid == 334) str = "Cacetete";
	if(weaponid == 4 || weaponid == 335) str = "Knife";
	if(weaponid == 5 || weaponid == 336) str = "Taco de Baseball";
	if(weaponid == 6 || weaponid == 337) str = "Pá";
	if(weaponid == 7 || weaponid == 338) str = "Taco de Sinuca";
	if(weaponid == 8 || weaponid == 339) str = "Katana";
	if(weaponid == 9 || weaponid == 341) str = "Motocerra";
	if(weaponid == 10 || weaponid == 321) str = "Dildo Roxo";
	if(weaponid == 11 || weaponid == 322) str = "Dildo Vibrador";
	if(weaponid == 12 || weaponid == 323) str = "Dildo Branco";
	if(weaponid == 13 || weaponid == 324) str = "Dildo Elétrico";
	if(weaponid == 14 || weaponid == 325) str = "Buque de Flores";
	if(weaponid == 15 || weaponid == 326) str = "Bengala";
	if(weaponid == 16 || weaponid == 342) str = "Granada Expansiva";
	if(weaponid == 17 || weaponid == 343) str = "Granada de Gás";
	if(weaponid == 18 || weaponid == 344) str = "Coquetel Molotov";
	if(weaponid == 22 || weaponid == 346) str = "Pistola 9mm";
	if(weaponid == 23 || weaponid == 347) str = "9mm Silencioso";
	if(weaponid == 24 || weaponid == 348) str = "Desert Eagle";
	if(weaponid == 25 || weaponid == 349) str = "Shotgun";
	if(weaponid == 26 || weaponid == 350) str = "Sawn-Off 12";
	if(weaponid == 27 || weaponid == 351) str = "12 Automatica";
	if(weaponid == 28 || weaponid == 352) str = "Micro-SMG";
	if(weaponid == 29 || weaponid == 353) str = "MP5";
	if(weaponid == 30 || weaponid == 355) str = "AK-47";
	if(weaponid == 31 || weaponid == 356) str = "M4";
	if(weaponid == 32 || weaponid == 372) str = "Tec-9";
	if(weaponid == 33 || weaponid == 357) str = "Rifle";
	if(weaponid == 34 || weaponid == 358) str = "Sniper";
	if(weaponid == 35 || weaponid == 359) str = "Bazooka";
	if(weaponid == 36 || weaponid == 360) str = "Bazooka HS";
	if(weaponid == 37 || weaponid == 361) str = "Lança-Chamas";
	if(weaponid == 38 || weaponid == 362) str = "Minigun";
	if(weaponid == 39 || weaponid == 363) str = "Explosivo Remoto";
	if(weaponid == 40 || weaponid == 364) str = "controle Remoto";
	if(weaponid == 41 || weaponid == 365) str = "Lata de Spray";
	if(weaponid == 42 || weaponid == 366) str = "Fire Extinguisher";
	if(weaponid == 43 || weaponid == 367) str = "Camera";
	if(weaponid == 44 || weaponid == 368) str = "Oculos Noturno";
	if(weaponid == 45 || weaponid == 369) str = "Oculos Termico";
	if(weaponid == 46 || weaponid == 371) str = "Paraquedas";
	return str;
}
stock MudarIdArma(weaponid)
{
	new var;

	if(weaponid == 1)  var = 331 ;
	if(weaponid == 2)  var = 333 ;
	if(weaponid == 3)  var = 334 ;
	if(weaponid == 4)  var = 335 ;
	if(weaponid == 5)  var = 336 ;
	if(weaponid == 6)  var = 337 ;
	if(weaponid == 7)  var = 338;
	if(weaponid == 8)  var = 339 ;
	if(weaponid == 9)  var = 341 ;
	if(weaponid == 10)  var = 321 ;
	if(weaponid == 11)  var = 322 ;
	if(weaponid == 12 ) var = 323 ;
	if(weaponid == 13)  var = 324 ;
	if(weaponid == 14 ) var = 325 ;
	if(weaponid == 15)  var = 326 ;
	if(weaponid == 16)  var = 342 ;
	if(weaponid == 17)  var = 343 ;
	if(weaponid == 18)  var = 344 ;
	if(weaponid == 22)  var = 346 ;
	if(weaponid == 23)  var = 347 ;
	if(weaponid == 24 ) var = 348 ;
	if(weaponid == 25)  var = 349 ;
	if(weaponid == 26)  var = 350 ;
	if(weaponid == 27)  var = 351 ;
	if(weaponid == 28)  var = 352 ;
	if(weaponid == 29)  var = 353 ;
	if(weaponid == 30 ) var = 355 ;
	if(weaponid == 31)  var = 356 ;
	if(weaponid == 32)  var = 372 ;
	if(weaponid == 33)  var = 357 ;
	if(weaponid == 34)  var = 358 ;
	if(weaponid == 35)  var = 359 ;
	if(weaponid == 36)  var = 360 ;
	if(weaponid == 37)  var = 361 ;
	if(weaponid == 38)  var = 362 ;
	if(weaponid == 39)  var = 363 ;
	if(weaponid == 40) var = 364 ;
	if(weaponid == 41)  var = 365 ;
	if(weaponid == 42)  var = 366 ;
	if(weaponid == 43)  var = 367 ;
	if(weaponid == 44)  var = 368 ;
	if(weaponid == 45)  var = 369 ;
	if(weaponid == 46)  var = 371 ;
	if(weaponid == 331)  var = 1 ;
	if(weaponid == 333)  var = 2 ;
	if(weaponid == 334)  var = 3 ;
	if(weaponid == 335)  var = 4 ;
	if(weaponid == 336)  var = 5 ;
	if(weaponid == 337)  var = 6 ;
	if(weaponid == 338)  var = 7;
	if(weaponid == 339)  var = 8 ;
	if(weaponid == 341)  var = 9 ;
	if(weaponid == 321)  var = 10 ;
	if(weaponid == 322)  var = 11 ;
	if(weaponid == 323 ) var = 12 ;
	if(weaponid == 324)  var = 13 ;
	if(weaponid == 325 ) var = 14 ;
	if(weaponid == 326)  var = 15 ;
	if(weaponid == 342)  var = 16 ;
	if(weaponid == 343)  var = 17 ;
	if(weaponid == 344)  var = 18 ;
	if(weaponid == 346)  var = 22 ;
	if(weaponid == 347)  var = 23 ;
	if(weaponid == 348 ) var = 24 ;
	if(weaponid == 349)  var = 25 ;
	if(weaponid == 350)  var = 26 ;
	if(weaponid == 351)  var = 27 ;
	if(weaponid == 352)  var = 28 ;
	if(weaponid == 353)  var = 29 ;
	if(weaponid == 355 ) var = 30 ;
	if(weaponid == 356)  var = 31 ;
	if(weaponid == 372)  var = 32 ;
	if(weaponid == 357)  var = 33 ;
	if(weaponid == 358)  var = 34 ;
	if(weaponid == 359)  var = 35 ;
	if(weaponid == 360)  var = 36 ;
	if(weaponid == 361)  var = 37 ;
	if(weaponid == 362)  var = 38 ;
	if(weaponid == 363)  var = 39 ;
	if(weaponid == 364) var = 40;
	if(weaponid == 365)  var = 41 ;
	if(weaponid == 366)  var = 42 ;
	if(weaponid == 367)  var = 43 ;
	if(weaponid == 368)  var = 44 ;
	if(weaponid == 369)  var = 45 ;
	if(weaponid == 371)  var = 46 ;
	return var;
}
stock DiminuirInventario(slot, playerid)
{
	if(InventarioInfo[playerid][slot][iUnidades] > 1) return InventarioInfo[playerid][slot][iUnidades] --;

	if(InventarioInfo[playerid][slot][iUnidades] == 1){

	    InventarioInfo[playerid][slot][iUnidades] = 0;
	    InventarioInfo[playerid][slot][iSlot] = 19382;
	}
	return 1;
}
CMD:farejar(playerid)
{
	if(IsACop(playerid))
	{
	    new string[150];
	    switch(random(6))
	    {
	        case 1, 2, 3:
			    if(PertoMaconha(playerid))
			    {
			        format(string, sizeof string, "Cão Farejador: Seu cão farejou possíveis %d plantações de maconha, num raio de 200 metros!", PertoMaconha(playerid));
					SendClientMessage(playerid, COLOR_YELLOW, string);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Cão farejador: Seu cão não farejou nenhuma plantação em um raio de 200 metros!");
				}
			default:
		    	SendClientMessage(playerid, COLOR_YELLOW, "Seu cão não conseguiu farejar uma plantação de maconha, tente novamente!");
		}
	}
	return 1;
}
CMD:queimarmaconha(playerid)
{
	if(IsACop(playerid))
	{
		new perto = 0;

		for(new mac = 0; mac < MAX_MACONHA; mac++)
	    {
	        if(MaconhaInfo[mac][PodeUsar] == false && IsPlayerInRangeOfPoint(playerid, 2, MaconhaInfo[mac][mX],MaconhaInfo[mac][mY],MaconhaInfo[mac][mZ]))
			{
			    perto = 1;
	  			ApplyAnimation(playerid,"BOMBER","BOM_Plant_Loop",2.0,1,0,0,0,0);
		    	SetTimerEx("AnimatioN", 100, false, "i", playerid);
				SetTimerEx("MaconhaQueimar", 17000, false, "id", playerid, mac);
				PlantandoMaconha[playerid] = true;
				new string[128];
				GetPlayerName(playerid,sendername,sizeof(sendername));
			 	format(string, sizeof(string), "* Oficial %s está queimando uma plantação de maconha!", sendername);
				SendClientMessageInRange(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	   			SendClientMessage(playerid, COLOR_GRAD1, "Você esta queimando esta plantação. aguarde...");
				return true;
			}
		}

		if(perto == 0)return SendClientMessage(playerid, -1, "Você não está perto de nenhuma plantação de maconha.");
	}
	return true;
}
BPF::MaconhaQueimar(playerid, mac)
{
	SetTimerEx("MaconhaQueimar2", 17000, false, "id", playerid, mac);
	ClearAnimations(playerid);
	PlantandoMaconha[playerid] = false;
	SendClientMessage(playerid, COLOR_GRAD1, "Saia de perto, a plantação irá queimar...");
	return true;
}
BPF::MaconhaQueimar2(playerid, mac)
{
	new gstring[128];
	format(gstring, sizeof gstring, "O Policial: %s queimou uma plantação de maconha.",NomePlayer(playerid));
	SendClientMessageToAll(0x00660CC8, gstring);
	DestroyDynamicObject(MaconhaInfo[mac][Object]);
	Delete3DTextLabel(MaconhaInfo[mac][TT]);
	CreateExplosion(MaconhaInfo[mac][mX], MaconhaInfo[mac][mY], MaconhaInfo[mac][mZ], 10, 1.0);
	MaconhaInfo[mac][mX] = 0.0;
	MaconhaInfo[mac][mY] = 0.0;
	MaconhaInfo[mac][mZ] = 0.0;
	MaconhaInfo[mac][PodeUsar] = true;
	ClearAnimations(playerid);
	PlantandoMaconha[playerid] = false;
	return true;
}

BPF::PlantarMaconhas(playerid, slt)
{
	new string[200];
	static
	    Float:pX, Float:pY, Float:pZ;
	GetPlayerPos(playerid, pX, pY, pZ);
	MaconhaInfo[slt][mX] = pX;
	MaconhaInfo[slt][mY] = pY;
	MaconhaInfo[slt][mZ] = pZ-1;
	MaconhaInfo[slt][GramasProntas] = 0;
	MaconhaInfo[slt][Crescida] = 0;
	MaconhaInfo[slt][Object] = CreateDynamicObject(19300, pX, pY, pZ-1,0.0, 0.0, 0.0);
	PlayerInfo[playerid][pSementes] --;
    strmid(MaconhaInfo[slt][Dono], NomePlayer(playerid), 0, strlen(NomePlayer(playerid)), 35);
	format(string, sizeof string, "•Plantação de maconha•\nDono: %s\nPlantação Nº: %d\nCrescida: %d/%d\nGramas: %dg",
	MaconhaInfo[slt][Dono], slt,MaconhaInfo[slt][Crescida],Max_Crescida, MaconhaInfo[slt][GramasProntas]);
	MaconhaInfo[slt][TT] = Create3DTextLabel(string, 0x1FF61F99, pX, pY, pZ, 10.0, 0);
	ClearAnimations(playerid);
	PlantandoMaconha[playerid] = false;
	antihands[playerid] = 0;
	RemovePlayerAttachedObjectEx(playerid, Vaga_Pa);
	GetPlayerName(playerid,sendername,sizeof(sendername));
 	format(string, sizeof(string), "* %s plantou sua semente de maconha!", sendername);
	SendClientMessageInRange(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	SendClientMessage(playerid, AMARELO_COR, "Semente plantada com sucesso, use: /maconhas para ver suas plantações.");

	return true;
}
CMD:maconhadotio(playerid)
{
    new slt = CheckSlot();

	if(slt == -1)
		return SendClientMessage(playerid, -1, "Ja plantaram muitas sementes no servidor.");
	new string[128];
	ApplyAnimation(playerid,"BOMBER","BOM_Plant_Loop",2.0,1,0,0,0,0);
    SetTimerEx("AnimatioN", 500, false, "i", playerid);
	SetTimerEx("PlantarMaconhas", 17000, false, "id", playerid, slt);
	PlantandoMaconha[playerid] = true;
	antihands[playerid] = 1;
	GetPlayerName(playerid,sendername,sizeof(sendername));
 	format(string, sizeof(string), "* %s está plantando uma semente de maconha!", sendername);
	SendClientMessageInRange(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	new id = CountAttachedObjects(playerid);
	SetPlayerAttachedObject(playerid,id,337,6,0.097999,0.076999,0.011000,172.699859,-4.799996,89.199981,1.000000,0.629000,0.678000);
    RemovePlayerAttachedObjectEx(playerid, Vaga_Pa);
    SetPlayerAttachedObjectEx(337,Vaga_Pa,playerid,id);
	SendClientMessage(playerid, COLOR_GRAD1, "Você esta plantando uma semente de maconha, aguarde . . .");
	return true;
}
CMD:colhermaconha(playerid)
{
    if(PlantandoMaconha[playerid] == true)
		return SendClientMessage(playerid, AMARELO_COR, "Você já está plantando ou colhendo uma semente");
    if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode estar dentro de um carro!");
	new perto = 0;

	for(new mac = 0; mac < MAX_MACONHA; mac++)
    {
        if(MaconhaInfo[mac][PodeUsar] == false && IsPlayerInRangeOfPoint(playerid, 2, MaconhaInfo[mac][mX],MaconhaInfo[mac][mY],MaconhaInfo[mac][mZ]))
		{
		    perto = 1;
		    if(strcmp(MaconhaInfo[mac][Dono], NomePlayer(playerid), true) == 0)
		    {
			    ApplyAnimation(playerid,"BOMBER","BOM_Plant_Loop",2.0,1,0,0,0,0);
			    SetTimerEx("AnimatioN", 100, false, "i", playerid);
				SetTimerEx("MaconhaColher", 17000, false, "id", playerid, mac);
				PlantandoMaconha[playerid] = true;
				antihands[playerid] = 1;
				new string[128];
				GetPlayerName(playerid,sendername,sizeof(sendername));
			 	format(string, sizeof(string), "* %s está colhendo sua plantação de maconha!", sendername);
				SendClientMessageInRange(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				new id = CountAttachedObjects(playerid);
				SetPlayerAttachedObject(playerid,id,337,6,0.097999,0.076999,0.011000,172.699859,-4.799996,89.199981,1.000000,0.629000,0.678000);
                SetPlayerAttachedObjectEx(337,Vaga_Pa,playerid,id);
				SendClientMessage(playerid, COLOR_GRAD1, "Você está colhendo esta plantação de maconha, aguarde . . .");
				return true;
			}
			else return SendClientMessage(playerid, -1, "Você não é o dono dessa plantação de maconha");
		}
	}

	if(perto == 0)return SendClientMessage(playerid, -1, "Você não está perto de nenhuma plantação de maconha.");
	return true;
}
BPF::MaconhaColher(playerid, mac)
{
	new gstring[128];
	GetPlayerName(playerid,sendername,sizeof(sendername));
 	format(gstring, sizeof(gstring), "* %s colheu sua plantação de maconha!", sendername);
	SendClientMessageInRange(20.0, playerid, gstring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	format(gstring, sizeof gstring, "Você colheu esta plantação de maconha, nela continha %d gramas prontas.",MaconhaInfo[mac][GramasProntas]);
	SendClientMessage(playerid, TEAM_GROVE_COLOR, gstring);
	PlayerInfo[playerid][pDrogas] += MaconhaInfo[mac][GramasProntas];
	DestroyDynamicObject(MaconhaInfo[mac][Object]);
	Delete3DTextLabel(MaconhaInfo[mac][TT]);
	MaconhaInfo[mac][mX] = 0.0;
	MaconhaInfo[mac][mY] = 0.0;
	MaconhaInfo[mac][mZ] = 0.0;
	MaconhaInfo[mac][PodeUsar] = true;
	ClearAnimations(playerid);
	PlantandoMaconha[playerid] = false;
	antihands[playerid] = 0;
	RemovePlayerAttachedObjectEx(playerid, Vaga_Pa);
    new id = CountAttachedObjects(playerid);
	SetPlayerAttachedObject(playerid,id,2901,1,0.028999,-0.207999,-0.054999,2.300004,176.100006,-1.300000,0.489999,0.528999,0.575000);
    SetPlayerAttachedObjectEx(2901,Vaga_Maconha,playerid,id);
	KillTimer(Timer_Object_Maconha[playerid]);
	Timer_Object_Maconha[playerid] = SetTimerEx("BPF_RetirarObjeto", 2*60000, 0, "d", playerid);
	return true;
}
BPF::BPF_RetirarObjeto(playerid)
{
	RemovePlayerAttachedObjectEx(playerid, Vaga_Maconha);
	return 0;
}
CMD:updatemaconha(playerid)
{
	if(PlayerInfo[playerid][pAdmin] < 1340)
		return SendClientMessage(playerid,COLOR_LIGHTRED, "Você nao pode usar este comando.");

	UpdateDrogas();

	SendClientMessage(playerid,COLOR_YELLOW, "Você atualizou as plantações de maconha.");
	return true;
}
CMD:maconhas(playerid)
{
	if(CountPlantacao(playerid) < 1)
		return SendClientMessage(playerid, AMARELO_COR, "Você não plantou nenhuma semente");

	new localmac = 0;
	MEGAString[0] = EOS;
 	new string[128];
	for(new maconhaid=0;maconhaid < MAX_MACONHA; maconhaid++)
	{
	    if(MaconhaInfo[maconhaid][PodeUsar] == false && strcmp(MaconhaInfo[maconhaid][Dono], NomePlayer(playerid), true)==0)
		{
		    localmac++;
		    LocalizeMaconha[localmac][playerid] = maconhaid;

			if(MaconhaInfo[maconhaid][Crescida] >= Max_Crescida)
			{
		    	format(string, sizeof string, "Plantação %d: {00BC00}(Pronta) Gramas: [%d]\n",maconhaid+1,MaconhaInfo[maconhaid][GramasProntas]);
		    	strcat(MEGAString,string);
			}
			else
			{
		    	format(string, sizeof string, "Plantação %d: {00BC00}Crescendo:[%d/%d] Gramas:[%d]\n",maconhaid+1, MaconhaInfo[maconhaid][Crescida], Max_Crescida, MaconhaInfo[maconhaid][GramasProntas]);
		    	strcat(MEGAString,string);
			}
		}
	}

	ShowPlayerDialog(playerid, 1478, DIALOG_STYLE_LIST, "Menu maconha", MEGAString, "Localizar", "Sair");
	return true;
}
//----------------------------------[ADMINADMIN]-----------------------------------------------
	CMD:id(playerid, params[])
	{
	        new target;
			if(sscanf(params, "u", target))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /id [parte-do-nick]");
				return true;
			}
			if(IsPlayerConnected(target))
			{
			    new gstring[128];
				GetPlayerName(target, giveplayer, sizeof(giveplayer));
				format(gstring, sizeof(gstring), "ID: (%d) %s",target,giveplayer);
				SendClientMessage(playerid, COLOR_GRAD1, gstring);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Ninguém encontrado");
			}
			return true;
	}
	CMD:manualcarros(playerid)
	{
 		if(PlayerInfo[playerid][pAdmin] < 1340)
   		{
	       	SendClientMessage(playerid, COLOR_GREEN, "Você não está autorizado a usar este comando");
	       	return true;
	    }
	    SalvarSEmpresas();
	    SalvarEmpresas();
	    SalvarFEmpresas();
	    Atualizar3Dtexts();
	    SendClientMessage(playerid, -1, "Empresas e Fazendas salvas");
	    return true;
	}

//------------------------------------------------------------------------------------------------------

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	foreach(Player, i)
 	{
  		if(PlayerInfo[i][pAdmin] && Spectate[i] == playerid)
    	{
     		SetPlayerInterior(i, newinteriorid);
       	}
    }
    return 1;
}

//------------------------------------------------------------------------------------------------------


	CMD:tv(playerid, params[])
	{
 		if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pAdminTemp] < 1)
		{
	       	SendClientMessage(playerid, COLOR_GREEN, "Você não está autorizado a usar este comando");
	       	return true;
  		}
	        if(!admtrampando[playerid])
					return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

	        if(WatchingTV[playerid] < 1)
		    {
		       	GetPlayerPos(playerid, Unspec[playerid][Coords][0],Unspec[playerid][Coords][1],Unspec[playerid][Coords][2]);
	     	}
			if(Spectate[playerid] == 255 && PlayerInfo[playerid][pAdmin] >= 1)
			{
				GetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
				Unspec[playerid][sPint] = PlayerInfo[playerid][pInt];
				Unspec[playerid][sLocal] = PlayerInfo[playerid][pLocal];
				PlayerInfo[playerid][pLocal] = 255;
			}
			if(Spectate[playerid] == 255 && PlayerInfo[playerid][pAdminTemp] >= 1)
			{
				GetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
				Unspec[playerid][sPint] = PlayerInfo[playerid][pInt];
				Unspec[playerid][sLocal] = PlayerInfo[playerid][pLocal];
				PlayerInfo[playerid][pLocal] = 255;
			}
	    	new string[128];

      		if(sscanf(params, "u", giveplayerid) || strfind(params, "off", true) == 1)
      		{
			    if(WatchingTV[playerid] > 0)
			  	{
			        WatchingTV[playerid] = 0;
					Spectate[playerid] = 253;
					GameTextForPlayer(playerid, "~w~                TV~n~~r~                Off", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

					MedicBill[playerid] = 0;
					PlayerTextDrawHide(playerid, gpss[playerid]);
					return true;
				}
	    	    return SendClientMessage(playerid, COLOR_GREEN, "USE: /tv [ID do Player]");
			}
			if(!IsPlayerConnected(giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "Jogador Offline.");
			if(EmTutorial[giveplayerid] >= 1) return SendClientMessage(playerid, COLOR_GREEN, "Este Jogador está em um tutorial!");
			new world3;
	    	world3 = GetPlayerVirtualWorld(giveplayerid);
			if(IsPlayerConnected(giveplayerid))
			{
                //if(giveplayerid == playerid)return SendClientMessage(playerid, COLOR_GREY, "Você não pode dar /tv em si mesmo!");

			   	if(PlayerInfo[giveplayerid][pAdmin] > 1337 && PlayerInfo[playerid][pAdmin] < 3000)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não pode ficar de TV em um Admin Dono !");
					return true;
				}
			    Spectate[playerid] = giveplayerid;
			    TogglePlayerSpectating(playerid, 1);


			    if(IsPlayerInAnyVehicle(giveplayerid))
			    {
	            	PlayerSpectateVehicle(playerid, GetPlayerVehicleID(giveplayerid));
			    }
			    else
			    {
					PlayerSpectatePlayer(playerid, giveplayerid);
				}
				SetPlayerInterior(playerid,GetPlayerInterior(giveplayerid));

				new Float:health;
				new Float:plrarmour;
				GetPlayerHealth(Spectate[playerid], health);
				GetPlayerArmour(Spectate[playerid], plrarmour);
				GetPlayerName(Spectate[playerid], giveplayer, sizeof(giveplayer));
				new cashd =  GetPlayerMoney(Spectate[playerid]);
			    SetPlayerToTeamColor(playerid);
			    SetPlayerVirtualWorld(playerid,world3);
				format(string, sizeof(string), "INFO TV: (%d) %s R$%d Saúde: %.0f Colete: %.0f",Spectate[playerid],giveplayer,cashd,health,plrarmour);
				SendClientMessage(playerid, COLOR_GREEN, string);
				WatchingTV[playerid] = 1;
				return 1;
			}
		return 1;
	}

stock SendNickMessage(nick[], message[], color)
{
	foreach(Player, i)
	{
	    if(!strcmp(NomePlayer(i), nick, true))
	    {
	        SendClientMessage(i, color, message);
	    }
	}
}

 CMD:gaspar(playerid, params[])
	{
	        if(PlayerInfo[playerid][pAdmin] < 1337)
	        {
	        	SendClientMessage(playerid, COLOR_GREEN, "Você não está autorizado a usar este comando");
	        	return true;
	        }
			if(sscanf(params, "s[100]", params))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: (/Gaspar) [TEXT]");
				return true;
			}
			new string[128];
			format(string, sizeof(string), "SMS: %s, enviou: Gasparzinho (000)", params);
			SendClientMessageToAll(COLOR_YELLOW, string);

			format(string, sizeof string, "[GASPARZINHO]: %s: %s", NomePlayer(playerid), params);
			print(string);
			SendNickMessage("wZAP", string, COLOR_YELLOW);
			return true;
	}
	CMD:cnn(playerid, result[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
	        if(!admtrampando[playerid])
				return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

			if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(sscanf(result, "s[64]", result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /cnn [cnn ~n~=NovaLinha ~r~=Vermelho ~g~=Verde ~b~=Azul ~w~=Branco ~y~=Amarelo]");
					return 1;
				}
        	    new string[128];
				format(string, sizeof(string), "~p~%s: ~w~%s",sendername,result);
				foreach(Player, i)
				{
					GameTextForPlayer(i, string, 5000, 6);
				}
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não esta autorizado a usar este comando!");
			}
			return 1;
	}
    CMD:bnn(playerid, result[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
	        if(!admtrampando[playerid])
				return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

			if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(isnull(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /bnn [texto (~n~ = Nova Linha)]");
					return 1;
				}
	       	    new string[128];
				format(string, sizeof(string), "~>~ ~p~%s:~n~ ~w~%s",sendername,result);
				foreach(Player, i)
				{
					showBalao(i, string, 7000);
				}
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não esta autorizado a usar este comando!");
			}
			return 1;
	}

//----------------------------------[TOD]-----------------------------------------------

	CMD:sethora(playerid, params[])
	{
	        new hour2;
			if(sscanf(params, "d", hour2))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /sethora [hora do dia] (0-23)");
				return true;
			}
			new string[128];
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
       			if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 3000)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo Admin USE: /trabalhar");
					return true;
				}
				if(hour2 < 0 || hour2 > 24)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Hora mínima, 0 ~ 24!");
					return true;
				}
	            SetWorldTime(hour2);
				format(string, sizeof(string), "   Tempo Definido Para %d Horas.", hour2);
				BroadCast(COLOR_GRAD1, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar o comando!");
			}
			return true;
	}
	CMD:iniciarloteria(playerid, params[])
	{
	        if(PlayerInfo[playerid][pAdmin] >= 4)
	        {
        	    new string[128], number;

        	    if(PlayerInfo[playerid][pAdmin] >= 5000)
        	    	if(sscanf(params, "d", number))

	            format(string, sizeof(string), "Loteria: Ja comecou a loteria.");
	            OOCNews(COLOR_WHITE, string);
	            new rand;
	            if(number < 1 || number > 49)
					rand = random(49) + 1;
				else
					rand = number;
	            Lotto(rand);
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Você não tem permissão para usar esse comando!");
	            return true;
	        }
			return true;
	}

    CMD:camera(playerid)
    {
		new Sofor = GetPlayerState(playerid);
		if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid, COLOR_GREY, "   Você não está dentro de um carro!");
		if(Sofor == PLAYER_STATE_DRIVER)
		{
	    	if(IsValidObject(dcObject[playerid])==1)
			{
				DestroyObject(dcObject[playerid]);
			}
			new pv=GetPlayerVehicleID(playerid),slot=GetVehicleModel(pv)-400;
			if(dCam_Xes[slot] == INVALID_DATA || INVALID_DATA == dCam_Yes[slot] || INVALID_DATA == dCam_Highs[slot])
			    return SendClientMessage(playerid, COLOR_GREY, "   Não foi possível ligar a câmera em primeira pessoa neste veículo!");

			dcObject[playerid] = CreateObject(19300,0.0,0.0,0.0,0.0,0.0,0.0);

			AttachObjectToVehicle(dcObject[playerid],pv,-dCam_Xes[slot],dCam_Yes[slot]-0.15,dCam_Highs[slot]-0.06,0.0,0.0,0.0);

			AttachCameraToObject(playerid,dcObject[playerid]);
	        SetPVarInt(playerid, "VarFPS", 1);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, "» Use {FFFFFF}/desligarcamera {33CCFF}para desativar a camera!");

		}else{

			if(IsValidObject(dcObject[playerid])==1)
			{
				DestroyObject(dcObject[playerid]);
			}

			new pv=GetPlayerVehicleID(playerid),slot=GetVehicleModel(pv)-400;
			if(dCam_Xes[slot] == INVALID_DATA || INVALID_DATA == dCam_Yes[slot] || INVALID_DATA == dCam_Highs[slot])
			    return SendClientMessage(playerid, COLOR_GREY, "   Não foi possível ligar a câmera em primeira pessoa neste veículo!");

			dcObject[playerid] = CreateObject(19300,0.0,0.0,0.0,0.0,0.0,0.0);

			AttachObjectToVehicle(dcObject[playerid],pv,dCam_Xes[slot],dCam_Yes[slot],dCam_Highs[slot],0.0,0.0,0.0);

			AttachCameraToObject(playerid,dcObject[playerid]);
			SetPVarInt(playerid, "VarFPS", 1);
	        SendClientMessage(playerid, COLOR_LIGHTBLUE, "» Use {FFFFFF}/desligarcamera {33CCFF}para desativar a camera!");


		}
        return 1;
    }
    CMD:desligarcamera(playerid)
    {
        if(!IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid, COLOR_GREY, "   Você não está dentro de um carro!");
  		new Sofor = GetPlayerState(playerid);
  		if(GetPVarInt(playerid, "VarFPS"))
		{
			if(Sofor == PLAYER_STATE_DRIVER)
			{
		    	if(IsValidObject(dcObject[playerid])==1)
				{
					DestroyObject(dcObject[playerid]);
				}
				SetCameraBehindPlayer(playerid);
				SetPVarInt(playerid, "VarFPS", 0);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "» Camera desligada!");
			}
		}
        return 1;
    }
    CMD:editar(playerid, params[])
	{
	        new editarnome[MAX_PLAYER_NAME];
			new editarnome2[MAX_PLAYER_NAME];
			new stat, quantidade;
			if(sscanf(params, "udd", giveplayerid, stat, quantidade))
			{
				SendClientMessage(playerid, 0x55F6ACFF, "USE: /editar [ID do Player] [Status] [quantidade]");
				SendClientMessage(playerid, COLOR_GRAD4, "1. Level                       |7. Respeito             |13. Repórter   |19. Materiais   |25. Chavefazenda");
				SendClientMessage(playerid, COLOR_GRAD4, "2. Morreu                   |8. ChaveCasa          |14. V.Drogas   |20. Carro Vip");
				SendClientMessage(playerid, COLOR_GRAD4, "3. Melhorar                |9. ChaveEmpresa   |15. P.Sexo   |21. Sementes Maconha");
				SendClientMessage(playerid, COLOR_GRAD4, "4. HorasJogadas       |10. Detetive             |16. Sexo");
				SendClientMessage(playerid, COLOR_GRAD4, "5. Contrato Emprego     |11. Advogado          |17. Matou   |23. Contrato Hitman");
				SendClientMessage(playerid, COLOR_GRAD4, "6. NumeroTelefone  |12. Mecânico           |18. Dinheiro   |24. Contrato Triad");
				return true;
			}
    	    new string[128];
    	    new gstring[128];
            if(IsPlayerConnected(giveplayerid))
	    	{
	    	    GetPlayerName(playerid,editarnome,sizeof(editarnome));
	    	    GetPlayerName(giveplayerid,editarnome2,sizeof(editarnome2));
	    	    if(giveplayerid != INVALID_PLAYER_ID)
	    	    {
					if (PlayerInfo[playerid][pAdmin] >= 5)
					{
						if(!admtrampando[playerid])
							return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

						switch (stat)
						{
							case 1:
							{
								PlayerInfo[giveplayerid][pLevel] = quantidade;
								format(string, sizeof(string), "Você setou level %d para o jogador", quantidade);
								ScoreLevel(giveplayerid);
								format(gstring, 128, "%s usou /editar level em %s e setou %d", PlayerName(playerid), PlayerName(giveplayerid), quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 2:
							{
								PlayerInfo[giveplayerid][pDeaths] = quantidade;
								format(string, sizeof(string), "Você setou %d vezes que ele morreu", quantidade);
								format(gstring, 128, "%s usou /editar numeros de morte em %s e setou %d", PlayerName(playerid), PlayerName(giveplayerid), quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 3:
							{
								PlayerInfo[giveplayerid][gPupgrade] = quantidade;
								format(string, sizeof(string), "Você setou %d de pontos de melhoria", quantidade);
								format(gstring, 128, "%s usou /editar melhorias em %s e setou %d", PlayerName(playerid), PlayerName(giveplayerid), quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 4:
							{
								PlayerInfo[giveplayerid][pConnectTime] = quantidade;
								format(string, sizeof(string), "Você setou %d horas jogadas para o jogador", quantidade);
								format(string, sizeof(string), "Você setou horas jogadas do player");
								format(gstring, 128, "%s usou /editar horas jogadas em %s e setou %d", PlayerName(playerid), PlayerName(giveplayerid), quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 5:
							{
								PlayerInfo[giveplayerid][pContractTime] = quantidade;
								format(string, sizeof(string), "Você setou o tempo de contrato Emprego para: %d", quantidade);
							}
							case 555:
							{

								PlayerInfo[giveplayerid][pConta] = quantidade;
								format(string, sizeof(string), "Você setou R$%d no banco do jogador", quantidade);
								format(gstring, 128, "%s usou /editar banco em %s e setou %d", PlayerName(playerid), PlayerName(giveplayerid), quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 666:
							{

								PlayerInfo[giveplayerid][pOuros] = quantidade;
								format(string, sizeof(string), "Você setou %d ouros no banco do jogador", quantidade);
								format(gstring, 128, "%s usou /editar ouros em %s e setou %d", PlayerName(playerid), PlayerName(giveplayerid), quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 6:
							{
								PlayerInfo[giveplayerid][pPnumber] = quantidade;
								format(string, sizeof(string), "Você setou o celular do jogador para %d", quantidade);
								format(gstring, 128, "%s usou /editar celular em %s e setou %d", PlayerName(playerid), PlayerName(giveplayerid), quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 7:
							{
								PlayerInfo[giveplayerid][pExp] = quantidade;
								format(string, sizeof(string), "Você setou o respeito do jogador para %d", quantidade);
								format(gstring, 128, "%s usou /editar respeito em %s e setou %d", PlayerName(playerid), PlayerName(giveplayerid), quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 8:
							{
								PlayerInfo[giveplayerid][pPHousekey] = quantidade;
								format(string, sizeof(string), "Você setou a chave de casa pra %d", quantidade);
								format(gstring, 128, "%s usou /editar chave da casa em %s e setou %d", PlayerName(playerid), PlayerName(giveplayerid), quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 9:
							{
								PlayerInfo[giveplayerid][pPbiskey] = quantidade;
								format(string, sizeof(string), "Você setou a chave da empresa %d", quantidade);
								format(gstring, 128, "%s usou /editar chave da empresa em %s e setou %d", PlayerName(playerid), PlayerName(giveplayerid), quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 10:
							{
								PlayerInfo[giveplayerid][pDetSkill] = quantidade;
								format(string, sizeof(string), "Você setou Nível de detetive para: %d", quantidade);
								format(gstring, 128, "%s usou /editar detetive em %s e setou %d", PlayerName(playerid), PlayerName(giveplayerid), quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 11:
							{
								PlayerInfo[giveplayerid][pLawSkill] = quantidade;
								format(string, sizeof(string), "Você setou Nível de advogado para: %d", quantidade);
                                format(gstring, 128, "%s usou /editar avogado em %s e setou %d", PlayerName(playerid), PlayerName(giveplayerid), quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 12:
							{
								PlayerInfo[giveplayerid][pMechSkill] = quantidade;
								format(string, sizeof(string), "Você setou Nível de Mecânico para: %d", quantidade);
								format(gstring, 128, "%s usou /editar Mecânico em %s e setou %d", PlayerName(playerid), PlayerName(giveplayerid), quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 13:
							{
								PlayerInfo[giveplayerid][pNewsSkill] = quantidade;
								format(string, sizeof(string), "Você setou skill %d de Repórter", quantidade);
								format(gstring, 128, "%s usou /editar reporter em %s e setou %d", PlayerName(playerid), PlayerName(giveplayerid), quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 14:
							{
								PlayerInfo[giveplayerid][pDrogasSkill] = quantidade;
								format(string, sizeof(string), "Você setou a Skill de Drogas para: %d", quantidade);
								format(gstring, 128, "%s usou /editar skill drogas em %s e setou %d", PlayerName(playerid), PlayerName(giveplayerid), quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 15:
							{
								PlayerInfo[giveplayerid][pSexSkill] = quantidade;
								format(string, sizeof(string), "Você setou a Skill de P.Sexo para: %d", quantidade);
								format(gstring, 128, "%s usou /editar skill p.sexo em %s e setou %d", PlayerName(playerid), PlayerName(giveplayerid), quantidade);
                                BPFLogs("comandosadmin", gstring);
							}
							case 16:
							{
							    if(quantidade == 1 || quantidade == 2)
							    {
									PlayerInfo[giveplayerid][pSex] = quantidade;
									format(string, sizeof(string), "Você setou sexo %d para o player", quantidade);
									format(gstring, 128, "%s usou /editar sexo em %s e setou %d", PlayerName(playerid), PlayerName(giveplayerid), quantidade);
									BPFLogs("comandosadmin", gstring);
								}
								else
								    return SendClientMessage(playerid, COLOR_GRAD1, "Numeros validos: (1 = Homem) (2 = Mulher)");
							}
							case 17:
							{
								PlayerInfo[giveplayerid][pKills] = quantidade;
								format(string, sizeof(string), "Você setou %d vezes que ele matou alguém", quantidade);
								format(gstring, 128, "%s usou /editar Kills em %s e setou %d", PlayerName(playerid), PlayerName(giveplayerid), quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 1888:
							{

							    ResetPlayerMoney(giveplayerid);
							    GiveDinheiro(giveplayerid, quantidade);
								format(string, sizeof(string), "Você setou o dinheiro do jogador para: R$%d", quantidade);
								format(gstring, 128, "%s usou /editar dinheiro em %s e setou %d", PlayerName(playerid), PlayerName(giveplayerid), quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 19:
							{
								PlayerInfo[giveplayerid][pMats] = quantidade;
								format(string, sizeof(string), "Você setou Materiais para: %d", quantidade);
								format(gstring, 128, "%s usou /editar materiais em %s e setou %d", PlayerName(playerid), PlayerName(giveplayerid), quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 20:
							{
							    SendClientMessage(playerid, COLOR_GRAD1, "USE: /editarchave");
							}
							case 21:
							{
								PlayerInfo[giveplayerid][pSementes] = quantidade;
								format(string, sizeof(string), "Você setou %d sementes.", quantidade);
							}
							case 23:
							{
							    PlayerInfo[giveplayerid][pHeadValue] = quantidade;
								format(string, sizeof(string), "Você setou o Contrato Hitman de %s para %d", PlayerName(giveplayerid), quantidade);
							}
							case 24:
							{
							    PlayerInfo[giveplayerid][pHeadValueT] = quantidade;
								format(string, sizeof(string), "Você setou o Contrato Triad de %s para %d", PlayerName(giveplayerid), quantidade);
							}
							case 25:
							{
							if (PlayerInfo[playerid][pAdmin] < 5000)
									return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode editar isto.");
								PlayerInfo[giveplayerid][pPFazkey] = quantidade;
								format(string, sizeof(string), "Você setou a chave da fazenda %d", quantidade);
								format(gstring, 128, "%s usou /editar chave da fazenda em %s e setou %d", PlayerName(playerid), PlayerName(giveplayerid), quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 88:
							{

								PlayerInfo[giveplayerid][pBoxSkill] = quantidade;
								format(string, sizeof(string), "Você setou a Skill de Hacker para: %d", quantidade);
								format(gstring, 128, "%s usou /editar skill Hacker em %s e setou %d", PlayerName(playerid), PlayerName(giveplayerid), quantidade);
                                BPFLogs("comandosadmin", gstring);
							}
							default:
							{
								format(string, sizeof(string), "   Codigo Invalido", quantidade);
							}

						}
						SendClientMessage(playerid, COLOR_GRAD1, string);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Você não esta autorizado a usar este comando!");
					}
				}
			}
			return true;
	}
    CMD:editaroff(playerid, params[])
	{
			new stat, quantidade, nome[24];
			if(sscanf(params, "s[24]dd", nome, stat, quantidade))
			{
				SendClientMessage(playerid, 0x55F6ACFF, "USE: /editar [Nome] [Status] [quantidade]");
				SendClientMessage(playerid, COLOR_GRAD4, "1. Level                       |7. Respeito             |13. Repórter   |19. Materiais   |25. Chavefazenda");
				SendClientMessage(playerid, COLOR_GRAD4, "2. Morreu                   |8. ChaveCasa          |14. V.Drogas   |20. Carro Vip");
				SendClientMessage(playerid, COLOR_GRAD4, "3. Melhorar                |9. ChaveEmpresa   |15. P.Sexo   |21. Sementes Maconha");
				SendClientMessage(playerid, COLOR_GRAD4, "4. HorasJogadas       |10. Detetive             |16. Sexo");
				SendClientMessage(playerid, COLOR_GRAD4, "5. Contrato Emprego     |11. Advogado          |17. Matou   |23. Contrato Hitman");
				SendClientMessage(playerid, COLOR_GRAD4, "6. NumeroTelefone  |12. Mecânico           |18. Dinheiro   |24. Contrato Triad");
				return true;
			}
    	    new string[128];
    	    new gstring[128];
    	    GetPlayerName(playerid, sendername, sizeof(sendername));
           	new arquivo[55];
			format(arquivo, sizeof(arquivo), Pasta_Contas,nome);
			if(PlayerInfo[playerid][pAdmin] < 1337)
            {
                SendClientMessage(playerid, COLOR_GREY, "Você não esta autorizado a usar este comando!");
                return true;
            }
			if(!DOF2_FileExists(arquivo))
			{
			    SendClientMessage(playerid, COLOR_WHITE, " Este nick não está registrado no Brasil Paradise City!");
			    return true;
			}
			      switch (stat)
						{
							case 1:
							{
								DOF2_SetInt(arquivo,"Level",quantidade);
								DOF2_SaveFile();
								format(string, sizeof(string), "[Edição RG]: {ffffff}Você setou level %d para o jogador", quantidade);
								SendClientMessage(playerid, 0x1E90FFFF, string);
								format(gstring, 128, "%s usou /editar level em %s e setou %d", PlayerName(playerid), nome, quantidade);
								BPFLogs("comandosadmin", gstring);
								}
								case 2:
							{
								DOF2_SetInt(arquivo,"Deaths",quantidade);
								DOF2_SaveFile();
								format(string, sizeof(string), "[Edição RG]: {ffffff}Você setou %d vezes que ele morreu", quantidade);
								SendClientMessage(playerid, 0x1E90FFFF, string);
								format(gstring, 128, "%s usou /editar numeros de morte em %s e setou %d", PlayerName(playerid), nome, quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 3:
							{
								DOF2_SetInt(arquivo,"UpgradePoints",quantidade);
								DOF2_SaveFile();
								format(string, sizeof(string), "[Edição RG]: {ffffff}Você setou %d de pontos de melhoria", quantidade);
								SendClientMessage(playerid, 0x1E90FFFF, string);
								format(gstring, 128, "%s usou /editar melhorias em %s e setou %d", PlayerName(playerid), nome, quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 4:
							{
							if (PlayerInfo[playerid][pAdmin] < 3000)
									return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem autorização para isso, procure um Gerente !");
								DOF2_SetInt(arquivo,"ConnectedTime",quantidade);
								DOF2_SaveFile();
								format(string, sizeof(string), "[Edição RG]: {ffffff}Você setou %d horas jogadas para o jogador", quantidade);
								SendClientMessage(playerid, 0x1E90FFFF, string);
								format(gstring, 128, "%s usou /editar horas jogadas em %s e setou %d", PlayerName(playerid), nome, quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 5:
							{
								DOF2_SetInt(arquivo,"ContractTime",quantidade);
								DOF2_SaveFile();
								format(string, sizeof(string), "[Edição RG]: {ffffff}Você setou o tempo de contrato Emprego para: %d", quantidade);
								SendClientMessage(playerid, COLOR_GRAD4, string);
							}
							case 555:
							{
								if (PlayerInfo[playerid][pAdmin] < 5000)
									return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem autorização para isso, procure um Diretor !");
								DOF2_SetInt(arquivo,"Bank",quantidade);
								DOF2_SaveFile();
								format(string, sizeof(string), "[Edição RG]: {ffffff}Você setou R$%d no banco do jogador", quantidade);
								SendClientMessage(playerid, 0x1E90FFFF, string);
								format(gstring, 128, "%s usou /editar banco em %s e setou %d", PlayerName(playerid), nome, quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 666:
							{
								if (PlayerInfo[playerid][pAdmin] < 5000)
									return SendClientMessage(playerid, COLOR_GRAD1, "VVocê não tem autorização para isso, procure um Diretor !");
								DOF2_SetInt(arquivo,"Ouros",quantidade);
								DOF2_SaveFile();
								format(string, sizeof(string), "[Edição RG]: {ffffff}Você setou %d ouros no banco do jogador", quantidade);
								SendClientMessage(playerid, 0x1E90FFFF, string);
								format(gstring, 128, "%s usou /editar ouros em %s e setou %d", PlayerName(playerid), nome, quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 6:
							{
							if (PlayerInfo[playerid][pAdmin] < 3001)
									return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem autorização para isso, procure um Gerente !");
								DOF2_SetInt(arquivo,"PhoneNr",quantidade);
								DOF2_SaveFile();
								format(string, sizeof(string), "[Edição RG]: {ffffff}Você setou o celular do jogador para %d", quantidade);
								SendClientMessage(playerid, 0x1E90FFFF, string);
								format(gstring, 128, "%s usou /editar celular em %s e setou %d", PlayerName(playerid), nome, quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 7:
							{
							if (PlayerInfo[playerid][pAdmin] < 5000)
									return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem autorização para isso, procure um Diretor !");
								DOF2_SetInt(arquivo,"Respect",quantidade);
								DOF2_SaveFile();
								format(string, sizeof(string), "[Edição RG]: {ffffff}Você setou o respeito do jogador para %d", quantidade);
								SendClientMessage(playerid, 0x1E90FFFF, string);
								format(gstring, 128, "%s usou /editar respeito em %s e setou %d", PlayerName(playerid), nome, quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 8:
							{
							if (PlayerInfo[playerid][pAdmin] < 3001)
									return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem autorização para isso, procure um Diretor !");
								DOF2_SetInt(arquivo,"House",quantidade);
								DOF2_SaveFile();
								format(string, sizeof(string), "[Edição RG]: {ffffff}Você setou a chave de casa pra %d", quantidade);
								SendClientMessage(playerid, 0x1E90FFFF, string);
								format(gstring, 128, "%s usou /editar chave da casa em %s e setou %d", PlayerName(playerid), nome, quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 9:
							{
							if (PlayerInfo[playerid][pAdmin] < 3001)
									return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem autorização para isso, procure um Diretor !");
								DOF2_SetInt(arquivo,"Bizz",quantidade);
								DOF2_SaveFile();
								format(string, sizeof(string), "[Edição RG]: {ffffff}Você setou a chave da empresa %d", quantidade);
								SendClientMessage(playerid, 0x1E90FFFF, string);
								format(gstring, 128, "%s usou /editar chave da empresa em %s e setou %d", PlayerName(playerid), nome, quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 10:
							{
								DOF2_SetInt(arquivo,"DetSkill",quantidade);
								DOF2_SaveFile();
								format(string, sizeof(string), "[Edição RG]: {ffffff}Você setou Nível de detetive para: %d", quantidade);
								SendClientMessage(playerid, 0x1E90FFFF, string);
								format(gstring, 128, "%s usou /editar detetive em %s e setou %d", PlayerName(playerid), nome, quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 11:
							{
								DOF2_SetInt(arquivo,"LawSkill",quantidade);
								DOF2_SaveFile();
								format(string, sizeof(string), "[Edição RG]: {ffffff}Você setou Nível de advogado para: %d", quantidade);
								SendClientMessage(playerid, 0x1E90FFFF, string);
                                format(gstring, 128, "%s usou /editar avogado em %s e setou %d", PlayerName(playerid), nome, quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 12:
							{
								DOF2_SetInt(arquivo,"MechSkill",quantidade);
								DOF2_SaveFile();
								format(string, sizeof(string), "[Edição RG]: {ffffff}Você setou Nível de Mecânico para: %d", quantidade);
								SendClientMessage(playerid, 0x1E90FFFF, string);
								format(gstring, 128, "%s usou /editar Mecânico em %s e setou %d", PlayerName(playerid), nome, quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 13:
							{
								DOF2_SetInt(arquivo,"NewsSkill",quantidade);
								DOF2_SaveFile();
								format(string, sizeof(string), "[Edição RG]: {ffffff}Você setou skill %d de Repórter", quantidade);
								SendClientMessage(playerid, 0x1E90FFFF, string);
								format(gstring, 128, "%s usou /editar reporter em %s e setou %d", PlayerName(playerid), nome, quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 14:
							{
								DOF2_SetInt(arquivo,"DrogasSkill",quantidade);
								DOF2_SaveFile();
								format(string, sizeof(string), "[Edição RG]: {ffffff}Você setou a Skill de Drogas para: %d", quantidade);
								SendClientMessage(playerid, 0x1E90FFFF, string);
								format(gstring, 128, "%s usou /editar skill drogas em %s e setou %d", PlayerName(playerid), nome, quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 15:
							{
							if (PlayerInfo[playerid][pAdmin] < 3000)
									return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem autorização para isso, procure um Gerente !");
								DOF2_SetInt(arquivo,"SexSkill",quantidade);
								DOF2_SaveFile();
								format(string, sizeof(string), "[Edição RG]: {ffffff}Você setou a Skill de P.Sexo para: %d", quantidade);
								SendClientMessage(playerid, 0x1E90FFFF, string);
								format(gstring, 128, "%s usou /editar skill p.sexo em %s e setou %d", PlayerName(playerid), nome, quantidade);
                                BPFLogs("comandosadmin", gstring);
							}
							case 16:
							{
							    if(quantidade == 1 || quantidade == 2)
							    {
									DOF2_SetInt(arquivo,"Sex",quantidade);
								    DOF2_SaveFile();
									format(string, sizeof(string), "[Edição RG]: {ffffff}Você setou sexo %d para o player", quantidade);
								    SendClientMessage(playerid, 0x1E90FFFF, string);
									format(gstring, 128, "%s usou /editar sexo em %s e setou %d", PlayerName(playerid), nome, quantidade);
									BPFLogs("comandosadmin", gstring);
								}
								else
								    return SendClientMessage(playerid, COLOR_GRAD1, "Numeros validos: (1 = Homem) (2 = Mulher)");
							}
							case 17:
							{
							if (PlayerInfo[playerid][pAdmin] < 3000)
									return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem autorização para isso, procure um Gerente !");
								DOF2_SetInt(arquivo,"Kills",quantidade);
								DOF2_SaveFile();
								format(string, sizeof(string), "[Edição RG]: {ffffff}Você setou %d vezes que ele matou alguém", quantidade);
								SendClientMessage(playerid, 0x1E90FFFF, string);
								format(gstring, 128, "%s usou /editar Kills em %s e setou %d", PlayerName(playerid), nome, quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 1888:
							{
							    DOF2_SetInt(arquivo,"Money",quantidade);
							    DOF2_SaveFile();
								format(string, sizeof(string), "[Edição RG]: {ffffff}Você setou o dinheiro do jogador para: R$%d", quantidade);
								SendClientMessage(playerid, 0x1E90FFFF, string);
								format(gstring, 128, "%s usou /editar dinheiro em %s e setou %d", PlayerName(playerid), nome, quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 19:
							{
							    DOF2_SetInt(arquivo,"Materiais",quantidade);
                                DOF2_SaveFile();
								format(string, sizeof(string), "[Edição RG]: {ffffff}Você setou Materiais para: %d", quantidade);
								SendClientMessage(playerid, 0x1E90FFFF, string);
								format(gstring, 128, "%s usou /editar materiais em %s e setou %d", PlayerName(playerid), nome, quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							case 20:
							{
							    SendClientMessage(playerid, COLOR_GRAD1, "USE: /editarchave");
							}
							case 21:
							{
								DOF2_SetInt(arquivo, "Sementes",quantidade);
                                DOF2_SaveFile();
								format(string, sizeof(string), "[Edição RG]: {ffffff}Você setou %d sementes.", quantidade);
								SendClientMessage(playerid, 0x1E90FFFF, string);
							}
							case 23:
							{
							    DOF2_SetInt(arquivo,"HeadValue",quantidade);
                                DOF2_SaveFile();
								format(string, sizeof(string), "[Edição RG]: {ffffff}Você setou o Contrato Hitman de %s para %d", nome, quantidade);
								SendClientMessage(playerid, 0x1E90FFFF, string);
							}
							case 24:
							{
							    DOF2_SetInt(arquivo,"HeadValueT",quantidade);
                                DOF2_SaveFile();
								format(string, sizeof(string), "[Edição RG]: {ffffff}Você setou o Contrato Triad de %s para %d", nome, quantidade);
								SendClientMessage(playerid, 0x1E90FFFF, string);
							}
							case 25:
							{
							if (PlayerInfo[playerid][pAdmin] < 3000)
									return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem autorização para isso, procure um Gerente !");
								DOF2_SetInt(arquivo,"Faz",quantidade);
								DOF2_SaveFile();
								format(string, sizeof(string), "[Edição RG]: {ffffff}Você setou o Contrato Triad de %s para %d", nome, quantidade);
								SendClientMessage(playerid, 0x1E90FFFF, string);
								
								format(gstring, 128, "%s usou /editar chave da fazenda em %s e setou %d", PlayerName(playerid), nome, quantidade);
								BPFLogs("comandosadmin", gstring);
							}
							default:
							{
								format(string, sizeof(string), "   Codigo Invalido", quantidade);
							}
    }
			return true;
	}
//----------------------------------[SETINT]-----------------------------------------------
	CMD:setint(playerid, params[])
	{
	if (PlayerInfo[playerid][pAdmin] >= 0)
		{
			if(PlayerInfo[playerid][pJailed] != 0)
			{
				SendClientMessage(playerid,COLOR_GREY,"Você não pode trocar o interior agora!");
				return true;
			}

	        new intid;
			if(sscanf(params, "d", intid))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /setint [interiorid]");
				return true;
			}
    	    new string[128];
			SetPlayerInterior(playerid,intid);
			PlayerInfo[playerid][pInt] = intid;
			format(string, sizeof(string), "   Interior Mudado Para %d.", intid);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}
	CMD:setworld(playerid, params[])
	{
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			if(PlayerInfo[playerid][pJailed] != 0)
			{
				SendClientMessage(playerid,COLOR_GREY,"Você não pode trocar o interior agora!");
				return true;
			}
			if(!admtrampando[playerid])
				return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

	        new intid;
			if(sscanf(params, "d", intid))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /setworld [WordID]");
				return true;
			}
    	    new string[128];
			SetPlayerVirtualWorld(playerid, intid);
			format(string, sizeof(string), "   Virtual Word Mudado Para %d.", intid);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return true;
	}
	CMD:trocarworld(playerid, params[])
	{
		new playa;
		new health;
	    if(IsPlayerConnected(playerid))
	    {
	    	if (PlayerInfo[playerid][pAdmin] >= 2)
			{
				if(sscanf(params, "ud", playa, health))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /trocarworld [ID/ParteDoNome] [mundoid]");
					return 1;
				}
				GetPlayerName(playa, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				SetPlayerVirtualWorld(playa,health);
				new string[MAX_STRING];
	            format(string, sizeof(string), "Você alterou o mundo de %s para %d.", giveplayer,health);
				SendClientMessage(playerid, COLOR_GRAD2, string);
				format(string, sizeof(string), "O Admin %s trocou seu mundo virtual para %d.", sendername,health);
				SendClientMessage(playa, COLOR_GRAD2, string);
			}
   			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar esse comando !");
			}
		}
		return 1;
	}
	CMD:trocarint(playerid, params[])
	{
		new playa;
		new health;
	    if(IsPlayerConnected(playerid))
	    {
		    if (PlayerInfo[playerid][pAdmin] >= 2)
			{
				if(sscanf(params, "ud", playa, health))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /trocarint [ID/ParteDoNome] [intid]");
					return 1;
				}
				GetPlayerName(playa, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				SetPlayerInterior(playa,health);
				PlayerInfo[playa][pInt] = health;
				new string[MAX_STRING];
	            format(string, sizeof(string), "Você alterou o interior de %s para %d.", giveplayer,health);
				SendClientMessage(playerid, COLOR_GRAD2, string);
				format(string, sizeof(string), "O Admin %s trocou o interior que voce estava para %d.", sendername,health);
				SendClientMessage(playa, COLOR_GRAD2, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar esse comando !");
			}
		}
		return 1;
	}
	CMD:caixinha(playerid, result[])return ForT:presente(playerid, result);
    CMD:presente(playerid, result[])
	{
	    	if(Caixaon == false)
	    	{
	    	    SendClientMessage(playerid, COLOR_GRAD1, "Presentes foram Desativada por um Adm.");
	            return true;
	    	}
	    	if(PlayerInfo[playerid][pVIP] < 5)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Você não é SÓCIO-GOLD ou SÓCIO-PLATINA!");
				return true;
			}
	        if(PlayerInfo[playerid][pNatal] == char)
	        {
	            SendClientMessage(playerid,0xFFFFFFAA,"Info: Você poderá pegar outro presente após o próximo {FFA54F}PayDay{FFFFFF}.");
	            return true;
			}
			else
			{
                new string[1000];
				new ItemVIP = random(50);
		   		if(ItemVIP == 43 || ItemVIP == 22 || ItemVIP == 31 || ItemVIP == 32 || ItemVIP == 49 || ItemVIP == 23)
		    	{
		        format(string, sizeof(string), "[Caixa Surpresa]:{FFFFFF} %s(ID:%d) pegou uma | Caixa Supresa {FACC2E}Grande{FFFFFF}. (/infocaixas)",PlayerName(playerid),playerid);
			 	SendClientMessageToAll(0x00BFFFFF,string);
			 	PlayerInfo[playerid][pNatal] = char;
			 	for(new i = 0; i<75; i++)
                {
 	               if(InventarioInfo[playerid][i][iSlot] == 19382)
	              {
		  		   InventarioInfo[playerid][i][iSlot] = 19056;
		  	       InventarioInfo[playerid][i][iUnidades] = 1;
		  	       return 1;
		  		  	   }
		  		      }
                return 1;
		   		}
		   		if(ItemVIP == 14 || ItemVIP == 16 || ItemVIP == 40 ||  ItemVIP == 1 || ItemVIP == 38 || ItemVIP == 23 || ItemVIP == 25 || ItemVIP == 28)
		    	{
		    	format(string, sizeof(string), "[Caixa Surpresa]:{FFFFFF} %s(ID:%d) pegou uma | Caixa Supresa {5FB404}Média{FFFFFF}. (/infocaixas)",PlayerName(playerid),playerid);
			 	SendClientMessageToAll(0x00BFFFFF,string);
			 	PlayerInfo[playerid][pNatal] = char;
			 	SendClientMessage(playerid, 0x33CCFFFF, "*O Presente está em seu inventário, use /inventario para abri-lo !");
			 	for(new i = 0; i<75; i++)
                {
 	               if(InventarioInfo[playerid][i][iSlot] == 19382)
	              {
		  		   InventarioInfo[playerid][i][iSlot] = 19055;
		  	       InventarioInfo[playerid][i][iUnidades] = 1;
		  	       return 1;
		  		  	   }
		  		      }
                return 1;
		   		}
		   		if(ItemVIP == 15 || ItemVIP == 9 || ItemVIP == 18 || ItemVIP == 50)
		    	{
		    	format(string, sizeof(string), "[Caixa Surpresa]:{FFFFFF} %s(ID:%d) pegou uma | Caixa Supresa {FBED2D}Gigante{FFFFFF}. (/infocaixas)",PlayerName(playerid),playerid);
			 	SendClientMessageToAll(0x00BFFFFF,string);
			 	PlayerInfo[playerid][pNatal] = char;
			 	SendClientMessage(playerid, 0x33CCFFFF, "*O Presente está em seu inventário, use /inventario para abri-lo !");
			 	for(new i = 0; i<75; i++)
                {
 	               if(InventarioInfo[playerid][i][iSlot] == 19382)
	              {
		  		   InventarioInfo[playerid][i][iSlot] = 19058;
		  	       InventarioInfo[playerid][i][iUnidades] = 1;
		  	       return 1;
		  		  	   }
		  		      }
                return 1;
		   		}
		   		if(ItemVIP == 2)
		    	{
		    	format(string, sizeof(string), "[Caixa Surpresa]:{FFFFFF} %s(ID:%d) pegou uma | Caixa Supresa {2E37F3}Reveillon{FFFFFF}. (/infocaixas)",PlayerName(playerid),playerid);
			 	SendClientMessageToAll(0x00BFFFFF,string);
			 	PlayerInfo[playerid][pNatal] = char;
			 	SendClientMessage(playerid, 0x33CCFFFF, "*O Presente está em seu inventário, use /inventario para abri-lo !");
			 	for(new i = 0; i<75; i++)
                {
 	               if(InventarioInfo[playerid][i][iSlot] == 19382)
	              {
		  		   InventarioInfo[playerid][i][iSlot] = 19059;
		  	       InventarioInfo[playerid][i][iUnidades] = 1;
		  	       return 1;
		  		  	   }
		  		      }
                return 1;
		   		}
		   		if(ItemVIP == 3)
		    	{
		    	format(string, sizeof(string), "[Caixa Surpresa]:{FFFFFF} %s(ID:%d) pegou uma | Caixa Supresa {FF5A00}Extreme{FFFFFF}. (/infocaixas)",PlayerName(playerid),playerid);
			 	SendClientMessageToAll(0x00BFFFFF,string);
			 	PlayerInfo[playerid][pNatal] = char;
			 	SendClientMessage(playerid, 0x33CCFFFF, "*O Presente está em seu inventário, use /inventario para abri-lo !");
			 	for(new i = 0; i<75; i++)
                {
 	               if(InventarioInfo[playerid][i][iSlot] == 19382)
	              {
		  		   InventarioInfo[playerid][i][iSlot] = 19057;
		  	       InventarioInfo[playerid][i][iUnidades] = 1;
		  	       return 1;
		  		  	   }
		  		      }
                return 1;
		   		}
                format(string, sizeof(string), "[Caixa Surpresa]:{FFFFFF} %s(ID:%d) pegou uma | Caixa Supresa {F78181}Pequena{FFFFFF}. (/infocaixas)",PlayerName(playerid),playerid);
                SendClientMessageToAll(0x00BFFFFF,string);
                PlayerInfo[playerid][pNatal] = char;
                SendClientMessage(playerid, 0x33CCFFFF, "*O Presente está em seu inventário, use /inventario para abri-lo !");
                for(new i = 0; i<75; i++)
                {
 	               if(InventarioInfo[playerid][i][iSlot] == 19382)
	              {
		  		   InventarioInfo[playerid][i][iSlot] = 19054;
		  	       InventarioInfo[playerid][i][iUnidades] = 1;
		  	       return 1;
		  		  	   }
		  		      }
			 }
		return 1;
	}
//====================================================
	CMD:orgs(playerid)
	{
        new string[MAX_STRING];
		gs_Buffer[0] = EOS;
        strcat(gs_Buffer, "Tipo da ORG\tID e Nome da ORG\tLíder\tCidade\n");
        format(string,sizeof(string), "{1E90FF}Governamental\n");
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{0099ff}7:\t {0099ff}%s\t {FFFFFF}%s\t Los Santos\n", GetOrgName(7), InfoOrg[7][Lider], InfoOrg[7][UL_Lider]);//governo
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{00660C}3:\t {00660C}%s\t {FFFFFF}%s\t San Fierro\n", GetOrgName(3), InfoOrg[3][Lider], InfoOrg[3][UL_Lider]);//exército
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{917662}11:\t {917662}%s\t {FFFFFF}%s\t Los Santos\n", GetOrgName(11), InfoOrg[11][Lider], InfoOrg[11][UL_Lider]);//pf
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{906000}33:\t {906000}%s\t {FFFFFF}%s\t Los Santos\n", GetOrgName(33), InfoOrg[33][Lider], InfoOrg[33][UL_Lider]);//pc
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{FF6200}34:\t {FF6200}%s\t {FFFFFF}%s\t Los Santos\n", GetOrgName(34), InfoOrg[34][Lider], InfoOrg[34][UL_Lider]);//pc
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{9fa4e8}1:\t {9fa4e8}%s\t {FFFFFF}%s\t Los Santos\n", GetOrgName(1), InfoOrg[1][Lider], InfoOrg[1][UL_Lider]);//pm
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{3e3d3d}2:\t {3e3d3d}%s\t {FFFFFF}%s\t Los Santos\n", GetOrgName(2), InfoOrg[2][Lider], InfoOrg[2][UL_Lider]);//rota
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{408080}16:\t {408080}%s\t {FFFFFF}%s\t Los Santos\n", GetOrgName(16), InfoOrg[16][Lider], InfoOrg[16][UL_Lider]);//bope
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{1E90FF}Gangsters\n");
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{337EFF}5:\t {337EFF}%s\t {FFFFFF}%s\t Los Santos\n", GetOrgName(5), InfoOrg[5][Lider], InfoOrg[5][UL_Lider]);//aztecas
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{00da1c}14:\t {00da1c}%s\t {FFFFFF}%s\t Los Santos\n", GetOrgName(14), InfoOrg[14][Lider], InfoOrg[14][UL_Lider]);//grove
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{c640dd}17:\t {c640dd}%s\t {FFFFFF}%s\t Los Santos\n", GetOrgName(17), InfoOrg[17][Lider], InfoOrg[17][UL_Lider]);//ballas
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{DEBC00}18:\t {DEBC00}%s\t {FFFFFF}%s\t Los Santos\n", GetOrgName(18), InfoOrg[18][Lider], InfoOrg[18][UL_Lider]);//losvagos
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{FF3636}19:\t {FF3636}%s\t {FFFFFF}%s\t Los Santos\n", GetOrgName(19), InfoOrg[19][Lider], InfoOrg[19][UL_Lider]);//cv
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{9ACD32}21:\t {9ACD32}%s\t {FFFFFF}%s\t Los Santos\n", GetOrgName(21), InfoOrg[21][Lider], InfoOrg[21][UL_Lider]);//pcc
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{1E90FF}Assassinas\n");
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{BDBDBD}8:\t {BDBDBD}%s\t {FFFFFF}%s\t Los Santos\n", GetOrgName(8), InfoOrg[8][Lider], InfoOrg[8][UL_Lider]);//hitmans
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{A4D1FF}22:\t {A4D1FF}%s\t {FFFFFF}%s\t Los Santos\n", GetOrgName(22), InfoOrg[22][Lider], InfoOrg[22][UL_Lider]);//triads
		strcat(gs_Buffer,string);//
		format(string,sizeof(string), "{1E90FF}Mafiosas\n");
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{D48A30}12:\t {D48A30}%s\t {FFFFFF}%s\t Los Santos\n", GetOrgName(12), InfoOrg[12][Lider], InfoOrg[12][UL_Lider]);//cosa
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{00483A}13:\t {00483A}%s\t {FFFFFF}%s\t Los Santos\n", GetOrgName(13), InfoOrg[13][Lider], InfoOrg[13][UL_Lider]);//yakuza
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{1E90FF}Terroristas\n");
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{6E6E6E}15:\t {6E6E6E}%s\t {FFFFFF}%s\t Los Santos\n", GetOrgName(15), InfoOrg[15][Lider], InfoOrg[15][UL_Lider]);//asfarc
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{CC0196}23:\t {CC0196}%s\t {FFFFFF}%s\t Los Santos\n", GetOrgName(23), InfoOrg[23][Lider], InfoOrg[23][UL_Lider]);//gi
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{1E90FF}Mercenárias\n");
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{961e32}24:\t {961e32}%s\t {FFFFFF}%s\t Los Santos\n", GetOrgName(24), InfoOrg[24][Lider], InfoOrg[24][UL_Lider]);//HellsAngels
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{535d71}25:\t {535d71}%s\t {FFFFFF}%s\t Los Santos\n", GetOrgName(25), InfoOrg[25][Lider], InfoOrg[25][UL_Lider]);//sons
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{1E90FF}Particular\n");
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{ffe99e}9:\t {ffe99e}%s\t {FFFFFF}%s\t Los Santos\n", GetOrgName(9), InfoOrg[9][Lider], InfoOrg[9][UL_Lider]);//reporteres
		strcat(gs_Buffer,string);
		format(string,sizeof(string), "{F78181}4:\t {F78181}%s\t {FFFFFF}%s\t Los Santos\n", GetOrgName(4), InfoOrg[4][Lider], InfoOrg[4][UL_Lider]);//pc
		strcat(gs_Buffer,string);
		return ShowPlayerDialog(playerid, 8724, DIALOG_STYLE_TABLIST_HEADERS, "Lista de Líderes das Organizações", gs_Buffer, "Fechar", "");
	}
    //Comando para destruir  brnquedo
    CMD:drc(playerid)
	{
        if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pBrinquedo] > 0 || PlayerInfo[playerid][prctiger] > 0 || PlayerInfo[playerid][prcraider] > 0 || PlayerInfo[playerid][prcbaron] > 0)
			{
                if(BrinCriado[playerid] == 1)
                {
                    TogglePlayerControllable(playerid,1);
                    RemovePlayerFromVehicle(playerid);
                    SetPlayerPos(playerid,BrinX[playerid], BrinY[playerid], BrinZ[playerid]);
                    SetPlayerFacingAngle(playerid,BrinR[playerid]);
                    SetCameraBehindPlayer(playerid);
                    DestroyVehicle(BrinquedoID[playerid]);
                    BrinCriado[playerid] = 0;
                    return 1;
                }
                else
                {
                    SendClientMessage(playerid, COLOR_GRAD2, "Seu RC ja foi destruido !");
                    return 1;
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_GRAD2, "Você não tem um RC, Compre um na Loja VIP, /lojavip");
            }
            return 1;
        }
        return 1;
    }
    CMD:dinv(playerid)
	{
        if(IsPlayerConnected(playerid))
	    {
                if(carroinvCriado[playerid] == 1)
                {
                    TogglePlayerControllable(playerid,1);
                    RemovePlayerFromVehicle(playerid);
                    SetCameraBehindPlayer(playerid);
                    DestroyVehicle(carroinvID[playerid]);
                    carroinvCriado[playerid] = 0;
                    SendClientMessage(playerid, COR_AMARELO, "Você guardou seu veículo de inventário.");
                    return 1;
                }
            }
            return 1;
        }
    //Comando de Criar Brinquedo, carro, tank, heli, aviao
    CMD:rcbandit(playerid)
	{
                if(BrinCriado[playerid] == 0)
                {
                        if(GetPlayerInterior(playerid) > 0)
                        {
            				SendClientMessage(playerid, COR_AMARELO, "Você não pode criar RC Bandit nesse local!");
            				return 1;
                        }
                        if(GetPlayerWantedLevelEx(playerid) > 0)
                        {
            				SendClientMessage(playerid, COR_AMARELO, "Você esta sendo procurado, não pode usar RC Bandit agora!");
            				return 1;
                        }
                        if(PlayerInfo[playerid][pJailed] > 0)
    				    {
            				SendClientMessage(playerid, COR_AMARELO, "Você esta preso, não pode usar seu RC Bandit!");
            				return 1;
                        }
                        GetPlayerPos(playerid,BrinX[playerid],BrinY[playerid],BrinZ[playerid]);
                        GetPlayerFacingAngle(playerid,BrinR[playerid]);
                        BrinquedoID[playerid] = CreateVehicle(441, BrinX[playerid], BrinY[playerid], BrinZ[playerid], BrinR[playerid], -1, -1, 0);
                        BrinCriado[playerid] = 1;
                        PutPlayerInVehicle(playerid,BrinquedoID[playerid],0);
                        }
		return 1;
	}
	CMD:rcbaron(playerid)
	{
                if(BrinCriado[playerid] == 0)
                {
                        if(GetPlayerInterior(playerid) > 0)
                        {
            				SendClientMessage(playerid, COR_AMARELO, "Você não pode criar RC Bandit nesse local!");
            				return 1;
                        }
                        if(GetPlayerWantedLevelEx(playerid) > 0)
                        {
            				SendClientMessage(playerid, COR_AMARELO, "Você esta sendo procurado, não pode usar RC Bandit agora!");
            				return 1;
                        }
                        if(PlayerInfo[playerid][pJailed] > 0)
    				    {
            				SendClientMessage(playerid, COR_AMARELO, "Você esta preso, não pode usar seu RC Bandit!");
            				return 1;
                        }
                        GetPlayerPos(playerid,BrinX[playerid],BrinY[playerid],BrinZ[playerid]);
                        GetPlayerFacingAngle(playerid,BrinR[playerid]);
                        BrinquedoID[playerid] = CreateVehicle(464, BrinX[playerid], BrinY[playerid], BrinZ[playerid], BrinR[playerid], -1, -1, 0);
                        BrinCriado[playerid] = 1;
                        PutPlayerInVehicle(playerid,BrinquedoID[playerid],0);
                        }
		return 1;
	}
	CMD:rcraider(playerid)
	{
                if(BrinCriado[playerid] == 0)
                {
                        if(GetPlayerInterior(playerid) > 0)
                        {
            				SendClientMessage(playerid, COR_AMARELO, "Você não pode criar RC Bandit nesse local!");
            				return 1;
                        }
                        if(GetPlayerWantedLevelEx(playerid) > 0)
                        {
            				SendClientMessage(playerid, COR_AMARELO, "Você esta sendo procurado, não pode usar RC Bandit agora!");
            				return 1;
                        }
                        if(PlayerInfo[playerid][pJailed] > 0)
    				    {
            				SendClientMessage(playerid, COR_AMARELO, "Você esta preso, não pode usar seu RC Bandit!");
            				return 1;
                        }
                        GetPlayerPos(playerid,BrinX[playerid],BrinY[playerid],BrinZ[playerid]);
                        GetPlayerFacingAngle(playerid,BrinR[playerid]);
                        BrinquedoID[playerid] = CreateVehicle(465, BrinX[playerid], BrinY[playerid], BrinZ[playerid], BrinR[playerid], -1, -1, 0);
                        BrinCriado[playerid] = 1;
                        PutPlayerInVehicle(playerid,BrinquedoID[playerid],0);
                        }
		return 1;
	}
	CMD:monsterinvent(playerid)
	{
                if(carroinvCriado[playerid] == 0)
                {
                        if(GetPlayerInterior(playerid) > 0)
                        {
            				SendClientMessage(playerid, COR_AMARELO, "Você não pode usar seu Hotring nesse Monster!");
            				return 1;
                        }
                        if(PlayerInfo[playerid][pJailed] > 0)
    				    {
            				SendClientMessage(playerid, COR_AMARELO, "Você esta preso, não pode usar seu Monster!");
            				return 1;
                        }
                        new gstring[128];
	                    format(gstring, sizeof(gstring), "[Veículo de Inventário]: %s pegou um Monster em seu inventário.", PlayerName(playerid));
                        SendClientMessageInRange(20.0, playerid, gstring, 0x2641feFF,0x2641feFF,0x2641feFF,0x2641feFF,0x2641feFF);
                        GetPlayerPos(playerid,InvX[playerid],InvY[playerid],InvZ[playerid]);
                        GetPlayerFacingAngle(playerid,InvR[playerid]);
                        carroinvID[playerid] = CreateVehicle(557, InvX[playerid], InvY[playerid], InvZ[playerid], InvR[playerid], -1, -1, 0);
                        carroinvCriado[playerid] = 1;
                        PutPlayerInVehicle(playerid,carroinvID[playerid],0);
		                }
		return 1;
	}
		CMD:turismoinvent(playerid)
	{
                if(carroinvCriado[playerid] == 0)
                {
                        if(GetPlayerInterior(playerid) > 0)
                        {
            				SendClientMessage(playerid, COR_AMARELO, "Você não pode usar seu Turismo!");
            				return 1;
                        }
                        if(PlayerInfo[playerid][pJailed] > 0)
    				    {
            				SendClientMessage(playerid, COR_AMARELO, "Você esta preso, não pode usar seu Turismo!");
            				return 1;
                        }
                        new gstring[128];
	                    format(gstring, sizeof(gstring), "[Veículo de Inventário]: %s pegou um Turismo em seu inventário.", PlayerName(playerid));
                        SendClientMessageInRange(20.0, playerid, gstring, 0x2641feFF,0x2641feFF,0x2641feFF,0x2641feFF,0x2641feFF);
                        GetPlayerPos(playerid,InvX[playerid],InvY[playerid],InvZ[playerid]);
                        GetPlayerFacingAngle(playerid,InvR[playerid]);
                        carroinvID[playerid] = CreateVehicle(451, InvX[playerid], InvY[playerid], InvZ[playerid], InvR[playerid], -1, -1, 0);
                        carroinvCriado[playerid] = 1;
                        PutPlayerInVehicle(playerid,carroinvID[playerid],0);
		                }
		return 1;
	}
	CMD:hotringinv(playerid)
	{
                if(carroinvCriado[playerid] == 0)
                {
                        if(GetPlayerInterior(playerid) > 0)
                        {
            				SendClientMessage(playerid, COR_AMARELO, "Você não pode usar seu Hotring nesse local!");
            				return 1;
                        }
                        if(PlayerInfo[playerid][pJailed] > 0)
    				    {
            				SendClientMessage(playerid, COR_AMARELO, "Você esta preso, não pode usar seu Hotring!");
            				return 1;
                        }
                        new gstring[128];
	                    format(gstring, sizeof(gstring), "[Veículo de Inventário]: %s pegou um Hotring em seu inventário.", PlayerName(playerid));
                        SendClientMessageInRange(20.0, playerid, gstring, 0x2641feFF,0x2641feFF,0x2641feFF,0x2641feFF,0x2641feFF);
                        GetPlayerPos(playerid,InvX[playerid],InvY[playerid],InvZ[playerid]);
                        GetPlayerFacingAngle(playerid,InvR[playerid]);
                        carroinvID[playerid] = CreateVehicle(494, InvX[playerid], InvY[playerid], InvZ[playerid], InvR[playerid], -1, -1, 0);
                        carroinvCriado[playerid] = 1;
                        PutPlayerInVehicle(playerid,carroinvID[playerid],0);
		                }
		return 1;
	}
	CMD:nrg500inv(playerid)
	{
                if(carroinvCriado[playerid] == 0)
                {
                        if(GetPlayerInterior(playerid) > 0)
                        {
            				SendClientMessage(playerid, COR_AMARELO, "Você não pode usar sua NRG-500 nesse local!");
            				return 1;
                        }
                        if(PlayerInfo[playerid][pJailed] > 0)
    				    {
            				SendClientMessage(playerid, COR_AMARELO, "Você esta preso, não pode usar sua NRG-500!");
            				return 1;
                        }
                        new gstring[128];
	                    format(gstring, sizeof(gstring), "[Veículo de Inventário]: %s pegou uma NRG-500 em seu inventário.", PlayerName(playerid));
                        SendClientMessageInRange(20.0, playerid, gstring, 0x2641feFF,0x2641feFF,0x2641feFF,0x2641feFF,0x2641feFF);
                        GetPlayerPos(playerid,InvX[playerid],InvY[playerid],InvZ[playerid]);
                        GetPlayerFacingAngle(playerid,InvR[playerid]);
                        carroinvID[playerid] = CreateVehicle(522, InvX[playerid], InvY[playerid], InvZ[playerid], InvR[playerid], -1, -1, 0);
                        carroinvCriado[playerid] = 1;
                        PutPlayerInVehicle(playerid,carroinvID[playerid],0);
		                }
		return 1;
	}
	CMD:sultan1inv(playerid)
	{
                if(carroinvCriado[playerid] == 0)
                {
                        if(GetPlayerInterior(playerid) > 0)
                        {
            				SendClientMessage(playerid, COR_AMARELO, "Você não pode usar seu Sultan nesse local!");
            				return 1;
                        }
                        if(PlayerInfo[playerid][pJailed] > 0)
    				    {
            				SendClientMessage(playerid, COR_AMARELO, "Você esta preso, não pode usar seu Sultan!");
            				return 1;
                        }
                        new gstring[128];
	                    format(gstring, sizeof(gstring), "[Veículo de Inventário]: %s pegou um Sultan em seu inventário.", PlayerName(playerid));
                        SendClientMessageInRange(20.0, playerid, gstring, 0x2641feFF,0x2641feFF,0x2641feFF,0x2641feFF,0x2641feFF);
                        GetPlayerPos(playerid,InvX[playerid],InvY[playerid],InvZ[playerid]);
                        GetPlayerFacingAngle(playerid,InvR[playerid]);
                        carroinvID[playerid] = CreateVehicle(560, InvX[playerid], InvY[playerid], InvZ[playerid], InvR[playerid], -1, -1, 0);
                        carroinvCriado[playerid] = 1;
                        PutPlayerInVehicle(playerid,carroinvID[playerid],0);
		                }
		return 1;
	}
	CMD:cheetah1inv(playerid)
	{
                if(carroinvCriado[playerid] == 0)
                {
                        if(GetPlayerInterior(playerid) > 0)
                        {
            				SendClientMessage(playerid, COR_AMARELO, "Você não pode usar seu Sultan nesse local!");
            				return 1;
                        }
                        if(PlayerInfo[playerid][pJailed] > 0)
    				    {
            				SendClientMessage(playerid, COR_AMARELO, "Você esta preso, não pode usar seu Cheetah!");
            				return 1;
                        }
                        new gstring[128];
	                    format(gstring, sizeof(gstring), "[Veículo de Inventário]: %s pegou um Cheetah em seu inventário.", PlayerName(playerid));
                        SendClientMessageInRange(20.0, playerid, gstring, 0x2641feFF,0x2641feFF,0x2641feFF,0x2641feFF,0x2641feFF);
                        GetPlayerPos(playerid,InvX[playerid],InvY[playerid],InvZ[playerid]);
                        GetPlayerFacingAngle(playerid,InvR[playerid]);
                        carroinvID[playerid] = CreateVehicle(415, InvX[playerid], InvY[playerid], InvZ[playerid], InvR[playerid], -1, -1, 0);
                        carroinvCriado[playerid] = 1;
                        PutPlayerInVehicle(playerid,carroinvID[playerid],0);
		                }
		return 1;
	}
	CMD:infernus500(playerid)
	{
                if(carroinvCriado[playerid] == 0)
                {
                        if(GetPlayerInterior(playerid) > 0)
                        {
            				SendClientMessage(playerid, COR_AMARELO, "Você não pode usar sua Infernus nesse local!");
            				return 1;
                        }
                        if(PlayerInfo[playerid][pJailed] > 0)
    				    {
            				SendClientMessage(playerid, COR_AMARELO, "Você esta preso, não pode usar seu Infernus!");
            				return 1;
                        }
                        new gstring[128];
	                    format(gstring, sizeof(gstring), "[Veículo de Inventário]: %s pegou um Infernus em seu inventário.", PlayerName(playerid));
                        SendClientMessageInRange(20.0, playerid, gstring, 0x2641feFF,0x2641feFF,0x2641feFF,0x2641feFF,0x2641feFF);
                        GetPlayerPos(playerid,InvX[playerid],InvY[playerid],InvZ[playerid]);
                        GetPlayerFacingAngle(playerid,InvR[playerid]);
                        carroinvID[playerid] = CreateVehicle(411, InvX[playerid], InvY[playerid], InvZ[playerid], InvR[playerid], -1, -1, 0);
                        carroinvCriado[playerid] = 1;
                        PutPlayerInVehicle(playerid,carroinvID[playerid],0);
		                }
		return 1;
	}
	CMD:rctiger(playerid)
	{
                if(BrinCriado[playerid] == 0)
                {
                        if(GetPlayerInterior(playerid) > 0)
                        {
            				SendClientMessage(playerid, COR_AMARELO, "Você não pode criar RC Bandit nesse local!");
            				return 1;
                        }
                        if(GetPlayerWantedLevelEx(playerid) > 0)
                        {
            				SendClientMessage(playerid, COR_AMARELO, "Você esta sendo procurado, não pode usar RC Bandit agora!");
            				return 1;
                        }
                        if(PlayerInfo[playerid][pJailed] > 0)
    				    {
            				SendClientMessage(playerid, COR_AMARELO, "Você esta preso, não pode usar seu RC Bandit!");
            				return 1;
                        }
                        GetPlayerPos(playerid,BrinX[playerid],BrinY[playerid],BrinZ[playerid]);
                        GetPlayerFacingAngle(playerid,BrinR[playerid]);
                        BrinquedoID[playerid] = CreateVehicle(564, BrinX[playerid], BrinY[playerid], BrinZ[playerid], BrinR[playerid], -1, -1, 0);
                        BrinCriado[playerid] = 1;
                        PutPlayerInVehicle(playerid,BrinquedoID[playerid],0);
		                }
		return 1;
	}
	CMD:orgsvips(playerid, params[])
	{
	    if(PlayerInfo[playerid][pAdmin] < 1337)
     	{
            SendClientMessage(playerid, COLOR_GREY, "Você não esta autorizado a usar este comando!");
            return true;
        }
	    if(IsPlayerConnected(playerid))
	    {
	        new text1[30];
         	MEGAString[0]=EOS;
	       	new str[95];
			new count;
			strcat(MEGAString, "OrgID:\tOrganização\t{9900ff}VIP:\tVence:\n");
			for(new i = 0; i < MAX_ORGS; i++)
   			{
   			            if(i == 0 || i == 6 || i == 26 || i == 27 || i == 28 || i == 29 || i == 30 || i == 31 || i == 32)
			   			{
			   			}
   			            else
				  		{
				  		    if(CofreOrg[i][Vip] > 1) { text1 = "{00DB1D}SIM"; }
				  		    else { text1 = "{FF0000}NÃO"; }
			    			count++;
							GetPlayerName(i, sendername, sizeof(sendername));
							format(str, sizeof(str), "Nº%d\t{0080C0}%s:\t%s\t(%02d/%02d/%04d)\n", i,
						 	GetOrgName(i),text1,CofreOrg[i][DiaVIP],CofreOrg[i][MesVIP],CofreOrg[i][AnoVIP]);
		                    strcat(MEGAString, str);
                        }
			}
			if(count<=0)return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_LIST, "Organizacões VIPs", "{00FF00}Nenhum Organizacão Encontrada", "OK", "");
    		if(count>0)ShowPlayerDialog(playerid, 0, DIALOG_STYLE_LIST, "Organizacões VIPs", MEGAString, "OK", "");
	}
	return true;
 	}
    CMD:infoserver(playerid)
	{
            MEGAString[0] = EOS;

   			strcat(MEGAString, "{FFFF00}Brasil {FFFFFF}Paradise{337EFF} City\n");
			strcat(MEGAString, "{FFFFFF}Mais informações sobre o servidor:\n\n");

			strcat(MEGAString, "{337EFF}x {FFFFFF}Este é um servidor RPG onde você terá que se comportar como se fosse sua segunda vida\n");
            strcat(MEGAString, "{337EFF}x {FFFFFF}Neste servidor você pode ter casa, carros, empresas e muito mais bens materiais\n");
			strcat(MEGAString, "{337EFF}x {FFFFFF}Neste servidor tem vários sistemas inovadores para você se divertir com seus amigos\n");
			strcat(MEGAString, "{337EFF}x {FFFFFF}Este servidor tem varias organizações onde você poderá entrar, também poderá pegar empregos secundários\n");
			strcat(MEGAString, "{337EFF}x {FFFFFF}Aqui a diversão é sem limites, você pode roubar caixas eletronicos, cofres das lojas, eventos e muito mais !\n");
			strcat(MEGAString, "{337EFF}x {FFFFFF}Temos uma staff preparada para te ajudar, caso tenha duvidas, chame um admin ou Helper usando /relatorio\n\n");

			strcat(MEGAString, "{337EFF} Para mais informações acesse nosso Discord: {FFFF00}https://discord.gg/aW67hZu");
			ShowPlayerDialog(playerid, 8724, DIALOG_STYLE_MSGBOX, "{FFFF00}Brasil {FFFFFF}Paradise{337EFF} City: {FFFFFF}Informações+", MEGAString, "Informado","");
     		return true;
	}
//----------------------------------{Numero Emprego}-----------------------------------------------
	CMD:empregos(playerid, params[])
	{
			if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
			{
       			if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 3000)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo Admin USE: /trabalhar");
					return true;
				}
				SendClientMessage(playerid, TEAM_VAGOS_COLOR,"Detetive - 1");
				SendClientMessage(playerid, TEAM_VAGOS_COLOR,"Advogado - 2");
				SendClientMessage(playerid, TEAM_VAGOS_COLOR,"Profissional de Sexo - 3");
				SendClientMessage(playerid, TEAM_VAGOS_COLOR,"Vendedor de Drogas - 4");
				SendClientMessage(playerid, TEAM_VAGOS_COLOR,"Mecânico - 5");
				SendClientMessage(playerid, TEAM_VAGOS_COLOR,"Segurança - 6");
				SendClientMessage(playerid, TEAM_VAGOS_COLOR,"Vendedor de Armas - 7");
				SendClientMessage(playerid, TEAM_VAGOS_COLOR,"Motorista de Onibus - 9");
				SendClientMessage(playerid, TEAM_VAGOS_COLOR,"Caminhoneiro - 11");
				SendClientMessage(playerid, TEAM_VAGOS_COLOR,"Ladrão de carros - 13");
				SendClientMessage(playerid, TEAM_VAGOS_COLOR,"Taxistas - 23");
			}
			return true;
	}

//-----------------------------------{ IP }-----------------------------------------------------
	CMD:admip(playerid, params[])
	{
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
      		if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 3000)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo Admin USE: /trabalhar");
				return true;
			}
			if(sscanf(params, "u", giveplayerid))
			{
				SendClientMessage(playerid, COLOR_YELLOW, "USE: /ip [ID do Player]");
				return true;
			}
			if(IsPlayerConnected(giveplayerid))
			{
				new ip[32];
        	    new gstring[100];
				GetPlayerIp(giveplayerid,ip,128);
				if(strcmp(PlayerName(giveplayerid),"wZAP", true ) == 0 || strcmp(PlayerName(giveplayerid),"Brenow_iHarDz", true ) == 0)
				{
				    format(gstring, sizeof(gstring), "AdmCmd: %s Está tentando Pegar o seu IP!", PlayerName(playerid));
				    SendClientMessage(giveplayerid,COLOR_LIGHTRED, gstring);
					format(gstring, sizeof(gstring), "Fundador %s Está logando no servidor.", PlayerName(giveplayerid));
				}
				else
				    format(gstring, sizeof(gstring), "AdmCmd: %s (IP: %s)", PlayerName(giveplayerid),ip);
				SendClientMessage(playerid,0xff6347FF, gstring);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Esse não é um jogador Ativo.");
			}
		}
		else
 		{
 			SendClientMessage(playerid, COLOR_GREY, "Você não tem permissão para usar esse comando.");
	    	return true;
  		}
	    return true;
	}
//----------------------/unbanip--------------
	CMD:desbanip(playerid, params[])
	{
		if(PlayerInfo[playerid][pAdmin] >= 1337)
		{
      		if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 3000)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo Admin USE: /trabalhar");
				return true;
			}
		    if(sscanf(params, "s[24]", params))
		    {
		        SendClientMessage(playerid,COLOR_GRAD1,"USE: /desbanip [IP DO JOGADOR]");
		        return true;
   			}
   			new gstring2[74];
    	    new gstring[74];
    	    new string[128];
			format(gstring, 128, Pasta_IPsBanidos, params);
			format(gstring2, 128, Pasta_IPsBanidosTemp, params);
			if(DOF2_FileExists(gstring))
			{
			    fremove(gstring);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, 128, "AdmCmd: O admin %s desbaniu o IP %s", sendername,params);
				ABroadCast(0xff6347FF,string,1);
				BPFLogs("desban", string);
		        return true;
			}
  			else if(DOF2_FileExists(gstring2))
			{
			    fremove(gstring2);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, 128, "AdmCmd: O admin %s desbaniu o IP (temporariamente banido) %s", sendername,params);
				ABroadCast(0xff6347FF,string,1);
				BPFLogs("desban", string);
		        return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "IP NÃO ENCONTRADO.");
		        return true;
			}
		}
		return true;
	}
	CMD:unblockip(playerid, params[])
	{
		if(PlayerInfo[playerid][pAdmin] >= 3000)
		{
      		if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 3000)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo Admin USE: /trabalhar");
				return true;
			}
		    if(sscanf(params, "s[24]", params))
		    {
		        SendClientMessage(playerid,COLOR_GRAD1,"USE: /unblockip [ip]");
		        return true;
   			}
      		UnBlockIpAddress(params);
      		new string[128];
			format(string, 128, "AdmCmd: O admin Dono %s Desbloqueou o IP %s", sendername,params);
			ABroadCast(0xff6347FF,string,1);
			BPFLogs("unblockip", string);
   			return true;

		}
		return true;
	}

	CMD:desbanconta(playerid, params[])
	{
		if(PlayerInfo[playerid][pAdmin] >= 3000)
		{
      		if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 3000)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo Admin USE: /trabalhar");
				return true;
			}
		    if(sscanf(params, "s[24]", params))
		    {
		        SendClientMessage(playerid,COLOR_GRAD1,"USE: /desbanconta [NOME DO JOGADOR]");
		        return true;
   			}
   			new arquivo[64];
			format(arquivo, sizeof(arquivo), Pasta_Banidos,params);
    		new arquivo2[64];
    	    new string[128];
			format(arquivo2, sizeof(arquivo2), Pasta_BanidosTemp,params);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(DOF2_FileExists(arquivo))
			{
			   	format(string, 128, "AdmCmd: O admin %s desbaniu %s.", sendername,params);
				ABroadCast(0xff6347FF,string,1);
				DOF2_RemoveFile(arquivo);
				BPFLogs("desban", string);
			}
   			else if(DOF2_FileExists(arquivo2))
			{
			   	format(string, 128, "AdmCmd: %s desbaniu (temporariamente banido) %s.", sendername,params);
				ABroadCast(0xff6347FF,string,1);
				DOF2_RemoveFile(arquivo2);
				BPFLogs("desban", string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "CONTA NÃO ENCONTRADA.");
			    return true;
			}
		}
		return true;
	}

	stock CheckVeh(Float:radi, playerid, vehicleid)
	{
			new Float:PX,Float:PY,Float:PZ,Float:X,Float:Y,Float:Z;
			GetPlayerPos(playerid,PX,PY,PZ);
			GetVehiclePos(vehicleid, X,Y,Z);
			if(GetPlayerDistanceFromPoint(playerid, X, Y, Z) < radi)
			{
				return true;
			}
			return 0;
	}

//----------------------------------[MAKELider]------------------------------------------------
    CMD:lider(playerid, params[])
	{
	        if (PlayerInfo[playerid][pAdmin] >= 5)
	        {
	            new para1, level;
				if(sscanf(params, "ud", para1, level))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /lider [playerid] [Numero(1-35)]");
					return true;
				}
				if(level > 35 || level < 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Organizações de 0 a 35");
					return true;
				}
 				if(PlayerInfo[para1][pAdmin] == 0)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando em players que não seja admin!");
				    return true;
				}
				if(PlayerInfo[para1][pLider] != 0 && PlayerInfo[para1][pMembro] != 0)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "   Este player já participa de uma organização!");
				    return true;
				}
        	    new string[128];
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
			            GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
			            if(level == 0)
						{
						    format(string, sizeof(string), "Você foi retirado de líder da organização, pelo admin %s", sendername);
						    SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						    format(string, sizeof(string), "Você retirou o líder de %s da organização.", giveplayer);
						    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						    DemitirInfoOrg(PlayerName(para1));
							PlayerInfo[para1][pMembro] = 0;
							PlayerInfo[para1][pLider] = 0;
							PlayerInfo[para1][pCargo] = 0;
							if(PlayerInfo[para1][pAdmin] < 1)
							{
								PlayerInfo[para1][pSpawn] = 0;
							}
							ConnectedToPC[para1] = 0;
							OnDuty[para1] = 0;
							EmpregoDuty[para1] = 0;
							RemoveallRoadandSpikes(para1);
							if(PlayerInfo[para1][pSex] == 1) { PlayerInfo[para1][pSkin] = 23; } else { PlayerInfo[para1][pSkin] = 150; }
							MedicBill[para1] = 0;
							MedicBill[para1] = 0;
							SetPlayerToTeamColor(para1);
							SpawnPlayer(para1);
						    return true;
						}
						if(level == 1) { PlayerInfo[para1][pSkin] = 265; }//Policia Militar
						else if(level == 2)	{ PlayerInfo[para1][pSkin] = 285; }//BOPE
						else if(level == 3) { PlayerInfo[para1][pSkin] = 287; }//Exercito
						else if(level == 4) { PlayerInfo[para1][pSkin] = 228; }//Fire/Ambulance
						else if(level == 5) { PlayerInfo[para1][pSkin] = 115; }//Varrios Los Aztecas
						else if(level == 6) { PlayerInfo[para1][pSkin] = 239; }//iHarDz
						else if(level == 7) { PlayerInfo[para1][pSkin] = 147; }//Prefeito
						else if(level == 8) { PlayerInfo[para1][pSkin] = 294; }//Hitmans
						else if(level == 9) { PlayerInfo[para1][pSkin] = 227; }//Repórters
						else if(level == 10) { PlayerInfo[para1][pSkin] = 61; }//Ubers
						else if(level == 11) { PlayerInfo[para1][pSkin] = 295; }//Policia Federal
						else if(level == 12) { PlayerInfo[para1][pSkin] = 113; }//Máfia Russa
						else if(level == 13) { PlayerInfo[para1][pSkin] = 120; }//Máfia Yakuza
						else if(level == 14) { PlayerInfo[para1][pSkin] = 270; }//Groove
	     				else if(level == 15) { PlayerInfo[para1][pSkin] = 123; }//ALQaeda
						else if(level == 16) { PlayerInfo[para1][pSkin] = 286; }//BOPE-SF
	     				else if(level == 17) { PlayerInfo[para1][pSkin] = 104; }//Ballas
	                    else if(level == 18) { PlayerInfo[para1][pSkin] = 108; }//Vagos
	                    else if(level == 19) { PlayerInfo[para1][pSkin] = 170; }//CV
	                    else if(level == 20) { PlayerInfo[para1][pSkin] = 279; }//Bombeiros
	                    else if(level == 21) { PlayerInfo[para1][pSkin] = 47; }//ppcc
	                    else if(level == 22) { PlayerInfo[para1][pSkin] = 117; }//Triads
	                    else if(level == 23) { PlayerInfo[para1][pSkin] = 111; }//As FARC
	                    else if(level == 24) { PlayerInfo[para1][pSkin] = 100; }//Mayans
	                    else if(level == 25) { PlayerInfo[para1][pSkin] = 100; }//Sons
	                    else if(level == 26) { PlayerInfo[para1][pSkin] = 174; }//
	                    else if(level == 27) { PlayerInfo[para1][pSkin] = 265; }//
	                    else if(level == 28) { PlayerInfo[para1][pSkin] = 108; }//
	                    else if(level == 29) { PlayerInfo[para1][pSkin] = 287; }//
	                    else if(level == 30) { PlayerInfo[para1][pSkin] = 61; }//
	                    else if(level == 31) { PlayerInfo[para1][pSkin] = 70; }//
	                    else if(level == 33) { PlayerInfo[para1][pSkin] = 166; }//Policia Civil
	                    else if(level == 32) { PlayerInfo[para1][pSkin] = 227; }//
	                    else if(level == 34) { PlayerInfo[para1][pSkin] = 288; }//Detran
	                    if(PlayerInfo[para1][pSex] == 1)
						{
							SetPlayerSkin(para1, PlayerInfo[para1][pSkin]);
						}
						else
						{
							PlayerInfo[para1][pSkin] = 150;
							SetPlayerSkin(para1, PlayerInfo[para1][pSkin]);
						}
						PlayerInfo[para1][pLider] = level;
						format(string, sizeof(string), "Você foi promovido a líder %s, pelo admin %s.", NomeLiderORG(para1),PlayerName(playerid));
						SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "Você promoveu %s a líder da organização: %d.", giveplayer,level);
	                    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	                    MedicBill[para1] = 0;
					    PlayerInfo[para1][pCargo] = 6;
					    SetPlayerSkin(para1, PlayerInfo[para1][pSkin]);
					    SetPlayerSpawn(para1);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "   Esse jogador está off-line.");
				}
		 		return true;
			}
			return true;
	}
    CMD:patrocinios(playerid)
	{
 		if(PlayerInfo[playerid][pMembro] == 9 || PlayerInfo[playerid][pLider] == 9 || PlayerInfo[playerid][pMembro] == 32 || PlayerInfo[playerid][pLider] == 32)
		{
			if(IsPlayerConnected(playerid))
		    {
		        MEGAString[0]=EOS;
		       	new str[95];
				new count;
				for(new i = 0; i < MAX_ORGS; i++)
	   			{
	                  if(i == 0 || i == 16 || i == 26 || i == 32 || i == 24 || i == 25 || i == 27 || i == 28 || i == 29 || i == 30 || i == 31)
				   			{
				   			}
	   			            else
					  		{
				    			count++;
								GetPlayerName(i, sendername, sizeof(sendername));
								format(str, sizeof(str), "Nº%d {%s}%s:{FFFFFF} %s\n", i, CoresOrg(i), GetOrgName(i), PatrocinioOrg[i]);
			                    strcat(MEGAString, str);
	                        }
				}
				if(count<=0)return ShowPlayerDialog(playerid, 0, DIALOG_STYLE_LIST, "Patrocinios", "{00FF00}Nenhuma Organizacao Encontrada", "OK", "");
	    		if(count>0)ShowPlayerDialog(playerid, usarpatrocinio, DIALOG_STYLE_LIST, "Patrocinios", MEGAString, "Usar", "Cancelar");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "   Você não é um Reporter !");
		}
		return 1;
	}
	CMD:zerarpatrocinios(playerid)
	{
	    if(PlayerInfo[playerid][pMembro] == 9 || PlayerInfo[playerid][pLider] == 9 || PlayerInfo[playerid][pMembro] == 32 || PlayerInfo[playerid][pLider] == 32)
		{
			if(IsPlayerConnected(playerid))
		    {
				for(new i = 0; i < MAX_ORGS; i++)
	   			{
                   	if(i == 0)
				      {
				  	  }
		              else
				  	  {
				    		strmid(PatrocinioOrg[i], "Vazio", 0, strlen("Vazio"), 255);
			                SalvarPatrocinio(i);
	                  }
				}
				SendClientMessage(playerid, COLOR_GRAD1, "  Voce Zerou os Patrocinios");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "   Você não é um Reporter !");
		}
		return 1;
	}
	CMD:patrocinar(playerid, params[])
	{
 		new text[256];
		if(sscanf(params, "s[256]", text))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USE: /patrocinar [texto]");
			return true;
		}
		if(PlayerInfo[playerid][pLider] < 1)
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "   Somente Líderes Podem usar Este comando!");
		    return true;
		}
		new string[300];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "Patrocinio (%s) %s: %s", GetOrgName(GetPlayerOrg(playerid)), sendername, text);
		SendClientMessage(playerid, 0xFFA500F6, string);
		strmid(PatrocinioOrg[GetPlayerOrg(playerid)], text, 0, strlen(text), 255);
		ShowPlayerDialog(playerid, confirmarpatrocinio, DIALOG_STYLE_MSGBOX, " ",
		"{00CCFF}      Você quer que seu Patrocinio se desse jeito?\n\
	    {00CCFF}     OBS: Você precisa combinar um preço com o Repórter para ele Publicar!",
		"Confirmar", "Cancelar");
		return true;
	}
	CMD:plantarbomba(playerid)
	{
	    new Str[128];

	    if(PlayerInfo[playerid][pExplosivos] < 1)
	        return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem um explosivo, compre um no mercado negro!");

	    if(GetPVarInt(playerid, "VarBomba"))
	        return SendClientMessage(playerid, COLOR_GRAD1, "Você já plantou uma bomba!");

		if(IsPlayerInRC(playerid))
	        return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode plantar uma bomba aqui!");

		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0)
	        return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode plantar uma bomba agora!");

		if(!PlayerInfo[playerid][ComExplosivo])return SendClientMessage(playerid, COLOR_GRAD1, "Você não esta com o explosivo em mãos, abra seu inventário para pegar-lo!.");

		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);

		SetPVarInt(playerid, "VarObject",       CreateDynamicObject(1654, x, y, z-0.8, 45.0, 0.0, 0.0));
		SetPVarInt(playerid, "VarBomba", 		1);
		PlayerInfo[playerid][pExplosivos]        --;

		ApplyAnimation(playerid,"BOMBER","BOM_Plant_2Idle",4.1,0,1,1,0,0);

        PlayerInfo[playerid][ComExplosivo] = false;
        RemovePlayerAttachedObjectEx(playerid, Vaga_Roubo);
        SetPlayerSpecialAction(playerid, 0);

		SendClientMessage(playerid, 0x00660CC8, "*Você plantou uma bomba aqui, afaste-se e digite /detonarbomba para detona-la!");

	   	format(Str, sizeof(Str), "*[BOMBA]: %s plantou uma bomba.", NomePlayer(playerid));
		SendClientMessageInRange(30.0, playerid, Str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		printf("%s", Str);
	    return 1;
	}
	CMD:detonarbomba(playerid)
	{
	    if(!GetPVarInt(playerid, "VarBomba"))
	        return SendClientMessage(playerid, COLOR_GRAD1, "Você não plantou uma bomba!");

		new objectid = GetPVarInt(playerid, "VarObject");
		new Float:x, Float:y, Float:z;
		GetDynamicObjectPos(objectid, x, y, z);

		SetPVarInt(playerid, "VarBomba", 		0);

		DestroyDynamicObject(objectid);

		CreateExplosion(x, y, z, 10, 80.0);
		CreateExplosion(x+8.0, y+8.0, z, 10, 80.0);
		CreateExplosion(x-8.0, y-8.0, z, 10, 80.0);
		CreateExplosion(x+8.0, y-8.0, z, 10, 80.0);
		CreateExplosion(x-8.0, y+8.0, z, 10, 80.0);
		CreateExplosion(x, y, z+8.0, 10, 80.0);

		foreach(Player, i)
		{
		    if(IsPlayerInRangeOfPoint(i, 30.0, x, y, z))
		    {
		        new Float:health;
		        GetPlayerHealth(i, health);
		        SetPlayerHealth(i, health - (50 + random(10)) );
		    }
		}

		new Str[128];

	    format(Str, sizeof(Str), "*[BOMBA]: %s detonou uma bomba.", NomePlayer(playerid));
		SendClientMessageInRange(30.0, playerid, Str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		format(Str, sizeof Str, "[BOMBA]: Uma explosão acaba de acontecer próxima a: %s.", GetPoint2DZone(x, y, z));
		SendClientMessageToAll(COLOR_DBLUE, Str);

		return 1;
	}

	CMD:desarmarbomba(playerid)
	{
	    if(IsACop(playerid))
	    {
	        foreach(Player, i)
	        {
	            if(GetPVarInt(i, "VarBomba"))
	            {
					new objectid = GetPVarInt(i, "VarObject");
					new Float:x, Float:y, Float:z;
					GetDynamicObjectPos(objectid, x, y, z);
					if(IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z))
					{
					    new Str[128];
					    DestroyDynamicObject(objectid);
					    SetPVarInt(i, "VarBomba", 0);
					    ApplyAnimation(playerid,"BOMBER","BOM_Plant_2Idle",4.1,0,1,1,0,0);

					    format(Str, sizeof Str, "*O Policial %s desarmou sua bomba!", NomePlayer(playerid));
						SendClientMessage(i, 0x00660CC8, Str);

					    format(Str, sizeof Str, "[BOMBA]: O Policial %s conseguiu desarmar uma bomba!", NomePlayer(playerid));
						SendClientMessageToAll(COLOR_DBLUE, Str);
						return 1;
					}
	            }
	        }
	        SendClientMessage(playerid, COLOR_GRAD1, "Você não está perto de nenhuma bomba!");
	    }
	    else SendClientMessage(playerid, COLOR_GRAD1, "Você não é um policial!");
	    return 1;
	}

	CMD:pegarbomba(playerid)
	{
	    if(GetPVarInt(playerid, "VarBomba"))
	    {
			new objectid = GetPVarInt(playerid, "VarObject");
			new Float:x, Float:y, Float:z;
			GetDynamicObjectPos(objectid, x, y, z);
			if(IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z))
			{
			    new Str[128];
			    DestroyDynamicObject(objectid);
			    SetPVarInt(playerid, "VarBomba", 0);

				SendClientMessage(playerid, 0x00660CC8, "*Você pegou sua bomba!");

				PlayerInfo[playerid][pExplosivos] ++;
                new id = CountAttachedObjects(playerid);
		        SetPlayerAttachedObject(playerid,id ,1654,6,0.032999,0.000000,-0.173999,-28.900001,-9.599999,5.199999,1.000000,1.000000,1.000000);
                SetPlayerAttachedObjectEx(1654,Vaga_Roubo,playerid,id);
				PlayerInfo[playerid][ComExplosivo] = true;
				SetPlayerSpecialAction(playerid, 25);
				ApplyAnimation(playerid,"BOMBER","BOM_Plant_2Idle",4.1,0,1,1,0,0);

			   	format(Str, sizeof(Str), "*[BOMBA]: %s juntou sua bomba.", NomePlayer(playerid));
				SendClientMessageInRange(30.0, playerid, Str, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				printf("%s", Str);

				return 1;
	        }
	        SendClientMessage(playerid, COLOR_GRAD1, "Você não está perto de sua bomba!");
	    }
	    return 1;
	}

	CMD:sync(playerid, params[])
	{
	        new playa;
			if(sscanf(params, "u", playa))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /sync [playerid]");
				return true;
			}
			if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
                	    new string[128];
			            PlayerInfo[playa][pMuted] = 0;
			    	    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						Controle(playa, 1);
						MedicBill[playa] = 0;
			            NeedMedicTime[playa] = 0;
			            SetCameraBehindPlayer(playa);
		                sincronizando[playa] = 1;
                        virt[playa] = GetPlayerVirtualWorld(playa);
                    	interior[playa] = GetPlayerInterior(playa);
                    	skinneg[playa] = GetPlayerSkin(playa);
                    	GetPlayerArmour(playa,APP[playa]);
                     	GetPlayerHealth(playa,PlayerHPP[playa]);
                     	GetPlayerFacingAngle(playa,FaceAngle[playa]);
                      	GetPlayerPos(playa,xx[playa],yy[playa],zz[playa]);
                     	GetPlayerWeaponData(playa,1,gunsinc[1][playa],ammoo[1][playa]);
                     	GetPlayerWeaponData(playa,2,gunsinc[2][playa],ammoo[2][playa]);
                    	GetPlayerWeaponData(playa,3,gunsinc[3][playa],ammoo[3][playa]);
                     	GetPlayerWeaponData(playa,4,gunsinc[4][playa],ammoo[4][playa]);
                     	GetPlayerWeaponData(playa,5,gunsinc[5][playa],ammoo[5][playa]);
                    	GetPlayerWeaponData(playa,6,gunsinc[6][playa],ammoo[6][playa]);
                    	GetPlayerWeaponData(playa,7,gunsinc[7][playa],ammoo[7][playa]);
                     	GetPlayerWeaponData(playa,8,gunsinc[8][playa],ammoo[8][playa]);
                    	GetPlayerWeaponData(playa,9,gunsinc[9][playa],ammoo[9][playa]);
                     	GetPlayerWeaponData(playa,10,gunsinc[10][playa],ammoo[10][playa]);
                    	GetPlayerWeaponData(playa,11,gunsinc[11][playa],ammoo[11][playa]);
                      	GetPlayerWeaponData(playa,12,gunsinc[12][playa],ammoo[12][playa]);
                      	SpawnPlayer(playa);
                      	TempoSinc = SetTimerEx("Sincronizar", 500, 0, "i", playa);
                      	roubando[playa] = 0;
	                    if(IsPlayerInAnyVehicle(playa))
                     	{
                    		vehicledd[playa] = 1;
                     		VehicleIDD[playa] = GetPlayerVehicleID(playa);
                     	}
                     	TextDrawHideForPlayer ( playa , RocketWarning );
                        PlayerTextDrawHide ( playa , RocketMsgWarning[playa] );
						format(string, sizeof(string), "AdmCmd: %s desbugou %s",sendername,  giveplayer);
						printf("%s",string);
						format(string, sizeof(string), "AdmCmd: %s foi desbugado por %s",giveplayer ,PlayerName(playerid));
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "	Você não pode usar este comando!");
			}
			return true;
	}

	CMD:darlider(playerid, params[])
	{
	        new para1, level;
			if(sscanf(params, "ud", para1, level))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /darlider [ID do Player] [Numero(1-35)]");
				return true;
			}
			if(level == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "Para tirar o Líder de uma organização você deve usar /limparlider");
				return true;
			}
			if(level > 35 || level < 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "Organizações de 1 a 35");
				return true;
			}
				GetPlayerName(playerid, sendername, MAX_PLAYER_NAME);
				if (PlayerInfo[playerid][pAdmin] >= 5)
	 			{
					if(PlayerInfo[para1][pLider] != 0 || PlayerInfo[para1][pMembro] != 0)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "   Este player já participa de uma organização!");
					    return true;
					}
					    if(IsPlayerConnected(para1))
					    {
							if(strcmp(InfoOrg[level][Lider],"Ninguém",true)==0)
							{
								ConviteInfoOrg(PlayerName(para1), level, 6);
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG, use /limparlider antes de colocar outro Líder");
							    return true;
							}
		               	    new string[MAX_STRING];
							if(level == 1) { PlayerInfo[para1][pSkin] = 265; }//Policia Militar
							else if(level == 2)	{ PlayerInfo[para1][pSkin] = 285; }//BOPE
							else if(level == 3) { PlayerInfo[para1][pSkin] = 287; }//Exercito
							else if(level == 4) { PlayerInfo[para1][pSkin] = 228; }//Fire/Ambulance
							else if(level == 5) { PlayerInfo[para1][pSkin] = 115; }//Varrios Los Aztecas
							else if(level == 6) { PlayerInfo[para1][pSkin] = 239; }//iHarDz
							else if(level == 7)
							{
								PlayerInfo[para1][pSkin] = 147;                    //Prefeito
								CofreOrg[7][Dinheiro] = 0;              		   //reseta a grana da prefeitura
								PLE = 0; PLO = 0; PLPG = 0; PMA = 0; PTC = 0; PLV = 0;
								PDU = 0; PMC = 0; PMH = 0; PME = 0; PRE = 0; PCE = 0;

							}
							else if(level == 8) { PlayerInfo[para1][pSkin] = 294; }//Hitmans
							else if(level == 9) { PlayerInfo[para1][pSkin] = 227; }//Repórters
							else if(level == 10) { PlayerInfo[para1][pSkin] = 61; }//Ubers
							else if(level == 11) { PlayerInfo[para1][pSkin] = 295; }//Policia Federal
							else if(level == 12) { PlayerInfo[para1][pSkin] = 113; }//Máfia Russa
							else if(level == 13) { PlayerInfo[para1][pSkin] = 120; }//Máfia Yakuza
							else if(level == 14) { PlayerInfo[para1][pSkin] = 270; }//Groove
		                    else if(level == 15) { PlayerInfo[para1][pSkin] = 123; }//ALQaeda
							else if(level == 16) { PlayerInfo[para1][pSkin] = 286; }//BOPE-SF
		                    else if(level == 17) { PlayerInfo[para1][pSkin] = 104; }//Ballas
		                    else if(level == 18) { PlayerInfo[para1][pSkin] = 108; }//Vagos
		                    else if(level == 19) { PlayerInfo[para1][pSkin] = 170; }//CV
		                    else if(level == 20) { PlayerInfo[para1][pSkin] = 279; }//Bombeiros
		                    else if(level == 21) { PlayerInfo[para1][pSkin] = 47; }//ppcc
		                    else if(level == 22) { PlayerInfo[para1][pSkin] = 117; }//Triads
		                    else if(level == 23) { PlayerInfo[para1][pSkin] = 111; }//As FARC
		                    else if(level == 24) { PlayerInfo[para1][pSkin] = 100; }//Mayans
		                    else if(level == 25) { PlayerInfo[para1][pSkin] = 100; }//Sons
		                    else if(level == 26) { PlayerInfo[para1][pSkin] = 174; }//Milícia
		                    else if(level == 27) { PlayerInfo[para1][pSkin] = 265; }//Guerrilheiros Israeli
		                    else if(level == 28) { PlayerInfo[para1][pSkin] = 108; }//Guerrilheiros Israeli
		                    else if(level == 29) { PlayerInfo[para1][pSkin] = 287; }//Guerrilheiros Israeli
		                    else if(level == 30) { PlayerInfo[para1][pSkin] = 61; }//Guerrilheiros Israeli
		                    else if(level == 31) { PlayerInfo[para1][pSkin] = 70; }//Guerrilheiros Israeli
		                    else if(level == 33) { PlayerInfo[para1][pSkin] = 166; }//Policia Civil
		                    else if(level == 32) { PlayerInfo[para1][pSkin] = 227; }//Guerrilheiros Israeli
							else if(level == 34) { PlayerInfo[para1][pSkin] = 288; }//Detran
							if(PlayerInfo[para1][pSex] == 1)
							{
								SetPlayerSkin(para1, PlayerInfo[para1][pSkin]);
							}
							else
							{
								PlayerInfo[para1][pSkin] = 150;
								SetPlayerSkin(para1, PlayerInfo[para1][pSkin]);
							}
							GetPlayerName(para1, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							PlayerInfo[para1][pLider] = level;
							format(string, sizeof(string), "Você foi promovido a líder %s, pelo admin %s.", NomeLiderORG(para1),PlayerName(playerid));
							SendClientMessage(para1, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Você promoveu %s a líder da organização: %d.", giveplayer,level);
		     				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		     				//Regras
                             new str1[500];
                            format(str1, sizeof(str1),"%s você foi convidado a ser lider da Org: %s Pelo Admin: %s\n", para1, NomeLiderORG(para1), sendername);
                            format(str1, sizeof(str1),"%s%s",str1,"So poderá ser torna lider quem tiver o level e as horas jogadas informadas pelos admins.\n");
                            format(str1, sizeof(str1),"%s%s",str1,"Tera que comprir um praso de 3 dias para trocar de lider caso contrario ficara sem org.\n");
                            format(str1, sizeof(str1),"%s%s",str1,"Tera que criar manual no Discord falando da organização, suas regras, comandos e leis.\n");
                            format(str1, sizeof(str1),"%s%s",str1,"Manual não pode ser copiado ou modificado, caso for pego perdera lider na mesma hora.\n");
                            format(str1, sizeof(str1),"%s%s",str1,"Tera que realizar teste com todos que forem convidados.\n");
                            ShowPlayerDialog(para1, 5120, DIALOG_STYLE_MSGBOX, "=> {FF0000}Regras Para Setornar Lider {FFFFFF}<=",str1, "Aceitar", "Não");
		                    format(string, sizeof(string), "AdmCmd: O admin %s deu líder da organização:[{FFFFFF}%s] {ff6347}para %s.", sendername, NomeORG(para1), giveplayer);
		                    BPFLogs("Lideres", string);
							ABroadCast(0xff6347FF,string, 1);
							MedicBill[para1] = 0;
						    PlayerInfo[para1][pCargo] = 6;
						    SetPlayerSkin(para1, PlayerInfo[para1][pSkin]);
						    SetPlayerSpawn(para1);
						    SetPlayerToTeamColor(para1);


			    			CofreOrg[level][DiaLider] = getdate()+3;// 3 dias
							format(string, sizeof(string), Pasta_CofreOrg,level);
					       	DOF2_SetInt(string,"DiaLíder",CofreOrg[level][DiaLider]);
					       	DOF2_SaveFile();

					       	UltimoLoginOrg(para1);
					       	return true;
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD1, "   Esse jogador está off-line.");
						}
				 		return true;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Você não esta autorizado a usar este comando!");
					}
		return true;
	}

	CMD:forceskin(playerid, params[])
	{
	        new para1;
			if(sscanf(params, "u", para1))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /forceskin [ID do Player]");
				return true;
			}
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
       			if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 3000)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo Admin USE: /trabalhar");
					return true;
				}
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
				        if(PlayerInfo[para1][pMembro] < 1)
				        {
				            SendClientMessage(playerid, COLOR_GREY, "Este jogador nao esta em um Emprego / Familia");
				            return true;
				        }
				        new string[128];
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
						{
							SendClientMessage(para1, COLOR_LIGHTBLUE, "* Você foi forçado a mudar o skin pelo Admin MOLE.");
						}
						else
						{
							format(string, sizeof(string), "* Você foi forçado a mudar o skin pelo Admin %s.", PlayerName(playerid));
							SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						}
						format(string, sizeof(string), "* Você forçou o(a) %s Para muda seu skin.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						if(PlayerInfo[para1][pMembro] == 1) { ChosenSkin[para1] = 59; }
				        else if(PlayerInfo[para1][pMembro] == 2) { ChosenSkin[para1] = 121; }
				        else if(PlayerInfo[para1][pMembro] == 3) { ChosenSkin[para1] = 98; }
				        else if(PlayerInfo[para1][pMembro] == 4) { ChosenSkin[para1] = 46; }
				        else if(PlayerInfo[para1][pMembro] == 5) { ChosenSkin[para1] = 174; }
				        else if(PlayerInfo[para1][pMembro] == 6) { ChosenSkin[para1] = 280; }
				        else if(PlayerInfo[para1][pMembro] == 7) { ChosenSkin[para1] = 164; }
				        else if(PlayerInfo[para1][pMembro] == 8) { ChosenSkin[para1] = 186; }
				        else if(PlayerInfo[para1][pMembro] == 22) { ChosenSkin[para1] = 118; }
				        else { return true; }
                        SetPlayerInterior(para1,0);
						new rand = random(sizeof(gInviteSpawns));
						SetPlayerPos(para1, gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]); // Warp the player
						SetPlayerFacingAngle(para1, gInviteSpawns[rand][3]);
						SetPlayerCameraPos(para1,gInviteSpawns[rand][0] + 3, gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
						SetPlayerCameraLookAt(para1,gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
						Controle(para1, 0);
					    SelectChar[para1] = 255;
					    SelectCharID[para1] = PlayerInfo[para1][pMembro];
					    SelectCharPlace[para1] = 1;
					    PlayerInfo[para1][pSkin] = ChosenSkin[para1];
					    SendClientMessage(para1, COLOR_LIGHTRED, "* Use 'Proximo' para selecionar o skin de sua vontade.");
					    SendClientMessage(para1, COLOR_LIGHTRED, "* Se Quizer utilizar esta skin ->, Digite 'Confirma'.");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar este comando!");
			}
			return true;
	}
 	CMD:pularid(playerid, params[])
	{
	    new id;
	    if (CarShopping[playerid] == false) return SendClientMessage(playerid, 0xE60000FF, "Você não está comprando um veículo!");
		if(sscanf(params, "d", id)) return SendClientMessage(playerid, 0xE60000FF, "USE: /pularid [ID do carro]");
		new idcar = id;
		if (idcar < 400 || idcar > 611) return SendClientMessage(playerid, 0xE60000FF, "ID inválido");
		new color1 = CarColor[playerid][0];
		new color2 = CarColor[playerid][1];
		carbrowse[playerid] = GetVehicleModelIDFromID(idcar);
		DestroyVehicle(ShopCar[playerid]);
	    ShopCar[playerid] = CreateVehicle(CarModels[carbrowse[playerid]], VEHSHOW_X, VEHSHOW_Y, VEHSHOW_Z, VEHSHOW_A, color1, color2, 6000000);
	   	SetVehicleVirtualWorld(ShopCar[playerid], playerid);
	   	PutPlayerInVehicle(playerid, ShopCar[playerid], 0);
	   	SetPlayerCameraPos(playerid, PLASHOW_X, PLASHOW_Y, PLASHOW_Z);
	   	SetPlayerCameraLookAt(playerid, VEHSHOW_X, VEHSHOW_Y, VEHSHOW_Z);
	   	return 1;
	}
	CMD:pularnome(playerid, params[])
	{
	    new id[128];
	    if (CarShopping[playerid] == false) return SendClientMessage(playerid, 0xE60000FF, "Você não está comprando um veículo!");
		if(sscanf(params, "s[128]", id)) return SendClientMessage(playerid, 0xE60000FF, "USE: /pularnome [Nome do carro]");
		new namid = GetVehicleModelIDFromName(id);
		if (namid < 400 || namid > 611) return SendClientMessage(playerid, 0xE60000FF, "Nome inválido");
		new color1 = CarColor[playerid][0];
		new color2 = CarColor[playerid][1];
		carbrowse[playerid] = namid-400;
		DestroyVehicle(ShopCar[playerid]);
	    ShopCar[playerid] = CreateVehicle(CarModels[carbrowse[playerid]], VEHSHOW_X, VEHSHOW_Y, VEHSHOW_Z, VEHSHOW_A, color1, color2, 6000000);
	   	SetVehicleVirtualWorld(ShopCar[playerid], playerid);
	   	PutPlayerInVehicle(playerid, ShopCar[playerid], 0);
	   	SetPlayerCameraPos(playerid, PLASHOW_X, PLASHOW_Y, PLASHOW_Z);
	   	SetPlayerCameraLookAt(playerid, VEHSHOW_X, VEHSHOW_Y, VEHSHOW_Z);
	   	return 1;
	}

	CMD:cor(playerid, params[])
	{
	    new color1,color2;
	    if (CarShopping[playerid] == false) return SendClientMessage(playerid, 0xE60000FF, "Você não está comprando um veículo!");
		if(sscanf(params, "dd", color1, color2)) return SendClientMessage(playerid, 0xE60000FF, "USE: /cor [cor 1] [cor 2]");
		if (color1 < 0 || color1 > 126) return SendClientMessage(playerid, 0xE60000FF, "A cor deve ser entre 0 e 126.");
		CarColor[playerid][0] = color1;
		if (color2 < 0 || color2 > 126) return SendClientMessage(playerid, 0xE60000FF, "A cor deve ser entre 0 e 126.");
		CarColor[playerid][1] = color2;
		ChangeVehicleColor(GetPlayerVehicleID(playerid), color1, color2);
		return 1;
	}
	CMD:menuvip(playerid, result[])return ForT:lojavip(playerid, result);
    CMD:lojavip(playerid, result[])
	{
	    new string[1024];
	    format(string, sizeof string, "{01DFD7}Compras »{FFFFFF} Ativar VIP\n{01DFD7}Compras »{FFFFFF} Ativar SÓCIO\n{01DFD7}Compras »{FFFFFF} Ativar SÓCIO POWER\n{01DFD7}Compras »{FFFFFF} Ativar SÓCIO GOLD\n{01DFD7}Compras »{FFFFFF} Ativar SÓCIO PLATINA\n{01DFD7}Compras »{FFFFFF} Ativar ORG-VIP\n{01DFD7}Transferencia »{FFFFFF} Transferir Cash\n{01DFD7}Loja »{FFFFFF} Itens\n{01DFD7}Ativar »{FFFFFF} Cupom de Compra\n{00FF00}Adquirir »{FFFFFF} Cash (Métodos de pagamento)\n{01DFD7}Ajuda »{FFFFFF} Beneficios VIP");
 		new titulo[350];
		format(titulo, sizeof(titulo), "{FFFFFF}Loja Cash | {00ccff}%s {FFFFFF}cash",ConvertCash(PlayerInfo[playerid][pCasher]));
		ShowPlayerDialog(playerid, menuvip, DIALOG_STYLE_LIST, titulo,  string, "Acessar", "Cancelar");
		return 1;
	}
	CMD:menucop(playerid)
	{
		if(PlayerInfo[playerid][pJailed] != 0)
    	{
	   		SendClientMessage(playerid,COLOR_GREY,"Você não pode usar este comando preso !");
	   		return 1;
    	}
    	if (IsACop(playerid))
     	{
	    	if(PlayerToPoint(2,playerid,229.9627,165.1098,1003.0234) || PlayerToPoint(2,playerid,1712.3022,-1640.2500,20.2239)  || PlayerToPoint(2,playerid,255.1995,77.1081,1003.6406) || PlayerToPoint(2,playerid,-1348.3979,500.5638,11.2027)
				|| PlayerToPoint(2,playerid,927.2700,-1038.1577,31.8984) || PlayerToPoint(2,playerid,240.5192,112.7945,1003.2188)  || PlayerToPoint(2,playerid,2266.5007,-137.6130,26.4619))
				{
	             ShowPlayerDialog(playerid, 8930, DIALOG_STYLE_LIST, "Computador Cop´s", "Pegar Equipamentos\nBater o Cartão\nModo ROCAM PM\nArma de Shock\nProcurados\nPresos\nPEGAR TASER", "Ok", "Cancelar");
			     }
			}
		return 1;
	}
	CMD:bolsa(playerid)
	{
	    new string[128];
	    MEGAString[0]=EOS;
		strcat(MEGAString, "Item\tItens\n");
	    format(string, sizeof string, "Garrafa de Amônia\t(%d/1)\n",PlayerInfo[playerid][pGam]);
	    strcat(MEGAString, string);
		format(string, sizeof string, "Folhas de Coca\t(%d/4)\n",PlayerInfo[playerid][pPFc]);
		strcat(MEGAString, string);
		format(string, sizeof string, "Manual Para Criação\t(%d/1)\n",PlayerInfo[playerid][pMcr]);
		strcat(MEGAString, string);
		format(string, sizeof string, "Óxido de Calcio\t(%d/2)\n",PlayerInfo[playerid][pCoc]);
		strcat(MEGAString, string);
		format(string, sizeof string, "Amônia\t(%d/2)\n",PlayerInfo[playerid][pVam]);
		strcat(MEGAString, string);
		format(string, sizeof string, "Soda Caustica\t(%d/4)\n",PlayerInfo[playerid][pVsc]);
		strcat(MEGAString, string);
 		ShowPlayerDialog(playerid, menubolsa, DIALOG_STYLE_LIST, "Bolsa de Itens",MEGAString,"Encontrar", "Sair");
 		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Complete sua Bolsa para poder criar Drogas no Local de Tráfico!");
		return 1;
	}
	CMD:kingh360(playerid)
	{
	    	if(PlayerToPoint(6.0,playerid,203.7803,-43.2660,1001.8047))
            {
                if(GetPlayerMoney(playerid) >= 500000)
				{
                	SendClientMessage(playerid, COLOR_GRAD4, "Escolha seu Telefone:");
                	ShowPlayerDialog(playerid, novotel, DIALOG_STYLE_LIST, "Escolha seu Telefone:", "Laranja\nAzul\nMarron\nPreto\nRosa\n\
					Vermelho\nVerde\nAzul Escuro\nAmarelo\nBranco", "Selecionar", "Sair");
            	}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Você não tem dinheiro o suficiente.");
				}
			}
		return 1;
	}
    CMD:painel(playerid)
	{
	    if (GetOwnedVehicleID(playerid) == INVALID_VEHICLE_ID) return SendClientMessage(playerid, 0xE60000FF, "Você não tem um veículo(Compre um na Concessionária).");
	    new str[128] = "Estacionar\nLocalizar Veículo\nTrancar\nDestrancar\nRetirar Componentes\n{00b3c7}Fechar Painel";
		ShowPlayerDialog(playerid, menuvei, DIALOG_STYLE_LIST, "{c8b483}Painel do Veículo", str, "Selecionar", "Sair");
		return 1;
	}
	CMD:revenderveiculo(playerid)
	{
	    if (GetOwnedVehicleID(playerid) == INVALID_VEHICLE_ID) return SendClientMessage(playerid, 0xE60000FF, "Você não tem um veículo para revender.");
	    if (PlayerToPoint(3, playerid,1672.8180,-1108.7112,24.2059))
	    {
	            new vehicleid = GetOwnedVehicleID(playerid);
			    if (vehicleid == INVALID_VEHICLE_ID) return SendClientMessage(playerid, 0xE60000FF, "Você não tem um veículo.");

			    new vendacarro = GetVehicleCost(vehicleid) / 4;
			    new string[100];

			    format(string, sizeof string, "Tem Certeza Que Quer Vender\n\
				seu carro da Concessionária por\n\
		    	R$%s?", ConvertMoney(vendacarro));

				ShowPlayerDialog(playerid, 199, DIALOG_STYLE_MSGBOX, "Concessionaria - Vender",
				string, "Confirmar", "Cancelar");
				}
		return 1;
	}
    CMD:comprarvei(playerid)
	{
	    if (PlayerToPoint(3, playerid,1672.4163,-1120.3656,24.2059))
	    {
	   	new stringg[35];
        format(stringg, 35, VEH_SAVE_FILE, PlayerName(playerid));
        if(fexist(stringg)) return SendClientMessage(playerid,0xF78181AA,"Você já tem um carro!");
	    if (GetPlayerInterior(playerid) != 0) return SendClientMessage(playerid, 0xE60000FF, "Você não pode estar em um interior"); // To prevent screw ups
		GetPlayerPos(playerid, OrgX[playerid], OrgY[playerid], OrgZ[playerid]);
	    GetPlayerFacingAngle(playerid, OrgA[playerid]);
	    new Float:X,Float:Y;
	    new color1 = CarColor[playerid][0];
		new color2 = CarColor[playerid][1];
	    X = VEHSHOW_X;
	    Y = VEHSHOW_Y;
	   	TogglePlayerControllable(playerid, false);
	   	X -= (10.0 * floatsin(-VEHSHOW_A+90, degrees));
	   	Y -= (10.0 * floatcos(-VEHSHOW_A+90, degrees));
	   	SetPlayerCameraPos(playerid, PLASHOW_X, PLASHOW_Y, PLASHOW_Z);
	   	X += (10.0 * floatsin(-VEHSHOW_A+90, degrees));
	   	Y += (10.0 * floatcos(-VEHSHOW_A+90, degrees));
	   	SetPlayerCameraLookAt(playerid, PLASHOW_X, PLASHOW_Y, PLASHOW_Z);
	   	SetPlayerVirtualWorld(playerid, playerid);
	   	ShopCar[playerid] = CreateVehicle(CarModels[0], VEHSHOW_X, VEHSHOW_Y, VEHSHOW_Z, VEHSHOW_A, color1, color2, 6000000);
	   	SetVehicleVirtualWorld(ShopCar[playerid], playerid);
	   	PutPlayerInVehicle(playerid, ShopCar[playerid], 0);
	   	TogglePlayerControllable(playerid, false);
	   	CarShopping[playerid] = true;
	   	SetPlayerCameraPos(playerid, PLASHOW_X, PLASHOW_Y, PLASHOW_Z);
	   	SetPlayerCameraLookAt(playerid, X, Y, VEHSHOW_Z);
	   	SetTimerEx("BrowseCars", 300, 0, "d", playerid);
	   	PlayerTextDrawShow(playerid, AjudaConce1[playerid]);
	   	PlayerTextDrawShow(playerid, AjudaConce2[playerid]);
	   	ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "ATENÇÃO", "{FF8C00}Quando escolher o veículo, segure {FFFFFF}'CTRL' {FF8C00}para comprá-lo.\n\nSe quiser sair da Concessionária segure {FFFFFF}'F'{FFFFFF}.\n\n{FF8C00}Digite {FFFFFF}/cor {FF8C00}para trocar a cor do veiculo.!\n\n\
  		Digite {FFFFFF}/pularid[id carro] {FF8C00}caso saiba o numero do que deseja!\n\nDigite {FFFFFF}/pularnome[nome carro] {FF8C00}caso saiba o nome do carro que deseja!", "OK", "");
	   	}
		return 1;
	}
	//----------------------------------[setteam]------------------------------------------------
	CMD:settime(playerid, params[])
	{
	        new para1;
			if(sscanf(params, "u", para1))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /settime [ID do Player]");
				return true;
			}
   			new string[128];
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(IsPlayerConnected(para1))
			    {
					//if(!admtrampando[playerid])
						//return SendClientMessage(playerid, COLOR_GRAD1, " Você não pode usar este comando, pois não está em modo trabalho!");

			        if(para1 != INVALID_PLAYER_ID)
			        {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pTempoHospital] = 0;
						SetPlayerSpawn(para1);
						printf("AdmCmd: %s setou %s.", sendername, giveplayer);
						if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
						{
							format(string, sizeof(string), "   Você foi setado por %s", PlayerName(playerid));
							SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						}
						else
						{
							format(string, sizeof(string), "   Você foi setado por %s", PlayerName(playerid));
							SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						}
						format(string, sizeof(string), "   Você ligou %s a sua equipe", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!");
			}
			return true;
	}

//Pedir Contas
	CMD:pedircontas(playerid, params[])
	{
 		if(PlayerInfo[playerid][pMembro] >= 1)
		{
    		DemitirInfoOrg(PlayerName(playerid));
			PlayerInfo[playerid][pMembro] = 0;
			PlayerInfo[playerid][pLider] = 0;
			PlayerInfo[playerid][pCargo] = 0;
			ConnectedToPC[playerid] = 0;
			OnDuty[playerid] = 0;
			EmpregoDuty[playerid] = 0;
			RemoveParedao(playerid);
			RemoveallRoadandSpikes(playerid);
			if(PlayerInfo[playerid][pSex] == 1) { PlayerInfo[playerid][pSkin] = 23; } else { PlayerInfo[playerid][pSkin] = 150; }
			MedicBill[playerid] = 0;
			MedicBill[playerid] = 0;
			SetPlayerToTeamColor(playerid);
			if(PlayerInfo[playerid][pSex] == 1)
		{
		     SetPlayerSkin(playerid, 119);
			 PlayerInfo[playerid][pSkin] = 119;
		}
		else
		{
		     SetPlayerSkin(playerid, 41);
			 PlayerInfo[playerid][pSkin] = 41;
		}
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você pediu as contas, agora você é um Civil novamente!");
			return true;
		}
		else
		{
			SendClientMessage(playerid,COLOR_GREY,"Você não faz parte de nemhuma organização!");
			return true;
		}
	}
	CMD:contaslider(playerid, params[])
	{
		if(PlayerInfo[playerid][pLider] == 0)
    	{
	   		SendClientMessage(playerid,COLOR_GREY,"Você não é líder de nenhuma organização!");
	   		return true;
    	}
    	new string[100];
		format(string, sizeof(string), "AdmCmd: %s pediu contas de Líder da organização:[%s]",PlayerName(playerid), NomeORG(GetPlayerOrg(playerid)));
		BPFLogs("Lideres", string);
    	DemitirInfoOrg(PlayerName(playerid));
		PlayerInfo[playerid][pMembro] = 0;
		RemoveParedao(playerid);
		PlayerInfo[playerid][pLider] = 0;
		PlayerInfo[playerid][pCargo] = 0;
		ConnectedToPC[playerid] = 0;
		OnDuty[playerid] = 0;
		EmpregoDuty[playerid] = 0;
		RemoveallRoadandSpikes(playerid);
		if(PlayerInfo[playerid][pSex] == 1) { PlayerInfo[playerid][pSkin] = 23; } else { PlayerInfo[playerid][pSkin] = 150; }
		MedicBill[playerid] = 0;
		MedicBill[playerid] = 0;
		SetPlayerToTeamColor(playerid);
		if(PlayerInfo[playerid][pSex] == 1)
		{
		     SetPlayerSkin(playerid, 119);
			 PlayerInfo[playerid][pSkin] = 119;
		}
		else
		{
		     SetPlayerSkin(playerid, 41);
			 PlayerInfo[playerid][pSkin] = 41;
		}
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você pediu as contas, agora você é um Civil novamente!");
		return true;
	}

 	CMD:membros(playerid, params[])
	{
		if(GetPlayerOrg(playerid) < 1)
		{
			SendClientMessage(playerid,COLOR_GRAD1,"Você não é membro de uma equipe!");
			return true;
		}
	    new string[128];
	   	SendClientMessage(playerid,GetPlayerColor(playerid),"Membros Online:");
		foreach(Player, i)
		{
			if(GetPlayerOrg(i) == GetPlayerOrg(playerid))
			{
			    if(PlayerInfo[i][pLider] == GetPlayerOrg(playerid))
			    {
			        format(string, sizeof string, "%s: Cargo: LÍDER.", NomePlayer(i));
			    }
			    else if(PlayerInfo[playerid][pOrgVIP] == GetPlayerOrg(playerid))
			    {
			        format(string, sizeof string, "%s: Cargo: %d.[Sócio]", NomePlayer(i), PlayerInfo[i][pCargo]);
			    }
			    else
					format(string, sizeof string, "%s: Cargo: %d.", NomePlayer(i), PlayerInfo[i][pCargo]);
			    SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return true;
	}

	CMD:avh(playerid, result[])
	{
		if(PlayerInfo[playerid][pHelper] < 1)
		{
		    SendClientMessage(playerid, COLOR_GREY, "   Você não é um Helper !");
		    return true;
		}
   		if(!helpertrampando[playerid])
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo de serviço{FFFFFF} (/helpajuda)");
			return true;
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(isnull(result))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USE: (/avh) [texto]");
			return true;
		}
	    new string[128];
		SendClientMessageToAll(COLOR_WHITE, "|________| Aviso dos Helpers |________|");
		if(helpertrampando[playerid])
		{
			format(string, sizeof(string), "Helper %s: %s", sendername, result);
			SendClientMessageToAll(0x55F6ACFF, string);
		}
		return true;
	}
	CMD:avajuda(playerid)
	{
		if(PlayerInfo[playerid][pHelper] < 1)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Você não é um Helper !");
		    return true;
		}
   		if(!helpertrampando[playerid])
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo de serviço{FFFFFF} (/helpajuda)");
			return true;
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
	    new string[128];
		SendClientMessageToAll(COLOR_WHITE, "|________| Aviso dos Helpers |________|");
		if(helpertrampando[playerid])
		{
			format(string, sizeof(string), "Helper %s: Está com Duvidas ? Não lembra do Comando ? use: /duvida.", sendername);
			SendClientMessageToAll(0x55F6ACFF, string);
		}
		return true;
	}
	CMD:av(playerid, result[])
	{
		if(PlayerInfo[playerid][pAdmin] == 0)
		{
		    SendClientMessage(playerid, COLOR_GREY, "   Você não é um Admin!");
		    return true;
		}
		if(isnull(result))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USE: (/av)isar [texto]");
			return true;
		}

	    new string[200];
	   	if(!strcmp(NomePlayer(playerid), "wZAP", true))
				{
				    SendClientMessageToAll(0xFF1493FF, "|_________| {FFFFFF}Admin Aviso{FF1493} |_________|");
					format(string, sizeof(string), "Fundador, %s{BEBEBE}: %s", PlayerName(playerid), result);
				    SendClientMessageToAll(0xFF1493FF,string);
				}
				else if(PlayerInfo[playerid][pAdmin] >= 5000 && PlayerInfo[playerid][pSex] == 1)
				{
				    SendClientMessageToAll(0xFF1493FF, "|_________| {FFFFFF}Admin Aviso{FF1493} |_________|");
					format(string, sizeof(string), "Dono, %s{BEBEBE}: %s", PlayerName(playerid), result);
				    SendClientMessageToAll(0xFF1493FF,string);
                }
                else if(PlayerInfo[playerid][pAdmin] >= 5000 && PlayerInfo[playerid][pSex] == 2)
				{
				    SendClientMessageToAll(0xFF1493FF, "|_________| {FFFFFF}Admin Aviso{FF1493} |_________|");
					format(string, sizeof(string), "Dona, %s{BEBEBE}: %s", PlayerName(playerid), result);
				    SendClientMessageToAll(0xFF1493FF,string);
                }
				else if(PlayerInfo[playerid][pAdmin] >= 3001)
				{
				    SendClientMessageToAll(0xFF1493FF, "|_________| {FFFFFF}Admin Aviso{FF1493} |_________|");
					format(string, sizeof(string), "Diretor, %s{BEBEBE}: %s", PlayerName(playerid), result);
				    SendClientMessageToAll(0xFF1493FF,string);
                }
				else if(PlayerInfo[playerid][pAdmin] >= 3000)
				{
				    SendClientMessageToAll(0xFF1493FF, "|_________| {FFFFFF}Admin Aviso{FF1493} |_________|");
					format(string, sizeof(string), "Gerente, %s{BEBEBE}: %s", PlayerName(playerid), result);
				    SendClientMessageToAll(0xFF1493FF,string);
                }
				else if(PlayerInfo[playerid][pAdmin] >= 1339)
				{
				    SendClientMessageToAll(0xFF1493FF, "|_________| {FFFFFF}Admin Aviso{FF1493} |_________|");
					format(string, sizeof(string), "Supervisor, %s{BEBEBE}: %s", PlayerName(playerid), result);
				    SendClientMessageToAll(0xFF1493FF,string);
                }
                else if(PlayerInfo[playerid][pAdmin] == 1337 || PlayerInfo[playerid][pAdmin] == 1338)
				{
				    SendClientMessageToAll(0xFF1493FF, "|_________| {FFFFFF}Admin Aviso{FF1493} |_________|");
					format(string, sizeof(string), "Encarregado, %s{BEBEBE}: %s", PlayerName(playerid), result);
				    SendClientMessageToAll(0xFF1493FF,string);
                }
				else if(PlayerInfo[playerid][pAdmin] == 3 || PlayerInfo[playerid][pAdmin] == 4 || PlayerInfo[playerid][pAdmin] == 5)
				{
				    SendClientMessageToAll(0xFF1493FF, "|_________| {FFFFFF}Admin Aviso{FF1493} |_________|");
					format(string, sizeof(string), "Administrador, %s{BEBEBE}: %s", PlayerName(playerid), result);
				    SendClientMessageToAll(0xFF1493FF,string);
                }
				else if(PlayerInfo[playerid][pAdmin] >= 2)
				{
				    SendClientMessageToAll(0xFF1493FF, "|_________| {FFFFFF}Admin Aviso{FF1493} |_________|");
					format(string, sizeof(string), "Moderador, %s{BEBEBE}: %s", PlayerName(playerid), result);
				    SendClientMessageToAll(0xFF1493FF,string);
                }
                else
				{
				    SendClientMessageToAll(0xFF1493FF, "|_________| {FFFFFF}Admin Aviso{FF1493} |_________|");
					format(string, sizeof(string), "Estágiario, %s{BEBEBE}: %s", PlayerName(playerid), result);
				    SendClientMessageToAll(0xFF1493FF,string);
	         	}
		return true;
	}
	CMD:avtext(playerid, result[])
	{
		if(PlayerInfo[playerid][pAdmin] < 5000)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Você não tem permissão para usar este comando!");
		    return true;
		}
		if(isnull(result))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USE: /avtext [texto]");
			return true;
		}

	    new string[128];
		format(string, sizeof string, "Você escreveu no TextDraw de aviso: %s.", result);
		SendClientMessage(playerid, COLOR_GRAD1, string);
		return true;
	}

	CMD:limparchat(playerid, result[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
	    if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pAdminTemp] < 1)
		{
	        SendClientMessage(playerid, COLOR_GREY, "Você não é um admin!");
	    	return true;
	    }
		for(new i; i < 100; i++)
		{
			SendClientMessageToAll(COLOR_LIGHTBLUE, " ");
		}
	    new string[128];
		format(string, sizeof(string), "AdmCmd: O admin %s limpou o chat.", PlayerName(playerid));
		SendClientMessageToAll(0xff6347FF, string);
		return true;
	}

//----------------------------------[Wisper]-----------------------------------------------

	CMD:arenadm(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
		if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
		{

       		if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 5000)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo Admin USE: /trabalhar");
				return true;
			}
			else
			{
				SetPlayerPos(playerid,-2313.7085,-1642.2563,483.7031);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "Você Foi Teleportado!");
			SetPlayerInterior(playerid,0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Você não esta autorizado a usar este comando!!");
		}
		return true;
	}
		CMD:esconderijo(playerid, params[])
	{
		if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
		{

       		if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 5000)
			{
				SendClientMessage(playerid, COLOR_GRAD1, " Você não está em modo Admin USE: /jogar");
				return true;
			}
			else
			{
				SetPlayerPos(playerid, 1416.107000,0.268620,1000.926000);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "   Você Foi Teleportado!");
			SetPlayerInterior(playerid,1);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   Você não esta autorizado a usar este comando!!");
		}
		return true;
	}

	CMD:onibus(playerid, params[])
	{
		if(PlayerInfo[playerid][pAdmin] >= 3)
		{
			if(!admtrampando[playerid])
				return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1759.2711,-1849.1093,13.5781);
				LinkVehicleToInterior(tmpcar, 0);
			}
			else
			{
				SetPlayerPos(playerid, 1759.2711,-1849.1093,13.5781);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "Você foi teleportado!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar o comando!");
		}
		return true;
	}

	CMD:entrarcarro(playerid, params[])
	{
	    new testcar,seatid;
		if(sscanf(params, "dd", seatid,testcar))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USE: /entrarcarro [0 - Motorista | 1.2.3 - Passageiro] [carro id]");
			return true;
		}
		if (PlayerInfo[playerid][pAdmin] >= 3)
		{
			if(!admtrampando[playerid])
				return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

			PutPlayerInVehicle(playerid, testcar, seatid);
			SendClientMessage(playerid, COLOR_GRAD1, "Você foi teleportado!");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar este comando!");
		}
		return true;
	}
	CMD:vircarro(playerid, params[])
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new testcar,seatid,playa;
			if(sscanf(params, "udd", playa,seatid,testcar))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: /vircarro [id] [0 - Motorista | 1.2.3 - Passageiro] [carro id]");
				return true;
			}
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
				PutPlayerInVehicle(playa, testcar, seatid);
				SendClientMessage(playa, COLOR_GRAD1, "Você foi teleportado pelo Admin!");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar este comando!");
			}
		}
		return 1;
	}
	CMD:ircarro(playerid, params[])
	{
		new testcar;
		if(sscanf(params, "d", testcar))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USE: /ircarro [carro id]");
			return true;
		}
		if (PlayerInfo[playerid][pAdmin] >= 4)
		{
       		if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 5000)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo Admin USE: /trabalhar");
				return true;
			}
			new Float:cwx2,Float:cwy2,Float:cwz2;
			GetVehiclePos(testcar, cwx2, cwy2, cwz2);
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, cwx2, cwy2, cwz2);
				LinkVehicleToInterior(tmpcar, 0);
			}
			else
			{
				SetPlayerPos(playerid, cwx2, cwy2, cwz2);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "Você foi teleportado!");
			SetPlayerInterior(playerid,0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar este comando!");
		}
		return true;
	}
	CMD:trazerumcarro(playerid, params[])
	{
	    if(IsPlayerConnected(playerid))
	    {
			new plo;
			new intir = GetPlayerInterior(playerid);
			new mundir = GetPlayerVirtualWorld(playerid);
			if(sscanf(params, "d", plo))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /trazerumcarro [carro id]");
				return 1;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
				GetPlayerPos(playerid, plocx, plocy, plocz);
				SetVehiclePos(plo,plocx,plocy+4, plocz); LinkVehicleToInterior(plo, intir); SetVehicleVirtualWorld(plo, mundir);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar este comando!");
			}
		}
		return 1;
	}
	CMD:marcar(playerid, params[])
	{
		if (PlayerInfo[playerid][pAdmin] >= 4)
		{
		    new Float:pos[3];
			GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			SetPVarFloat(playerid, "DestX", pos[0]);
			SetPVarFloat(playerid, "DestY", pos[1]);
			SetPVarFloat(playerid, "DestZ", pos[2]);
			SetPVarInt(playerid, "DestInt", GetPlayerInterior(playerid));
			SendClientMessage(playerid, COLOR_GRAD1, "   Local Marcado Para o Teleporte");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar este comando!");
		}
		return true;
	}
	CMD:irmarca(playerid, params[])
	{
		if (PlayerInfo[playerid][pAdmin] >= 4)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, GetPVarFloat(playerid, "DestX"),GetPVarFloat(playerid, "DestY"),GetPVarFloat(playerid, "DestZ"));
				LinkVehicleToInterior(tmpcar, 0);
			}
			else
			{
				SetPlayerPos(playerid, GetPVarFloat(playerid, "DestX"),GetPVarFloat(playerid, "DestY"),GetPVarFloat(playerid, "DestZ"));
			}
			SendClientMessage(playerid, COLOR_GRAD1, "Você foi teleportado para onde você marcou!");
			SetPlayerInterior(playerid, GetPVarInt(playerid, "DestInt"));
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar este comando!");
		}
		return true;
	}
	CMD:irstad(playerid, params[])
	{

			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, -1435.75, -652.664, 1054.94);
					LinkVehicleToInterior(tmpcar, 0);
				}
				else
				{
					SetPlayerPos(playerid, -1435.75, -652.664, 1054.94);
				}
				SetPlayerInterior(playerid,4);
				SendClientMessage(playerid, COLOR_GRAD1, "Você foi teleportado!");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar este comando!");
			}
			return true;
	}
	CMD:irstad2(playerid, params[])
	{
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, -1376.5557,-743.2819,1051.6790);
					LinkVehicleToInterior(tmpcar, 0);
				}
				else
				{
					SetPlayerPos(playerid, -1376.5557,-743.2819,1051.6790);
				}
				SetPlayerInterior(playerid,4);
				SendClientMessage(playerid, COLOR_GRAD1, "Você foi teleportado!");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar este comando!");
			}
			return true;
	}
	CMD:aviao(playerid, params[])
	{

			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1.71875, 30.4062, 1200.34); LinkVehicleToInterior(tmpcar, 0);
				}
				else
				{
					SetPlayerPos(playerid, 1.71875, 30.4062, 1200.34);
				}
				SetPlayerInterior(playerid,1);
				SendClientMessage(playerid, COLOR_GRAD1, "Você foi teleportado!");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar este comando!");
			}
			return true;
	}
    CMD:obtermateriais(playerid)
	{
	    if(GetPlayerOrg(playerid) != 12 && GetPlayerOrg(playerid) != 13)return SendClientMessage(playerid, COLOR_GRAD1, "Você não é um mafioso.");
		if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você precisa estar fora do veículo.");

        if(donomafia != GetPlayerOrg(playerid))return SendClientMessage(playerid, COLOR_LIGHTBLUE, "Sua organização deve ser dona do territorio da Roda Gigante para pegar materiais.");

	        if(ComMats[playerid] > 0)return SendClientMessage(playerid, COLOR_GRAD1, "Você já tem materiais com você, guarde no BoxVille.");
			ComMats[playerid] = 20;
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você pegou 20 materiais, guarde no BoxVille usando: /guardarmateriais");
	    return true;
	}
	CMD:guardarmateriais(playerid)
	{
	    if(GetPlayerOrg(playerid) != 12 && GetPlayerOrg(playerid) != 13)return SendClientMessage(playerid, COLOR_GRAD1, "Você não é um mafioso.");
	    if(GetPlayerState(playerid) != PLAYER_STATE_PASSENGER)return SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você precisa estar de passageiro para guardar os materiais.");
        if(ComMats[playerid] <= 0)return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem materiais para guardar no BoxVille.");

		new carroid = GetPlayerVehicleID(playerid);
		if(carroid == CarrosYakuza[8] || carroid == CarrosYakuza[9] || carroid == CarrosYakuza[10] && GetPlayerOrg(playerid) == 13)
		{
			if(carroid == CarrosYakuza[8])
			{
			    if(CofreOrg[13][MatBox1] > 2000)return SendClientMessage(playerid, COLOR_LIGHTBLUE, "O BoxVille suporta apenas 2000 materiais..");
				CofreOrg[13][MatBox1] += 20;
			}
			else if(carroid == CarrosYakuza[9])
			{
			    if(CofreOrg[13][MatBox2] > 2000)return SendClientMessage(playerid, COLOR_LIGHTBLUE, "O BoxVille suporta apenas 2000 materiais..");
				CofreOrg[13][MatBox2] += 20;
			}
			else if(carroid == CarrosYakuza[10])
			{
			    if(CofreOrg[13][MatBox3] > 2000)return SendClientMessage(playerid, COLOR_LIGHTBLUE, "O BoxVille suporta apenas 2000 materiais..");
				CofreOrg[13][MatBox3] += 20;
			}

			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você guardou 20 materiais no BoxVille.");

			ComMats[playerid] = 0;
		}
		else if(carroid == CarrosRussa[5] || carroid == CarrosRussa[6] || carroid == CarrosRussa[7] && GetPlayerOrg(playerid) == 12)
		{
			if(carroid == CarrosRussa[5])
			{
			    if(CofreOrg[12][MatBox1] > 2000)return SendClientMessage(playerid, COLOR_LIGHTBLUE, "O BoxVille suporta apenas 2000 materiais..");
				CofreOrg[12][MatBox1] += 20;
			}
			else if(carroid == CarrosRussa[6])
			{
			    if(CofreOrg[12][MatBox2] > 2000)return SendClientMessage(playerid, COLOR_LIGHTBLUE, "O BoxVille suporta apenas 2000 materiais..");
				CofreOrg[12][MatBox2] += 20;
			}
			else if(carroid == CarrosRussa[7])
			{
			    if(CofreOrg[12][MatBox3] > 2000)return SendClientMessage(playerid, COLOR_LIGHTBLUE, "O BoxVille suporta apenas 2000 materiais..");
				CofreOrg[12][MatBox3] += 20;
			}

			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você guardou 20 materiais no BoxVille.");

			ComMats[playerid] = 0;
		}
		Update3d();
		return true;
	}

	CMD:venderkit(playerid, params[])
	{
	    if(GetPlayerOrg(playerid) != 12 && GetPlayerOrg(playerid) != 13)return SendClientMessage(playerid, COLOR_GRAD1, "Você não é um mafioso.");

        new carroid = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(carroid) != 609)
            return SendClientMessage(playerid, COLOR_GRAD2, "Você precisa estar no BoxVille para vender kit.");

		new id, kit, preco;
		if(sscanf(params, "udd", id, kit, preco))return SendClientMessage(playerid, COLOR_GRAD2, "USE: /venderkit [playerid] [kit 1 - 3] [preco]");
		if(preco < 1 || preco > 99999)return SendClientMessage(playerid, COLOR_GRAD2, "O preço deve ficar entre [1 - 99999]");


		if(GetPlayerVehicleID(id) != GetPlayerVehicleID(playerid))
            return SendClientMessage(playerid, COLOR_GRAD2, "Este player não está de passageiro no seu carro.");
	    new string[128];
	    new gstring[128];
		if(GetPlayerOrg(playerid) == 13)
		{
			if(kit == 1)
			{
			    if(carroid == CarrosYakuza[8])
				{
					if(CofreOrg[GetPlayerOrg(playerid)][MatBox1] < 20)return SendClientMessage(playerid, COLOR_GRAD2, "O BoxVille não tem materiais suficientes para este kit. {FFFFFF}necessário (20)");
	                CofreOrg[GetPlayerOrg(playerid)][MatBox1] -= 20;
				}
			    else if(carroid == CarrosYakuza[9])
				{
					if(CofreOrg[GetPlayerOrg(playerid)][MatBox2] < 20)return SendClientMessage(playerid, COLOR_GRAD2, "O BoxVille não tem materiais suficientes para este kit. {FFFFFF}necessário (20)");
	                CofreOrg[GetPlayerOrg(playerid)][MatBox2] -= 20;
				}
			    else if(carroid == CarrosYakuza[10])
				{
					if(CofreOrg[GetPlayerOrg(playerid)][MatBox3] < 20)return SendClientMessage(playerid, COLOR_GRAD2, "O BoxVille não tem materiais suficientes para este kit. {FFFFFF}necessário (20)");
	                CofreOrg[GetPlayerOrg(playerid)][MatBox3] -= 20;
				}
				format(string, sizeof(string), "* O mafioso %s vendeu o kit 1 para %s", NomePlayer(playerid),NomePlayer(id));
				SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				format(gstring, sizeof gstring, "O mafioso %s vendeu o kit 1 para você, por: R$%d", NomePlayer(playerid), preco);
				SendClientMessage(id, COLOR_YELLOW, gstring);

				ResetPlayerWeapons(id);
	            GivePlayerWeapon(id, 24, 120);
	            GivePlayerWeapon(id, 25, 100);
	            GivePlayerWeapon(id, 29, 222);
	            GivePlayerWeapon(id, 30, 250);
	            GivePlayerWeapon(id, 1, 1);
			}
			else if(kit == 2)
			{
			    if(carroid == CarrosYakuza[8])
				{
					if(CofreOrg[GetPlayerOrg(playerid)][MatBox1] < 35)return SendClientMessage(playerid, COLOR_GRAD2, "O BoxVille não tem materiais suficientes para este kit. {FFFFFF}necessário (35)");
	                CofreOrg[GetPlayerOrg(playerid)][MatBox1] -= 35;
				}
			    else if(carroid == CarrosYakuza[9])
				{
					if(CofreOrg[GetPlayerOrg(playerid)][MatBox2] < 35)return SendClientMessage(playerid, COLOR_GRAD2, "O BoxVille não tem materiais suficientes para este kit. {FFFFFF}necessário (35)");
	                CofreOrg[GetPlayerOrg(playerid)][MatBox2] -= 35;
				}
			    else if(carroid == CarrosYakuza[10])
				{
					if(CofreOrg[GetPlayerOrg(playerid)][MatBox3] < 35)return SendClientMessage(playerid, COLOR_GRAD2, "O BoxVille não tem materiais suficientes para este kit. {FFFFFF}necessário (35)");
	                CofreOrg[GetPlayerOrg(playerid)][MatBox3] -= 35;
				}

				format(string, sizeof(string), "* O mafioso %s vendeu o kit 2 para %s", NomePlayer(playerid),NomePlayer(id));
				SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				format(gstring, sizeof gstring, "O mafioso %s vendeu o kit 2 para você, por: R$%d", NomePlayer(playerid), preco);
				SendClientMessage(id, COLOR_YELLOW, gstring);

	            ResetPlayerWeapons(id);
	            GivePlayerWeapon(id, 24, 220);
	            GivePlayerWeapon(id, 25, 200);
	            GivePlayerWeapon(id, 29, 322);
	            GivePlayerWeapon(id, 31, 350);
	            GivePlayerWeapon(id, 34, 15);
	            GivePlayerWeapon(id, 1, 1);

			}
			else if(kit == 3)
			{
			    if(carroid == CarrosYakuza[8])
				{
					if(CofreOrg[GetPlayerOrg(playerid)][MatBox1] < 50)return SendClientMessage(playerid, COLOR_GRAD2, "O BoxVille não tem materiais suficientes para este kit. {FFFFFF}necessário (50)");
	                CofreOrg[GetPlayerOrg(playerid)][MatBox1] -= 50;
				}
			    else if(carroid == CarrosYakuza[9])
				{
					if(CofreOrg[GetPlayerOrg(playerid)][MatBox2] < 50)return SendClientMessage(playerid, COLOR_GRAD2, "O BoxVille não tem materiais suficientes para este kit. {FFFFFF}necessário (50)");
	                CofreOrg[GetPlayerOrg(playerid)][MatBox2] -= 50;
				}
			    else if(carroid == CarrosYakuza[10])
				{
					if(CofreOrg[GetPlayerOrg(playerid)][MatBox3] < 50)return SendClientMessage(playerid, COLOR_GRAD2, "O BoxVille não tem materiais suficientes para este kit. {FFFFFF}necessário (50)");
	                CofreOrg[GetPlayerOrg(playerid)][MatBox3] -= 50;
				}


				format(string, sizeof(string), "* O mafioso %s vendeu o kit 3 para %s", NomePlayer(playerid),NomePlayer(id));
				SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	           	format(gstring, sizeof gstring, "O mafioso %s vendeu o kit 3 para você, por: R$%d", NomePlayer(playerid), preco);
				SendClientMessage(id, COLOR_YELLOW, gstring);

				ResetPlayerWeapons(id);
	            GivePlayerWeapon(id, 24, 420);
	            GivePlayerWeapon(id, 25, 400);
	            GivePlayerWeapon(id, 29, 522);
	            GivePlayerWeapon(id, 31, 550);
	            GivePlayerWeapon(id, 34, 50);
	            GivePlayerWeapon(id, 1, 1);
	            GivePlayerWeapon(id, 4, 1);

			}
		}
		if(GetPlayerOrg(playerid) == 12)
		{
			if(kit == 1)
			{
			    if(carroid == CarrosRussa[5])
				{
					if(CofreOrg[GetPlayerOrg(playerid)][MatBox1] < 20)return SendClientMessage(playerid, COLOR_GRAD2, "O BoxVille não tem materiais suficientes para este kit. {FFFFFF}necessário (20)");
	                CofreOrg[GetPlayerOrg(playerid)][MatBox1] -= 20;
				}
			    else if(carroid == CarrosRussa[6])
				{
					if(CofreOrg[GetPlayerOrg(playerid)][MatBox2] < 20)return SendClientMessage(playerid, COLOR_GRAD2, "O BoxVille não tem materiais suficientes para este kit. {FFFFFF}necessário (20)");
	                CofreOrg[GetPlayerOrg(playerid)][MatBox2] -= 20;
				}
			    else if(carroid == CarrosRussa[7])
				{
					if(CofreOrg[GetPlayerOrg(playerid)][MatBox3] < 20)return SendClientMessage(playerid, COLOR_GRAD2, "O BoxVille não tem materiais suficientes para este kit. {FFFFFF}necessário (20)");
	                CofreOrg[GetPlayerOrg(playerid)][MatBox3] -= 20;
				}
				format(string, sizeof(string), "* O mafioso %s vendeu o kit 1 para %s", NomePlayer(playerid),NomePlayer(id));
				SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				format(gstring, sizeof gstring, "O mafioso %s vendeu o kit 1 para você, por: R$%d", NomePlayer(playerid), preco);
				SendClientMessage(id, COLOR_YELLOW, gstring);

				ResetPlayerWeapons(id);
	            GivePlayerWeapon(id, 24, 120);
	            GivePlayerWeapon(id, 25, 100);
	            GivePlayerWeapon(id, 29, 222);
	            GivePlayerWeapon(id, 30, 250);
	            GivePlayerWeapon(id, 1, 1);
			}
			else if(kit == 2)
			{
			    if(carroid == CarrosRussa[5])
				{
					if(CofreOrg[GetPlayerOrg(playerid)][MatBox1] < 35)return SendClientMessage(playerid, COLOR_GRAD2, "O BoxVille não tem materiais suficientes para este kit. {FFFFFF}necessário (35)");
	                CofreOrg[GetPlayerOrg(playerid)][MatBox1] -= 35;
				}
			    else if(carroid == CarrosRussa[6])
				{
					if(CofreOrg[GetPlayerOrg(playerid)][MatBox2] < 35)return SendClientMessage(playerid, COLOR_GRAD2, "O BoxVille não tem materiais suficientes para este kit. {FFFFFF}necessário (35)");
	                CofreOrg[GetPlayerOrg(playerid)][MatBox2] -= 35;
				}
			    else if(carroid == CarrosRussa[7])
				{
					if(CofreOrg[GetPlayerOrg(playerid)][MatBox3] < 35)return SendClientMessage(playerid, COLOR_GRAD2, "O BoxVille não tem materiais suficientes para este kit. {FFFFFF}necessário (35)");
	                CofreOrg[GetPlayerOrg(playerid)][MatBox3] -= 35;
				}

				format(string, sizeof(string), "* O mafioso %s vendeu o kit 2 para %s", NomePlayer(playerid),NomePlayer(id));
				SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				format(gstring, sizeof gstring, "O mafioso %s vendeu o kit 2 para você, por: R$%d", NomePlayer(playerid), preco);
				SendClientMessage(id, COLOR_YELLOW, gstring);

	            ResetPlayerWeapons(id);
	            GivePlayerWeapon(id, 24, 220);
	            GivePlayerWeapon(id, 25, 200);
	            GivePlayerWeapon(id, 29, 322);
	            GivePlayerWeapon(id, 31, 350);
	            GivePlayerWeapon(id, 34, 15);
	            GivePlayerWeapon(id, 1, 1);

			}
			else if(kit == 3)
			{
			    if(carroid == CarrosRussa[5])
				{
					if(CofreOrg[GetPlayerOrg(playerid)][MatBox1] < 50)return SendClientMessage(playerid, COLOR_GRAD2, "O BoxVille não tem materiais suficientes para este kit. {FFFFFF}necessário (50)");
	                CofreOrg[GetPlayerOrg(playerid)][MatBox1] -= 50;
				}
			    else if(carroid == CarrosRussa[6])
				{
					if(CofreOrg[GetPlayerOrg(playerid)][MatBox2] < 50)return SendClientMessage(playerid, COLOR_GRAD2, "O BoxVille não tem materiais suficientes para este kit. {FFFFFF}necessário (50)");
	                CofreOrg[GetPlayerOrg(playerid)][MatBox2] -= 50;
				}
			    else if(carroid == CarrosRussa[7])
				{
					if(CofreOrg[GetPlayerOrg(playerid)][MatBox3] < 50)return SendClientMessage(playerid, COLOR_GRAD2, "O BoxVille não tem materiais suficientes para este kit. {FFFFFF}necessário (50)");
	                CofreOrg[GetPlayerOrg(playerid)][MatBox3] -= 50;
				}


				format(string, sizeof(string), "* O mafioso %s vendeu o kit 3 para %s", NomePlayer(playerid),NomePlayer(id));
				SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

	           	format(gstring, sizeof gstring, "O mafioso %s vendeu o kit 3 para você, por: R$%d", NomePlayer(playerid), preco);
				SendClientMessage(id, COLOR_YELLOW, gstring);

				ResetPlayerWeapons(id);
	            GivePlayerWeapon(id, 24, 420);
	            GivePlayerWeapon(id, 25, 400);
	            GivePlayerWeapon(id, 29, 522);
	            GivePlayerWeapon(id, 31, 550);
	            GivePlayerWeapon(id, 34, 50);
	            GivePlayerWeapon(id, 1, 1);
	            GivePlayerWeapon(id, 4, 1);

			}
		}
		Update3d();
		return true;
	}
	CMD:pedreira(playerid)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1338)
			{
			    if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 3000)
				{
				SendClientMessage(playerid, COLOR_GRAD1, "* ERRO: Você não está em modo trabalho, use: /trabalhar");
				return 1;
				}
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 828.2853,1143.3212,28.4200); LinkVehicleToInterior(tmpcar, 0);
				}
				else
				{
					SetPlayerInterior(playerid,0);
					SetPlayerVirtualWorld(playerid,0);
					SetPlayerPos(playerid,828.2853,1143.3212,28.4200);
					SetPlayerFacingAngle(playerid,226.0);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Você Foi Teleportado!");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!!");
			}
		}
		return 1;
	}
	CMD:irpos(playerid, params[])
	{
		if(PlayerInfo[playerid][pAdmin] < 1337)return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando!");
	    new Float:tox, Float:toy, Float:toz;
	    if(sscanf(params, "fff", tox, toy, toz))return SendClientMessage(playerid, COLOR_GRAD2, "USE: /irpos [X] [Y] [Z]");
	    SetPlayerPos(playerid, tox, toy, toz);
        SendClientMessage(playerid, 0x9fa4e8F6, "Posição setada!");
		return 1;
	}
	CMD:irsom(playerid, params[])
	{
		if (PlayerInfo[playerid][pAdmin] < 1337) return 1;
		new id;
	    if(sscanf(params, "d", id))return SendClientMessage(playerid, COLOR_GRAD2, "USE: /irsom [idsom]");
		if(SomInfo[id][somCreated])
		{
	    	SetPlayerPos(playerid, SomInfo[id][somX], SomInfo[id][somY], SomInfo[id][somZ]);
	    	SendClientMessage(playerid, COLOR_GRAD2, "Você foi teleportado.");
		}
		else SendClientMessage(playerid, COLOR_GRAD2, "Não existe um som com este id.");
	    return true;
	}
	CMD:destruirsom(playerid, params[])
	{
		if (PlayerInfo[playerid][pAdmin] < 1337) return 1;
		new id;
	    if(sscanf(params, "d", id))return SendClientMessage(playerid, COLOR_GRAD2, "USE: /destuirsom [idsom]");
	    if(SomInfo[id][somCreated])
		{
			destroySound(id);
	    	SendClientMessage(playerid, COLOR_GRAD2, "Você destruiu o Som.");
		}
		else SendClientMessage(playerid, COLOR_GRAD2, "Não existe um som com este id.");
	    return true;
	}
	CMD:coordenadas(playerid)
	{
	    if (PlayerInfo[playerid][pAdmin] < 1337) return SendClientMessage(playerid, COLOR_GREY, "Você não pode usar este comando");
		new Float:X, Float:Y, Float:Z, Float:Angle;
		new string[128];
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, Angle);
		format(string,sizeof(string),"Coordenadas, X:%f Y:%f Z:%f A:%f",X,Y,Z,Angle);
		SendClientMessage(playerid,0xFFFFFFAA,string);
		return 1;
	}
	CMD:crashar(playerid, params[])
    {
        if (PlayerInfo[playerid][pAdmin] < 5000) return 1;
		if(sscanf(params, "u", giveplayerid))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USE: /crashar [id]");
			return 1;
		}
		if(IsPlayerConnected(giveplayerid))
		{
       			if(giveplayerid != INVALID_PLAYER_ID)
		        {
		            new string[128];
					CrashPlayer(giveplayerid);
					format(string,sizeof(string),"Você fez o player %s crashar",PlayerName(giveplayerid));
					return SendClientMessage(playerid, COLOR_YELLOW, string);
				}
		}
		return 1;
	}
	CMD:abastecercarro(playerid, params[])
	{
		    if(!IsAMec(playerid))
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Você não é um Mecânico/Detran!");
		        return true;
		    }
		   	new playa;
			new moneyy;
			if(sscanf(params, "ud", playa, moneyy))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /abastecercarro [ID do Player] [preco]");
				return true;
			}
			if(moneyy < 1 || moneyy > 1000) { SendClientMessage(playerid, COLOR_GREY, "   Preco minimo 1, preco maximo 1000!"); return true; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, playa)&& IsPlayerInAnyVehicle(playa))
					{
                	    new string[128];
					    if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "   Nao posso fazer isso!"); return true; }
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Você ofereceu ao(a) %s para re-abastecer o carro dele(a) por R$%d .",giveplayer,moneyy);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Mecânico %s quer re-abastecer seu carro por R$%d, (Digite /aceitar abastecimento) para aceitar.",sendername,moneyy);
						SendClientMessage(playa, COLOR_LIGHTBLUE, string);
						RefillOffer[playa] = playerid;
						RefillPrice[playa] = moneyy;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Player nao esta perto de Você ou nao esta no carro.");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Jogador offline.");
			}
			return true;
	}

	CMD:reparar(playerid, params[])
	{
            if(!IsAMec(playerid))
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Você não é um Mecânico!");
		        return true;
		    }
		   	new playa;
			new moneyy;
			if(sscanf(params, "ud", playa, moneyy))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /reparar [ID do Player] [preco]");
				return true;
			}
			if(moneyy < 1 || moneyy > 1000) { SendClientMessage(playerid, COLOR_GREY, "   Preco minimo 1, preco maximo 1000!"); return true; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, playa)&& IsPlayerInAnyVehicle(playa))
					{
                	    new string[128];
					    if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "  Não posso fazer isso!"); return true; }
				    	GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Você ofereceu ao(a) %s para concertar seu carro por R$%d .",giveplayer,moneyy);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Mêcanico %s quer reparar seu carro por R$%d, (Digite /aceitar mecanico) para aceitar.",sendername,moneyy);
						SendClientMessage(playa, COLOR_LIGHTBLUE, string);
						RepairOffer[playa] = playerid;
						RepairPrice[playa] = moneyy;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Este jogador nao esta perto de Você ou nao esta no carro.");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   O Jogador esta offline.");
			}
			return true;
	}
	CMD:ir(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
	        new plo;
			if(sscanf(params, "u", plo))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /ir [id/nick]");
				return 1;
			}
    	    new string[128];
			new Float:plocx,Float:plocy,Float:plocz;
			new giveplayername[MAX_PLAYER_NAME];
			if (IsPlayerConnected(plo))
			{
			    if(plo != INVALID_PLAYER_ID)
			    {
					if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1 || PlayerInfo[playerid][pHelper] >=1)
					{
					    if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pAdminTemp] < 1 && !helpertrampando[playerid])
					    {
					        return SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo de ajuda !");
					    }
       				 	if(WatchingTV[plo] == 1)
	    			 	{
	    					SendClientMessage(playerid, COLOR_GREY, "Este administrador está em modo de /tv e você não pode ir até ele");
	    					return 1;
	    				}
       					if(PlayerInfo[playerid][pAdmin] > 0 && PlayerInfo[playerid][pAdminTemp] > 0 && !admtrampando[playerid])
							return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

						if(PlayerInfo[plo][pAdmin] > 1337 && PlayerInfo[playerid][pAdmin] < 3000)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode ir em um Admin Dono/sub !");
							return true;
						}
						if(Spectate[playerid] != 255)
						{
							Spectate[playerid] = 256;
						}
						GetPlayerPos(plo, plocx, plocy, plocz);
						if(PlayerInfo[plo][pInt] > 0)
						{
							SetPlayerInterior(playerid,PlayerInfo[plo][pInt]);
							PlayerInfo[playerid][pInt] = PlayerInfo[plo][pInt];
							PlayerInfo[playerid][pLocal] = PlayerInfo[plo][pLocal];
							HouseEntered[playerid] = HouseEntered[plo];
							storeexit[playerid] = storeexit[plo];
						}
						if(PlayerInfo[playerid][pInt] == 0)
						{
							SetPlayerInterior(playerid,0);
							SetPlayerVirtualWorld(playerid,0);
						}
						if(plocz > 530.0 && PlayerInfo[plo][pInt] == 0) //the highest land point in sa = 526.8
						{
							SetPlayerInterior(playerid,1);
							PlayerInfo[playerid][pInt] = 1;
						}
						if (GetPlayerState(playerid) == 2)
						{
							SetPlayerInterior(playerid,GetPlayerInterior(plo));
					   		SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(plo));
							new tmpcar = GetPlayerVehicleID(playerid);
							SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
						}
						else
						{
					  		SetPlayerInterior(playerid,GetPlayerInterior(plo));
				    	   	SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(plo));
							SetPlayerPos(playerid,plocx,plocy+2, plocz);
						}
						if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
						{
							GetPlayerName(playerid, playername, sizeof(playername));
							GetPlayerName(plo, giveplayername, sizeof(giveplayername));
					   		format(string, sizeof(string), "*Administrador: %s, veio até sua posição!", playername);
					   		SendClientMessage(plo, 0xebc898FF, string);
						}
						else
						{
							GetPlayerName(playerid, playername, sizeof(playername));
							GetPlayerName(plo, giveplayername, sizeof(giveplayername));
			            	format(string, sizeof(string), "Helper: %s, veio até sua posição!", playername);
					   		SendClientMessage(plo, 0xebc898FF, string);
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Você não é um admin ou helper");
					}
			  	}
			}
			return 1;
	}
	CMD:aj(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
	        new plo;
			if(sscanf(params, "u", plo))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /aj [id/nick]");
				return 1;
			}
    	    new string[128];
			new Float:plocx,Float:plocy,Float:plocz;
			new giveplayername[MAX_PLAYER_NAME];
			if (IsPlayerConnected(plo))
			{
			    if(plo != INVALID_PLAYER_ID)
			    {
					if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1 || PlayerInfo[playerid][pHelper] >=1)
					{
					    if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pAdminTemp] < 1 && !helpertrampando[playerid])
					    {
					        return SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo de ajuda !");
					    }
       				 	if(WatchingTV[plo] == 1)
	    			 	{
	    					SendClientMessage(playerid, COLOR_GREY, "Este administrador está em modo de /tv e você não pode ir até ele");
	    					return 1;
	    				}
       					if(PlayerInfo[playerid][pAdmin] > 0 && PlayerInfo[playerid][pAdminTemp] > 0 && !admtrampando[playerid])
							return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

						if(PlayerInfo[plo][pAdmin] > 1337 && PlayerInfo[playerid][pAdmin] < 3000)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode ir em um Admin Dono/sub !");
							return true;
						}
						if(Spectate[playerid] != 255)
						{
							Spectate[playerid] = 256;
						}
						GetPlayerPos(plo, plocx, plocy, plocz);
						if(PlayerInfo[plo][pInt] > 0)
						{
							SetPlayerInterior(playerid,PlayerInfo[plo][pInt]);
							PlayerInfo[playerid][pInt] = PlayerInfo[plo][pInt];
							PlayerInfo[playerid][pLocal] = PlayerInfo[plo][pLocal];
							HouseEntered[playerid] = HouseEntered[plo];
							storeexit[playerid] = storeexit[plo];
						}
						if(PlayerInfo[playerid][pInt] == 0)
						{
							SetPlayerInterior(playerid,0);
							SetPlayerVirtualWorld(playerid,0);
						}
						if(plocz > 530.0 && PlayerInfo[plo][pInt] == 0) //the highest land point in sa = 526.8
						{
							SetPlayerInterior(playerid,1);
							PlayerInfo[playerid][pInt] = 1;
						}
						if (GetPlayerState(playerid) == 2)
						{
							SetPlayerInterior(playerid,GetPlayerInterior(plo));
					   		SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(plo));
							new tmpcar = GetPlayerVehicleID(playerid);
							SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
						}
						else
						{
					  		SetPlayerInterior(playerid,GetPlayerInterior(plo));
				    	   	SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(plo));
							SetPlayerPos(playerid,plocx,plocy+2, plocz);
						}
						if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
						{
							GetPlayerName(playerid, playername, sizeof(playername));
							GetPlayerName(plo, giveplayername, sizeof(giveplayername));
							format(string, 128, "AdmAviso: %s foi até %s para ajudar-lo!",playername, giveplayername);
                            ABroadCast(0xC2CA7FFF,string,1);
                            HelperBroadCast2(0xC2CA7FFF,string,1);
					   		format(string, sizeof(string), "*Admin %s foi até %s.", playername,giveplayername);
			           		SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					   		format(string, sizeof(string), "*Admin %s veio até %s.", playername,giveplayername);
			            	SendClientMessageInRange(30.0, plo, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						else
						{
							GetPlayerName(playerid, playername, sizeof(playername));
							GetPlayerName(plo, giveplayername, sizeof(giveplayername));
							format(string, 128, "AdmAviso: %s foi até %s para ajudar-lo!",playername, giveplayername);
                            ABroadCast(0xC2CA7FFF,string,1);
                            HelperBroadCast2(0xC2CA7FFF,string,1);
					   		format(string, sizeof(string), "*Helper %s foi até %s.", playername,giveplayername);
			           		SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					   		format(string, sizeof(string), "*Helper %s veio até %s.", playername,giveplayername);
			            	SendClientMessageInRange(30.0, plo, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Você não é um admin ou helper");
					}
			  	}
			}
			return 1;
	}
	CMD:colete(playerid, params[])
	{
		if(IsPlayerConnected(playerid))
		{
			if(!IsACop(playerid))
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não é um Policial!");
				return true;
			}
			if(ColocarColete[playerid] == 0)
			{
            	new id = CountAttachedObjects(playerid);
            	SetPlayerAttachedObject(playerid, id, 19142, 1, 0.1, 0.05, 0.0);
				SetPlayerAttachedObjectEx(19142,Vaga_Colete,playerid,id);
				SendClientMessage(playerid, 0xFFFFFFFF, "SERVER: Voce colocou seu Colete!");
				ColocarColete[playerid] = 1;
			}
			else if(ColocarColete[playerid] == 1)
			{
			    RemovePlayerAttachedObjectEx(playerid,Vaga_Colete);
				SendClientMessage(playerid, 0xFFFFFFFF, "SERVER: Voce retirou seu Colete!");
				ColocarColete[playerid] = 0;
			}
		}
		return 1;
	}
CMD:usargorro(playerid, params[])
{
    if(UsandoGorro[playerid]) return SendClientMessage(playerid, -1, "[ Erro ] Você já está usando o gorro!");
    SendClientMessage(playerid, -1, "Agora você está usando o gorro!");
    DarGorro(playerid);
    UsandoGorro[playerid] = true;
    return 1;
}

CMD:tirargorro(playerid, params[])
{
    if(!UsandoGorro[playerid]) return SendClientMessage(playerid, -1, "[ Erro ] Você não está usando o gorro!");
    SendClientMessage(playerid, -1, "Agora você não está mais usando o gorro!");
    RemoverGorro(playerid);
    UsandoGorro[playerid] = false;
    return 1;
}
	CMD:criarchave(playerid, params[])
	{
		if (PlayerInfo[playerid][pAdmin] >= 1337)
		{
    	    new string[128];
		    new car;
			if(sscanf(params, "d", car))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: /criarchave [veiculo id]");
				return 1;
			}
			HireCar[playerid] = car;
			format(string, sizeof(string), "Chave criada agora voce pode trancar o veiculo %d.",car);
			SendClientMessage(playerid, COLOR_GRAD4, string);
			SendClientMessage(playerid, COLOR_WHITE, "DICA: Use /trancar");
			return 1;
		}
		return 1;
	}
	CMD:versms(playerid, params[])
	{
	    if(PlayerInfo[playerid][pAdmin] < 1337)
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Você não esta autorizado a usar este comando!");
		    return 1;
		}
		if (!VerSMS[playerid])
		{
			VerSMS[playerid] = true;
			SendClientMessage(playerid, COLOR_GRAD2, "Você agora verá todos os /sms enviados no servidor");
		}
		else if (VerSMS[playerid])
		{
			VerSMS[playerid] = false;
			SendClientMessage(playerid, COLOR_GRAD2, "Você não verá mais os /sms");
		}
		return 1;
	}

	CMD:parsecreto(playerid, params[])
	{
	    if(PlayerInfo[playerid][pAdmin] < 5000)
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Você não esta autorizado a usar este comando!");
		    return 1;
		}
		if (!VerPar[playerid])
		{
			VerPar[playerid] = true;
			SendClientMessage(playerid, COLOR_GRAD2, "Você agora verá todos os /par enviados no servidor");
		}
		else if (VerPar[playerid])
		{
			VerPar[playerid] = false;
			SendClientMessage(playerid, COLOR_GRAD2, "Você não verá mais os /par");
		}
		return 1;
	}
	CMD:roubarcarro(playerid)
	{
 		if(PlayerInfo[playerid][pEmprego] == 13)
		{
  			if(PlayerOnMission[playerid] > 0)
	    	{
		        SendClientMessage(playerid, COLOR_GREY, "Você já está com um carro roubado, venda ele primeiro !");
		        return 1;
		    }
	     	if(PlayerInfo[playerid][pCarTime] == 0)
	     	{
	            GameTextForPlayer(playerid, "~w~Vender Carro ~n~~r~Largue o Carro no Esconderijo", 5000, 1);
	            CP[playerid] = 80;
	           	SetPlayerCheckpoint(playerid, 2438.9133, -2465.0371, 13.2292,8.0);
	      	}
	      	else
	     	{
	         	SendClientMessage(playerid, COLOR_GREY, "Você já vendeu um carro, espere o tempo necessário para roubar novamente !");
		    }
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Você não é Ladrão De Carros !");
		}
		return 1;
	}
 CMD:explosivao(playerid)
	{
	    if(PlayerInfo[playerid][pExplosivos] > 0)
	    {
	        new string[128];
	        if(PlayerInfo[playerid][ComExplosivo])
	            return SendClientMessage(playerid, COLOR_GRAD1, "Você ja esta com o explosivo na mão.");
         	new id = CountAttachedObjects(playerid);
	        SetPlayerAttachedObject(playerid,id ,1654,6,0.032999,0.000000,-0.173999,-28.900001,-9.599999,5.199999,1.000000,1.000000,1.000000);
            SetPlayerAttachedObjectEx(1654,Vaga_Roubo,playerid,id);
			PlayerInfo[playerid][ComExplosivo] = true;
			format(string, sizeof string, "* %s pegou seu explosivo.", NomePlayer(playerid));
			SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_GRAD1, "*** Você pegou o explosivo, para guardar use: /guardarexplosivo.");
			SetPlayerSpecialAction(playerid, 25);
		}
		else
		    SendClientMessage(playerid, COLOR_GRAD1, "Você não tem um explosivo, compre um no mercado negro.");
	    return 1;
	}
	CMD:guardarexplosivo(playerid)
	{
	    if(PlayerInfo[playerid][pExplosivos] > 0)
	    {
	        new string[128];
	        if(!PlayerInfo[playerid][ComExplosivo])
	            return SendClientMessage(playerid, COLOR_GRAD1, "Você não esta com um explosivo na mão.");
            RemovePlayerAttachedObjectEx(playerid, Vaga_Roubo);
		    PosicionarObjetos(playerid, Vaga_Roubo, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		    RemovePlayerAttachedObject(playerid,6);
		    PlayerInfo[playerid][ComExplosivo] = false;
			format(string, sizeof string, "* %s guardou seu explosivo.", NomePlayer(playerid));
			SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_GRAD1, "*** Você guardou o explosivo abra seu inventário para usá-lo!");
			SetPlayerSpecialAction(playerid, 0);
	        for(new i = 0; i<75; i++)
			 	    {
			 	 	   if(InventarioInfo[playerid][i][iSlot] == 19382)
			 		   {
			 			   InventarioInfo[playerid][i][iSlot] = 1654;
			 		       InventarioInfo[playerid][i][iUnidades] = 1;
			 		       return 1;
			 		   }
			 	    }
		}
		else
		    SendClientMessage(playerid, COLOR_GRAD1, "Você não tem um explosivo, compre um no mercado negro.");
	    return 1;
	}
	stock OrgsRoubo(playerid)
	{
		switch(GetPlayerOrg(playerid))
		{
  			case 5,6,8,14,17,18,19,21,12,13,15,22,23,24,25,26:
  			    return 1;
		}
	    return 0;
	}
	stock OrgsGang(playerid)
	{
		switch(GetPlayerOrg(playerid))
		{
  			case 5,14,17,18,19,21,6,26,28:
  			    return 1;
		}
	    return 0;
	}
	stock OrgMafia(playerid)
	{
		switch(GetPlayerOrg(playerid))
		{
  			case 12,13:
  			    return 1;
		}
	    return 0;
	}
	stock Orgassa(playerid)
	{
		switch(GetPlayerOrg(playerid))
		{
  			case 8,22:
  			    return 1;
		}
	    return 0;
	}
	stock OrgsMoto(playerid)
	{
		switch(GetPlayerOrg(playerid))
		{
  			case 24,25:
  			    return 1;
		}
	    return 0;
	}
	stock OrgsTerro(playerid)
	{
		switch(GetPlayerOrg(playerid))
		{
  			case 15,23:
  			    return 1;
		}
	    return 0;
	}
	stock OrgsNeutra(playerid)
	{
		switch(GetPlayerOrg(playerid))
		{
  			case 4,9,10,20:
  			    return 1;
		}
	    return 0;
	}
	stock CountCops()
	{
	    new count = 0;
	    foreach(Character, i){
	        if(IsACop(i))count++;
	    }
	    return count;
	}

	CMD:consertarcaixa(playerid)
	{
	    if(!IsACop(playerid))
     		return SendClientMessage(playerid, COLOR_GREY, "Você não é um policial!");

		new
			caixa_id
		;
		if(!(caixa_id=GetPlayerCaixa(playerid)))return SendClientMessage(playerid, COLOR_GRAD1, "Você não está perto de nenhum Banco 24 horas.");

        if(CaixaInfo[caixa_id][Caixa_Roubada])
        {
			new
				Float:px, Float:py, Float:pz,
				Float:rx, Float:ry, Float:rz
				;

			foreach(Player, i)
			{
			    if(GetPVarInt(playerid, "Consertando") == caixa_id)
			        return SendClientMessage(playerid, COLOR_GRAD1, "Alguem já está consertando este caixa!");
			}

			GetDynamicObjectPos(CaixaInfo[caixa_id][Caixa_Object], px, py, pz);
			GetDynamicObjectRot(CaixaInfo[caixa_id][Caixa_Object], rx, ry, rz);
			GetXYInFrontOfCaixa(CaixaInfo[caixa_id][Caixa_Object], px, py, 0.9);
			SetPlayerPos(playerid, px, py, pz);
			SetPlayerFacingAngle(playerid, rz);

			SetPVarInt(playerid, "Consertando", caixa_id);

			ApplyAnimation(playerid,"BOMBER","BOM_Plant_Loop",4.0,1,0,0,0,0);
			SetTimerEx("ConsertarCaixa", 40*1000, 0, "dd", playerid, GetPlayerCaixa(playerid));

            SetTimerEx(#SetAnimRoubo, 500, 0, "d", playerid);

            new string[128];
	        GetPlayerName(playerid,sendername,sizeof(sendername));
	 		format(string, sizeof(string), "* Oficial %s está consertando o caixa eletrônico!", sendername);
			SendClientMessageInRange(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SendClientMessage(playerid, GetPlayerColor(playerid), " - Você está tentando consertar este caixa eletrônico, aguarde 40 segundos...");
			antihands[playerid] = 1;
			GameTextForPlayer(playerid, "~g~Consertando, aguarde...", 5000, 1);
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Este caixa não foi roubado!");
		return 1;
	}
BPF::TeleArenaMotocros(playerid)
{
    if(PlayerToPoint(0.5, playerid, Evx[playerid], Evy[playerid], Evz[playerid]))
    {
        GameTextForPlayer(playerid, "~y~Motocros Stunt", 5000, 1);
        SetPlayerPos(playerid, -1348.2019,1654.8229,1052.5313);
        SetPlayerFacingAngle(playerid, 143.5108);
        SetPlayerInterior(playerid, 14);
        SetCameraBehindPlayer(playerid);
        StopAudioStreamForPlayer(playerid);
        SavArmasLocais(playerid);
        GivePlayerMoney(playerid, -1000);
        return 1;
    }
    else
    {
        SendClientMessage(playerid,0xF78181AA,"Obs: Você não esta mais no local onde digito o COMANDO!");
        return 1;
    }
}
BPF::ConsertarCaixa(playerid, caixa_id)
{
	if(GetPlayerCaixa(playerid) != GetPVarInt(playerid, "Consertando"))
	{
	    SetPVarInt(playerid, "Consertando", 0);
	    return GameTextForPlayer(playerid, "~r~Voce nao esta no caixa que estava consertando", 5000, 1);
	}
	if(CaixaInfo[caixa_id][Caixa_Roubada] && IsPlayerConnected(playerid))
	{
	    new string[128];

	    format(string, sizeof string, "*Você consertou este caixa eletronico, e ganhou 10 por cento do dinheiro que estava no chão! (R$%d)", CaixaInfo[caixa_id][Caixa_Dinheiro]/10);
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

	    GivePlayerMoney(playerid, CaixaInfo[caixa_id][Caixa_Dinheiro]/10);

	    format(string, sizeof string, "%s: %s conseguiu consertar um caixa eletrônico da cidade!", GetOrgName(GetPlayerOrg(playerid)), NomePlayer(playerid));
	    SendClientMessageToAll(GetPlayerColor(playerid), string);

	    ClearAnimations(playerid);

    	RestoreCaixa(caixa_id);
    	SetPVarInt(playerid, "Consertando", 0);
	}
	return 1;
}
 CMD:roubar(playerid)
	{
        new string[128];
		new Float:life;
        new Float:colete;
		if(IsACop(playerid))
		{
		   return 1;
		}
		if(GetPlayerOrg(playerid) == 7)
		{
		   return 1;
		}
		if(GetPlayerOrg(playerid) == 4)
		{
		   return 1;
		}
		if(roubando[playerid] == 1)
	    {
	   		SendClientMessage(playerid, COLOR_GRAD5, "Você ja está roubando algum lugar.");
	    	return 1;
		}
        if(PlayerInfo[playerid][pAdmin] >= 1 && PlayerInfo[playerid][pAdmin] <= 4)
        {
	        SendClientMessage(playerid, COLOR_GRAD1, "Você é um admin, não pode roubar !");
            return 1;
        }
        if(PlayerInfo[playerid][pExplosivos] < 1)return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem um explosivo, compre um no mercado negro.");
        if(!PlayerInfo[playerid][ComExplosivo])return SendClientMessage(playerid, COLOR_GRAD1, "Você não esta com o explosivo em mãos, pegue em seu inventário.");
		if(PlayerToPoint(1.0,playerid, 2144.1604,1641.3688,993.5761))
		{
	    	if(roubobanco == 1)
	    	{
	   			SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma tentativa de roubo nesse cofre.");
	    		return 1;
	    	}
	    	if(temporoubobanco == 1)
	    	{
	   			SendClientMessage(playerid,COLOR_GREY,"Já roubaram o cofre do banco espere 5 minutos para roubar de novo !");
	    		return 1;
	    	}
			GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            format(string, sizeof(string), "[Assalto ao Cofre]: %s[%d] e os %s estão tentando roubar o cofre da empresa Banco", playername, playerid,NomeORG(playerid));
            SendClientMessageToAll(COLOR_LIGHTRED, string);
			SendClientMessage(playerid, COLOR_GRAD5, "Espere 90 segundos para terminar de roubar o Banco.");
			SendClientMessage(playerid, COLOR_GRAD5, "Para cancelar o roubo digite: /pararroubo.");
			PlayerInfo[playerid][pExplosivos] --;
            PlayerInfo[playerid][ComExplosivo] = false;
			format(string, sizeof(string), "[ALERTA COPS] %s[%d] DETOUNOU O COFRE E ESTÁ TENTANDO ROUBAR O BANCO(LS) !", playername, playerid);
			SendFamilyMessage(1, COLOR_DBLUE, string);
            SendFamilyMessage(2, COLOR_DBLUE, string);
            SendFamilyMessage(11, COLOR_DBLUE, string);
            SendFamilyMessage(16, COLOR_DBLUE, string);
            SendFamilyMessage(3, COLOR_DBLUE, string);
            SendFamilyMessage(33, COLOR_DBLUE, string);
			SetPlayerCriminal(playerid,255, "Tentativa de roubo ao Banco LS");
			WantedPoints[playerid] += 1;
            roubando[playerid] = 1;
            ProvocoBanco[playerid] = 1;
            roubobanco = 1;
            temporoubobanco = 1;
            SetTimer("Aroubo", 300000, 0);
        	tempobanco = SetTimerEx("RouboBanco", 92000, 0, "i", playerid);
            GetPlayerHealth(playerid,life);
            GetPlayerArmour(playerid,colete);
            new Float:x,Float:y,Float:z;
	    	GetPlayerPos(playerid,x,y,z);
    		PlayerPlaySound(playerid, 1159, x, y, z);
    		SetPlayerHealth(playerid,life);
            SetPlayerArmour(playerid,colete);
    		TempoContagem[playerid] = SetTimerEx("ContagemRoubo", 1000, 1, "i", playerid);
            Contagem[playerid] = 90;
        	return 1;
  	    }
       else if(PlayerToPoint(1.0,playerid,2172.2217,1602.1212,999.9678))
		{
	    	if(rouboput == 1)
	    	{
	   			SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma tentativa de roubo no Centro de Licenças.");
	    		return 1;
	    	}
	    	if(temporouboput == 1)
	    	{
	   			SendClientMessage(playerid,COLOR_GREY,"Já roubaram o Centro de Licenças espere 5 minutos para roubar de novo !");
	    		return 1;
	    	}
			GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            format(string, sizeof(string), "[Assalto ao Cofre]: %s[%d] e os %s estão tentando roubar o cofre da empresa Centro de Licenças", playername, playerid,NomeORG(playerid));
            SendClientMessageToAll(COLOR_LIGHTRED, string);
			SendClientMessage(playerid, COLOR_GRAD5, "Espere 80 segundos para terminar de roubar o Centro de Licenças.");
			SendClientMessage(playerid, COLOR_GRAD5, "Para cancelar o roubo digite: /pararroubo.");
			format(string, sizeof(string), "[ALERTA COPS] %s[%d] DETOUNOU O COFRE E ESTÁ TENTANDO ROUBAR O Centro de Licenças !", playername, playerid);
			SendFamilyMessage(1, COLOR_DBLUE, string);
            SendFamilyMessage(2, COLOR_DBLUE, string);
            SendFamilyMessage(11, COLOR_DBLUE, string);
            SendFamilyMessage(16, COLOR_DBLUE, string);
            SendFamilyMessage(3, COLOR_DBLUE, string);
            SendFamilyMessage(33, COLOR_DBLUE, string);
			SetPlayerCriminal(playerid,255, "Tentativa de roubo ao Centro de Licenças");
			PlayerInfo[playerid][pExplosivos] --;
            PlayerInfo[playerid][ComExplosivo] = false;
			WantedPoints[playerid] += 1;
			roubando[playerid] = 1;
            ProvocoPut[playerid] = 1;
            rouboput = 1;
            temporouboput = 1;
            SetTimer("Aroubo7", 300000, 0);
        	tempoput = SetTimerEx("RouboPut", 82000, 0, "i", playerid);
            GetPlayerHealth(playerid,life);
            GetPlayerArmour(playerid,colete);
            new Float:x,Float:y,Float:z;
	    	GetPlayerPos(playerid,x,y,z);
    		PlayerPlaySound(playerid, 1159, x, y, z);
    		SetPlayerHealth(playerid,life);
            SetPlayerArmour(playerid,colete);
    		TempoContagem[playerid] = SetTimerEx("ContagemRoubo", 1000, 1, "i", playerid);
            Contagem[playerid] = 80;
        	return 1;
        }
        else if(PlayerToPoint(1.0,playerid, 957.7492,2096.6238,1011.0220))
		{
	    	if(roubomerc == 1)
	    	{
	   			SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma tentativa de roubo nesse cofre.");
	    		return 1;
	    	}
	    	if(temporoubomerc == 1)
	    	{
	   			SendClientMessage(playerid,COLOR_GREY,"Já roubaram o cofre do Mercado Negro espere 5 minutos para roubar de novo !");
	    		return 1;
	    	}
			GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            format(string, sizeof(string), "[Assalto ao Cofre]: %s[%d] e os %s estão tentando roubar o cofre da empresa Mercado Negro", playername, playerid,NomeORG(playerid));
            SendClientMessageToAll(COLOR_LIGHTRED, string);
			SendClientMessage(playerid, COLOR_GRAD5, "Espere 150 segundos para terminar de roubar o Mercado Negro.");
			SendClientMessage(playerid, COLOR_GRAD5, "Para cancelar o roubo digite: /pararroubo.");
			format(string, sizeof(string), "[ALERTA COPS] %s[%d] DETOUNOU O COFRE E ESTÁ TENTANDO ROUBAR O MERCADO NEGRO !", playername, playerid);
			SendFamilyMessage(1, COLOR_DBLUE, string);
            SendFamilyMessage(2, COLOR_DBLUE, string);
            SendFamilyMessage(11, COLOR_DBLUE, string);
            SendFamilyMessage(16, COLOR_DBLUE, string);
            SendFamilyMessage(3, COLOR_DBLUE, string);
            SendFamilyMessage(33, COLOR_DBLUE, string);
			SetPlayerCriminal(playerid,255, "Tentativa de roubo ao Mercado Negro");
			PlayerInfo[playerid][pExplosivos] --;
            PlayerInfo[playerid][ComExplosivo] = false;
			WantedPoints[playerid] += 1;
            roubando[playerid] = 1;
            Provocomerc[playerid] = 1;
            roubomerc = 1;
            temporoubomerc = 1;
            SetTimer("Aroubo15", 300000, 0);
        	tempomerc = SetTimerEx("RouboMercadoNegro", 152000, 0, "i", playerid);
            GetPlayerHealth(playerid,life);
            GetPlayerArmour(playerid,colete);
            new Float:x,Float:y,Float:z;
	    	GetPlayerPos(playerid,x,y,z);
    		PlayerPlaySound(playerid, 1159, x, y, z);
    		SetPlayerHealth(playerid,life);
            SetPlayerArmour(playerid,colete);
    		TempoContagem[playerid] = SetTimerEx("ContagemRoubo", 1000, 1, "i", playerid);
            Contagem[playerid] = 150;
        	return 1;
  	    }
        else if(PlayerToPoint(1.0,playerid, 2230.7861,1596.8997,999.9646))
		{
	    	if(rouboilha == 1)
	    	{
	   			SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma tentativa de roubo nesse cofre.");
	    		return 1;
	    	}
	    	if(temporouboilha == 1)
	    	{
	   			SendClientMessage(playerid,COLOR_GREY,"Já roubaram o cofre do Mercado 24/7 espere 5 minutos para roubar de novo !");
	    		return 1;
	    	}
			GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            format(string, sizeof(string), "[Assalto ao Cofre]: %s[%d] e os %s estão tentando roubar o cofre da empresa Mercado 24/7", playername, playerid,NomeORG(playerid));
            SendClientMessageToAll(COLOR_LIGHTRED, string);
			SendClientMessage(playerid, COLOR_GRAD5, "Espere 150 segundos para terminar de roubar o Mercado 24/7.");
			SendClientMessage(playerid, COLOR_GRAD5, "Para cancelar o roubo digite: /pararroubo.");
			format(string, sizeof(string), "[ALERTA COPS] %s[%d] DETOUNOU O COFRE E ESTÁ TENTANDO ROUBAR o Mercado 24/7 !", playername, playerid);
			SendFamilyMessage(1, COLOR_DBLUE, string);
            SendFamilyMessage(2, COLOR_DBLUE, string);
            SendFamilyMessage(11, COLOR_DBLUE, string);
            SendFamilyMessage(16, COLOR_DBLUE, string);
            SendFamilyMessage(3, COLOR_DBLUE, string);
            SendFamilyMessage(33, COLOR_DBLUE, string);
			SetPlayerCriminal(playerid,255, "Tentativa de roubo ao Mercado 24/7");
			PlayerInfo[playerid][pExplosivos] --;
            PlayerInfo[playerid][ComExplosivo] = false;
			WantedPoints[playerid] += 1;
            roubando[playerid] = 1;
            Provocoilha[playerid] = 1;
            rouboilha = 1;
            temporouboilha = 1;
            SetTimer("Aroubo13", 300000, 0);
        	tempoilha = SetTimerEx("RouboIlhaPirata", 152000, 0, "i", playerid);
            GetPlayerHealth(playerid,life);
            GetPlayerArmour(playerid,colete);
            new Float:x,Float:y,Float:z;
	    	GetPlayerPos(playerid,x,y,z);
    		PlayerPlaySound(playerid, 1159, x, y, z);
    		SetPlayerHealth(playerid,life);
            SetPlayerArmour(playerid,colete);
    		TempoContagem[playerid] = SetTimerEx("ContagemRoubo", 1000, 1, "i", playerid);
            Contagem[playerid] = 150;
        	return 1;
  	    }
  	    else if(PlayerToPoint(1.0,playerid,2150.8096,1619.9636,1000.9688))
		{
	    	if(roubolot == 1)
	    	{
	   			SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma tentativa de roubo nesse cofre.");
	    		return 1;
	    	}
	    	if(temporoubolot == 1)
	    	{
	   			SendClientMessage(playerid,COLOR_GREY,"Já roubaram o cofre da Lotérica espere 5 minutos para roubar de novo !");
	    		return 1;
	    	}
			GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            format(string, sizeof(string), "[Assalto ao Cofre]: %s[%d] e os %s estão tentando roubar o cofre da empresa Lotérica", playername, playerid,NomeORG(playerid));
            SendClientMessageToAll(COLOR_LIGHTRED, string);
			SendClientMessage(playerid, COLOR_GRAD5, "Espere 80 segundos para terminar de roubar à Lotérica LS.");
            SendClientMessage(playerid, COLOR_GRAD5, "Para cancelar o roubo digite: /pararroubo.");
            format(string, sizeof(string), "[ALERTA COPS] %s[%d] DETOUNOU O COFRE E ESTÁ TENTANDO ROUBAR A LOTERICA(LS) !", playername, playerid);
			SendFamilyMessage(1, COLOR_DBLUE, string);
            SendFamilyMessage(2, COLOR_DBLUE, string);
            SendFamilyMessage(11, COLOR_DBLUE, string);
            SendFamilyMessage(16, COLOR_DBLUE, string);
            SendFamilyMessage(3, COLOR_DBLUE, string);
            SendFamilyMessage(33, COLOR_DBLUE, string);
			SetPlayerCriminal(playerid,255, "Tentativa de roubo a Lotérica LS");
			PlayerInfo[playerid][pExplosivos] --;
            PlayerInfo[playerid][ComExplosivo] = false;
			WantedPoints[playerid] += 1;
            roubando[playerid] = 1;
            ProvocoLot[playerid] = 1;
            roubolot = 1;
            temporoubolot = 1;
            SetTimer("Aroubo3", 300000, 0);
        	tempolot = SetTimerEx("RouboLot", 82000, 0, "i", playerid);
            GetPlayerHealth(playerid,life);
            GetPlayerArmour(playerid,colete);
            new Float:x,Float:y,Float:z;
	    	GetPlayerPos(playerid,x,y,z);
    		PlayerPlaySound(playerid, 1159, x, y, z);
    		SetPlayerHealth(playerid,life);
            SetPlayerArmour(playerid,colete);
    		TempoContagem[playerid] = SetTimerEx("ContagemRoubo", 1000, 1, "i", playerid);
            Contagem[playerid] = 80;
        	return 1;
		}
		else if(PlayerToPoint(1.0,playerid,303.1141,-168.5879,999.5938))
		{
	    	if(rouboloja1 == 1)
	    	{
	   			SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma tentativa de roubo nessa loja.");
	    		return 1;
	    	}
	    	if(temporouboloja1 == 1)
	    	{
	   			SendClientMessage(playerid,COLOR_GREY,"Já roubaram a Loja de Armas 1 espere 5 minutos para roubar de novo !");
	    		return 1;
	    	}
			GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            format(string, sizeof(string), "[Assalto ao Cofre]: %s[%d] e os %s estão tentando roubar o cofre da empresa Loja de Armas 1", playername, playerid,NomeORG(playerid));
            SendClientMessageToAll(COLOR_LIGHTRED, string);
			SendClientMessage(playerid, COLOR_GRAD5, "Espere 80 segundos para terminar de roubar à Loja de Armas 1.");
            SendClientMessage(playerid, COLOR_GRAD5, "Para cancelar o roubo digite: /pararroubo.");
            format(string, sizeof(string), "[ALERTA COPS] %s[%d] DETOUNOU O COFRE E ESTÁ TENTANDO ROUBAR A LOJA DE ARMAS 1 !", playername, playerid);
			SendFamilyMessage(1, COLOR_DBLUE, string);
            SendFamilyMessage(2, COLOR_DBLUE, string);
            SendFamilyMessage(11, COLOR_DBLUE, string);
            SendFamilyMessage(16, COLOR_DBLUE, string);
            SendFamilyMessage(3, COLOR_DBLUE, string);
            SendFamilyMessage(33, COLOR_DBLUE, string);
			SetPlayerCriminal(playerid,255, "Tentativa de roubo à Loja de Armas 1");
			PlayerInfo[playerid][pExplosivos] --;
            PlayerInfo[playerid][ComExplosivo] = false;
			WantedPoints[playerid] += 1;
            roubando[playerid] = 1;
            ProvocoLoja1[playerid] = 1;
            rouboloja1 = 1;
            temporouboloja1 = 1;
            SetTimer("Aroubo4", 300000, 0);
        	tempoloja1 = SetTimerEx("RouboLoja1", 82000, 0, "i", playerid);
            GetPlayerHealth(playerid,life);
            GetPlayerArmour(playerid,colete);
            new Float:x,Float:y,Float:z;
	    	GetPlayerPos(playerid,x,y,z);
    		PlayerPlaySound(playerid, 1159, x, y, z);
    		SetPlayerHealth(playerid,life);
            SetPlayerArmour(playerid,colete);
    		TempoContagem[playerid] = SetTimerEx("ContagemRoubo", 1000, 1, "i", playerid);
            Contagem[playerid] = 80;
        	return 1;
		}
		else if(PlayerToPoint(1.0,playerid,293.1318,-57.6038,1001.5156))
		{
	    	if(roubomotel == 1)
	    	{
	   			SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma tentativa de roubo na Ammu Nation.");
	    		return 1;
	    	}
	    	if(temporoubomotel == 1)
	    	{
	   			SendClientMessage(playerid,COLOR_GREY,"Já roubaram a Ammu Nation espere 5 minutos para roubar de novo !");
	    		return 1;
	    	}
			GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            format(string, sizeof(string), "[Assalto ao Cofre]: %s[%d] e os %s estão tentando roubar o cofre da empresa Ammu Nation", playername, playerid,NomeORG(playerid));
            SendClientMessageToAll(COLOR_LIGHTRED, string);
			SendClientMessage(playerid, COLOR_GRAD5, "Espere 80 segundos para terminar de roubar a Ammu Nation.");
			SendClientMessage(playerid, COLOR_GRAD5, "Para cancelar o roubo digite: /pararroubo.");
			format(string, sizeof(string), "[ALERTA COPS] %s[%d] DETOUNOU O COFRE E ESTÁ TENTANDO ROUBAR A AMMU NATION !", playername, playerid);
			SendFamilyMessage(1, COLOR_DBLUE, string);
            SendFamilyMessage(2, COLOR_DBLUE, string);
            SendFamilyMessage(11, COLOR_DBLUE, string);
            SendFamilyMessage(16, COLOR_DBLUE, string);
            SendFamilyMessage(3, COLOR_DBLUE, string);
            SendFamilyMessage(33, COLOR_DBLUE, string);
			SetPlayerCriminal(playerid,255, "Tentativa de roubo a Ammu Nation");
			PlayerInfo[playerid][pExplosivos] --;
            PlayerInfo[playerid][ComExplosivo] = false;
			WantedPoints[playerid] += 1;
			roubando[playerid] = 1;
            ProvocoMotel[playerid] = 1;
            temporoubomotel = 1;
            SetTimer("Aroubo9", 300000, 0);
        	tempoput = SetTimerEx("RouboMotel", 82000, 0, "i", playerid);
            GetPlayerHealth(playerid,life);
            GetPlayerArmour(playerid,colete);
            new Float:x,Float:y,Float:z;
	    	GetPlayerPos(playerid,x,y,z);
    		PlayerPlaySound(playerid, 1159, x, y, z);
    		SetPlayerHealth(playerid,life);
            SetPlayerArmour(playerid,colete);
    		TempoContagem[playerid] = SetTimerEx("ContagemRoubo", 1000, 1, "i", playerid);
            Contagem[playerid] = 80;
        	return 1;
        }
		else if(PlayerToPoint(1.0,playerid, -1434.8153,1479.9121,1.8672))
		{
	    	if(roubonavio == 1)
	    	{
	   			SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma tentativa de roubo nesse cofre.");
	    		return 1;
	    	}
	    	if(temporoubonavio == 1)
	    	{
	   			SendClientMessage(playerid,COLOR_GREY,"Já roubaram o cofre do navio espere 5 minutos para roubar de novo !");
	    		return 1;
	    	}
			GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            format(string, sizeof(string), "[Assalto ao Cofre]: %s[%d] e os %s estão tentando roubar o cofre da empresa Navio", playername, playerid,NomeORG(playerid));
            SendClientMessageToAll(COLOR_LIGHTRED, string);
			SendClientMessage(playerid, COLOR_GRAD5, "Espere 150 segundos para terminar de roubar o navio.");
			SendClientMessage(playerid, COLOR_GRAD5, "Para cancelar o roubo digite: /pararroubo.");
			format(string, sizeof(string), "[ALERTA COPS] %s[%d] DETOUNOU O COFRE E ESTÁ TENTANDO ROUBAR O NAVIO !", playername, playerid);
			SendFamilyMessage(1, COLOR_DBLUE, string);
            SendFamilyMessage(2, COLOR_DBLUE, string);
            SendFamilyMessage(11, COLOR_DBLUE, string);
            SendFamilyMessage(16, COLOR_DBLUE, string);
            SendFamilyMessage(3, COLOR_DBLUE, string);
            SendFamilyMessage(33, COLOR_DBLUE, string);
			SetPlayerCriminal(playerid,255, "Tentativa de roubo o navio");
			PlayerInfo[playerid][pExplosivos] --;
            PlayerInfo[playerid][ComExplosivo] = false;
			WantedPoints[playerid] += 1;
            roubando[playerid] = 1;
            Provoconavio[playerid] = 1;
            roubonavio = 1;
            temporoubonavio = 1;
            SetTimer("Aroubo14", 300000, 0);
        	temponavio = SetTimerEx("RouboNavio", 152000, 0, "i", playerid);
            GetPlayerHealth(playerid,life);
            GetPlayerArmour(playerid,colete);
            new Float:x,Float:y,Float:z;
	    	GetPlayerPos(playerid,x,y,z);
    		PlayerPlaySound(playerid, 1159, x, y, z);
    		SetPlayerHealth(playerid,life);
            SetPlayerArmour(playerid,colete);
    		TempoContagem[playerid] = SetTimerEx("ContagemRoubo", 1000, 1, "i", playerid);
            Contagem[playerid] = 150;
        	return 1;
  	    }
         new
			caixa_id
		;

		if(!(caixa_id=GetPlayerCaixa(playerid)))return SendClientMessage(playerid, COLOR_GRAD1, "Você não está perto de nenhum caixa eletronico ou local de Roubo.");
		if(CaixaInfo[caixa_id][Caixa_Roubada])return SendClientMessage(playerid, COLOR_GRAD1, " *Este caixa eletronico ja foi roubado a pouco tempo.");
        if(TendoRoubo)return SendClientMessage(playerid, COLOR_GRAD1, "Ja roubaram um caixa eletronico a pouco tempo, espere um pouco para roubar outro.");
		if(admtrampando[playerid])
			return SendClientMessage(playerid, COLOR_GRAD1, " Você não pode roubar em modo trabalho!");

		new
			Float:px, Float:py, Float:pz,
			Float:rx, Float:ry, Float:rz
			;


		GetDynamicObjectPos(CaixaInfo[caixa_id][Caixa_Object], px, py, pz);
		GetDynamicObjectRot(CaixaInfo[caixa_id][Caixa_Object], rx, ry, rz);
		GetXYInFrontOfCaixa(CaixaInfo[caixa_id][Caixa_Object], px, py, 0.9);

        UltimaCaixaRoubada[0] = px;
        UltimaCaixaRoubada[1] = py;
        UltimaCaixaRoubada[2] = pz;

        RoubandoCaixa[playerid] = false;

        SetPlayerSpecialAction(playerid, 0);
		SetPlayerPos(playerid, px, py, pz);
		SetPlayerFacingAngle(playerid, rz);

		ApplyAnimation(playerid,"BOMBER","BOM_Plant_Loop",4.0,1,0,0,0,0);
		SetTimerEx("RoubarCaixa", 20*1000, 0, "dd", playerid, GetPlayerCaixa(playerid));

		SetTimerEx(#SetAnimRoubo, 500, 0, "d", playerid);

		CaixaInfo[caixa_id][Caixa_Roubada] = true;

		new location[MAX_ZONE_NAME];
		GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);

		format(string, sizeof string, "<< Roubo: %s e os %s estao tentando roubar o caixa eletronico de %s >>", NomePlayer(playerid), GetOrgName(GetPlayerOrg(playerid)), location);
		SendClientMessageToAll(COLOR_LIGHTRED, string);
		SetPlayerCriminal(playerid,155,"Roubo a caixa eletronico");

        GetPlayerName(playerid,sendername,sizeof(sendername));
 		format(string, sizeof(string), "* %s está plantando um explosivo no caixa eletrônico!", sendername);
		SendClientMessageInRange(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		SendClientMessage(playerid, COLOR_GRAD1, "*Você está colocando uma bomba no caixa eletronico, aguarde...");
		GameTextForPlayer(playerid, "~r~plantando bomba...", 5000, 1);
		antihands[playerid] = 1;

		SendCopMessage(COLOR_LIGHTRED, "[Policiais]: USE: /localizarcaixa para saber onde foi o roubo.");
		return 1;
	}

	CMD:localizarcaixa(playerid)
	{
 		if(IsACop(playerid))
   		{
   		    CP[playerid] = 58;
   		    SetPlayerCheckpoint(playerid, UltimaCaixaRoubada[0], UltimaCaixaRoubada[1], UltimaCaixaRoubada[2], 2.0);
			GameTextForPlayer(playerid, "~w~Banco 24 horas~n~~r~marcada", 5000, 1);
		}
   		return 1;
	}

	BPF::SetAnimRoubo(playerid)
	{
	    return ApplyAnimation(playerid,"BOMBER","BOM_Plant_Loop",4.0,1,0,0,0,0);
	}
	BPF::RoubarCaixa(playerid, caixa_id)
	{

		if(!GetPlayerCaixa(playerid))
		{
		    CaixaInfo[caixa_id][Caixa_Roubada] = false;
			return SendClientMessage(playerid, COLOR_GRAD1, "*Você não está perto de um caixa eletronico.");
		}

		new Float:px, Float:py, Float:pz,
			Float:rx, Float:ry, Float:rz
			;

        TendoRoubo = true;
        SetTimer(#LiberarRoubo, Temporoubo, 0);
        PlayerInfo[playerid][pExplosivos] --;
		GetDynamicObjectPos(CaixaInfo[caixa_id][Caixa_Object], px, py, pz);
		GetDynamicObjectRot(CaixaInfo[caixa_id][Caixa_Object], rx, ry, rz);
		GetXYInFrontOfCaixa(CaixaInfo[caixa_id][Caixa_Object], px, py, 0.3);

        PlayerInfo[playerid][ComExplosivo] = false;
        RemovePlayerAttachedObjectEx(playerid, Vaga_Roubo);
		CaixaInfo[caixa_id][Caixa_ObjectBomba] = CreateDynamicObject(1252, px, py, pz, 0.0, 0.0, rz);
	    SetTimerEx("ExplodirCaixa", 10000, 0, "d", caixa_id);

	    new string[128];
	    GetPlayerName(playerid,sendername,sizeof(sendername));
 		format(string, sizeof(string), "* %s plantou um explosivo no caixa eletrônico!", sendername);
		SendClientMessageInRange(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		SendClientMessage(playerid, COLOR_LIGHTRED, "*Você plantou uma bomba no caixa, agora afaste-se e espere explodir!");
		GameTextForPlayer(playerid, "~r~afaste-se do caixa", 5000, 1);
		antihands[playerid] = 0;
		ClearAnimations(playerid, 1);
		return 0;
	}
	BPF::LiberarRoubo()
	    return TendoRoubo = false;
new Float:RdonPickups[][] =
{
	{0.1},{0.2},{0.3},{0.4},
	{0.5},{0.6},{0.7},{0.8},
	{0.9},{1.0},{1.2},{1.3},
	{1.4},{1.5},{1.6},{1.7},
	{1.8},{1.9},{2.0},{2.1},
	{2.2},{2.3},{2.4},{2.5},
	{2.6},{2.7},{2.8},
	//
	{-0.1},{-0.2},{-0.3},{-0.4},
	{-0.5},{-0.6},{-0.7},{-0.8},
	{-0.9},{-1.0},{-1.2},{-1.3},
	{-1.4},{-1.5},{-1.6},{-1.7},
	{-1.8},{-1.9},{-2.0},{-2.1},
	{-2.2},{-2.3},{-2.4},{-2.5},
	{-2.6},{-2.7},{-2.8}
};


BPF::AlarmCaixa(caixa_id)
{
    new Float:px, Float:py, Float:pz;
	if(!CaixaInfo[caixa_id][Caixa_Roubada])
	{
		SoundToAll(0);
		for(new i; i < MAX_CAIXAS; i ++)
		{
		    if(CaixaInfo[i][Caixa_Roubada])
		    {
			    GetDynamicObjectPos(CaixaInfo[i][Caixa_Object], px, py, pz);
				SoundInRange(9200, 20.0, px, py, pz);
		    }
		}
		return 1;
	}

    GetDynamicObjectPos(CaixaInfo[caixa_id][Caixa_Object], px, py, pz);
	SoundInRange(9200, 20.0, px, py, pz);

	SetTimerEx("AlarmCaixa", 5000, 0, "d", caixa_id);
	return 1;
}
BPF::ExplodirCaixa(caixa_id)
{
	new Float:px, Float:py, Float:pz,
		Float:rx, Float:ry, Float:rz;

	new str[200];

	new add = random(2000);
	CaixaInfo[caixa_id][Caixa_Dinheiro] = (MAX_PICKUPS_ROUBO*4549)+add;

	format(str, sizeof str, "[Caixa Eletronico]\n{FF0000}CAIXA DESTRUIDO\n{FFFFFF}Dinheiro despejado: R$%d",CaixaInfo[caixa_id][Caixa_Dinheiro]);
	Update3DTextLabelText(CaixaInfo[caixa_id][Caixa_Text], 0xFFFF00F4, str);

	GetDynamicObjectPos(CaixaInfo[caixa_id][Caixa_Object], px, py, pz);
	GetDynamicObjectRot(CaixaInfo[caixa_id][Caixa_Object], rx, ry, rz);
	CreateExplosion(px, py, pz, 10, 2.0);
	DestroyDynamicObject(CaixaInfo[caixa_id][Caixa_ObjectBomba]);
	DestroyDynamicObject(CaixaInfo[caixa_id][Caixa_Object]);
	CaixaInfo[caixa_id][Caixa_Object] = CreateDynamicObject(2943, px, py, pz, rx, ry, rz);
 	UltimaCaixaRoubada[0] = px;
  	UltimaCaixaRoubada[1] = py;
   	UltimaCaixaRoubada[2] = pz;

	SendClientMessageToAll(COLOR_LIGHTBLUE, " Um caixa eletronico acaba de ser explodido!");

	AlarmCaixa(caixa_id);

//--------- Jogar grana no chão --

	GetXYInFrontOfCaixa(CaixaInfo[caixa_id][Caixa_Object], px, py, 3.1);

	for(new i; i < MAX_PICKUPS_ROUBO; i++)
	{
		Pickups_Roubo[caixa_id][i] = CreatePickup(1212, 23, px+(RdonPickups[random(sizeof(RdonPickups))][0]),py-(RdonPickups[random(sizeof(RdonPickups))][0]),pz-0.3);
	}

	CaixaInfo[caixa_id][Caixa_Pickups] = MAX_PICKUPS_ROUBO;

	SetTimerEx("RestoreCaixa", 60000*20, 0, "d", caixa_id);

	return 1;
}
BPF::RestoreCaixa(caixa_id)
{
    if(CaixaInfo[caixa_id][Caixa_Roubada])
    {
	    SendClientMessageToAll(0x00660CC8, " Um caixa eletronico de Los Santos foi consertado pelo governo.");

		new Float:px, Float:py, Float:pz,
			Float:rx, Float:ry, Float:rz;

	    CaixaInfo[caixa_id][Caixa_Roubada] = false;

	    Update3DTextLabelText(CaixaInfo[caixa_id][Caixa_Text], 0x33FFFFFF, "[Caixa Eletronico]\nAperte '{FFFFFF}ENTER{33FFFF}' para usar");

		GetDynamicObjectPos(CaixaInfo[caixa_id][Caixa_Object], px, py, pz);
		GetDynamicObjectRot(CaixaInfo[caixa_id][Caixa_Object], rx, ry, rz);

		DestroyDynamicObject(CaixaInfo[caixa_id][Caixa_Object]);
		CaixaInfo[caixa_id][Caixa_Object] = CreateDynamicObject(2942, px, py, pz, rx, ry, rz);


		for(new i; i < MAX_PICKUPS_ROUBO; i++)
		{
		    DestroyPickup(Pickups_Roubo[caixa_id][i]);
		}
	}
	return true;
}
BPF::RestoreCaixaADM(caixa_id)
{
    if(CaixaInfo[caixa_id][Caixa_Roubada])
    {
		new Float:px, Float:py, Float:pz,
			Float:rx, Float:ry, Float:rz;

	    CaixaInfo[caixa_id][Caixa_Roubada] = false;

	    Update3DTextLabelText(CaixaInfo[caixa_id][Caixa_Text], 0x33FFFFFF, "[Caixa Eletronico]\nAperte '{FFFFFF}ENTER{33FFFF}' para usar");

		GetDynamicObjectPos(CaixaInfo[caixa_id][Caixa_Object], px, py, pz);
		GetDynamicObjectRot(CaixaInfo[caixa_id][Caixa_Object], rx, ry, rz);

		DestroyDynamicObject(CaixaInfo[caixa_id][Caixa_Object]);
		CaixaInfo[caixa_id][Caixa_Object] = CreateDynamicObject(2942, px, py, pz, rx, ry, rz);


		for(new i; i < MAX_PICKUPS_ROUBO; i++)
		{
		    DestroyPickup(Pickups_Roubo[caixa_id][i]);
		}
	}
	return true;
}
CMD:consertarcaixas(playerid)
{
	if(PlayerInfo[playerid][pAdmin] < 1337)return SendClientMessage(playerid, COLOR_GRAD1, "Voce nao pode usar este comando.");
	new string[128];
	for(new i; i < MAX_CAIXAS; i++)
	{
	    RestoreCaixaADM(i);
	}
	format(string, sizeof string, "AdmCmd: O admin %s consertou todos os caixas eletrônicos da cidade.", NomePlayer(playerid));
	SendClientMessageToAll(COLOR_YELLOW, string);
	return 1;
}

stock GetPoint2DZone(Float:pointx, Float:pointy, Float:pointz)
{
	#pragma unused pointz

	new znes[128];
	for(new i = 0; i != sizeof(gSAZones); i++)
	{
		if(pointx >= gSAZones[i][SAZONE_AREA][0] && pointx <= gSAZones[i][SAZONE_AREA][3] && pointy >= gSAZones[i][SAZONE_AREA][1] && pointy <= gSAZones[i][SAZONE_AREA][4])
		{
			format(znes, sizeof(znes), (gSAZones[i][SAZONE_NAME]));
			return znes;
		}
	}
	return znes;
}
	CMD:locationcaixa(playerid)
	{
	    if(!gPlayerLogged[playerid])return 1;
		MEGAString[0] = EOS;
		new Float:x, Float:y, Float:z;
		new
		    string[128]
			;
        strcat(MEGAString, "{FFFF00}Caixa Eletrônico mais próximo\n");
		for(new i; i < MAX_CAIXAS; i++)
		{
		    GetDynamicObjectPos(CaixaInfo[i][Caixa_Object], x, y, z);
		    format(string, sizeof string, "Caixa Eletrônico de %s\n", GetPoint2DZone(x, y, z));
		    strcat(MEGAString, string);
		}
		ShowPlayerDialog(playerid, 4901, DIALOG_STYLE_LIST, "Caixas Eletronicos", MEGAString, #Localizar, #Voltar);
		return true;
	}

	CMD:orelhagrande(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
	        if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pAdminTemp] < 1)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Você não esta autorizado a usar este comando!");
			    return 1;
			}
			if (!BigEar[playerid])
			{
				BigEar[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "   Suas orelhas cresceram");
			}
			else if (BigEar[playerid])
			{
				(BigEar[playerid] = 0);
				SendClientMessage(playerid, COLOR_GRAD2, "   Suas orelhas encolheram");
			}
			return 1;
	}
	CMD:capacete(playerid, params[])
	{
		if(IsAMoto(GetPlayerVehicleID(playerid)))
	    {
	        if(PlayerInfo[playerid][pCapacete] <= 0)
	        {
	            SendClientMessage(playerid, COLOR_GRAD1, "Você não tem um Capacete, compre um na 24/7!");
			    return 1;
	        }
	        if(comCapacete[playerid] > 0)
			{
                SendClientMessage(playerid, COLOR_GRAD1, "Você já esta usando seu Capacete.");
				return 1;
	        }
	        new id = CountAttachedObjects(playerid);
			switch(GetPlayerSkin(playerid))
			{
		        #define SPAO{%0,%1,%2,%3,%4,%5} SetPlayerAttachedObject(playerid, id, PlayerInfo[playerid][pCapacete], 2, (%0), (%1), (%2), (%3), (%4), (%5), 1.2, 1.2, 1.2);
				case 0, 65, 74, 149, 208, 273:  SPAO{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
				case 1..6, 8, 14, 16, 22, 27, 29, 33, 41..49, 82..84, 86, 87, 119, 289: SPAO{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}
				case 7, 10: SPAO{0.090000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
				case 9: SPAO{0.059999, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
				case 11..13: SPAO{0.070000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
				case 15: SPAO{0.059999, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
				case 17..21: SPAO{0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 23..26, 28, 30..32, 34..39, 57, 58, 98, 99, 104..118, 120..131: SPAO{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 40: SPAO{0.050000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 50, 100..103, 148, 150..189, 222: SPAO{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 51..54: SPAO{0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 55, 56, 63, 64, 66..73, 75, 76, 78..81, 133..143, 147, 190..207, 209..219, 221, 247..272, 274..288, 290..293: SPAO{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 59..62: SPAO{0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 77: SPAO{0.059999, 0.019999, 0.000000, 87.000000, 82.000000, 0.000000}
				case 85, 88, 89: SPAO{0.070000, 0.039999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 90..97: SPAO{0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 132: SPAO{0.000000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 144..146: SPAO{0.090000, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
				case 220: SPAO{0.029999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 223, 246: SPAO{0.070000, 0.050000, 0.000000, 88.000000, 82.000000, 0.000000}
				case 224..245: SPAO{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 294: SPAO{0.070000, 0.019999, 0.000000, 91.000000, 84.000000, 0.000000}
				case 295: SPAO{0.050000, 0.019998, 0.000000, 86.000000, 82.000000, 0.000000}
				case 296..298: SPAO{0.064999, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 299: SPAO{0.064998, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
			}
			SetPlayerAttachedObjectEx(PlayerInfo[playerid][pCapacete],Vaga_Capacete,playerid,id);
			comCapacete[playerid] = 1;
			return true;
		}
		else
		{
		    if(comCapacete[playerid] > 0)
				comCapacete[playerid] = 0;
		    RemovePlayerAttachedObjectEx(playerid, Vaga_Capacete);
			return 1;
		}
	}

	CMD:cascudo(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
	        new playa;
			if(sscanf(params, "u", playa))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /cascudo [ID do Player]");
				return true;
			}
    	    new string[128];
			new Float:slx, Float:sly, Float:slz;
			if (PlayerInfo[playerid][pAdmin] >=1 || PlayerInfo[playerid][pAdminTemp] >=1)
			{
			    if(IsPlayerConnected(playa))
			    {
					if(!admtrampando[playerid])
						return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

           			if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						SetPlayerHealth(playa, 200);
						GetPlayerPos(playa, slx, sly, slz);
						SetPlayerPos(playa, slx, sly, slz+15);
						GetPlayerVelocity(playa, slx, sly, slz);
						SetPlayerVelocity(playa, slx=0, sly=0, slz-0.5);
						PlayerPlaySound(playa,1130,0.0,0.0,0.0);
						format(string, sizeof(string), "AdmCmd: %s levou um cascudo de %s",giveplayer ,PlayerName(playerid));
						ABroadCast(COLOR_LIGHTRED,string,1);
						BPFLogs("comandosadmin", string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar este comando!");
			}
			return true;
	}

	CMD:destruirid(playerid, params[])
	{
        	if(PlayerInfo[playerid][pAdmin] < 3)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando !");
			    return true;
			}
			new counter = 0;
			new result;
			new plyName[MAX_PLAYER_NAME];
			GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			for(new i; i != MAX_VEHICLES; i++)
			{
				new dist = ChecarveiculoBPF(5, playerid, i);
				if(dist)
				{
     result = i;
					counter++;
				}
			}
			switch(counter)
			{
				case 0:
				{
					SendClientMessage(playerid, COLOR_GREY, "   Não há nenhum carro nesse raio!");
				}
				case 1:
				{
				    if(result < TOTAL_CARROS)
				    {
				    	SendClientMessage(playerid, COLOR_GREY, "Você só pode destruir veículos criados");
				    	return true;
				    }
            	    new string[128];
					new name[MAX_PLAYER_NAME];
				    GetPlayerName(playerid, name, sizeof(name));
					DestroyVehicle(result);
				    format(string, sizeof(string), "Você destruiu o veículo ID:[%d]", result);
				    SendClientMessage(playerid, COLOR_GREY, string);
				    CreatedCar --;
				}
				default:
				{
					SendClientMessage(playerid, COLOR_GREY, "   Foram encontrados mais de um carro nesse raio");
				}
			}
			return true;
	}
	CMD:setvidacar(playerid, params[])
	{
	    if(IsPlayerConnected(playerid))
	    {
   			new id, life;
			if(sscanf(params, "dd", id, life))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /setvidacar [idcarro] (Vida Carro)");
				return true;
			}
			if (id == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_GREY, "Não exise um veículo com essa id.");
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    new string[128];
	            SetVehicleHealth(id, life);
				format(string, sizeof(string), "Vida do carro %d definido para %d.", id, life);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar o comando!");
			}
		}
		return 1;
	}
	CMD:respawndetran(playerid, params[])
	{
	    new string[128];
		if(IsPlayerConnected(playerid))
	    {
        	if(PlayerInfo[playerid][pMembro] != 34 && PlayerInfo[playerid][pLider] != 34)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Voçê não é um Detran!");
			    return 1;
			}
			if(!IsPlayerInHQMec(playerid))
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "O carro e voçê precisam estar na sua HQ!");
			    return 1;
			}
			new counter = 0;
			new result;
			new plyName[MAX_PLAYER_NAME];
			GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			for(new i; i != MAX_VEHICLES; i++)
			{
				new dist = ChecarveiculoBPF(5, playerid, i);
				if(dist)
				{
					result = i;
					counter++;
				}
			}
			switch(counter)
			{
				case 0:
				{
					SendClientMessage(playerid, COLOR_GREY, "Não há nenhum carro nesse por perto!");
				}
				case 1:
				{
					new name[MAX_PLAYER_NAME];
				    GetPlayerName(playerid, name, sizeof(name));
				    format(string, sizeof(string), "Você Entregou o carro ID:[%d] A sua HQ!", result);
				    SendClientMessage(playerid, COLOR_GREY, string);
					SetVehicleToRespawn(result);
				}
				default:
				{
					SendClientMessage(playerid, COLOR_GREY, "Dois carros estão muito pertos.Afaste-os Mais!");
				}
			}
		}
		return 1;
	}
	CMD:respawnid(playerid, params[])
	{
        	if(PlayerInfo[playerid][pAdmin] < 3)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando !");
			    return true;
			}
			new counter = 0;
			new result;
			for(new i; i != MAX_VEHICLES; i++)
			{
				new dist = ChecarveiculoBPF(5, playerid, i);
				if(dist)
				{
					result = i;
					counter++;
				}
			}
			switch(counter)
			{
				case 0:
				{
					SendClientMessage(playerid, COLOR_GREY, "   Não há nenhum carro nesse raio!");
				}
				case 1:
				{

            	    new string[128];
					new name[MAX_PLAYER_NAME];
				    GetPlayerName(playerid, name, sizeof(name));
				    format(string, sizeof(string), "Você deu respawn no carro ID:[%d]", result);
				    SendClientMessage(playerid, COLOR_GREY, string);
					SetVehicleToRespawn(result);
				}
				default:
				{
					SendClientMessage(playerid, COLOR_GREY, "   Foram encontrados mais de um carro nesse raio");
				}
			}
			return true;
	}

	CMD:respawn(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
        	if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pAdminTemp] < 1)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar este comando !");
			    return true;
			}
			if(!admtrampando[playerid])
				return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

			new Float:cX, Float:cY, Float:cZ;
			for(new i = 0; i < MAX_VEHICLES; i++)
			{
				GetVehiclePos(i, cX, cY, cZ);
				if (PlayerToPoint(15.0, playerid,cX, cY, cZ))
				{
				    SetVehicleToRespawn(i);
				}
			}
			return true;
	}

	CMD:abastecerid(playerid, params[])
	{
        	if(PlayerInfo[playerid][pAdmin] < 2)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar este comando !");
			    return true;
			}
			if(!admtrampando[playerid])
				return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

			new Float:cX, Float:cY, Float:cZ;
			for(new i = 0; i < MAX_VEHICLES; i++)
			{
				GetVehiclePos(i, cX, cY, cZ);
				if (PlayerToPoint(5.0, playerid,cX, cY, cZ))
				{
            	    new string[128];
				    Gas[i] = 100;
					format(string, sizeof(string), "AdmAviso: Carro ID:[%d] foi abastecido Por: %s", i, NomePlayer(playerid));
					ABroadCast(0xff6347FF,string,1);
				}
			}
			return true;
	}
	CMD:flip(playerid)
    {
    if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
        if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
		{
			if(IsPlayerInAnyVehicle(playerid))
		    {
		        new currentveh;
		        new Float:angle;
		        currentveh = GetPlayerVehicleID(playerid);
		        GetVehicleZAngle(currentveh, angle);
		        SetVehicleZAngle(currentveh, angle);
		        SendClientMessage(playerid, 0xFFFFFFFF, "Você desvirou o carro.");
		        return 1;
		    }
		    else
		    {
		        SendClientMessage(playerid, 0xFFFFFFFF, "Você não esta em um veiculo!");
		        return 1;
		    }
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar esse comando !");
		}
		return 1;
    }
  CMD:repararid(playerid, params[])
	{
			if(PlayerInfo[playerid][pAdmin] < 2)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar este comando !");
			    return true;
			}
			if(!admtrampando[playerid])
				return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

			new counter = 0;
			new result;
			new plyName[MAX_PLAYER_NAME];
			GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			for(new i; i != MAX_VEHICLES; i++)
			{
				new dist = ChecarveiculoBPF(5, playerid, i);
				if(dist)
				{
					result = i;
					counter++;
				}
			}
    	    new string[128];
			switch(counter)
			{
				case 0:
				{
					SendClientMessage(playerid, COLOR_GREY, "   Não há nenhum carro nesse raio!");
				}
				case 1:
				{
					new name[MAX_PLAYER_NAME];
				    GetPlayerName(playerid, name, sizeof(name));
				    format(string, sizeof(string), "Você reparou o veículo de [ID: %d]", result);
				    SendClientMessage(playerid, COLOR_GREY, string);
					if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
				    {
						format(string, sizeof(string), "AdmCmd: O admin MOLE reparou o veículo de [ID: %d]", result);
						ABroadCast(0xff6347FF,string,1);
					}
					else
					{
						format(string, sizeof(string), "AdmCmd: O admin %s reparou o veículo de [ID: %d]", name,result);
						ABroadCast(0xff6347FF,string,1);
					}
	    			RepairVehicleWithBomber(result);
				}
				default:
				{
					SendClientMessage(playerid, COLOR_GREY, "   Foram encontrados mais de um carro nesse raio");
				}
			}
			return true;
	}
	CMD:repararvip(playerid, params[])
	{
        if(PlayerInfo[playerid][pVIP] < 5)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "Você não é SÓCIO-GOLD");
			return true;
		}
		if(gettime() < temporeparo)
	        return SendClientMessage(playerid, COLOR_GRAD1, "Você deve esperar 60 segundos para reparar o veículo novamente!");
			new counter = 0;
			new result;
			new plyName[MAX_PLAYER_NAME];
			GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			for(new i; i != MAX_VEHICLES; i++)
			{
				new dist = ChecarveiculoBPF(5, playerid, i);
				if(dist)
				{
					result = i;
					counter++;
				}
			}
			switch(counter)
			{
				case 0:
				{
					SendClientMessage(playerid, COLOR_GREY, "   Não há nenhum carro nesse raio!");
				}
				case 1:
				{
					new name[MAX_PLAYER_NAME];
				    GetPlayerName(playerid, name, sizeof(name));
				    new gstring[128];
                    format(gstring, sizeof(gstring), "* Sócio %s reparou seu veículo.", PlayerName(playerid));
        	        SendClientMessageInRange(20.0, playerid, gstring, 0x75ebc3AA,0x75ebc3AA,0x75ebc3AA,0x75ebc3AA,0x75ebc3AA);
	    			RepairVehicleWithBomber(result);
	    			temporeparo = gettime()+60;
				}
				default:
				{
					SendClientMessage(playerid, COLOR_GREY, "   Foram encontrados mais de um carro nesse raio");
				}
			}
			return true;
	}
		CMD:abastecervip(playerid, params[])
	{
        	if(PlayerInfo[playerid][pVIP] < 5)
	    	{
			SendClientMessage(playerid, COLOR_LIGHTRED, "Você não é SÓCIO-GOLD");
			return true;
	    	}
	    	if(gettime() < tempoabastecer)
	        return SendClientMessage(playerid, COLOR_GRAD1, "Você deve esperar 60 segundos para reparar o veículo novamente!");

			new Float:cX, Float:cY, Float:cZ;
			for(new i = 0; i < MAX_VEHICLES; i++)
			{
				GetVehiclePos(i, cX, cY, cZ);
				if (PlayerToPoint(5.0, playerid,cX, cY, cZ))
				{
            	    new string[128];
				    Gas[i] = 100;
				    format(string, sizeof(string), "* Sócio %s abasteceu seu veículo.", PlayerName(playerid));
        	        SendClientMessageInRange(20.0, playerid, string, 0x75ebc3AA,0x75ebc3AA,0x75ebc3AA,0x75ebc3AA,0x75ebc3AA);
        	        tempoabastecer = gettime()+60;
				}
			}
			return true;
	}
	CMD:respawncarrosorg(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
       	if (PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pAdminTemp] < 1)
		    return SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar este comando !");
		if(!admtrampando[playerid])
			return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

		new orgid;
		if(!(orgid=strval(params)) || (orgid<1||orgid>100))
		    return SendClientMessage(playerid, COLOR_GREY, "USE: /respawncarrosorg [OrgID (1 - 35)] Helper(99) ADM(100)");
		switch(orgid)
		{
		    case 1:
		        for(new x; x != MAX_VEHICLES; x++)
				{
		            if(x >= CarrosPM[0] && x <= CarrosPM[sizeof(CarrosPM)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
		    case 2:
		        for(new x; x != MAX_VEHICLES; x++)
				{
		            if(x >= CarrosBOPE[0] && x <= CarrosBOPE[sizeof(CarrosBOPE)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
		    case 3:
		        for(new x; x != MAX_VEHICLES; x++)
				{
		            if(x >= CarrosGN[0] && x <= CarrosGN[sizeof(CarrosGN)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
		    case 4:
		    {
		        for(new x; x != MAX_VEHICLES; x++)
				{
		            if(x >= CarrosMedicos[0] && x <= CarrosMedicos[sizeof(CarrosMedicos)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
		    }
		    case 5:
		        for(new x; x != MAX_VEHICLES; x++)
				{
		            if(x >= CarrosAztecas[0] && x <= CarrosAztecas[sizeof(CarrosAztecas)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
		    case 7:
		        for(new x; x != MAX_VEHICLES; x++)
				{
		            if(x >= CarrosPrefeitura[0] && x <= CarrosPrefeitura[sizeof(CarrosPrefeitura)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
		    case 8:
		        for(new x; x != MAX_VEHICLES; x++)
				{
		            if(x >= CarrosHitman[0] && x <= CarrosHitman[sizeof(CarrosHitman)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
		    case 9:
		        for(new x; x != MAX_VEHICLES; x++)
				{
		            if(x >= CarrosReporter[0] && x <= CarrosReporter[sizeof(CarrosReporter)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
		    case 11:
		        for(new x; x != MAX_VEHICLES; x++)
				{
		            if(x >= CarrosPF[0] && x <= CarrosPF[sizeof(CarrosPF)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
		    case 12:
		        for(new x; x != MAX_VEHICLES; x++)
				{
		            if(x >= CarrosRussa[0] && x <= CarrosRussa[sizeof(CarrosRussa)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
  		    case 13:
		    {
		        for(new x; x != MAX_VEHICLES; x++){
		            if(x >= CarrosYakuza[0] && x <= CarrosYakuza[sizeof(CarrosYakuza)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
		    }
		    case 14:
		        for(new x; x != MAX_VEHICLES; x++)
				{
		            if(x >= CarrosGroove[0] && x <= CarrosGroove[sizeof(CarrosGroove)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
		    case 15:
		        for(new x; x != MAX_VEHICLES; x++)
				{
		            if(x >= CarrosAlQaeda[0] && x <= CarrosAlQaeda[sizeof(CarrosAlQaeda)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
		    case 16:
		        for(new x; x != MAX_VEHICLES; x++)
				{
		            if(x >= CarrosROTA[0] && x <= CarrosROTA[sizeof(CarrosROTA)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
		    case 17:
		        for(new x; x != MAX_VEHICLES; x++)
				{
		            if(x >= CarrosBallas[0] && x <= CarrosBallas[sizeof(CarrosBallas)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
		    case 18:
		        for(new x; x != MAX_VEHICLES; x++)
				{
		            if(x >= CarrosVagos[0] && x <= CarrosVagos[sizeof(CarrosVagos)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
		    case 19:
		        for(new x; x != MAX_VEHICLES; x++)
				{
		            if(x >= CarrosCV[0] && x <= CarrosCV[sizeof(CarrosCV)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
		    case 20:
		        for(new x; x != MAX_VEHICLES; x++)
				{
		            if(x >= CarrosBombeiros[0] && x <= CarrosBombeiros[sizeof(CarrosBombeiros)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
		    case 21:
		        for(new x; x != MAX_VEHICLES; x++)
				{
		            if(x >= CarrosPCC[0] && x <= CarrosPCC[sizeof(CarrosPCC)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
		    case 22:
		        for(new x; x != MAX_VEHICLES; x++)
				{
		            if(x >= CarrosTriad[0] && x <= CarrosTriad[sizeof(CarrosTriad)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
		    case 23:
		        for(new x; x != MAX_VEHICLES; x++)
				{
		            if(x >= CarrosGI[0] && x <= CarrosGI[sizeof(CarrosGI)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
		    case 24:
		        for(new x; x != MAX_VEHICLES; x++)
				{
		            if(x >= CarrosMayans[0] && x <= CarrosMayans[sizeof(CarrosMayans)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
		    case 25:
		        for(new x; x != MAX_VEHICLES; x++)
				{
		            if(x >= CarrosSons[0] && x <= CarrosSons[sizeof(CarrosSons)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
		    case 33:
		        for(new x; x != MAX_VEHICLES; x++)
				{
		            if(x >= CarrosPR[0] && x <= CarrosPR[sizeof(CarrosPR)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
  		    case 34:
		        for(new x; x != MAX_VEHICLES; x++)
				{
		            if(x >= CarrosMecan[0] && x <= CarrosMecan[sizeof(CarrosMecan)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
            case 35:
		        for(new x; x != MAX_VEHICLES; x++)
				{
		            if(x >= CarrosGAT[0] && x <= CarrosGAT[sizeof(CarrosGAT)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
            case 99:
		        for(new x; x != MAX_VEHICLES; x++)
				{
		            if(x >= CarrosHelpers[0] && x <= CarrosHelpers[sizeof(CarrosHelpers)-1] && !VeiculoOcupado(x))
		                SetVehicleToRespawn(x);
		        }
		    default:
		    {
		        return SendClientMessage(playerid, COLOR_GRAD1, "Organização invalida!");
		    }
		}

		new string[95];
		format(string, sizeof string, "RESPAWN: O admin %s deu respawn nos carros da organização: [%s]", NomePlayer(playerid), GetOrgName(orgid));
		SendClientMessageToAll(0xff6347FF, string);
		return 1;
	}
	CMD:respawncarros(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
         	if (PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pAdminTemp] < 1)
			    return SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar este comando !");
			if(!admtrampando[playerid])
				return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

            isPlayerInArea();
			for(new i; i < MAX_VEHICLES; i++)
			{
			    new bool:pde = true;
			    foreach(Player, p){
			        if(GetPlayerVehicleID(p) == i)
			            pde = false;
			    }
			    if(Naorespawn[i] == 1)
			            pde = false;
			    if(pde)
			        SetVehicleToRespawn(i);
			}
    	    new string[78];
			GetPlayerName(playerid, playername, sizeof(playername));
			fMessageToAll(0xff6347FF, "RESPAWN: O admin %s deu respawn em todos os carros do servidor fora da HQ Detran.",playername);
			format(string, sizeof(string), "RESPAWN: %s deu respawn nos carros",playername);
			BPFLogs("comandosadmin", string);
			return true;
	}
    CMD:homembomba(playerid)
	{
	    if(PlayerInfo[playerid][pJailed] != 0)
	    {
		   SendClientMessage(playerid,COLOR_GREY," Você não pode usar homem bomba na cadeia !");
		   return 1;
        }
		if(PlayerInfo[playerid][pMembro] != 23 && PlayerInfo[playerid][pLider] != 23 && PlayerInfo[playerid][pMembro] != 15 && PlayerInfo[playerid][pLider] != 15)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Você não é do Terrorista");
		    return 1;
		}
		if(PlayerInfo[playerid][pCargo] < 3)
		{
			 SendClientMessage(playerid, COLOR_GRAD1, "Você precisa ser cargo 3+ para usar este comando.");
			 return 1;
		}
		if(phbomba[playerid] == 1)
        {
	        SendClientMessage(playerid,COLOR_GRAD2,"Já usaram homem-bomba, aguarde 40 segundos para usar novamente !");
	        return 1;
        }
		if(GetPVarInt(playerid, "Explodir") == 1)
		{
		    SendClientMessage(playerid,COLOR_GRAD2,"Você só pode usar uma bomba por vez!");
		    return 1;
        }
		if(GetPlayerMoney(playerid) <= 2000)
	    {
		    SendClientMessage(playerid,0xE60000FF,"Você não tem R$2.000 !");
		    return 1;
        }
        if(TendoGuerra == 1 && IsPlayerInTerritorio(playerid))
	    {
			 SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando em guerra !");
			 return 1;
	    }
		ShowPlayerDialog(playerid, 70, DIALOG_STYLE_INPUT,"Menu Bombas","Qual tipo de bomba você deseja? \nDigite Programada ou Controlada !","Confirmar","Cancelar");
        phbomba[playerid] = 1;
        SetTimerEx("hbomba", 120000, 0, "i", playerid);
		return 1;
	}
     CMD:carrobomba(playerid)
	{
		if(PlayerInfo[playerid][pJailed] != 0)
    	{
		   SendClientMessage(playerid,COLOR_GREY," Você não pode usar carro bomba na cadeia!");
		   return 1;
   		}
		if(PlayerInfo[playerid][pMembro] != 23 && PlayerInfo[playerid][pLider] != 23 && PlayerInfo[playerid][pMembro] != 15 && PlayerInfo[playerid][pLider] != 15)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Você não é um Terrorista");
		    return 1;
		}
		if(PlayerInfo[playerid][pCargo] < 3)
		{
			 SendClientMessage(playerid, COLOR_GRAD1, "Você precisa ser cargo 3+ para usar este comando.");
			 return 1;
		}
		if(pcbomba == 1)
	    {
	        SendClientMessage(playerid,COLOR_GRAD2,"Já usaram carrobomba, aguarde 20 segundos para usar novamente!");
	        return 1;
	    }
	    new string[128];
		new vehicle;
		vehicle = GetPlayerVehicleID(playerid);
		new Float:x, Float:y, Float:z;
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(IsPlayerConnected(playerid))
		{
			if(vehicle != 0)
			{
				SetPlayerHealth(playerid, 0);
				GetVehiclePos(vehicle, x, y, z);
				CreateExplosion(x, y, z, 7, 50);
				printf("[Terrorista] Usou Carro Bomba");
				format(string, sizeof(string), "Terrorista %s Usou Carro Bomba! ID[%d]", sendername, playerid);
			    ABroadCast(COLOR_YELLOW,string,1);
				pcbomba = 1;
			    Tempocbomba = SetTimer("cbomba", 20000, 0);
			}
			if(vehicle == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "Você precisa estar em um carro");
			    return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Você não está autorizado a usar este comando!");
		}
  		return 1;
	}
	CMD:spawncarros(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
         	if (PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pAdminTemp] < 1)
			    return SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar este comando !");
			if(!admtrampando[playerid])
				return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

			for(new i; i < MAX_VEHICLES; i++)
			{
			    new bool:pde = true;
			    foreach(Player, p){
			        if(GetPlayerVehicleID(p) == i)
			            pde = false;
			    }
			    if(pde)
			        SetVehicleToRespawn(i);
			}
    	    new string[78];
			GetPlayerName(playerid, playername, sizeof(playername));
			fMessageToAll(0xff6347FF, "RESPAWN: O admin %s deu respawn em todos os carros do servidor.",playername);
			format(string, sizeof(string), "RESPAWN: %s deu respawn nos carros",playername);
			BPFLogs("comandosadmin", string);
			return true;
	}

	CMD:explodir(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
		{
		    new Jogador;
			if(sscanf(params, "u", Jogador))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: /explodir [playerid]");
				return 1;
			}
			if(!admtrampando[playerid])
				return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

            if(!IsPlayerConnected(Jogador))return SendClientMessage(playerid, COLOR_GRAD1, "  Player não conectado");

    	    new string[128];
			new Float:burnx, Float:burny, Float:burnz;
			GetPlayerPos(Jogador,burnx, burny, burnz);
			CreateExplosion(burnx, burny , burnz + 3, 1, 3);
			GetPlayerName(Jogador, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "AdmCmd: %s explodiu %s.",PlayerName(playerid), PlayerName(Jogador));
			ABroadCast(COLOR_LIGHTRED,string,1);
			BPFLogs("comandosadmin", string);
		}
		else
		{
	  		SendClientMessage(playerid,COLOR_GRAD5,"Você não tem permissão para usar esse comando!");
	 	}
		return 1;
	}

	CMD:kboom2(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
		{
		    new Jogador, explosao;
			if(sscanf(params, "ud", Jogador, explosao))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: /explodir2 [playerid] [explosao-tipo]");
				return 1;
			}
			if(!admtrampando[playerid])
				return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

			if(!IsPlayerConnected(Jogador))return SendClientMessage(playerid, COLOR_GRAD1, "  Player não conectado");

    	    new string[128];
			new Float:burnx, Float:burny, Float:burnz;
			GetPlayerPos(Jogador,burnx, burny, burnz);
			CreateExplosion(burnx, burny , burnz + 3, explosao, 3);
			GetPlayerName(Jogador, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "AdmCmd: %s explodiu %s.",PlayerName(playerid), PlayerName(Jogador));
			ABroadCast(COLOR_LIGHTRED,string,1);
			BPFLogs("comandosadmin", string);
		}
		else
		{
	  		SendClientMessage(playerid,COLOR_GRAD5,"Você não tem permissão para usar esse comando!");
	 	}
		return 1;
	}

	CMD:trazer(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
	        if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pAdminTemp] < 1)
	    	{
				SendClientMessage(playerid, COLOR_GRAD1, "	Você não pode usar este comando!");
				return 1;
	    	}
	        new plo;
			if(sscanf(params, "u", plo))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /trazer [id/nick]");
				return 1;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new giveplayername[MAX_PLAYER_NAME];
    	    new string[128];
			if (IsPlayerConnected(plo))
			{
        		if(WatchingTV[plo] == 1)
	   	 		{
	    			SendClientMessage(playerid, COLOR_GREY, "Este administrador está em modo de /tv e você não pode traze-lo até você!");
	    			return 1;
	    		}
        		if(PlayerInfo[plo][pJailed] >= 1)
	    		{
	    			SendClientMessage(playerid, COLOR_GREY, " Este jogador está preso, você não pode puxa-lo");
	    			return 1;
	    		}
	    		if(PlayerInfo[plo][pTempoHospital] >= 1)
	    		{
	    			SendClientMessage(playerid, COLOR_GREY, " Este jogador está hospitalizado, você não pode puxa-lo");
	    			return 1;
	    		}
	    		if(PlayerInfo[plo][pAdmin] > 1337 && PlayerInfo[playerid][pAdmin] < 3000)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não pode ir em um Admin Dono !");
					return true;
				}
	    		if(plo != INVALID_PLAYER_ID)
		    	{
					if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
					{
						if(PlayerInfo[playerid][pAdmin] > 0 && PlayerInfo[playerid][pAdminTemp] > 0 && !admtrampando[playerid])
							return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

						GetPlayerPos(playerid, plocx, plocy, plocz);
						if(PlayerInfo[playerid][pInt] > 0)
						{
							SetPlayerInterior(plo,PlayerInfo[playerid][pInt]);
							PlayerInfo[plo][pInt] = PlayerInfo[playerid][pInt];
							PlayerInfo[plo][pLocal] = PlayerInfo[playerid][pLocal];
						}
						if(PlayerInfo[playerid][pInt] == 0)
						{
							SetPlayerInterior(plo,0);
						}
						if(plocz > 930.0 && PlayerInfo[playerid][pInt] == 0) //the highest land point in sa = 526.8
						{
							SetPlayerInterior(plo,1);
							PlayerInfo[plo][pInt] = 1;
						}
						if (GetPlayerState(plo) == 2)
						{
	  		  				SetPlayerInterior(plo,GetPlayerInterior(playerid));
		   	 				SetPlayerVirtualWorld(plo,GetPlayerVirtualWorld(playerid));
							new tmpcar = GetPlayerVehicleID(plo);
							SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
						}
						else
						{
					 		SetPlayerInterior(plo,GetPlayerInterior(playerid));
				   			SetPlayerVirtualWorld(plo,GetPlayerVirtualWorld(playerid));
							SetPlayerPos(plo,plocx,plocy+2, plocz);
						}
						if(PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pAdminTemp] > 0)
						{
							GetPlayerName(playerid, playername, sizeof(playername));
							GetPlayerName(plo, giveplayername, sizeof(giveplayername));
					 		format(string, sizeof(string), "*Admin %s levou %s.", playername,giveplayername);
				        	SendClientMessageInRange(30.0, plo, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					  		format(string, sizeof(string), "*Admin %s trouxe %s.", playername,giveplayername);
	     		 			SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Você precisa ser admin para usar este comando.");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d não é um jogador ativo.", plo);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
			return 1;
	}
    	CMD:iniciarx1(playerid, params[]){

		if(PlayerInfo[playerid][pAdmin] < 4)
			return SendClientMessage(playerid, COLOR_GREY, "Você não pode usar este comando!");

		new id1, id2;

		if(sscanf(params, "uu", id1, id2))
		    return SendClientMessage(playerid, COLOR_GREY, "USE: /iniciarx1 [Jogador 1] [Jogador 2]");

		if(!IsPlayerConnected(id1) || !IsPlayerConnected(id2))
		    return SendClientMessage(playerid, COLOR_GREY, " Um dos dois jogadores não está conectado!");

		new Str[128];

		SendClientMessageToAll(COLOR_DBLUE, "|________________| Evento de x1 |________________| ");
		format(Str, sizeof Str, "..::Evento de x1::.. O próximo x1 será entre (%s Vs. %s)", NomePlayer(id1), NomePlayer(id2));
		SendClientMessageToAll(COLOR_DBLUE, Str);

		KillTimer(timerx1);

		countx1 = 3;
		timerx1 = SetTimer("contarx1", 1000, 1);

		Playersx1[0] = id1;
		Playersx1[1] = id2;

		Controle(Playersx1[0], 0);
		Controle(Playersx1[1], 0);

		ResetPlayerWeapons(id1);
		GivePlayerWeapon(id1, 24, 999);
		GivePlayerWeapon(id1, 25, 999);
		SetPlayerHealth(id1, 100.0);
		SetPlayerArmour(id1, 100.0);
		SetPlayerInterior(id1, 0);
		SetPlayerVirtualWorld(id1, 0);
		SetPlayerPos(id1, -2315.9895,-1633.1938,483.7031);
		SetPlayerFacingAngle(id1, 483.7031);

		ResetPlayerWeapons(id2);
		GivePlayerWeapon(id2, 24, 999);
		GivePlayerWeapon(id2, 25, 999);
		SetPlayerHealth(id2, 100.0);
		SetPlayerArmour(id2, 100.0);
		SetPlayerInterior(id2, 0);
		SetPlayerVirtualWorld(id2, 0);
		SetPlayerPos(id2, -2338.6704,-1635.5643,483.7031);
		SetPlayerFacingAngle(id2, 268.6049);
	    return 1;
	}

	BPF::contarx1(){

	    switch(countx1){

	        case 3:GameTextForAll("_~n~_~n~_~n~_~n~3", 4000, 6);
	        case 2:GameTextForAll("_~n~_~n~_~n~_~n~2", 4000, 6);
	        case 1:GameTextForAll("_~n~_~n~_~n~_~n~1", 4000, 6);
	        case 0:{
				GameTextForAll("_~n~_~n~_~n~_~n~||GOGOGO||", 2000, 6);
				tempox1 = gettime();
			}
	    }

	    if(countx1 > 0)countx1 --;
	    else
		{

		    SetCameraBehindPlayer(Playersx1[0]);
		    SetCameraBehindPlayer(Playersx1[1]);
			Controle(Playersx1[0], 1);
			Controle(Playersx1[1], 1);

			KillTimer(timerx1);
		}
	}
	CMD:trazerx1(playerid, params[])
	{
	        if(PlayerInfo[playerid][pAdmin] < 4)
	    	{
				SendClientMessage(playerid, COLOR_GRAD1, "	Você não pode usar este comando!");
				return 1;
	    	}
	        new plo;
			if(sscanf(params, "u", plo))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /trazerx1 [id/nick]");
				return 1;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new giveplayername[MAX_PLAYER_NAME];
    	    new string[128];
			if (IsPlayerConnected(plo))
			{
        		if(WatchingTV[plo] == 1)
	   	 		{
	    			SendClientMessage(playerid, COLOR_GREY, "Este administrador está em modo de /tv e você não pode traze-lo até você!");
	    			return 1;
	    		}
        		if(PlayerInfo[plo][pJailed] >= 1)
	    		{
	    			SendClientMessage(playerid, COLOR_GREY, " Este jogador está preso você não pode puxa-lo");
	    			return 1;
	    		}
	    		if(PlayerInfo[plo][pTempoHospital] >= 1)
	    		{
	    			SendClientMessage(playerid, COLOR_GREY, " Este jogador está hospitalizado, você não pode puxa-lo");
	    			return 1;
	    		}
	    		if(plo != INVALID_PLAYER_ID)
		    	{
					if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
					{
						if(!admtrampando[playerid])
							return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

						GetPlayerPos(playerid, plocx, plocy, plocz);
						if(PlayerInfo[playerid][pInt] > 0)
						{
							SetPlayerInterior(plo,PlayerInfo[playerid][pInt]);
							PlayerInfo[plo][pInt] = PlayerInfo[playerid][pInt];
							PlayerInfo[plo][pLocal] = PlayerInfo[playerid][pLocal];
						}
						if(PlayerInfo[playerid][pInt] == 0)
						{
							SetPlayerInterior(plo,0);
						}
						if(plocz > 930.0 && PlayerInfo[playerid][pInt] == 0) //the highest land point in sa = 526.8
						{
							SetPlayerInterior(plo,1);
							PlayerInfo[plo][pInt] = 1;
						}
						if (GetPlayerState(plo) == 2)
						{
	  		  				SetPlayerInterior(plo,GetPlayerInterior(playerid));
		   	 				SetPlayerVirtualWorld(plo,GetPlayerVirtualWorld(playerid));
							new tmpcar = GetPlayerVehicleID(plo);
							ResetPlayerWeapons(plo);
							GivePlayerWeapon(plo, 24, 999);
							GivePlayerWeapon(plo, 25, 999);
							SetPlayerHealth(plo, 100);
							SetPlayerArmour(plo, 100);
							SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
						}
						else
						{
					 		SetPlayerInterior(plo,GetPlayerInterior(playerid));
				   			SetPlayerVirtualWorld(plo,GetPlayerVirtualWorld(playerid));
							SetPlayerPos(plo,plocx,plocy+2, plocz);
							ResetPlayerWeapons(plo);
							GivePlayerWeapon(plo, 24, 999);
							GivePlayerWeapon(plo, 25, 999);
							SetPlayerHealth(plo, 100);
							SetPlayerArmour(plo, 100);
						}
						GetPlayerName(playerid, playername, sizeof(playername));
						GetPlayerName(plo, giveplayername, sizeof(giveplayername));
				 		format(string, sizeof(string), "*Admin %s levou %s para o evento de x1.", playername,giveplayername);
			        	SendClientMessageInRange(30.0, plo, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				  		format(string, sizeof(string), "*Admin %s trouxe %s para o evento de x1.", playername,giveplayername);
     		 			SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d não é um jogador ativo.", plo);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
			return 1;
	}


	CMD:pegarcarro(playerid, params[])
	{
	        new plo;
			if(sscanf(params, "d", plo))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /pegarcarro [carro id]");
				return true;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
				if(!admtrampando[playerid])
					return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

				GetPlayerPos(playerid, plocx, plocy, plocz);
				SetVehiclePos(plo,plocx,plocy+4, plocz);
				LinkVehicleToInterior(plo, 0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar este comando!");
			}
			return true;
	}

	CMD:carroantigo(playerid, params[])
	{
 		new string[128];
 		format(string, sizeof(string), "ID do último carro: %d",gLastCar[playerid]);
		SendClientMessage(playerid, COLOR_GREY, string);
 		return true;
	}
	CMD:carroscriados(playerid, params[])
	{
	        if(PlayerInfo[playerid][pAdmin] >= 4)
	        {
				if(!admtrampando[playerid])
					return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

        	    new string[128];
          		if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 3000)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo Admin USE: /trabalhar");
					return true;
				}
		    	format(string, sizeof(string), "Quantidade de Carros Criados: %d",CreatedCar);
		    	SendClientMessage(playerid, COLOR_GREY, string);
		    	return true;
		    }
		    else
	        {
	            SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar este comando!");
	        }
	    	return true;
	}

    CMD:beijar(playerid, params[])
	{
		if(sscanf(params, "u", giveplayerid))
		{
			SendClientMessage(playerid, COLOR_GREY, "/beijar [Playerid]");
            return 0x01;
		}
		if(giveplayerid == playerid)return SendClientMessage(playerid, COLOR_GREY, "Você não pode usar este comando em você mesmo!");
	    if(IsPlayerConnected(giveplayerid))
	    {
		    if(ProxDetectorS(1.0, playerid, giveplayerid))
       		{
   		    	new string[78];
               	new Float:angle, Float:x, Float:y, Float:z;
               	GetPlayerPos(giveplayerid, x, y, z);
               	GetXYInFrontOfPlayer(giveplayerid, x, y, 0.8);
               	SetPlayerPos(playerid, x, y, z);
               	GetPlayerFacingAngle(giveplayerid, angle);
			   	SetPlayerFacingAngle(playerid, angle + 180);
			   	format(string, sizeof(string),"* %s da um beijo na boca de %s.", NomePlayer(playerid), NomePlayer(giveplayerid));
               	SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
               	ApplyAnimation(playerid,"KISSING","Grlfrd_Kiss_02",3.1,0,1,1,0,0);
               	ApplyAnimation(giveplayerid,"KISSING","Grlfrd_Kiss_02",3.1,0,1,1,0,0);
            }
			else
			{
	    		SendClientMessage(playerid, COLOR_WHITE, "O player não está perto o suficiente de você.");
			}
		}
        else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "Player offline.");
		}
        return 0x01;
	}

    CMD:comprimentar(playerid, params[])
	{
		if(sscanf(params, "u", giveplayerid))
		{
			SendClientMessage(playerid, COLOR_GREY, "/comprimentar [Playerid]");
            return 0x01;
		}
		if(giveplayerid == playerid)return SendClientMessage(playerid, COLOR_GREY, "Você não pode usar este comando em você mesmo!");
	    if(IsPlayerConnected(giveplayerid))
	    {
		    if(ProxDetectorS(1.0, playerid, giveplayerid))
       		{
   		    	new string[78];
               	new Float:angle, Float:x, Float:y, Float:z;
               	GetPlayerPos(giveplayerid, x, y, z);
               	GetXYInFrontOfPlayer(giveplayerid, x, y, 0.8);
               	SetPlayerPos(playerid, x, y, z);
               	GetPlayerFacingAngle(giveplayerid, angle);
			   	SetPlayerFacingAngle(playerid, angle + 180);
			   	format(string, sizeof(string),"* %s aperta a mão de %s.", NomePlayer(playerid), NomePlayer(giveplayerid));
               	SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
               	ApplyAnimation(playerid,"GANGS","hndshkaa",3.1,0,1,1,0,0);
               	ApplyAnimation(giveplayerid,"GANGS","hndshkaa",3.1,0,1,1,0,0);
            }
			else
			{
	    		SendClientMessage(playerid, COLOR_WHITE, "O player não está perto o suficiente de você.");
			}
		}
        else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "Player offline.");
		}
        return 0x01;
	}


    CMD:boquete(playerid, params[])
	{
		if(sscanf(params, "u", giveplayerid))
		{
			SendClientMessage(playerid, COLOR_GREY, "/boquete [Playerid]");
            return 0x01;
		}
		if(giveplayerid == playerid)return SendClientMessage(playerid, COLOR_GREY, "Você não pode usar este comando em você mesmo!");
	    if(IsPlayerConnected(giveplayerid))
	    {
		    if(ProxDetectorS(1.0, playerid, giveplayerid))
       		{
   		    	new string[78];
               	new Float:angle, Float:x, Float:y, Float:z;
               	GetPlayerPos(giveplayerid, x, y, z);
               	GetXYInFrontOfPlayer(giveplayerid, x, y, 0.8);
               	SetPlayerPos(playerid, x, y, z);
               	GetPlayerFacingAngle(giveplayerid, angle);
			   	SetPlayerFacingAngle(playerid, angle + 180);
			   	format(string, sizeof(string),"* %s paga um boquete para %s.", NomePlayer(playerid), NomePlayer(giveplayerid));
               	SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
               	ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_W",3.1,0,1,1,0,0);
               	ApplyAnimation(giveplayerid,"BLOWJOBZ","BJ_COUCH_END_P",3.1,0,1,1,0,0);
            }
			else
			{
	    		SendClientMessage(playerid, COLOR_WHITE, "O player não está perto o suficiente de você.");
			}
		}
        else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "Player offline.");
		}
        return 0x01;
	}

	CMD:abastecercarros(playerid, params[])
	{
	        if(PlayerInfo[playerid][pAdmin] >= 4)
	        {
				if(!admtrampando[playerid])
					return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

				GetPlayerName(playerid, sendername, sizeof(sendername));
	            for(new c=0;c<TOTAL_CARROS;c++)
				{
					Gas[c] = GasMax;
				}
        	    new string[100];
				format(string, sizeof(string), "ABASTECER: O admin %s abasteceu todos os carros do servidor.",sendername);
				SendClientMessageToAll(0xff6347FF, string);
				BPFLogs("comandosadmin", string);
	        }
	        else
	        {
	           	SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar este comando!");
	            return true;
	        }
	    	return true;
	}
//----------------------------------[Dar Arma]------------------------------------------------
	CMD:dararma(playerid, params[])
	{
			new playa;
			new gun;
			new ammo;
			if(sscanf(params, "udd", playa, gun, ammo))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /dararma [ID do Player] [arma id(ex. 24 = Eagle)] [munição]");
				SendClientMessage(playerid, COLOR_GRAD4, "3(Cassetete) 4(Faca) 5(Taco de Baseball) 6(Pá) 7(Espada) 8(Katana) 10-13(Vibrador) 14(Flores) 16(Granadas) 17(Granada Gás) 18(Molotovs) 22(Pistola)");
				SendClientMessage(playerid, COLOR_GRAD3, "23(Pistola com Silenciador) 24(Eagle) 25(Escopeta) 29(MP5) 30(AK47) 31(M4) 33(Rifle) 34(Sniper) 37(Lança Chamas) 41(spray) 42(extintor) 43(Camera) 46(Paraquedas)");
				return true;
			}
    	    new string[128];
			if(ammo < 1 || ammo > 999)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   O minimo de munição é 1 e o máximo é 999!");
				return true;
			}
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
       			if(!admtrampando[playerid])
					return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

			    if(IsPlayerConnected(playa))
			    {
	        		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GivePlayerWeapon(playa, gun, ammo);
					format(string, sizeof(string), "AdmCmd: O admin %s deu arma (%s com %d balas) para %s.", sendername, NomeArma(gun), ammo, giveplayer);
                    ABroadCast(0xff6347FF,string,1337);
					BPFLogs("comandosadmin", string);
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não esta autorizado a usar este comando!");
			}
			return true;
	}

new vtName[6][64];
new vtVotos[6];
new vtIniciada;
new vtWin;
new vtMaior;

	CMD:votacaolista(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
		{
		    if(!vtIniciada)
		    {
		        new pergunta[64];
				if(sscanf(params, "s[64]s[64]s[64]s[64]s[64]s[64]", pergunta, vtName[1], vtName[2], vtName[3], vtName[4], vtName[5]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /votacaolista [PERGUNTA] [Opção 1] [Opção 2] [Opção 3] [Opção 4] [Opção 5]");
					return 1;
				}
				new string[128];

				SendClientMessageToAll(COLOR_DBLUE, "___________________________________________________________________________________________");

				format(string, 128, "[Pergunta de %s: %s ?]", NomePlayer(playerid), pergunta);
                SendClientMessageToAll(-1, string);

				format(string, 128, "*Opção 1: {33CCFF}%s", vtName[1]);
                SendClientMessageToAll(COLOR_DBLUE, string);
				format(string, 128, "*Opção 2: {33CCFF}%s", vtName[2]);
                SendClientMessageToAll(COLOR_DBLUE, string);
				format(string, 128, "*Opção 3: {33CCFF}%s", vtName[3]);
                SendClientMessageToAll(COLOR_DBLUE, string);
				format(string, 128, "*Opção 4: {33CCFF}%s", vtName[4]);
                SendClientMessageToAll(COLOR_DBLUE, string);
				format(string, 128, "*Opção 5: {33CCFF}%s", vtName[5]);
                SendClientMessageToAll(COLOR_DBLUE, string);

                SendClientMessageToAll(COLOR_DBLUE, "* Basta digitar {33CCFF}/opcao [1 - 5] {243def}para votar em uma delas!");

				SendClientMessageToAll(COLOR_DBLUE, "___________________________________________________________________________________________");

                vtWin = 0;
                vtMaior = 0;
                vtIniciada = 1;

				for(new i; i != 6; i++)
					vtVotos[i] = 0;

				for(new i; i < MAX_PLAYERS; i++)
					votou[i] = false;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY,"Já existe uma votação em andamento!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY,"Você não tem permissão para usar este comando!");
		}
		return 1;
	}

	CMD:opcao(playerid, params[])
	{
		if(vtIniciada && !votou[playerid])
		{
		    new vtid, string[128];
		    if(sscanf(params, "d", vtid) || vtid < 1 || vtid > 5)
				return SendClientMessage(playerid, COLOR_GREY, "USE: /opcao [1 - 5]");

            vtVotos[vtid]++;

            if(vtVotos[vtid] == vtMaior){
                vtWin = 0;
            }
            else if(vtVotos[vtid] > vtMaior){
                vtWin = vtid;
                vtMaior = vtVotos[vtid];
            }

            format(string, sizeof string, "Você votou na opção %d: ''%s''", vtid, vtName[vtid]);
			SendClientMessage(playerid, COLOR_DBLUE, string);

			votou[playerid] = true;
		}
	    return 1;
	}
	CMD:spawnarplus(playerid){

  		if(!gPlayerLogged[playerid])
    		return SendClientMessage(playerid,COLOR_GRAD1,"Você não está logado no servidor!");
        if(PlayerInfo[playerid][pAdmin] < 3000)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Você não esta autorizado a usar este comando!");
			    return true;
			}

	    MEGAString[0] = EOS;
	    strcat(MEGAString, "{FFFFFF}Caixa Surpresa Reveillon\n");
	    strcat(MEGAString, "{FFFFFF}Caixa Surpresa Gigante\n");
	    strcat(MEGAString, "{FFFFFF}Maleta\n");

	    ShowPlayerDialog(playerid, 2794, DIALOG_STYLE_LIST, "Escolha o item que deseja spawnar", MEGAString, "Iniciar", "Cancelar");
	    return 1;
	}
	CMD:encerrarvotacao(playerid)
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
		{
			if(vtIniciada)
			{
			    new string[128];

			    SendClientMessageToAll(COLOR_LIGHTBLUE, "___________________________________________________________________________________________");

				format(string, 128, "(%d Votos) Opção 1: {33CCFF}%s", vtVotos[1], vtName[1]);
                SendClientMessageToAll(-1, string);
				format(string, 128, "(%d Votos) Opção 2: {33CCFF}%s", vtVotos[2], vtName[2]);
                SendClientMessageToAll(-1, string);
				format(string, 128, "(%d Votos) Opção 3: {33CCFF}%s", vtVotos[3], vtName[3]);
                SendClientMessageToAll(-1, string);
				format(string, 128, "(%d Votos) Opção 4: {33CCFF}%s", vtVotos[4], vtName[4]);
                SendClientMessageToAll(-1, string);
				format(string, 128, "(%d Votos) Opção 5: {33CCFF}%s", vtVotos[5], vtName[5]);
                SendClientMessageToAll(-1, string);


				if(vtWin == 0)
				{
                	SendClientMessageToAll(COLOR_LIGHTBLUE, "* Houve um empate entre algumas opções acima, nenhuma delas foi a mais votada!");
				}
				else{

					format(string, 128, ">> A opção mais votada foi a nº%d: {33CCFF}''%s'' !", vtWin, vtName[vtWin]);
                	SendClientMessageToAll(COLOR_DBLUE, string);
				}

                vtIniciada = 0;
				SendClientMessageToAll(COLOR_LIGHTBLUE, "___________________________________________________________________________________________");
			}
		}
	    return 1;
	}

	CMD:votacao(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
		{
		    if(!votacao[iniciada])
		    {
				if(isnull(params))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /votacao [pergunta]");
					return 1;
				}
				if(strlen(params) > 100)return SendClientMessage(playerid, COLOR_GREY, "Pergunta muito grande!");
				new string[128];
				SendClientMessageToAll(-1, "__________________________________________________________________________");
				format(string, sizeof string, "[VOTAÇÃO]:» %s ?", params[0]);
				SendClientMessageToAll(0xFFFFFFAA, string);
				format(string, sizeof string, "» Admin: %s", NomePlayer(playerid));
				SendClientMessageToAll(0xFFFFFFAA, string);
				SendClientMessageToAll(0xFFF000AA, "» Para votar em SIM digite: /sim");
				SendClientMessageToAll(0xFFF000AA, "» Para votar em NÃO digite: /nao");
                SendClientMessageToAll(-1, "__________________________________________________________________________");

				votacao[iniciada] = true;
				votacao[sim] = 0;
				votacao[nao] = 0;
				for(new i; i < MAX_PLAYERS; i++)
				{
					votou[i] = false;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY,"Já existe uma votação em andamento!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY,"Você não tem permissão para usar este comando!");
		}
		return 1;
	}

	CMD:sim(playerid)
	{
		if(votacao[iniciada] && !votou[playerid])
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Obrigado por ter votado, espere o resultado!");
			votacao[sim]++;
			votou[playerid] = true;
		}
		return 1;
	}
	CMD:nao(playerid)
	{
		if(votacao[iniciada] && !votou[playerid])
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Obrigado por ter votado, espere o resultado!");
			votacao[nao]++;
			votou[playerid] = true;
		}
		return 1;
	}



getPlayerTitulo(playerid){

	new

		titulo[72]
	;

	switch(PlayerInfo[playerid][pTitulo]){

        case 0:titulo 	= "nenhum";
		case 1:titulo 	= "{999999}Scripter";
		case 2:titulo 	= "{999999}Mapper";
		case 3:format(titulo, sizeof titulo, getCargoAdmin(playerid));
		case 4:format(titulo, sizeof titulo, GetOrgName(GetPlayerOrg(playerid)));
		case 5:titulo 	= "{999999}Matador";
		case 6:titulo 	= "{999999}Noob";
		case 7:titulo 	= "{999999}Experiente";
		case 8:titulo 	= "{999999}VIP";
		case 9:titulo 	= "{999999}Sócio";
		case 10:titulo 	= "{999999}Sócio Power";
  		case 11:titulo 	= "{999999}Líder";
       	case 12:titulo 	= "{999999}Novato";
    	case 13:titulo 	= "{999999}Milionário";
    	case 14:titulo 	= "{999999}Helper";
    	case 15:titulo 	= "{999999}Sniper";
    	case 16:titulo 	= "{fef33c}.::(SÓCIO-GOLD)::.";
    	case 17:titulo 	= "{AEFFD1}»(SÓCIO-PLATINA)«";
    	case 18:format(titulo, sizeof titulo, PlayerInfo[playerid][pTITULOP]);
		default:titulo	= "";
	}

	return titulo;
}
	CMD:titulos(playerid){
  		if(!gPlayerLogged[playerid])
    		return SendClientMessage(playerid,COLOR_GRAD1,"Você não está logado no servidor!");

	    MEGAString[0] = EOS;
	    strcat(MEGAString, "{999999}Titulo » {FFA500}Remover\n");
	    strcat(MEGAString, "{999999}Titulo » {FFA500}Scripter\n");
	    strcat(MEGAString, "{999999}Titulo » {FFA500}Mapper\n");
	    strcat(MEGAString, "{999999}Titulo » {FFA500}Cargo de admin\n");
	    strcat(MEGAString, "{999999}Titulo » {FFA500}Nome da ORG\n");
	    strcat(MEGAString, "{999999}Titulo » {FFA500}Matador\n");
	    strcat(MEGAString, "{999999}Titulo » {FFA500}Noob\n");
	    strcat(MEGAString, "{999999}Titulo » {FFA500}Experiente\n");
	    strcat(MEGAString, "{999999}Titulo » {FFA500}VIP\n");
	    strcat(MEGAString, "{999999}Titulo » {FFA500}Sócio\n");
	    strcat(MEGAString, "{999999}Titulo » {FFA500}Sócio Power\n");
	    strcat(MEGAString, "{999999}Titulo » {FFA500}Líder\n");
	    strcat(MEGAString, "{999999}Titulo » {FFA500}Novato\n");
	    strcat(MEGAString, "{999999}Titulo » {FFA500}Milionário\n");
	    strcat(MEGAString, "{999999}Titulo » {FFA500}Helper\n");
	    strcat(MEGAString, "{999999}Titulo » {FFA500}Sniper\n");
	    strcat(MEGAString, "{999999}Titulo » {FFFFFF}Personalizado\n");
	    strcat(MEGAString, "{999999}Titulo » {fef33c}.::(SÓCIO-GOLD)::.\n");
	    strcat(MEGAString, "{999999}Titulo » {AEFFD1}»(SÓCIO-PLATINA)«\n");

	    ShowPlayerDialog(playerid, 5798, DIALOG_STYLE_LIST, "Escolha seu titulo", MEGAString, "Escolher", "Sair");
	    return 1;
	}
	CMD:bonuscash(playerid)
    {
   		MEGAString[0] = EOS;

		strcat(MEGAString, "{FFFFFF}> Bônus de Ativação\n\n");
		strcat(MEGAString, "{FF0000}Promoção {FFFFFF}Nenhuma\n\n");
		strcat(MEGAString, "{FFFFFF}Ativação de qualquer valor recebe bônus de {00FF00}+00%{FFFFFF} de cash.\n");
		strcat(MEGAString, "{01DFA5}Exemplo: {FFFFFF}R$:50,00 = 50.000 cash + 25%(+12.000)= {00FF00}62.500{FFFFFF} de cash\n");
		strcat(MEGAString, "{FFFFFF}~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~~.~~.~~.~~~.~~.~~.~~~.~~.~~.~\n\n");
		strcat(MEGAString, "{FFFFFF}> Bônus de carteirinha colaborador (01/01/2021 até 31/12/2021)\n\n");
		strcat(MEGAString, "{01DFA5}Oque é a carteirinha de colaborador?{FFFFFF} Para jogadores que fazem parte de equipes do servidor\n");
	    strcat(MEGAString, "{01DFA5}Exemplo: {FFFFFF}Staff do servidor, Staff do Fórum, Staff do TeamSpeak, Staff da Rádio, Facebook, Youtube\n\n");
		strcat(MEGAString, "{FFFFFF}Funcionamento: Apenas para jogadores que colaboraram muito com o servidor\n");
		strcat(MEGAString, "~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~.~~~.~~.~~.~~~.~~.~~.~~~.~~.~~.~");
		ShowPlayerDialog(playerid, 10571, DIALOG_STYLE_MSGBOX, "Bônus Cash", MEGAString, "Fechar", "");
        return 1;
	}
	CMD:atualizacao(playerid)return ForT:atualizacoes(playerid);
	CMD:atualizacoes(playerid)
    {
        //Legendas {F9F26D}modificado {77c5f9}otimização {4dda63}adicionado
   		MEGAString[0] = EOS;
		strcat(MEGAString, "\n{FFFF00}» Atualizações recentes do servidor.\n\n");
		strcat(MEGAString, "  {FFFFFF}28 de dezembro 2017                  versão {008AFF}1.5-0\n\n");
		strcat(MEGAString, "  {77c5f9}otimização                 {9c9c9c}Sistema de Easter Eggs modificado.\n");
		strcat(MEGAString, "  {77c5f9}otimização                 {9c9c9c}Bug's reportados resolvidos.\n");
		strcat(MEGAString, "  {4dda63}adicionado                 {9c9c9c}Nova caixa surpresa fim de ano para informações digite /infocaixas.\n\n");
		strcat(MEGAString, "  {FFFFFF}29 de dezembro 2017                  versão {008AFF}1.5-0\n\n");
		strcat(MEGAString, "  {77c5f9}otimização                 {9c9c9c}Tela de login desbugada completamente.\n");
		strcat(MEGAString, "  {77c5f9}otimização                 {9c9c9c}Mercado negro otimizado.\n");
		strcat(MEGAString, "  {4dda63}adicionado                 {9c9c9c}Novo territorio ''PORTO'' para máfias.\n");
		strcat(MEGAString, "  {4dda63}adicionado                 {9c9c9c}Comando /mafia retirado agora para máfias dominar é com /tr ou /do igual as outras organizações.\n\n");
		strcat(MEGAString, "  {FFFFFF}17 de Janeiro 2018                  versão {008AFF}1.5-0\n\n");
		strcat(MEGAString, "  {4dda63}adicionado                 {9c9c9c}Novo sistema de corpos no chão após a morte o corpo fica dropado com uma text mostrando onde foi o local do tiro.\n");
		strcat(MEGAString, "  {77c5f9}otimização                 {9c9c9c}Todas defines do servidor organizada e algumas desnecessárias removidas.\n");
		strcat(MEGAString, "  {77c5f9}otimização                 {9c9c9c}Sistema de Salário(Payday) otimizado agora todo salário vai para a conta do banco.\n");
        strcat(MEGAString, "  {77c5f9}otimização                 {9c9c9c}Agora o inventário fecha do a tecla ESC para melhor jogabilidade.\n");
        strcat(MEGAString, "  {F9F26D}modificado                 {9c9c9c}Os valores das multas dos radares foram reduzidas para não prejudicar os novatos.\n");
        strcat(MEGAString, "  {F9F26D}modificado                 {9c9c9c}Sistema de titulos de familia retirado motivo: sistema inútil.\n");
        strcat(MEGAString, "  {4dda63}adicionado                 {9c9c9c}GPS agora mostra todas propriedades e mini propriedades do servidor.\n");
        strcat(MEGAString, "  {4dda63}adicionado                 {9c9c9c}Agora na compra de VIP/SÓCIO tem o sistema de digitar confirmar para comprar o benefício.\n");
        strcat(MEGAString, "  {4dda63}adicionado                 {9c9c9c}Novo comando para ver o suporte do servidor: /suporte.\n");
        strcat(MEGAString, "  {4dda63}adicionado                 {9c9c9c}Novo sistema de intimação para policiais intimar procurados.\n\n");
		strcat(MEGAString, "  {9c9c9c}Antigas atualizações podem ser vista no Discord:    https://discord.gg/aW67hZu");
		ShowPlayerDialog(playerid, 10571, DIALOG_STYLE_MSGBOX, "Últimas atualizações do gamemode", MEGAString, "Fechar", "");
            return 1;
	}
	CMD:intimar(playerid, params[])
    {
			if(sscanf(params, "u", giveplayerid))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USE: /intimar [ID do Player]");
				return true;
			}
			new org = GetPlayerOrg(playerid);
	if(org != 1 && org != 2 && org != 3 && org != 4 && org != 7 && org != 11
	    && org != 33 && org != 16 && org != 35 && org != 34)
	{
		return SendClientMessage(playerid, COLOR_GREY, "Você não pode usar este comando");
	}
	if(PlayerInfo[playerid][pLider] < 1)
			{
			    SendClientMessage(playerid,COLOR_GRAD1,"Somente um Delegado pode fazer uma intimação");
			    return true;
			}
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new string[1500];
						format(string, sizeof(string), "[INTIMAÇÃO] Delegado(a) %s intimou o(a) %s para comparecer a delegacia.", NomePlayer(playerid),NomePlayer(giveplayerid));
      		            SendClientMessageToAll(COLOR_DBLUE,string);
                 		MEGAString[0] = EOS;
        				strcat(MEGAString, "INTIMAÇÃO:\n");
        				strcat(MEGAString, "O bacharel em Direito e delegado in fine assinado, ora designado para o departamento atributivo\n");
        				strcat(MEGAString, "abaixo discriminado, INTIMA Vossa Senhoria para comparecer em data e local abaixo descritos,\n");
        				strcat(MEGAString, "munido de documento de identidade (RG), CPF e desta intimação, onde deverá prestar\n");
        				strcat(MEGAString, "esclarecimentos do interesse da Justiça Pública, conforme caracterização convergente nesta, com o\n");
        				strcat(MEGAString, "fim de prestar esclarecimentos em procedimento investigativo para apurar possível prática de infração\n");
        				strcat(MEGAString, "penal. O(a) convocado(a). ausente na oitiva, depois de novamente intimado(a), não comparecer, sem\n");
        				strcat(MEGAString, "motivo justificado, consoante os arts. 3°,201,& 1°, 218 e 260, do Código de Processo Penal, será\n");
        				strcat(MEGAString, "passível de condução coercitiva até a presença da Autoridade Policial, mediante Mandado escrito\n");
        				strcat(MEGAString, "incorrerá, em tese, na prática de CRIMES DE PREVARICAÇÃO E/OU DESOBEDIÊNCIA, ínsito nos arts.\n");
        				strcat(MEGAString, "319 e 330, ambos do Código Penal. Havendo recusa em receber esta intimação, a mesma será\n");
        				strcat(MEGAString, "concluída na presença de 02 (duas) testemunhas presentes ao fato, onde será verbalizada a intimação\n");
        				strcat(MEGAString, "e assinada por todos. Havendo recusa de prestar testemunho, as pessoas requisitadas renitentes\n");
        				strcat(MEGAString, "deverão informar suas qualificações e intimadas imediatamentea comparecer na delegacia. Havendo\n");
        				strcat(MEGAString, "recusa em informar suas qualificações, serão conduzidas coercitivamente até a delegacia pela prática,\n");
						strcat(MEGAString, "em tese, do art. 68, do Decreto-Lei nº3.688/1941 - Lei das Contravenções Penais - recusa de dados\n");
						strcat(MEGAString, "sobre a própria identificação ou qualificação.\n\n");
						new strvip[2000];
			    		format(strvip, sizeof strvip, "INTIMADO(A): %s\n", NomePlayer(giveplayerid));
						strcat(MEGAString, strvip);
						format(strvip, sizeof strvip, "ENDEREÇO: HQ %s\n", GetOrgName(org));
						strcat(MEGAString, strvip);
						strcat(MEGAString, "DATA: Hoje\n");
						strcat(MEGAString, "LOCAL PARA APRESENTAÇÃO: Recepção\n");
						format(strvip, sizeof strvip, "DELEGADO: %s\n", NomePlayer(playerid));
						strcat(MEGAString, strvip);
        				ShowPlayerDialog(giveplayerid, 10571, DIALOG_STYLE_MSGBOX, "INTIMAÇÃO", MEGAString, "OK", "");
				}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   O Jogador está offline !");
	            return true;
			}
	    	return true;
 	}
CMD:ip(playerid, result[])return ForT:forum(playerid, result);
	CMD:dc(playerid, result[])return ForT:forum(playerid, result);
    CMD:forum(playerid, result[])
	return cmd_suporte(playerid, result);
CMD:suporte(playerid, result[])
    {
	if(IsPlayerConnected(playerid))
	{
		if(gPlayerLogged[playerid] == 0)
		{
			SendClientMessage(playerid,COLOR_GRAD1,"Você não está logado!");
			return 1;
		}
        MEGAString[0] = EOS;

        strcat(MEGAString, "{FF6347}Informações/Suporte:\n\n");
        strcat(MEGAString, "{77c5f9}• Discord:https://discord.gg/aW67hZu\n");
        strcat(MEGAString, "{FFFFFF}Contato: wZAP#5161\n\n");
        strcat(MEGAString, "{0000FF}• Discord:https://discord.gg/aW67hZu\n");
        strcat(MEGAString, "{FFFFFF}IP: 189.84.173.201:7777 ou bpchost.ddns.net:7777.\n\n");
        strcat(MEGAString, "{DEB887}• Discord:\n");
        strcat(MEGAString, "{FFFFFF}https://discord.gg/aW67hZu\n\n");
        strcat(MEGAString, "{F9F26D}• Email:\n");
        strcat(MEGAString, "{FFFFFF}Contato: bolo-bolado@hotmail.com\n\n");
        strcat(MEGAString, "{4dda63}• Whatsapp:\n");
        strcat(MEGAString, "{FFFFFF}Número: (24) - 999146000.\n\n");
        strcat(MEGAString, "{FFA54F}• Servidor SA:MP:\n");
        strcat(MEGAString, "{FFFFFF}IP: bpchost.ddns.net:7777\n\n");
        strcat(MEGAString, "{BEBEBE} Em caso de patrocínio ou parceria entre em contato via email/whatsapp caso tente por outro local não sera respondido.\n");
        strcat(MEGAString, "{BEBEBE} Caso tente contato via Discord aguarde no minímo 24 horas para o suporte entrar em contato caso não obtenha respostas procure um admin.\n");
		strcat(MEGAString, "{BEBEBE} Para ser registrado no Discord basta apenas você ultilizar o mesmo nick que você usa no servidor.\n\n");
		strcat(MEGAString, "{FF6347}*OBS: {BFC0C2}acessem nosso Discord: discord.gg/aW67hZu\n\n");
        ShowPlayerDialog(playerid, 10571, DIALOG_STYLE_MSGBOX, "Suporte", MEGAString, "Fechar", "");
	}
	return 1;
    }
	CMD:infolocutor(playerid)
    {
    	if(gPlayerLogged[playerid] == 0)
		{
			SendClientMessage(playerid,COLOR_GRAD1,"Você não está logado!");
			return 1;
		}
		MEGAString[0] = EOS;

        strcat(MEGAString, "{FFFFFF}Informações:\n\n");
        strcat(MEGAString, "{DEB887}• Quero ser um locutor como eu faço?\n\n");
        strcat(MEGAString, "{BEBEBE} Fácil, basta você enviar uma mensagem a um gerente + dizendo que deseja ser locutor.\n");
        strcat(MEGAString, "{BEBEBE} Logo após ele pedirá que se conecte ao nosso teamspeak3, em seguida ele realizará alguns testes com você.\n\n");
        strcat(MEGAString, "{DEB887}• Requisitos:\n\n");
        strcat(MEGAString, "{BEBEBE} Ter 15 anos completados, microfone, teamspeak3, e uma voz agradável.\n");
        strcat(MEGAString, "{BEBEBE} Deverá conter 100 horas jogadas em sua conta.\n\n");
        strcat(MEGAString, "{DEB887}• Noticias e músicas:\n\n");
        strcat(MEGAString, "{BEBEBE} Colocamos as músicas mais recentes de todos os gêneros.\n");
        strcat(MEGAString, "{BEBEBE} Ouça de microfone ( HeadSet ), pois algumas coisas não são censuradas.\n");
        strcat(MEGAString, "{BEBEBE} Fique tranquilo, pois somente o locutor consegue transmitir aúdio ao vivo.\n\n");
        strcat(MEGAString, "{DEB887}• Streaming ( ON/OFF ) conexão:\n\n");
        strcat(MEGAString, "{BEBEBE} Seu ping poderá aumentar se sua internet não for boa, para reproduzir o game e a straming.\n");
        strcat(MEGAString, "{BEBEBE} Streaming de ponta para reprodução de 50 usuários.\n");
        strcat(MEGAString, "{BEBEBE} Para ligar/desligar nosso sistema de locutores use: /radio <<< e clique em radio Brasil Paradise City online.\n\n");
        strcat(MEGAString, "{DEB887}• Streaming não esta funcionando no meu computador:\n\n");
        strcat(MEGAString, "{BEBEBE} Verifique se esta conectado a internet, aumente o volume do GTA nas configurações.\n");
        strcat(MEGAString, "{BEBEBE} Caso tenha feito este procedimento, tente verificar com o locutor quantas pessoas estão na live.\n");
        strcat(MEGAString, "{BEBEBE} Pois o limite inicial é de 50 ouvintes, caso ultrapasse não conseguirá entrar na streaming.\n\n");
		strcat(MEGAString, "{FF6347}*OBS: {BFC0C2}acessem nosso Discord: https://discord.gg/aW67hZu\n\n");
        ShowPlayerDialog(playerid, 10571, DIALOG_STYLE_MSGBOX, "Informação Locutores", MEGAString, "Fechar", "");
        return 1;
	}
	CMD:selfie(playerid)
    {
    	if(takingselfie[playerid] == 0)
    	{
    	    GetPlayerPos(playerid,lX[playerid],lY[playerid],lZ[playerid]);
    		static Float: n1X, Float: n1Y;
    		if(Degree[playerid] >= 360) Degree[playerid] = 0;
    		Degree[playerid] += Speed;
    		n1X = lX[playerid] + Radius * floatcos(Degree[playerid], degrees);
    		n1Y = lY[playerid] + Radius * floatsin(Degree[playerid], degrees);
    		SetPlayerCameraPos(playerid, n1X, n1Y, lZ[playerid] + Heigh);
    		SetPlayerCameraLookAt(playerid, lX[playerid], lY[playerid], lZ[playerid]+1);
    		SetPlayerFacingAngle(playerid, Degree[playerid] - 90.0);
    		takingselfie[playerid] = 1;
    		ApplyAnimation(playerid, "PED", "gang_gunstand", 4.1, 1, 1, 1, 1, 1, 1);
            SendClientMessage(playerid, COLOR_YELLOW, "INFO: APERTE F7 PARA SAIR AS LETRAS DO CHAT.");
            SendClientMessage(playerid, COLOR_YELLOW, "INFO: APERTE F8 PARA TIRAR A SUA SELFIE.");
            SendClientMessage(playerid, COLOR_YELLOW, "INFO: APERTE NUMPAD 6 PARA MOVIMENTAR A CAMERA.(OBS: SE FOR NOTEBOOK APERTE FN + NUMERO QUE TA NA TECLA DO SEU TECLADO)");
            SendClientMessage(playerid, 0xFF0000AA, "INFO: PARA SAIR MODO SELFIE DIGITE NOVAMENTE /SELFIE.");
    		return 1;
    	}
        if(takingselfie[playerid] == 1)
    	{
    	    TogglePlayerControllable(playerid,1);
    		SetCameraBehindPlayer(playerid);
    	    //TextDrawHideForPlayer(playerid,Textdraw2);
    	    takingselfie[playerid] = 0;
    	    ApplyAnimation(playerid, "PED", "ATM", 4.1, 0, 1, 1, 0, 1, 1);
    	    return 1;
    	}
        return 1;
    }
	CMD:skate(playerid)
    {
    	if(!IsPlayerInAnyVehicle(playerid))
        {
            if(TemSkate[playerid] == 0)
                   return SendClientMessage(playerid, -1, "Você não possui um Skate, adquira na loja vip !");
            ApplyAnimation(playerid, "CARRY","null",0,0,0,0,0,0,0);
    	    ApplyAnimation(playerid, "SKATE","null",0,0,0,0,0,0,0);
    	    ApplyAnimation(playerid, "CARRY","crry_prtial",4.0,0,0,0,0,0);
    	    SetPlayerArmedWeapon(playerid,0);
    		if(!InfoSkate[playerid][sActive])
            {
    			InfoSkate[playerid][sActive] = true;
    			DestroyObject(InfoSkate[playerid][sSkate]);
    			RemovePlayerAttachedObject(playerid,INDEX_SKATE);
    			#if TYPE_SKATE == 0
    			// the skate is placed on the right arm
    			SetPlayerAttachedObject(playerid,INDEX_SKATE,19878,6,-0.055999,0.013000,0.000000,-84.099983,0.000000,-106.099998,1.000000,1.000000,1.000000);
    			#else
    			// the skate is placed in the back
    			SetPlayerAttachedObject(playerid,INDEX_SKATE,19878,1,0.055999,-0.173999,-0.007000,-95.999893,-1.600010,24.099992,1.000000,1.000000,1.000000);
    			#endif
    			PlayerPlaySound(playerid,21000,0,0,0);
    			SendClientMessage(playerid,-1,"Você pegou seu skate para guarda-lo digite {00B300}/skate");
    		}
            else
            {
    			InfoSkate[playerid][sActive] = false;
    			DestroyObject(InfoSkate[playerid][sSkate]);
    			RemovePlayerAttachedObject(playerid,INDEX_SKATE);
    			PlayerPlaySound(playerid,21000,0,0,0);
    			SendClientMessage(playerid,-1,"Você guardou seu skate para pega-lo novamente digite {00B300}/skate");
    		}
    	}
        else SendClientMessage(playerid,-1,"Você não pode utilizar o skate dentro de um veículo.");
    	return true;
    }
	CMD:zumbi03(playerid){

  		if(!gPlayerLogged[playerid])
    		return SendClientMessage(playerid,COLOR_GRAD1,"Você não está logado no servidor!");
        if(PlayerInfo[playerid][pAdmin] < 3)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Você não esta autorizado a usar este comando!");
			    return true;
			}

	    MEGAString[0] = EOS;
	    strcat(MEGAString, "{999999}INICIAR EVENTO ZUMBI VS COP'S\n");
	    strcat(MEGAString, "{999999}INICIAR EVENTO CHUCK\n");
	    strcat(MEGAString, "{FFFFFF}ENCERRAR EVENTOS\n");

	    ShowPlayerDialog(playerid, 6334, DIALOG_STYLE_LIST, "Escolha o Tipo de Evento !", MEGAString, "Iniciar", "Cancelar");
	    return 1;
	}
	CMD:encerrar(playerid)
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
		{
			if(votacao[iniciada])
			{
			    new string[128];
			    SendClientMessageToAll(-1, "__________________________________________________________________________");
				SendClientMessageToAll(0xFFFFFFAA, "[VOTAÇÃO ENCERRADA]");
				format(string, sizeof string, "» %d pessoas responderam sim;", votacao[sim]);
				SendClientMessageToAll(COLOR_LIGHTBLUE,string);
				format(string, sizeof string, "» %d pessoas responderam não;", votacao[nao]);
				SendClientMessageToAll(COLOR_LIGHTBLUE, string);
				if(votacao[sim] == votacao[nao])
				{
					SendClientMessageToAll(0xFF0000AA, "» Houve um empate na votação!");
				}
				else if(votacao[sim] > votacao[nao])
				{
					SendClientMessageToAll(COLOR_YELLOW, ">>> A maioria votou em SIM.");
				}
				else if(votacao[sim] < votacao[nao])
				{
					SendClientMessageToAll(COLOR_YELLOW, ">>> A maioria votou em NÃO.");
				}
				SendClientMessageToAll(-1, "__________________________________________________________________________");
				votacao[iniciada] = false;
				votacao[sim] = 0;
				votacao[nao] = 0;

				for(new i; i < MAX_PLAYERS; i++){

					votou[i] = false;
				}
			}
			else
			{
				SendClientMessage(playerid, 0xFFFFFFAA, "Nenhuma votação criada!");
			}
		}
		else
		{
			SendClientMessage(playerid, 0xFFFFFFAA, "Você não tem permissão para usar este comando!");
		}
		return 1;
	}

  CMD:veh(playerid, params[])
    {
	 		if (PlayerInfo[playerid][pAdmin] >= 5)
	 		{
       			if(!admtrampando[playerid])
					return SendClientMessage(playerid, COLOR_GRAD1, " Você não pode usar este comando, pois não está em modo trabalho!");

				if(CreatedCar >= 100)
	    		{
	    			SendClientMessage(playerid, COLOR_GRAD1, "Já criaram muitos carros, destrua alguns primeiro /destruirid");
	    			return true;
	    		}
	   			new car, COLOR1, COLOR2;
	   			if(sscanf(params, "ddd", car, COLOR1, COLOR2))
	   			{
	    			SendClientMessage(playerid, COLOR_GRAD2, "USE: /veh [IDCARRO] [COR1] [COR2]");
	    			return true;
	   			}
        	    new string[128];
                if(car < 400 || car > 611) { SendClientMessage(playerid, COLOR_GREY, "   Modelo Do Carro Tem Que Ser Entre 411 e 600 !"); return true; }
			   	if(COLOR1 < 0 || COLOR1 > 236) { SendClientMessage(playerid, COLOR_GREY, "   Número Da Cor tem que ser entre 0 e 126 !"); return true; }
	   			if(COLOR2 < 0 || COLOR2 > 236) { SendClientMessage(playerid, COLOR_GREY, "   Número Da Cor tem que ser entre 0 e 126 !"); return true; }
	   			new Float:X,Float:Y,Float:Z;
	   			GetPlayerPos(playerid, X,Y,Z);
				new str[74];
				new intir = GetPlayerInterior(playerid);
	   			new carid = CreateVehicle(car, X,Y+2,Z, 0.0, COLOR1, COLOR2, 60000);
	   			Gas[carid] = 99;
				new mot, lu, alar, por, cap, porma, ob;
	   			CreatedCars[CreatedCar] = carid;
	   			CreatedCar ++;
	   			GetVehicleParamsEx(carid, mot, lu, alar, por, cap, porma, ob);
	      		SetVehicleParamsEx(carid, VEHICLE_PARAMS_ON, lu, alar, por, cap, porma, ob);
	      		GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "AdmCmd: O admin %s criou um veículo de [ID: %d e Modelo: %d]", sendername,carid, car);
                ABroadCast(0x33CCFFAA,string,1);
	   			format(string, sizeof(string), "%s criou um carro id: %d no servidor ",sendername, car);
	   			BPFLogs("comandosadmin", string);
	   			TextoCarros[carid] = 1;
	      		format(str, sizeof str, "{FF0000}BPF-%04d", carid);
   				SetVehicleNumberPlate(carid, str);
		    	SetVehicleToRespawn(carid);
		    	LinkVehicleToInterior(carid, intir);
			}
  			return true;
 	}
	CMD:clima(playerid, params[])
	{
	        if(PlayerInfo[playerid][pAdmin] < 1337)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Você não esta autorizado a usar este comando!");
			    return true;
			}
			new weather, hora;
			if(sscanf(params, "dd", hora, weather))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "USE: /clima [hora (0 - 24)] [tempo (0 - 44]");
			    return true;
			}
			if(hora < 0 || hora > 24)
			{
					SendClientMessage(playerid, COLOR_GRAD2, "Hora mínima, de 0 ~ 24!");
					return true;
			}
			if(weather < 0||weather > 44) { SendClientMessage(playerid, COLOR_GREY, "Tempo mínimo, de 0 ~ 44 !"); return 1; }
    	    new string[128];
	    	SetWeather(weather);
	    	SetWorldTime(hora);
			format(string, sizeof(string), "  Hora configurada para %d Horas e Clima para %s.", hora, TempoNomes[weather]);
			SendClientMessageToAll(COLOR_GRAD1, string);
			BPFLogs("comandosadmin", string);
			return true;
	}
//----------------------------------[Money]------------------------------------------------
	CMD:setgrana(playerid, params[])
	{
	        new playa, money;
			if(sscanf(params, "ud", playa, money))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /setgrana [ID do Player] [grana]");
				return true;
			}
    	    new gstring[128];
			if (PlayerInfo[playerid][pAdmin] >= 5000)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						ResetPlayerMoney(playa);
						GiveDinheiro(playa, money);
						format(gstring, 128, "AdmCmd: O admin %s setou a grana de %s para ($%s).", PlayerName(playerid), PlayerName(playa), ConvertMoney(money));
						ABroadCast(0xff6347FF,gstring,1);
						format(gstring, 128, "%s usou /setgrana em %s e setou %d", PlayerName(playerid), PlayerName(playa), money);
						BPFLogs("comandosadmin", gstring);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não esta autorizado a usar este comando!");
			}
			return true;
	}
//----------------------------------[GiveMoney]------------------------------------------------

	CMD:setskin(playerid, params[])
	{
	        new para1, level;
			if(sscanf(params, "ud", para1, level))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /setskin [playerid] [skin id]");
				return true;
			}
			if(level > 311 || level < 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "ID Desconhecido!");
				return true;
			}
    	    new string[128];
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{

       			if(!admtrampando[playerid])
					return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pSkin] = level;
						format(string, sizeof(string), "O admin %s mudou sua skin para %d.", sendername,level);
						SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "Você mudou a skin de %s para %d.", giveplayer,level);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					    SetPlayerSkin(para1, PlayerInfo[para1][pSkin]);
					    format(string, sizeof(string), "AdminCmd[%s] Seto Skin [%d] Para [%s]", sendername, level, giveplayer);
                        ABroadCast(COLOR_GRAD1,string,1);
					    format(string, sizeof(string), "%s setou a skin id: %d em %s", sendername, level, giveplayer);
						BPFLogs("comandosadmin", string);
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não tem permissão para usar esse comando!");
			}
			return true;
	}

	CMD:secreto(playerid)
	{
	    if(GetPlayerOrg(playerid) != 8 && GetPlayerOrg(playerid) != 22)
	        return SendClientMessage(playerid, COLOR_GRAD1, "Você não é um assassino!");
        if(GoChase[playerid] == 999)return SendClientMessage(playerid, COLOR_GRAD1, "Você não possui um contrato");
	    if(VendoNick[playerid] == true)
	    {
		    foreach(Player, i)
			{
				ShowPlayerNameTagForPlayer(i, playerid, false);
			}
			VendoNick[playerid] = false;
			SendClientMessage(playerid, COLOR_GRAD1, "(( Você agora está jogando em modo secreto ))");
		}
	    else if(VendoNick[playerid] == false)
	    {
		    foreach(Player, i)
			{
				ShowPlayerNameTagForPlayer(i, playerid, true);
			}
			VendoNick[playerid] = true;
			SendClientMessage(playerid, COLOR_GRAD1, "(( Você agora está jogando em modo normal ))");
		}
	    return true;
	}
//-----------------------------------[Slap]-----------------------------------------------
	CMD:tapa(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
	        new playa;
			if(sscanf(params, "u", playa))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /tapa [ID do Player]");
				return true;
			}
			new Float:slx, Float:sly, Float:slz;
    	    new string[128];
			if (PlayerInfo[playerid][pAdmin] >=1 || PlayerInfo[playerid][pAdminTemp] >=1)
			{
       			if(!admtrampando[playerid])
					return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

			    if(IsPlayerConnected(playa))
			    {
           			if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						GetPlayerPos(playa, slx, sly, slz);
						SetPlayerPos(playa, slx, sly, slz+15);
						PlayerPlaySound(playa, 1190, slx, sly, slz+12);
						printf("AdmCmd: %s deu tapa em %s",sendername,  giveplayer);
                        if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
                        {
							format(string, sizeof(string), "AdmCmd: %s levou um tapa de %s",giveplayer ,PlayerName(playerid));
						}
                        else
                        {
							format(string, sizeof(string), "AdmCmd: %s levou um tapa de %s",giveplayer ,PlayerName(playerid));
						}
						ABroadCast(COLOR_LIGHTRED,string,1);
						BPFLogs("comandosadmin", string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "	Você não pode usar este comando!");
			}
			return true;
	}

	CMD:retirarbeneficios(playerid, params[])
	{
	        new playa;
			if(sscanf(params, "u", playa))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /retirarbeneficios [ID do Player]");
				return true;
			}
    	    new string[128];
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
			    if(IsPlayerConnected(playa))
			    {
					format(string, sizeof(string), "AdmCmd: %s retirou os beneficios VIP de: %s",NomePlayer(playerid) ,PlayerName(playa));
					ABroadCast(COLOR_LIGHTRED,string,1);
					BPFLogs("comandosadmin", string);
					RBeneficios(playa);
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "	Você não pode usar este comando!");
			}
			return true;
	}
stock RBeneficios(playerid)
{
		new bool:perdeu=false;
   		for(new i = 0; i < sizeof(CarInfo); i++)
      	{
	        if(strcmp(NomePlayer(playerid),CarInfo[i][cOwner],true)==0)
			{
		    	CarInfo[i][cOwned] = 0;
				strmid(CarInfo[i][cOwner], "Ninguém", 0, strlen("Ninguém"), 999);
                perdeu=true;
				format(CarInfo[i][cDescription], 64, "Sem Dono");
    //Update3DTextLabelText(CarInfo[i][cText], 0xFFFFAA, "{50AAFE}Dono: Ninguém\n{FFFF00}Descrição\n{FFFFFF}»Sem Dono«");
                SalvarCarro(i);
			}
		}
		if(PlayerInfo[playerid][pPbiskey] < 255)
		{
			if(PlayerInfo[playerid][pPbiskey] >= 100 && PlayerInfo[playerid][pPbiskey] < 200 && strcmp(NomePlayer(playerid), SBizzInfo[PlayerInfo[playerid][pPbiskey]-100][sbOwner], true) == 0)
			{
				new borse = PlayerInfo[playerid][pPbiskey]-100;
				SBizzInfo[borse][sbLocked] = 0;
				SBizzInfo[borse][sbOwned] = 0;
				strmid(SBizzInfo[borse][sbOwner], "Ninguém", 0, strlen("Ninguém"), 255);
				strmid(SBizzInfo[borse][sbExtortion], "Ninguém", 0, strlen("Ninguém"), 255);
				PlayerInfo[playerid][pPbiskey] = 255;
				SalvarSEmpresa(borse);
				Atualizar3Dtexts();
				perdeu=true;
			}
			if(PlayerInfo[playerid][pPFazkey] < 255 && strcmp(NomePlayer(playerid), FBizzInfo[PlayerInfo[playerid][pPFazkey]][fbOwner], true) == 0)
			{
				new borse = PlayerInfo[playerid][pPFazkey];
				FBizzInfo[borse][fbLocked] = 0;
				FBizzInfo[borse][fbOwned] = 0;
				strmid(FBizzInfo[borse][fbOwner], "Ninguém", 0, strlen("Ninguém"), 255);
				strmid(FBizzInfo[borse][fbExtortion], "Ninguém", 0, strlen("Ninguém"), 255);
				PlayerInfo[playerid][pPFazkey] = 255;
				SalvarFEmpresa(borse);
				Atualizar3Dtexts();
				perdeu=true;
			}
			else if(strcmp(NomePlayer(playerid), BizzInfo[PlayerInfo[playerid][pPbiskey]][bOwner], true) == 0)
			{
				new borse = PlayerInfo[playerid][pPbiskey];
				BizzInfo[borse][bLocked] = 0;
				BizzInfo[borse][bOwned] = 0;
				strmid(BizzInfo[borse][bOwner], "Ninguém", 0, strlen("Ninguém"), 255);
				strmid(BizzInfo[borse][bExtortion], "Ninguém", 0, strlen("Ninguém"), 255);
				PlayerInfo[playerid][pPbiskey] = 255;
				SalvarEmpresa(borse);
				Atualizar3Dtexts();
				perdeu=true;
			}
		}

		PlayerInfo[playerid][pCarKey] = 0;
		PlayerInfo[playerid][pVeiculo] = 0;
		PlayerInfo[playerid][pCarKey2] = 0;
		PlayerInfo[playerid][pVeiculo2] = 0;
		PlayerInfo[playerid][pCarKey3] = 0;
		PlayerInfo[playerid][pVeiculo3] = 0;
		PlayerInfo[playerid][pCarKey4] = 0;
		PlayerInfo[playerid][pVeiculo4] = 0;
		PlayerInfo[playerid][pCarKey5] = 0;
		PlayerInfo[playerid][pVeiculo5] = 0;

		if(perdeu)
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "*Voce perdeu seus beneficios de VIP!");
		}
		return 1;
}
stock TrocarBeneficios(playerid,velho[],novo[])
{
   		for(new i = 0; i < sizeof(CarInfo); i++)
      	{
	        if(strcmp(velho,CarInfo[i][cOwner],true)==0)
			{
				strmid(CarInfo[i][cOwner], novo, 0, strlen(novo), 999);
			}
		}
		if(PlayerInfo[playerid][pPHousekey] < 500)
		{
		    new House = PlayerInfo[playerid][pPHousekey];
		    strmid(HouseInfo[House][hOwner], novo, 0, strlen(novo), 255);
			SaveCasa(House);
			Atualizar3Dtexts();
		}
		if(PlayerInfo[playerid][pPbiskey] >= 100 && PlayerInfo[playerid][pPbiskey] < 255)
		{
			new borse = PlayerInfo[playerid][pPbiskey]+100;
			strmid(SBizzInfo[borse][sbOwner], novo, 0, strlen(novo), 255);
			SalvarSEmpresa(borse);
			Atualizar3Dtexts();
		}
		else if(PlayerInfo[playerid][pPbiskey] < 100)
		{
		    new borse = PlayerInfo[playerid][pPbiskey];
			strmid(BizzInfo[borse][bOwner], novo, 0, strlen(novo), 255);
			SalvarEmpresa(borse);
			Atualizar3Dtexts();
		}
		if(PlayerInfo[playerid][pPFazkey] < 255)
		{
			new borse = PlayerInfo[playerid][pPFazkey];
			strmid(FBizzInfo[borse][fbOwner], novo, 0, strlen(novo), 255);
			SalvarFEmpresa(borse);
			Atualizar3Dtexts();
		}
		if(PlayerInfo[playerid][pMembro] > 0 || PlayerInfo[playerid][pLider] > 0)
  		{
  		    	new i = GetPlayerOrg(playerid);
  		    	new gstring[128];
		    	if(strcmp(velho,InfoOrg[i][Lider],true)==0)
		    	{
		    	    strmid(InfoOrg[i][Lider], novo, 0, strlen(novo), 255);
		    	    format(gstring, 128, Pasta_MembrosOrg, i);
		       		DOF2_SetString(gstring,"Líder",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][SubLider],true)==0)
		    	{
		    	    strmid(InfoOrg[i][SubLider], novo, 0, strlen(novo), 255);
		    	    DOF2_SetString(gstring,"SubLíder",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro1],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro1], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro1",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro2],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro2], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro2",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro3],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro3], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro3",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro4],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro4], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro4",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro5],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro5], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro5",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro6],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro6], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro6",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro7],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro7], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro7",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro8],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro8], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro8",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro9],true)==0)
		    	{
		    	    strmid(InfoOrg[i][Membro9], novo, 0, strlen(novo), 255);
		    	    DOF2_SetString(gstring,"Membro9",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro10],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro10], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro10",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro11],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro11], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro11",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro12],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro12], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro12",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro13],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro13], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro13",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro14],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro14], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro14",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro15],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro15], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro15",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro16],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro16], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro16",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro17],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro17], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro17",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro18],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro18], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro18",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro19],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro19], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro19",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro20],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro20], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro20",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro21],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro21], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro21",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro22],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro22], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro22",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro23],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro23], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro23",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro24],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro24], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro24",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro25],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro25], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro25",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro26],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro26], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro26",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro27],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro27], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro27",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro28],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro28], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro28",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro29],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro29], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro29",novo);
		    	}
		    	else if(strcmp(velho,InfoOrg[i][Membro30],true)==0)
		    	{
           			strmid(InfoOrg[i][Membro30], novo, 0, strlen(novo), 255);
           			DOF2_SetString(gstring,"Membro30",novo);
		    	}
            DOF2_SaveFile();
		}
		new string[50];
		//carro Concessionaria
		new vic = GetOwnedVehicleID(playerid);
  		if(vic != INVALID_VEHICLE_ID)
  		{
			strmid(VehicleInfo[vic][vOwner], novo, 0, strlen(novo), 255);
			new string2[50];
			format(string, sizeof(string), VEH_SAVE_FILE, velho);
			format(string2, sizeof(string2), VEH_SAVE_FILE, novo);
			if(fexist(string)) DOF2_RenameFile(string, string2);
		}
		//objetos atacados ao corpo
		SaveObjects(playerid);
		format(string, sizeof(string), Pasta_CharAttach, velho);
		if(fexist(string)) fremove(string);
		//admins
		if(PlayerInfo[playerid][pAdmin] > 0)
		{
			AddAdmin(novo, PlayerInfo[playerid][pAdmin]);
			RemoverAdmin(velho);
		}
		else if(PlayerInfo[playerid][pAdminTemp] > 0)
		{
			AddAdminTemp(novo, PlayerInfo[playerid][pAdminTemp]);
			RemoverAdminTemp(velho);
		}
		//Maconhas
		for(new i = 0; i < MAX_MACONHA; i++)
	    {
	        if(strcmp(MaconhaInfo[i][Dono], velho, true) == 0)
		    {
				strmid(MaconhaInfo[i][Dono], novo, 0, strlen(novo), 35);
			}
		}
		//Ranks reset
		removenamerank("nivel", velho);
		removenamerank("horasjogadas", velho);
		removenamerank("kills", velho);
		removenamerank("mortes", velho);
		removenamerank("banco", velho);
		removenamerank("crimes", velho);
		removenamerank("materiais", velho);
		removenamerank("maconha", velho);
		removenamerank("cocaina", velho);
		removenamerank("crack", velho);
		removenamerank("contratos", velho);
		removenamerank("cash", velho);
		SendClientMessage(playerid, COLOR_LIGHTRED, "* Nick Trocado com Sucesso!");
		return 1;
}

	CMD:rpv(playerid, params[])
	{
	        new playa;
			if(sscanf(params, "u", playa))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /rpv [ID do Player]");
				return true;
			}
    	    new string[128];
			if (PlayerInfo[playerid][pAdmin] >=1 || PlayerInfo[playerid][pAdminTemp] >=1)
			{
			    if(IsPlayerConnected(playa))
			    {
           			if(playa != INVALID_PLAYER_ID)
			        {
			            if(!IsPlayerInAnyVehicle(playa))
						{
							SendClientMessage(playerid,COLOR_GREY,"Este player precisa estar em um veículo!");
							return 1;
						}
    			    	GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), "AdmCmd: %s foi removido de seu veículo por %s.",giveplayer ,PlayerName(playerid));
						ABroadCast(0xff6347FF,string,1);
						RemovePlayerFromVehicle(playa);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "	Você não pode usar este comando!");
			}
			return true;
	}
	CMD:chatkill(playerid)
	{
		if(ChatKill[playerid]){
		    ChatKill[playerid] = false;
		    SendClientMessage(playerid, COLOR_GREY, "Você desligou o chat kill!");
		}
		else{
		    ChatKill[playerid] = true;
		    SendClientMessage(playerid, COLOR_GREY, "Você ligou o chat kill!");
		}
		return 1;
	}
	CMD:armascostas(playerid)
	{
		if(PlayerInfo[playerid][pAcP] == 0)
		{
		    for(new x=0; x <= 5; x++)
		    {
		    	if(IsPlayerAttachedObjectSlotUsed(playerid, x))
				{
		    	    SendClientMessage(playerid, COLOR_GREY, "Retire os Objetos dos Slots de 0 a 5 Primeiro!");
		    	    return 1;
		    	}
			}
		    PlayerInfo[playerid][pAcP] = 1;
		    SendClientMessage(playerid, COLOR_GREY, "Você Ativou as Armas nas Costas!");
		}
		else{
		    PlayerInfo[playerid][pAcP] = 0;
		    SendClientMessage(playerid, COLOR_GREY, "Você Desativou as Armas nas Costas!");
		    RemovePlayerAttachedObject(playerid,SlotExt);
	    	RemovePlayerAttachedObject(playerid,SlotCacetete);
	 		RemovePlayerAttachedObject(playerid,SlotDesert);
	 		RemovePlayerAttachedObject(playerid,SlotEscopeta);
	 		RemovePlayerAttachedObject(playerid,Slot_Sniper);
	 		RemovePlayerAttachedObject(playerid,SlotAKeFUZIL);
		}
		return 1;
	}
	CMD:lideres(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0)
    		{
     			SendClientMessage(playerid,0xff6347FF, "* Você não está conectado.");
       			return 1;
       		}
       	new Cont = 0;
	    MEGAString[0] =EOS;
	    //MaluKoString[0] =EOS;GetPlayerColor(playerid),
     	new string[500];
		strcat(MEGAString, "ID\tNome\tTelefone\tOrganização\n");
        foreach(Player, i)
		{
      if(PlayerInfo[i][pLider] > 0)
	    {
	        format(string, sizeof(string), "%d\t%s\t%d\t{%s}%s\n",i ,NomePlayer(i),PlayerInfo[i][pPnumber], GetPlayerColorEx(i) ,GetOrgName(PlayerInfo[i][pLider]));
	        strcat(MEGAString, string);
	        Cont++;
	    }
	        new titulo[350];
		    format(titulo, sizeof(titulo), "{FFFFFF}Lideres Online {FFFFFF}({00d900}%d{FFFFFF})",Cont);
			ShowPlayerDialog(playerid, DIALOG_SMS, DIALOG_STYLE_TABLIST_HEADERS, titulo,  MEGAString, "Enviar SMS","Fechar");
		}
		return 1;
	}
	CMD:sublideres(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0)
    		{
     			SendClientMessage(playerid,0xff6347FF, "* Você não está conectado.");
       			return 1;
       		}
       	new Cont = 0;
	    MEGAString[0] =EOS;
	    //MaluKoString[0] =EOS;GetPlayerColor(playerid),
     	new string[500];
		strcat(MEGAString, "ID\tNome\tTelefone\tOrganização\n");
        foreach(Player, i)
		{
	    if(PlayerInfo[i][pCargo] == 5)
	    {
	        format(string, sizeof(string), "%d\t%s\t%d\t{%s}%s\tSub Lider\n", i, NomePlayer(i),PlayerInfo[i][pPnumber], GetPlayerColorEx(i), GetOrgName(GetPlayerOrg(i)));
	        strcat(MEGAString, string);
	        Cont++;
	    }
	        new titulo[350];
		    format(titulo, sizeof(titulo), "{FFFFFF}Sub Lideres Online {FFFFFF}({00d900}%d{FFFFFF})",Cont);
			ShowPlayerDialog(playerid, DIALOG_SMS, DIALOG_STYLE_TABLIST_HEADERS, titulo,  MEGAString, "Enviar SMS","Fechar");
		}
		return 1;
	}
    CMD:admins(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0)
    		{
     			SendClientMessage(playerid,0xff6347FF, "* Você não está conectado.");
       			return 1;
       		}
       		new Cont = 0;
	    MEGAString[0] =EOS;
	    //MaluKoString[0] =EOS;
     	new string[500];
		strcat(MEGAString, "Nome/Nível\tFunção\tAvaliação\tStatus\n");
        foreach(Player, i)
		{
            GetPlayerName(i, sendername, sizeof(sendername));
			if(PlayerInfo[i][pAdmin] > 0)
			{
				if(admhide[i] == 0)
				{
            	    if(AFK[i] == 1)
				    {
						if(strcmp(sendername,"wZAP", true) == 0)
						{
						    format(string, sizeof(string), "%s[Fundador]\t%s\t%d.%d\t{848484}Ausente\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    		strcat(MEGAString, string);
            	    		Cont++;
						}
				        else if(PlayerInfo[i][pAdmin] == 5000)
				        {
            	    		format(string, sizeof(string), "%s[Dono]\t%s\t%d.%d\t{848484}Ausente\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    		strcat(MEGAString, string);
            	    		Cont++;
						}
						else if(PlayerInfo[i][pAdmin] == 3001)
				        {
            	    		format(string, sizeof(string), "%s[Diretor]\t%s\t%d.%d\t{848484}Ausente\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    		strcat(MEGAString, string);
            	    		Cont++;
						}
						else if(PlayerInfo[i][pAdmin] == 3000)
				        {
            	    		format(string, sizeof(string), "%s[Gerente]\t%s\t%d.%d\t{848484}Ausente\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    		strcat(MEGAString, string);
            	    		Cont++;
						}
						else if(PlayerInfo[i][pAdmin] == 1339)
				        {
            	    		format(string, sizeof(string), "%s[Supervisor]\t%s\t%d.%d\t{848484}Ausente\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    		strcat(MEGAString, string);
            	    		Cont++;
						}
						else if(PlayerInfo[i][pAdmin] == 1337 || PlayerInfo[i][pAdmin] == 1338)
				        {
            	    		format(string, sizeof(string), "%s[Encarregado]\t%s\t%d.%d\t{848484}Ausente\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    		strcat(MEGAString, string);
            	    		Cont++;
						}
						else if(PlayerInfo[i][pAdmin] == 3 || PlayerInfo[i][pAdmin] == 4 || PlayerInfo[i][pAdmin] == 5)
				        {
            	    		format(string, sizeof(string), "%s[Administrador]\t%s\t%d.%d\t{848484}Ausente\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    		strcat(MEGAString, string);
            	    		Cont++;
						}
						else if(PlayerInfo[i][pAdmin] == 2)
				        {
            	    		format(string, sizeof(string), "%s[Moderador]\t%s\t%d.%d\t{848484}Ausente\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    		strcat(MEGAString, string);
            	    		Cont++;
						}
						else if(PlayerInfo[i][pAdmin] == 1)
				        {
            	    		format(string, sizeof(string), "%s[Estágiario]\t%s\t%d.%d\t{848484}Ausente\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    		strcat(MEGAString, string);
            	    		Cont++;
						}
						else
						{
            	    		format(string, sizeof(string), "%s[%d]\t%s\t%d.%d\t{848484}Ausente\n", sendername, PlayerInfo[i][pAdmin], PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    		strcat(MEGAString, string);
            	    		Cont++;
						}
	                }
	                else
	                {
	                    if(admtrampando[i] == 1)
    					{
    					    if(strcmp(sendername,"wZAP", true) == 0)
							{
						    	format(string, sizeof(string), "%s[Fundador]\t%s\t%d.%d\t{00FF00}Trabalhando\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    			strcat(MEGAString, string);
            	    			Cont++;
							}
          					else if(PlayerInfo[i][pAdmin] == 5000)
				        	{
            	    			format(string, sizeof(string), "%s[Dono]\t%s\t%d.%d\t{00FF00}Trabalhando\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    			strcat(MEGAString, string);
            	    			Cont++;
							}
							else if(PlayerInfo[i][pAdmin] == 3001)
				        	{
            	    			format(string, sizeof(string), "%s[Diretor]\t%s\t%d.%d\t{00FF00}Trabalhando\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    			strcat(MEGAString, string);
            	    			Cont++;
							}
							else if(PlayerInfo[i][pAdmin] == 3000)
				        	{
            	    			format(string, sizeof(string), "%s[Gerente]\t%s\t%d.%d\t{00FF00}Trabalhando\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    			strcat(MEGAString, string);
            	    			Cont++;
							}
							else if(PlayerInfo[i][pAdmin] == 1339)
				       		{
            	    			format(string, sizeof(string), "%s[Supervisor]\t%s\t%d.%d\t{00FF00}Trabalhando\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    			strcat(MEGAString, string);
            	    			Cont++;
							}
							else if(PlayerInfo[i][pAdmin] == 1337 || PlayerInfo[i][pAdmin] == 1338)
				       		{
            	    			format(string, sizeof(string), "%s[Encarregado]\t%s\t%d.%d\t{00FF00}Trabalhando\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    			strcat(MEGAString, string);
            	    			Cont++;
							}
							else if(PlayerInfo[i][pAdmin] == 3 || PlayerInfo[i][pAdmin] == 4 || PlayerInfo[i][pAdmin] == 5)
				        	{
            	    			format(string, sizeof(string), "%s[Administrador]\t%s\t%d.%d\t{00FF00}Trabalhando\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    			strcat(MEGAString, string);
            	    			Cont++;
							}
							else if(PlayerInfo[i][pAdmin] == 2)
				       		{
            	    			format(string, sizeof(string), "%s[Moderador]\t%s\t%d.%d\t{00FF00}Trabalhando\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    			strcat(MEGAString, string);
            	    			Cont++;
							}
							else if(PlayerInfo[i][pAdmin] == 1)
				        	{
            	    			format(string, sizeof(string), "%s[Estágiario]\t%s\t%d.%d\t{00FF00}Trabalhando\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    			strcat(MEGAString, string);
            	    			Cont++;
							}
							else
							{
            	    			format(string, sizeof(string), "%s[%d]\t%s\t%d.%d\t{00FF00}Trabalhando\n", sendername, PlayerInfo[i][pAdmin], PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
 	    			            strcat(MEGAString, string);
 	    			            Cont++;
							}
	                	}
	                	else
	                	{
	                	    if(strcmp(sendername,"wZAP", true) == 0)
							{
						    	format(string, sizeof(string), "%s[Fundador]\t%s\t%d.%d\t{FF0000}Jogando\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    			strcat(MEGAString, string);
            	    			Cont++;
							}
          					else if(PlayerInfo[i][pAdmin] == 5000)
				        	{
            	    			format(string, sizeof(string), "%s[Dono]\t%s\t%d.%d\t{FF0000}Jogando\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    			strcat(MEGAString, string);
            	    			Cont++;
							}
							else if(PlayerInfo[i][pAdmin] == 3001)
				        	{
            	    			format(string, sizeof(string), "%s[Diretor]\t%s\t%d.%d\t{FF0000}Jogando\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    			strcat(MEGAString, string);
            	    			Cont++;
							}
							else if(PlayerInfo[i][pAdmin] == 3000)
				        	{
            	    			format(string, sizeof(string), "%s[Gerente]\t%s\t%d.%d\t{FF0000}Jogando\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    			strcat(MEGAString, string);
            	    			Cont++;
							}
							else if(PlayerInfo[i][pAdmin] == 1339)
				       		{
            	    			format(string, sizeof(string), "%s[Supervisor]\t%s\t%d.%d\t{FF0000}Jogando\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    			strcat(MEGAString, string);
            	    			Cont++;
							}
							else if(PlayerInfo[i][pAdmin] == 1337 || PlayerInfo[i][pAdmin] == 1338)
				       		{
            	    			format(string, sizeof(string), "%s[Encarregado]\t%s\t%d.%d\t{FF0000}Jogando\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    			strcat(MEGAString, string);
            	    			Cont++;
							}
							else if(PlayerInfo[i][pAdmin] == 3 || PlayerInfo[i][pAdmin] == 4 || PlayerInfo[i][pAdmin] == 5)
				        	{
            	    			format(string, sizeof(string), "%s[Administrador]\t%s\t%d.%d\t{FF0000}Jogando\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    			strcat(MEGAString, string);
            	    			Cont++;
							}
							else if(PlayerInfo[i][pAdmin] == 2)
				       		{
            	    			format(string, sizeof(string), "%s[Moderador]\t%s\t%d.%d\t{FF0000}Jogando\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    			strcat(MEGAString, string);
            	    			Cont++;
							}
							else if(PlayerInfo[i][pAdmin] == 1)
				        	{
            	    			format(string, sizeof(string), "%s[Estágiario]\t%s\t%d.%d\t{FF0000}Jogando\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
            	    			strcat(MEGAString, string);
            	    			Cont++;
							}
							else
							{
          	    			  format(string, sizeof(string), "%s[%d]\t%s\t%d.%d\t{FF0000}Jogando\n", sendername, PlayerInfo[i][pAdmin], PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
   	    			          strcat(MEGAString, string);
   	    			          Cont++;
							}
	                	}
	                }
				}
			}
			if(PlayerInfo[i][pAdminTemp] > 0)
			{
				if(admhide[i] == 0)
				{
  	    			if(AFK[i] == 0)
    	    		{
						if(admtrampando[i] == 1)
    					{
							format(string, sizeof(string), "%s[Temporário]\t%s\t%d.%d\t{00FF00}Trabalhando\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
    						strcat(MEGAString, string);
    						Cont++;
    					}
						else
						{
    						format(string, sizeof(string), "%s[Temporário]\t%s\t%d.%d\t{FF0000}Jogando\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
   	    					strcat(MEGAString, string);
   	    					Cont++;
 	    				}
					}
					else
					{
   						format(string, sizeof(string), "%s[Temporário]\t%s\t%d.%d\t{FFFF00}Ausente\n", sendername, PlayerInfo[i][pFuncao],PlayerInfo[i][pAvaliacoes],PlayerInfo[i][pAFinal]);
    					strcat(MEGAString, string);
    					Cont++;

     				}
				}
			}
			new titulo[350];
		    format(titulo, sizeof(titulo), "{FFFFFF}Administradores Online {FFFFFF}({00d900}%d{FFFFFF})",Cont);
			ShowPlayerDialog(playerid, DIALOG_PARTICULAR, DIALOG_STYLE_TABLIST_HEADERS, titulo,  MEGAString, "Particular", "Fechar");
		}
		return 1;
	}
	CMD:helpers(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0)
    		{
     			SendClientMessage(playerid,0xff6347FF, "* Você não está conectado.");
       			return 1;
       		}
       		new Cont = 0;
	    MEGAString[0] =EOS;
	    //MaluKoString[0] =EOS;
     	new string[500];
		strcat(MEGAString, "Nome/Nível\tFunção\tAvaliação\tStatus\n");
        foreach(Player, i)
		{
            GetPlayerName(i, sendername, sizeof(sendername));
			if(PlayerInfo[i][pHelper] > 0)
			{
			    if(helpertrampando[i] == 1)
			    {
					format(string, sizeof(string), "%s[Helper]\tAjudar Players\t%d%s\t{FF6600}Ajudando\n", sendername, PlayerInfo[i][pHelper]);
                    strcat(MEGAString, string);
                    Cont++;
				}
				else
			   	{
					format(string, sizeof(string), "%s[Helper]\tAjudar Players\t%d\t{FF0000}Jogando\n", sendername, PlayerInfo[i][pHelper]);
                    strcat(MEGAString, string);
                    Cont++;
				}
			}
			new titulo[350];
		    format(titulo, sizeof(titulo), "{FFFFFF}Helpers Online {FFFFFF}({00d900}%d{FFFFFF})",Cont);
			ShowPlayerDialog(playerid, DIALOG_PARTICULAR, DIALOG_STYLE_TABLIST_HEADERS, titulo,  MEGAString, "Particular", "Fechar");
		}
		return 1;
	}
CMD:acessorios(playerid){

	new str[2000];
	new string[1000];
	str[0] = EOS;
	strcat(str, "Slot\t{28BDEF}Nome\tLocal\n");
	for(new i = 0; i != 10; i++){

		format(string, sizeof string, "%d\t{28BDEF}%s\t{FFFFFF}%s\n", i+1, NomeItemInventario(AcessorioInfo[playerid][i][aModel]), LocalAcessorio(AcessorioInfo[playerid][i][aLocal]));
		strcat(str, string);

		new a = 0;
		if(AcessorioInfo[playerid][i][aModel] != 0) a++;

  		format(string, sizeof string, "Meus acessorios: %d/10", a);
		ShowPlayerDialog(playerid, 250, 5, string, str, "Selecionar", "Cancelar");
	}
	return 1;
}
	CMD:definirsenha(playerid, tmp[])
	{
			if(isnull(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /definirsenha [Senha]");
				return true;
			}
    	    new string[128];
			if (PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pLider] == 35)
			{
  				format(string, sizeof(string), "Você definiu a senha de acesso as cameras de segurança para:[%s]", tmp);
				SendClientMessage(playerid, COLOR_LIGHTRED,string);
				strmid(SenhaSeguranca, tmp, 0, strlen(tmp), 256);
				SalvarSenhaSeguranca();
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "	Você não pode usar este comando!");
			}
			return true;
	}

	CMD:acessarcamerass(playerid, tmp[])
	{
			if(isnull(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Digite Alguma Senha!");
				return true;
			}
    	    new string[128];
			if(strcmp(SenhaSeguranca,tmp, true) == 0)
  			{
			    format(string, sizeof(string), "Senha CORRETA!! você entrou no painel de cameras de segurança!");
				SendClientMessage(playerid, 0x33FF00FF,string);
				ShowPlayerDialog(playerid, 8906, DIALOG_STYLE_LIST, "Cameras segurança","Cameras: Los Santos\nCameras: San Fierro\nCameras: Las Venturas\nSair do Painel\nSenha de Acesso","Acessar","Cancelar");
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "A Senha está incorreta e os policiais foram avisados!");
				format(string, sizeof(string), "HQ: Alguém está tentando invadir o painel de cameras de segurança.");
				CopBroadCast(0x00660CC8, string);
				SendFamilyMessage(34, 0x00660CC8, string);
			}
			return true;
	}

	CMD:deletarconta(playerid, tmp[])
	{
     	if(isnull(tmp))  return SendClientMessage(playerid, COLOR_WHITE, "USE: /deletarconta [NOME_CORRETO]");
     	if (PlayerInfo[playerid][pAdmin] < 1337)
		{
     		SendClientMessage(playerid, COLOR_GREY,"Você não tem permissão para usar esse comando!");
     		return true;
		}
		new file[64];
		new string[128];
     	format(file,sizeof(file),Pasta_Contas,tmp);
     	if(!DOF2_FileExists(file))return SendClientMessage(playerid, COLOR_GREY,"Esta conta não existe no servidor!");
		format(string, 128, Pasta_Deletadas, tmp);
     	DOF2_CopyFile(file, string);
     	DOF2_RemoveFile(file);
		format(string, sizeof(string), "AdmCmd: Admin %s deletou a conta: %s.",PlayerName(playerid), tmp);
		ABroadCast(0xff6347FF,string,1);

		getdate(v[0], v[1], v[2]);
		gettime(v[3], v[4], v[5]);
		format(string, 128, "[%02d/%02d/%02d] [%02d:%02d:%02d] %s Apagou a conta: %s", v[2], v[1], v[0], v[3], v[4], v[5] , PlayerName(playerid), tmp);
		BPFLogs("comandosadmin", string);
     	return true;
	}
	CMD:descasarme(playerid, params[])
	{
	    if(IsPlayerConnected(playerid))
	    {
   			if(IsPlayerConnected(playerid))
		    {
      			if(playerid != INVALID_PLAYER_ID)
        		{
                    new string[128];
 					ClearMarriage(playerid);
 					GivePlayerMoney(playerid,-500);
 					format(string, sizeof(string), "* Jogador %s se divorciou!", sendername);
 					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
 					SendClientMessage(playerid,COLOR_GREY,"Você se divorciou!");
				}
			}
		}
		return true;
	}

	CMD:novocmd(playerid, params[])
	{
	        new playa;
			if(sscanf(params, "u", playa))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /descasar [ID do Player]");
				return true;
			}
			if (PlayerInfo[playerid][pAdmin] >=4)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
                	    new string[128];
           				ClearMarriage(playa);
	 					format(string,128,"Seu casamento foi limpo, pelo admin %s.",PlayerName(playerid));
						SendClientMessage(playa,0xff6347FF,string);
						format(string,128,"Você limpou o casamento de %s.",PlayerName(playa));
						SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
		 				format(string, sizeof(string), "AdmCmd: O admin %s limpou o casamento de %s.",PlayerName(playerid), PlayerName(playa));
		 				ABroadCast(0xff6347FF, string, 1);
		 				BPFLogs("comandosadmin", string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar este comando!");
			}
			return true;
	}
	CMD:rarmas(playerid, params[])return ForT:retirararmas(playerid, params);
	CMD:retirararmas(playerid, params[])
	{
	        new playa;
			if(sscanf(params, "u", playa))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /retirararmas [ID do Player]");
				return true;
			}
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
       			if(!admtrampando[playerid])
					return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
                	    new string[128];
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						ResetPlayerWeapons(playa);
						printf("AdmCmd: %s retirou as armas de %s",sendername,  giveplayer);
						format(string, sizeof(string), "Você retirou as armas de %s ",giveplayer);
						SendClientMessage(playerid, COLOR_GRAD1,string);
						format(string, sizeof string, "AdmCmd: O admin %s retirou as armas de %s.",sendername,  giveplayer);
                    	ABroadCast(0xff6347FF,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar este comando!");
			}
			return true;
	}

//====================
	CMD:calar(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
	        new playa;
			if(sscanf(params, "u", playa))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /calar [ID do Player]");
				return true;
			}
			if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        if(PlayerInfo[playa][pAdmin] > 1337 && PlayerInfo[playerid][pAdmin] < 1337)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode calar um Admin Dono !");
							return true;
						}
                	    new string[128];
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						if(PlayerInfo[playa][pMuted] == 0)
						{
							PlayerInfo[playa][pMuted] = 1;
							printf("AdmCmd: %s silenced %s",sendername,  giveplayer);
							format(string, sizeof(string), "AdmCmd: %s foi calado por %s",giveplayer ,PlayerName(playerid));
							ABroadCast(COLOR_LIGHTRED,string,1);
							BPFLogs("comandosadmin", string);
						}
						else
						{
							PlayerInfo[playa][pMuted] = 0;
							printf("AdmCmd: %s unsilenced %s",sendername,  giveplayer);
							if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
							{
								format(string, sizeof(string), "AdmCmd: %s foi descalado por MOLE",giveplayer);
							}
							else
							{
								format(string, sizeof(string), "AdmCmd: %s foi descalado por %s",giveplayer ,PlayerName(playerid));
							}
							ABroadCast(COLOR_LIGHTRED,string,1);
							BPFLogs("comandosadmin", string);
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não esta autorizado a usar este comando!");
			}
			return true;
	}
// infoarmas , infoplayer , infoxiter
	CMD:infoarmas(playerid, params[])
	{
			if(sscanf(params, "u", giveplayerid))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USE: /infoarmas [id do player]");
				return true;
			}
			if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pAdminTemp] < 1 )
			{
			  	SendClientMessage(playerid, COLOR_GREY, "Você não está autorizado a usar esse comando!");
				return true;
			}
    	    new string[128];
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    new weapons[13][2];
				    new playerck[MAX_PLAYER_NAME];
				    GetPlayerName(giveplayerid, playerck, sizeof(playerck));
   					format(string, sizeof(string), "EXIBINDO AS INFORMAÇÕES DAS ARMAS DE: %s",playerck);
   					SendClientMessage(playerid, TEAM_BALLAS_COLOR, string);
                    GetPlayerWeaponData(giveplayerid, 2, weapons[2][0], weapons[2][1]);
				    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[2][0]], weapons[2][1]);
   					SendClientMessage(playerid, COLOR_WHITE, string);
				    GetPlayerWeaponData(giveplayerid, 3, weapons[3][0], weapons[3][1]);
				    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[3][0]], weapons[3][1]);
   					SendClientMessage(playerid, COLOR_WHITE, string);
				    GetPlayerWeaponData(giveplayerid, 4, weapons[4][0], weapons[4][1]);
				    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[4][0]], weapons[4][1]);
   					SendClientMessage(playerid, COLOR_WHITE, string);
   					GetPlayerWeaponData(giveplayerid, 5, weapons[5][0], weapons[5][1]);
				    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[5][0]], weapons[5][1]);
   					SendClientMessage(playerid, COLOR_WHITE, string);
   					GetPlayerWeaponData(giveplayerid, 6, weapons[6][0], weapons[6][1]);
				    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[6][0]], weapons[6][1]);
   					SendClientMessage(playerid, COLOR_WHITE, string);
   					GetPlayerWeaponData(giveplayerid, 7, weapons[7][0], weapons[7][1]);
				    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[7][0]], weapons[7][1]);
   					SendClientMessage(playerid, COLOR_WHITE, string);
   					GetPlayerWeaponData(giveplayerid, 8, weapons[8][0], weapons[8][1]);
				    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[8][0]], weapons[8][1]);
   					SendClientMessage(playerid, COLOR_WHITE, string);
   					GetPlayerWeaponData(giveplayerid, 9, weapons[9][0], weapons[9][1]);
				    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[9][0]], weapons[9][1]);
   					SendClientMessage(playerid, COLOR_WHITE, string);
   					GetPlayerWeaponData(giveplayerid, 11, weapons[11][0], weapons[11][1]);
				    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[11][0]], weapons[11][1]);
  					SendClientMessage(playerid, COLOR_WHITE, string);
		    	}
			}
        	else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Este jogador está off-line !");
	            return true;
	        }
	    	return true;
	}
//---------------------------------------------------------------------------------------
	CMD:infoplayer(playerid, params[])
	{
	 	new armatext[30];
	    new municao;
	    new arma;
	    new Float:plrtempheal;
	    new Float:plrarmour;
	    new plrping;
	    new iplayer[MAX_PLAYER_NAME];
	    new smunicao;
	    new string[128];
	    new ip[32];
		if(sscanf(params, "u", giveplayerid))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USE: /infoplayer [id do player]");
			return true;
		}
		if(PlayerInfo[playerid][pAdmin] < 2)
		{
		  	SendClientMessage(playerid, COLOR_GREY, "Você não está autorizado a usar esse comando!");
			return true;
		}
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
   				GetPlayerName(giveplayerid, iplayer, sizeof(iplayer));
   				GetPlayerIp(giveplayerid,ip,128);
   				new intid = GetPlayerInterior(giveplayerid);
				new world4 = GetPlayerVirtualWorld(giveplayerid);
				plrping = GetPlayerPing(giveplayerid);
			   	GetPlayerArmour(giveplayerid, plrarmour);
				GetPlayerHealth(giveplayerid,plrtempheal);
				arma = GetPlayerWeapon(giveplayerid);
				municao = GetPlayerAmmo(giveplayerid);
				SendClientMessage(playerid, COLOR_GREEN, "|________[ EXIBINDO INFORMAÇÕES ]________|");
				format(string, sizeof(string), "{FF6347}Nome: {FFFFFF} %s", iplayer);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				format(string, sizeof(string), "{FF6347}IP: {FFFFFF}%s", ip);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				format(string, sizeof(string), "{FF6347}Interior: {FFFFFF}%d", intid);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				format(string, sizeof(string), "{FF6347}Mundo: {FFFFFF}%d", world4);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				format(string, sizeof(string), "{FF6347}Ping: {FFFFFF}%d", plrping);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				format(string, sizeof(string), "{FF6347}Colete: {FFFFFF}%1f", plrarmour);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				format(string, sizeof(string), "{FF6347}Saúde: {FFFFFF}%1f", plrtempheal);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				if(arma == 38) { armatext = "Minigun";}
				else if(arma == 40) { armatext = "Detonador"; }
				else if(arma == 36) { armatext = "Lança missil RPG"; }
				else if(arma == 35) { armatext = "Lança missil"; }
				else if(arma == 16) { armatext = "Granada"; }
				else if(arma == 18) { armatext = "Coctel Molotov"; }
				else if(arma == 22) { armatext = "Pistola de Duas mãos 9mm"; }
				else if(arma == 26) { armatext = "Escopeta de Cano Serrado"; }
				else if(arma == 27) { armatext = "Escopeta de Combate"; }
				else if(arma == 28) { armatext = "Micro Uzi"; }
				else if(arma == 32) { armatext = "Tec9"; }
				else if(arma == 37) { armatext = "Lança Chamas"; }
				else if(arma == 0) { armatext = "Desarmado"; }
                else if(arma == 4) { armatext = "Faca"; }
                else if(arma == 5) { armatext = "Bastão de Base Ball"; }
                else if(arma == 9) { armatext = "Motoserra"; }
                else if(arma == 14) { armatext = "Flores"; }
                else if(arma == 17) { armatext = "Granada de Gas"; }
                else if(arma == 23) { armatext = "Pistola com silênciador"; }
                else if(arma == 16) { armatext = "Granada"; }
                else if(arma == 24) { armatext = "Desert Eagle"; }
                else if(arma == 25) { armatext = "ShotGun"; }
                else if(arma == 29) { armatext = "MP5"; }
                else if(arma == 30) { armatext = "AK-47"; }
                else if(arma == 31) { armatext = "M4"; }
                else if(arma == 33) { armatext = "Rifle"; }
                else if(arma ==  34) { armatext = "Rifle Sniper"; }
                else if(arma == 41) { armatext = "Spray"; }
                else if(arma == 42) { armatext = "Extintor"; }
                else if(arma == 46) { armatext = "Paraquedas"; }
                else { armatext = "Desconhecido"; }
                format(string, sizeof(string), "{FF6347}Arma: {FFFFFF}%s", armatext);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
				if(arma == 40 || arma == 36 || arma == 16 || arma == 18 || arma == 26 || arma == 28)
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "/tv nele, pois ele pode estar usando xiter de armas");
				}
				if(municao == 65535) { smunicao = 0; } else { smunicao = municao; }
				format(string, sizeof(string), "{FF6347}Munição: {FFFFFF}%d", smunicao);
				SendClientMessage(playerid, COLOR_LIGHTRED, string);
		 	}
		}
	    else
	    {
	        SendClientMessage(playerid, COLOR_GREY, "   Este jogador está off-line !");
	        return true;
	    }
	    return true;
	}

stock ReturnVehicle()
{
	new Rdon = random(62);
  	switch(Rdon)
  	{
	  	case 1:return 400;case 2:return 401;case 3:return 402;
	  	case 4:return 404;case 5:return 560;case 6:return 405;
	  	case 7:return 410;case 8:return 411;case 9:return 412;
	  	case 10:return 413;case 11:return 415;case 12:return 418;
	  	case 13:return 419;case 14:return 422;case 15:return 424;
		case 16:return 426;case 17:return 429;case 18:return 434;
	  	case 19:return 436;case 20:return 439;case 21:return 442;
		case 23:return 445;case 24:return 451;case 25:return 458;
		case 29:return 466;case 30:return 467;case 32:return 474;
		case 33:return 475;case 36:return 478;case 37:return 479;
		case 38:return 480;
		case 40:return 483;case 41:return 491;case 42:return 492;
	  	case 43:return 496;case 44:return 500;case 45:return 506;
		case 46:return 507;case 47:return 508;case 48:return 517;
	  	case 49:return 518;case 51:return 527;case 52:return 533;
		case 53:return 534;case 54:return 535;case 55:return 536;
	  	case 56:return 541;case 57:return 542;case 58:return 545;
		case 59:return 549;case 60:return 550;case 61:return 551;
	  	case 62:return 554;
  		default:return 560;
	}
	return 560;
}


//---------------Guinchar----------------------------------
	CMD:guincharmoto(playerid, params[])
	{
	    new string[128];
	    if(IsPlayerConnected(playerid))
		{
		    if(IsAMec(playerid))
		    {
		        if(IsPlayerInAnyVehicle(playerid))
		        {
			    	if (GetVehicleModel(GetPlayerVehicleID(playerid)) == 459)
		     	   	{
		     	   	    if(GetPlayerState(playerid)==2)
		     	   	    {
		     	   	        GetPlayerName(playerid, sendername, sizeof(sendername));
							new Float:pX,Float:pY,Float:pZ;
							GetPlayerPos(playerid,pX,pY,pZ);
							new Float:tX,Float:tY,Float:tZ;
							new Found=0;
							new vid=0;
							if(guinchado[playerid] > 0)
							{
								   new trazer = guinchado[playerid];
							       SetVehiclePos(trazer,pX,pY+4,pZ);
							       guinchado[playerid] = 0;
							       SendClientMessage(playerid,COLOR_GREY,"Você Tirou a moto da Carroceria.");
							       format(string, sizeof(string), "* %s Tirou a moto da Carroceria.", sendername);
 				        		   ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							       return 1;
							}
							while((vid<MAX_VEHICLES))//&&(!Found))
							{
			   					vid++;
			   					GetVehiclePos(vid,tX,tY,tZ);
			   					if ((floatabs(pX-tX)<7.0)&&(floatabs(pY-tY)<7.0)&&(floatabs(pZ-tZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
								{
            						if(!IsAMoto(vid))
	    							{
	    						    	SendClientMessage(playerid,COLOR_GREY,"Voçê Só Pode guinchar Motos com Este Veículo.");
							       		return 1;
									}
									for(new i=0;i<MAX_PLAYERS;i++)
									{
										if(IsPlayerInVehicle(i, vid))
										{
									    	SendClientMessage(playerid,COLOR_GREY,"Tem alguém Neste carro.");
							       			return 1;
										}
									}
               						if(guinchado[playerid] <= 0)
			           				{
			   				        	guinchado[playerid] = vid;
			   				        	SetVehiclePos(vid, 265.8789,2883.9829,11.6720);
			   				        	SendClientMessage(playerid,COLOR_GREY,"Você Guinchou a Moto.");
			   				        	format(string, sizeof(string), "* %s Guinchou uma Moto.", sendername);
			   				        	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                  					}
			 					}
			     			}
			     			if(guinchado[playerid] == 0)
       						{
       							if(!Found)
				 					{
			   				    		SendClientMessage(playerid,COLOR_GREY,"Você Precisa estar perto de um veiculo.");
			   						}
			   				}
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD2, "Você precisa estar dirigindo!");
							return 1;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Você não tem uma Van!");
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você não está em uma Van!");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid,COLOR_GRAD2,"Você não é Detran!");
				return 1;
			}
		}
		return 1;
	}
 CMD:guinchar(playerid, params[])
	{
		    if(IsAMec(playerid) || IsACop(playerid) || IsASons(playerid))
		    {
		        if(IsPlayerInAnyVehicle(playerid))
		        {
			    	if (GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
		     	   	{
						if(MecanicMission[playerid])
						{
				  			new Float:x, Float:y, Float:z;
				     		GetVehiclePos(VehicleMission[playerid], x, y, z);
				       		if(GetPlayerDistanceFromPoint(playerid, x, y, z) < 7.0)
					        {
						    	if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
						    	{
							   		AttachTrailerToVehicle(VehicleMission[playerid], GetPlayerVehicleID(playerid));
					                if(!IsAttached[playerid])
					                {
					               		SendClientMessage(playerid, COLOR_LIGHTRED, "Você pegou o carro, leve até a marca vermelha no mapa para terminar a missao.");
										CP[playerid] = 50;
										SetPlayerCheckpoint(playerid, 1570.4667,-2166.3792,13.5547, 5.0);
									}
				                    IsAttached[playerid] = true;
								}
							}
						}
		     	   	    if(GetPlayerState(playerid)==2)
		     	   	    {
							new Float:pX,Float:pY,Float:pZ;
							GetPlayerPos(playerid,pX,pY,pZ);
							new Float:vgX,Float:vgY,Float:vgZ;
							new Found=0;
							new vid=0;
							while((vid<MAX_VEHICLES)&&(!Found))
							{
			   					vid++;
			   					GetVehiclePos(vid,vgX,vgY,vgZ);
			   					if ((floatabs(pX-vgX)<6.0)&&(floatabs(pY-vgY)<6.0)&&(floatabs(pZ-vgZ)<6.0)&&(vid!=GetPlayerVehicleID(playerid)))
								{
			   				    	if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			           				{
			   				        	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
						           	}
						           	else
						           	{
					                   AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
									}
			 					}
			     			}
							if(!Found)
				 			{
			   					//SendClientMessage(playerid,COLOR_GREY,"Não tem nenhum carro perto.");
			   				}
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD2, "Você precisa estar dirigindo !");
							return true;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Você não tem um Guincho !");
						return true;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você não está em um guincho !");
					return true;
				}
			}
			else
			{
				SendClientMessage(playerid,COLOR_GRAD2,"Você não é Detran ou um Policial !");
				return true;
			}
			return true;
	}
    //---------------- Sincronizar ----------------------------
	CMD:sinc(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
		if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pAdminTemp] < 1)
		{
			SendClientMessage(playerid,COLOR_YELLOW,"Você não pode usar este comando");
			return true;
		}
		if(GetPlayerState(playerid) == 9|| GetPlayerState(playerid) == 5 || GetPlayerState(playerid) == 6 ||GetPlayerState(playerid) == 4||
		GetPlayerState(playerid) == 0 || sincronizando[playerid] == 1 || PlayerInfo[playerid][pJailed] != 0 || PlayerInfo[playerid][pMuted] == 1)
		{
			SendClientMessage(playerid,COLOR_YELLOW,"Você não pode sincronizar agora!");
			return true;
		}
		if(PlayerToPoint(3.0,playerid,2144.3711,1641.4792,993.5761) || PlayerToPoint(3.0,playerid,303.9886,-169.0725,999.5938) || PlayerToPoint(3.0,playerid,294.8029,-57.8727,1001.5156) || PlayerToPoint(3.0,playerid,162.1254,-79.7925,1001.8047) ||
		PlayerToPoint(3.0,playerid,211.3817,-96.1272,1005.2578) || PlayerToPoint(3.0,playerid,820.8934,8.5365,1004.1958) || PlayerToPoint(3.0,playerid,205.4959,-11.5585,1005.2109))
		{
			SendClientMessage(playerid,COLOR_YELLOW,"Você não pode sincronizar agora!");
			return true;
		}
		if(psinc == 1)
  		{
	        SendClientMessage(playerid,COLOR_GRAD2,"Já sincronizaram,tente daqui a pouco!");
	        return true;
	    }
	 	sincronizando[playerid] = 1;
	 	virt[playerid] = GetPlayerVirtualWorld(playerid);
		interior[playerid] = GetPlayerInterior(playerid);
		skinneg[playerid] = GetPlayerSkin(playerid);
		GetPlayerArmour(playerid,APP[playerid]);
		GetPlayerHealth(playerid,PlayerHPP[playerid]);
		GetPlayerFacingAngle(playerid,FaceAngle[playerid]);
		GetPlayerPos(playerid,xx[playerid],yy[playerid],zz[playerid]);
		GetPlayerWeaponData(playerid,1,gunsinc[1][playerid],ammoo[1][playerid]);
		GetPlayerWeaponData(playerid,2,gunsinc[2][playerid],ammoo[2][playerid]);
		GetPlayerWeaponData(playerid,3,gunsinc[3][playerid],ammoo[3][playerid]);
		GetPlayerWeaponData(playerid,4,gunsinc[4][playerid],ammoo[4][playerid]);
		GetPlayerWeaponData(playerid,5,gunsinc[5][playerid],ammoo[5][playerid]);
		GetPlayerWeaponData(playerid,6,gunsinc[6][playerid],ammoo[6][playerid]);
		GetPlayerWeaponData(playerid,7,gunsinc[7][playerid],ammoo[7][playerid]);
		GetPlayerWeaponData(playerid,8,gunsinc[8][playerid],ammoo[8][playerid]);
		GetPlayerWeaponData(playerid,9,gunsinc[9][playerid],ammoo[9][playerid]);
		GetPlayerWeaponData(playerid,10,gunsinc[10][playerid],ammoo[10][playerid]);
		GetPlayerWeaponData(playerid,11,gunsinc[11][playerid],ammoo[11][playerid]);
		GetPlayerWeaponData(playerid,12,gunsinc[12][playerid],ammoo[12][playerid]);
		psinc = 1;
		SetTimer("Sinc", 8000, 0);
		if(IsPlayerInAnyVehicle(playerid))
		{
			vehicledd[playerid] = 1;
			VehicleIDD[playerid] = GetPlayerVehicleID(playerid);
		}
//	SyncPlayer(playerid);
		MedicBill[playerid] = 0;
		SpawnPlayer(playerid);
		TempoSinc = SetTimerEx("Sincronizar", 500, 0, "i", playerid);
		return true;
	}

	CMD:modelomeucarro(playerid, params[])
	{
			new vehid = GetPlayerVehicleID(playerid);
	    	if(PlayerInfo[playerid][pCarKey] == 0 && PlayerInfo[playerid][pCarKey2] == 0&& PlayerInfo[playerid][pCarKey3] == 0&& PlayerInfo[playerid][pCarKey4] == 0&& PlayerInfo[playerid][pCarKey5] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não tem um Carro VIP.");
				return true;
			}
  			if(!IsPlayerInAnyVehicle(playerid))
			{
				SendClientMessage(playerid,COLOR_GREY,"Você precisa estar no veiculo VIP!");
				return 1;
			}
			if(PlayerInfo[playerid][pCarKey] != vehid &&
			PlayerInfo[playerid][pCarKey2] != vehid &&
			PlayerInfo[playerid][pCarKey3] != vehid &&
			PlayerInfo[playerid][pCarKey4] != vehid &&
			PlayerInfo[playerid][pCarKey5] != vehid)
			{
				SendClientMessage(playerid, COLOR_GREY, "Esse não é seu Carro VIP.");
				return true;
			}
			new carid;
			new Veiculo;
			if(vehid == PlayerInfo[playerid][pCarKey])
			{
				carid = PlayerInfo[playerid][pCarKey];
				Veiculo = PlayerInfo[playerid][pVeiculo];
			}
			else if(vehid == PlayerInfo[playerid][pCarKey2])
			{
				carid = PlayerInfo[playerid][pCarKey2];
				Veiculo = PlayerInfo[playerid][pVeiculo2];
			}
			else if(vehid == PlayerInfo[playerid][pCarKey3])
			{
				carid = PlayerInfo[playerid][pCarKey3];
				Veiculo = PlayerInfo[playerid][pVeiculo3];
			}
			else if(vehid == PlayerInfo[playerid][pCarKey4])
			{
				carid = PlayerInfo[playerid][pCarKey4];
				Veiculo = PlayerInfo[playerid][pVeiculo4];
			}
			else if(vehid == PlayerInfo[playerid][pCarKey5])
			{
				carid = PlayerInfo[playerid][pCarKey5];
				Veiculo = PlayerInfo[playerid][pVeiculo5];
			}
           	if(IsPlayerInVehicle(playerid,carid) && CarInfo[Veiculo][cOwned] == 1)
			{
			    SetPVarInt(playerid, "modelovip", Veiculo);
			    SetPVarInt(playerid, "carrovip", carid);
            	ShowModelSelectionMenu(playerid, CarrosVipList, "Escolha seu carro", 50, 0x000000AA);
            	SendClientMessage(playerid, COLOR_YELLOW2, "Escolha o novo modelo do seu carro PREMIUM!");
			}
			return true;
	}
	CMD:modelomeucarro222(playerid, params[])
	{
	    if(PlayerInfo[playerid][pAdmin] < 5000)
		{
			SendClientMessage(playerid,COLOR_YELLOW,"Você não pode usar este comando");
			return true;
		}
	        new modelid;
			if(sscanf(params, "d", modelid))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: /modelomeucarro222 [modelid]");
				return true;
			}
			new vehid = GetPlayerVehicleID(playerid);
	    	if(PlayerInfo[playerid][pCarKey] == 0 && PlayerInfo[playerid][pCarKey2] == 0&& PlayerInfo[playerid][pCarKey3] == 0&& PlayerInfo[playerid][pCarKey4] == 0&& PlayerInfo[playerid][pCarKey5] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não tem um Carro VIP.");
				return true;
			}
  			if(!IsPlayerInAnyVehicle(playerid))
			{
				SendClientMessage(playerid,COLOR_GREY,"Você precisa estar no veiculo VIP!");
				return 1;
			}
			if(PlayerInfo[playerid][pCarKey] != vehid &&
			PlayerInfo[playerid][pCarKey2] != vehid &&
			PlayerInfo[playerid][pCarKey3] != vehid &&
			PlayerInfo[playerid][pCarKey4] != vehid &&
			PlayerInfo[playerid][pCarKey5] != vehid)
			{
				SendClientMessage(playerid, COLOR_GREY, "Esse não é seu Carro VIP.");
				return true;
			}
			new carid;
			new Veiculo;
			if(vehid == PlayerInfo[playerid][pCarKey])
			{
				carid = PlayerInfo[playerid][pCarKey];
				Veiculo = PlayerInfo[playerid][pVeiculo];
			}
			else if(vehid == PlayerInfo[playerid][pCarKey2])
			{
				carid = PlayerInfo[playerid][pCarKey2];
				Veiculo = PlayerInfo[playerid][pVeiculo2];
			}
			else if(vehid == PlayerInfo[playerid][pCarKey3])
			{
				carid = PlayerInfo[playerid][pCarKey3];
				Veiculo = PlayerInfo[playerid][pVeiculo3];
			}
			else if(vehid == PlayerInfo[playerid][pCarKey4])
			{
				carid = PlayerInfo[playerid][pCarKey4];
				Veiculo = PlayerInfo[playerid][pVeiculo4];
			}
			else if(vehid == PlayerInfo[playerid][pCarKey5])
			{
				carid = PlayerInfo[playerid][pCarKey5];
				Veiculo = PlayerInfo[playerid][pVeiculo5];
			}
           	if(IsPlayerInVehicle(playerid,carid) && CarInfo[Veiculo][cOwned] == 1)
			{
			    new str[74];
				CarInfo[Veiculo][cModel] = modelid;
				GameTextForPlayer(playerid, "~w~Modelo do seu Carro Premium Mudado ~r~-R$300.", 10000, 3);
				DestroyVehicle(carid);
				SendClientMessage(playerid, COLOR_YELLOW, "Vá buscar o seu veículo onde você estacionou.");
				CreateVehicle(CarInfo[Veiculo][cModel],CarInfo[Veiculo][cLocationx],CarInfo[Veiculo][cLocationy],CarInfo[Veiculo][cLocationz]+1.0,CarInfo[Veiculo][cAngle],CarInfo[Veiculo][cColorOne],CarInfo[Veiculo][cColorTwo],60000);
				Controle(playerid, 1);
				GiveDinheiro(playerid,-300);
				SalvarCarro(Veiculo);
				format(str, sizeof str, "{000000}BPF-%04d", carid);
	    		SetVehicleNumberPlate(carid, str);
	    		SetVehicleToRespawn(carid);
			}
			return true;
	}
	CMD:descricaomeucarro(playerid, params[])
	{
			new vehid = GetPlayerVehicleID(playerid);
	    	if(PlayerInfo[playerid][pCarKey] == 0 && PlayerInfo[playerid][pCarKey2] == 0&& PlayerInfo[playerid][pCarKey3] == 0&& PlayerInfo[playerid][pCarKey4] == 0&& PlayerInfo[playerid][pCarKey5] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não tem um Carro VIP.");
				return true;
			}
  			if(!IsPlayerInAnyVehicle(playerid))
			{
				SendClientMessage(playerid,COLOR_GREY,"Você precisa estar no veiculo VIP!");
				return 1;
			}
			if(PlayerInfo[playerid][pCarKey] != vehid && PlayerInfo[playerid][pCarKey2] != vehid &&
			PlayerInfo[playerid][pCarKey3] != vehid &&
			PlayerInfo[playerid][pCarKey4] != vehid &&
			PlayerInfo[playerid][pCarKey5] != vehid)
			{
				SendClientMessage(playerid, COLOR_GREY, "Esse não é seu Carro VIP.");
				return true;
			}
			new desc[45];
			new carid;
			new Veiculo;
			new string[128];
			if(vehid == PlayerInfo[playerid][pCarKey])
			{
				carid = PlayerInfo[playerid][pCarKey];
				Veiculo = PlayerInfo[playerid][pVeiculo];
			}
			else if(vehid == PlayerInfo[playerid][pCarKey2])
			{
				carid = PlayerInfo[playerid][pCarKey2];
				Veiculo = PlayerInfo[playerid][pVeiculo2];
			}
			else if(vehid == PlayerInfo[playerid][pCarKey3])
			{
				carid = PlayerInfo[playerid][pCarKey3];
				Veiculo = PlayerInfo[playerid][pVeiculo3];
			}
			else if(vehid == PlayerInfo[playerid][pCarKey4])
			{
				carid = PlayerInfo[playerid][pCarKey4];
				Veiculo = PlayerInfo[playerid][pVeiculo4];
			}
			else if(vehid == PlayerInfo[playerid][pCarKey5])
			{
				carid = PlayerInfo[playerid][pCarKey5];
				Veiculo = PlayerInfo[playerid][pVeiculo5];
			}
			if(sscanf(params, "s[45]", desc))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /descricaomeucarro [Texto]");
				return true;
			}
            if(IsPlayerInVehicle(playerid,carid) && CarInfo[Veiculo][cOwned] == 1)
			{
			    format(string, 128, "~w~Nova descricao: ~p~%s", desc);
				GameTextForPlayer(playerid, string, 10000, 3);
				GiveDinheiro(playerid,-300);
				format(CarInfo[Veiculo][cDescription], 64, desc);
				format(string, sizeof string, "{50AAFE}»%s«",CarInfo[Veiculo][cDescription]);
				//Update3DTextLabelText(CarInfo[Veiculo][cText], 0xFFFFAA, string);
				SalvarCarro(Veiculo);
			}
			return true;
	}

stock CheckBeneficios(playerid)
{
	new bool:perdeu=false;
	if(PlayerInfo[playerid][pPbiskey] != 255)
	{
  		ForT:venderempresa66656(playerid, #);
	}
	if(PlayerInfo[playerid][pPFazkey] != 255)
	{
  		ForT:venderfazenda66656(playerid, #);
	}
	if(PlayerInfo[playerid][pCarKey] != 0)
	{
	    ForT:vendermeuscarros555(playerid, #);
	}
	if(PlayerInfo[playerid][pCarKey2] != 0)
	{
	    ForT:vendermeuscarros555(playerid, #);
	}
	if(PlayerInfo[playerid][pCarKey3] != 0)
	{
	    ForT:vendermeuscarros555(playerid, #);
	}
	if(PlayerInfo[playerid][pCarKey4] != 0)
	{
	    ForT:vendermeuscarros555(playerid, #);
	}
	if(PlayerInfo[playerid][pCarKey5] != 0)
	{
	    ForT:vendermeuscarros555(playerid, #);
	}
	if(PlayerInfo[playerid][pPHousekey] != 500)
	{
		new gstring[256];
	   	new Housekey = PlayerInfo[playerid][pPHousekey];
		format(gstring, sizeof(gstring), "Casa VIP");
		if(strcmp(gstring, HouseInfo[Housekey][hDiscription], true) == 0)
		{
			//SendClientMessage(playerid, COLOR_WHITE, " Casa VIP Vendida!");
			ForT:vendercasa66656(playerid, #);
		}
	}
	perdeu=true;
	if(perdeu)
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "*Voce perdeu sua empresa ou seus veiculos VIP, renove seu VIP para te-los novamente!");
		}
}

	CMD:vendermeuscarros555(playerid, params[])
	{
			//new carid;
			new Veiculo,Veiculo2,Veiculo3,Veiculo4,Veiculo5;
    	    new string[128];
			Veiculo = PlayerInfo[playerid][pVeiculo];
			Veiculo2 = PlayerInfo[playerid][pVeiculo2];
			Veiculo3 = PlayerInfo[playerid][pVeiculo3];
			Veiculo4 = PlayerInfo[playerid][pVeiculo4];
			Veiculo5 = PlayerInfo[playerid][pVeiculo5];
			if(Veiculo != 0)
			{
				CarInfo[Veiculo][cOwned] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(CarInfo[Veiculo][cOwner], "Ninguém", 0, strlen("Ninguém"), 999);
				GiveDinheiro(playerid,CarInfo[Veiculo][cValue]);
				format(CarInfo[Veiculo][cDescription], 64, "Sem Dono");
				//format(string, sizeof string, "{50AAFE}Dono: %s\n{FFFF00}Descrição\n{FFFFFF}»%s«", CarInfo[Veiculo][cOwner], CarInfo[Veiculo][cDescription]);
				//Update3DTextLabelText(CarInfo[Veiculo][cText], 0xFFFFAA, string);
			}
			if(Veiculo2 != 0)
			{
				CarInfo[Veiculo2][cOwned] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(CarInfo[Veiculo2][cOwner], "Ninguém", 0, strlen("Ninguém"), 999);
				GiveDinheiro(playerid,CarInfo[Veiculo2][cValue]);
				format(CarInfo[Veiculo2][cDescription], 64, "Sem Dono");
				//format(string, sizeof string, "{50AAFE}Dono: %s\n{FFFF00}Descrição\n{FFFFFF}»%s«", CarInfo[Veiculo2][cOwner], CarInfo[Veiculo2][cDescription]);
				//Update3DTextLabelText(CarInfo[Veiculo2][cText], 0xFFFFAA, string);
			}
            if(Veiculo3 != 0)
			{
				CarInfo[Veiculo3][cOwned] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(CarInfo[Veiculo3][cOwner], "Ninguém", 0, strlen("Ninguém"), 999);
				GiveDinheiro(playerid,CarInfo[Veiculo3][cValue]);
				format(CarInfo[Veiculo3][cDescription], 64, "Sem Dono");
				//format(string, sizeof string, "{50AAFE}Dono: %s\n{FFFF00}Descrição\n{FFFFFF}»%s«", CarInfo[Veiculo3][cOwner], CarInfo[Veiculo3][cDescription]);
				//Update3DTextLabelText(CarInfo[Veiculo3][cText], 0xFFFFAA, string);
			}
			if(Veiculo4 != 0)
			{
				CarInfo[Veiculo4][cOwned] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(CarInfo[Veiculo4][cOwner], "Ninguém", 0, strlen("Ninguém"), 999);
				GiveDinheiro(playerid,CarInfo[Veiculo4][cValue]);
				format(CarInfo[Veiculo4][cDescription], 64, "Sem Dono");
				//format(string, sizeof string, "{50AAFE}Dono: %s\n{FFFF00}Descrição\n{FFFFFF}»%s«", CarInfo[Veiculo4][cOwner], CarInfo[Veiculo4][cDescription]);
				//Update3DTextLabelText(CarInfo[Veiculo4][cText], 0xFFFFAA, string);
			}
			if(Veiculo5 != 0)
			{
				CarInfo[Veiculo5][cOwned] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(CarInfo[Veiculo5][cOwner], "Ninguém", 0, strlen("Ninguém"), 999);
				GiveDinheiro(playerid,CarInfo[Veiculo5][cValue]);
				format(CarInfo[Veiculo5][cDescription], 64, "Sem Dono");
				//format(string, sizeof string, "{50AAFE}Dono: %s\n{FFFF00}Descrição\n{FFFFFF}»%s«", CarInfo[Veiculo5][cOwner], CarInfo[Veiculo5][cDescription]);
				//Update3DTextLabelText(CarInfo[Veiculo5][cText], 0xFFFFAA, string);
			}

				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Veiculos VIP Vendidos Por:~g~$%d cada", CarInfo[Veiculo][cValue]);
				GameTextForPlayer(playerid, string, 10000, 3);
				PlayerInfo[playerid][pCarKey] = 0;
				PlayerInfo[playerid][pVeiculo] = 0;
				PlayerInfo[playerid][pCarKey2] = 0;
				PlayerInfo[playerid][pVeiculo2] = 0;
				PlayerInfo[playerid][pCarKey3] = 0;
				PlayerInfo[playerid][pVeiculo3] = 0;
				PlayerInfo[playerid][pCarKey4] = 0;
				PlayerInfo[playerid][pVeiculo4] = 0;
				PlayerInfo[playerid][pCarKey5] = 0;
				PlayerInfo[playerid][pVeiculo5] = 0;
				SalvarCarro(Veiculo);
				SalvarCarro(Veiculo2);
				SalvarCarro(Veiculo3);
				SalvarCarro(Veiculo4);
				SalvarCarro(Veiculo5);
 	 		return true;
	}
    CMD:vendermeucarro(playerid, params[])
	{
            new vehid = GetPlayerVehicleID(playerid);
	    	if(PlayerInfo[playerid][pCarKey] == 0 && PlayerInfo[playerid][pCarKey2] == 0&& PlayerInfo[playerid][pCarKey3] == 0&& PlayerInfo[playerid][pCarKey4] == 0&& PlayerInfo[playerid][pCarKey5] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não tem um Carro VIP.");
				return true;
			}
			if(!IsPlayerInAnyVehicle(playerid))
			{
				SendClientMessage(playerid,COLOR_GREY,"Você precisa estar no seu veiculo VIP!");
				return 1;
			}
			if(PlayerInfo[playerid][pCarKey] != vehid && PlayerInfo[playerid][pCarKey2] != vehid &&
			PlayerInfo[playerid][pCarKey3] != vehid &&
			PlayerInfo[playerid][pCarKey4] != vehid &&
			PlayerInfo[playerid][pCarKey5] != vehid)
			{
				SendClientMessage(playerid, COLOR_GREY, "Esse não é seu Carro VIP.");
				return true;
			}
			new carid;
			new Veiculo;
			new pcarro[MAX_PLAYERS];
    	    new string[128];
			if(vehid == PlayerInfo[playerid][pCarKey])
			{
				carid = PlayerInfo[playerid][pCarKey];
				Veiculo = PlayerInfo[playerid][pVeiculo];
				pcarro[playerid] = 1;
			}
			else if(vehid == PlayerInfo[playerid][pCarKey2])
			{
				carid = PlayerInfo[playerid][pCarKey2];
				Veiculo = PlayerInfo[playerid][pVeiculo2];
				pcarro[playerid] = 2;
			}
			else if(vehid == PlayerInfo[playerid][pCarKey3])
			{
				carid = PlayerInfo[playerid][pCarKey3];
				Veiculo = PlayerInfo[playerid][pVeiculo3];
				pcarro[playerid] = 3;
			}
			else if(vehid == PlayerInfo[playerid][pCarKey4])
			{
				carid = PlayerInfo[playerid][pCarKey4];
				Veiculo = PlayerInfo[playerid][pVeiculo4];
				pcarro[playerid] = 4;
			}
			else if(vehid == PlayerInfo[playerid][pCarKey5])
			{
				carid = PlayerInfo[playerid][pCarKey5];
				Veiculo = PlayerInfo[playerid][pVeiculo5];
				pcarro[playerid] = 5;
			}
           	if(IsPlayerInVehicle(playerid,carid) && CarInfo[Veiculo][cOwned] == 1)
			{
				CarInfo[Veiculo][cOwned] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(CarInfo[Veiculo][cOwner], "Ninguém", 0, strlen("Ninguém"), 999);
				GiveDinheiro(playerid,CarInfo[Veiculo][cValue]);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Veiculo VIP Vendido Por:~g~$%d", CarInfo[Veiculo][cValue]);
				GameTextForPlayer(playerid, string, 10000, 3);

				format(CarInfo[Veiculo][cDescription], 64, "Sem Dono");
				//format(string, sizeof string, "{50AAFE}Dono: %s\n{FFFF00}Descrição\n{FFFFFF}»%s«", CarInfo[Veiculo][cOwner], CarInfo[Veiculo][cDescription]);
				//Update3DTextLabelText(CarInfo[Veiculo][cText], 0xFFFFAA, string);

				RemovePlayerFromVehicleEx(playerid);
				Controle(playerid, 1);
				if(pcarro[playerid] == 1)
				{
					PlayerInfo[playerid][pCarKey] = 0;
					PlayerInfo[playerid][pVeiculo] = 0;
				}
				if(pcarro[playerid] == 2)
				{
					PlayerInfo[playerid][pCarKey2] = 0;
					PlayerInfo[playerid][pVeiculo2] = 0;
				}
 				if(pcarro[playerid] == 3)
				{
					PlayerInfo[playerid][pCarKey3] = 0;
					PlayerInfo[playerid][pVeiculo3] = 0;
				}
				if(pcarro[playerid] == 4)
				{
					PlayerInfo[playerid][pCarKey4] = 0;
					PlayerInfo[playerid][pVeiculo4] = 0;
				}
				if(pcarro[playerid] == 5)
				{
					PlayerInfo[playerid][pCarKey5] = 0;
					PlayerInfo[playerid][pVeiculo5] = 0;
				}
				SalvarCarro(Veiculo);
			}
 	 		return true;
	}

   	CMD:entradameucarro(playerid, params[])
	{
            new vehid = GetPlayerVehicleID(playerid);
	    	if(PlayerInfo[playerid][pCarKey] == 0 && PlayerInfo[playerid][pCarKey2] == 0&& PlayerInfo[playerid][pCarKey3] == 0&& PlayerInfo[playerid][pCarKey4] == 0&& PlayerInfo[playerid][pCarKey5] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não tem um Carro VIP.");
				return true;
			}
			if(!IsPlayerInAnyVehicle(playerid))
			{
				SendClientMessage(playerid,COLOR_GREY,"Você precisa estar no seu veiculo VIP!");
				return 1;
			}
			if(PlayerInfo[playerid][pCarKey] != vehid && PlayerInfo[playerid][pCarKey2] != vehid &&
			PlayerInfo[playerid][pCarKey3] != vehid &&
			PlayerInfo[playerid][pCarKey4] != vehid &&
			PlayerInfo[playerid][pCarKey5] != vehid)
			{
				SendClientMessage(playerid, COLOR_GREY, "Esse não é seu Carro VIP.");
				return true;
			}
			new value;
			if(sscanf(params, "d", value))
			{
				SendClientMessage(playerid, COLOR_YELLOW, "USE: /entradameucarro [valor] (1 - 2000)");
				return true;
			}
			new carid;
			new Veiculo;
			if(vehid == PlayerInfo[playerid][pCarKey])
			{
				carid = PlayerInfo[playerid][pCarKey];
				Veiculo = PlayerInfo[playerid][pVeiculo];
			}
			else if(vehid == PlayerInfo[playerid][pCarKey2])
			{
				carid = PlayerInfo[playerid][pCarKey2];
				Veiculo = PlayerInfo[playerid][pVeiculo2];
			}
			else if(vehid == PlayerInfo[playerid][pCarKey3])
			{
				carid = PlayerInfo[playerid][pCarKey3];
				Veiculo = PlayerInfo[playerid][pVeiculo3];
			}
			else if(vehid == PlayerInfo[playerid][pCarKey4])
			{
				carid = PlayerInfo[playerid][pCarKey4];
				Veiculo = PlayerInfo[playerid][pVeiculo4];
			}
			else if(vehid == PlayerInfo[playerid][pCarKey5])
			{
				carid = PlayerInfo[playerid][pCarKey5];
				Veiculo = PlayerInfo[playerid][pVeiculo5];
			}
			if(value < 1 || value > 2000)
			{
				SendClientMessage(playerid, COLOR_GREY, "   Preço de 1 a 2000");
				return true;
			}
           	if(IsPlayerInVehicle(playerid,carid) && CarInfo[Veiculo][cOwned] == 1)
			{
				CarInfo[Veiculo][cEntrada] = value;
                GameTextForPlayer(playerid, "entrada do carro mudado", 10000, 3);
                GiveDinheiro(playerid,-50);
				SBizzInfo[8][sbTill] += 50;
                ExtortionSBiz(8, 50);
                SalvarSEmpresa(8);
                Atualizar3Dtexts();
                SalvarCarro(Veiculo);
			}
 	 		return true;
	}


   	CMD:cormeucarro(playerid, params[])
	{
            new vehid = GetPlayerVehicleID(playerid);
	    	if(PlayerInfo[playerid][pCarKey] == 0 && PlayerInfo[playerid][pCarKey2] == 0&& PlayerInfo[playerid][pCarKey3] == 0&& PlayerInfo[playerid][pCarKey4] == 0&& PlayerInfo[playerid][pCarKey5] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não tem um Carro VIP.");
				return true;
			}
			if(!IsPlayerInAnyVehicle(playerid))
			{
				SendClientMessage(playerid,COLOR_GREY,"Você precisa estar no seu veiculo VIP!");
				return 1;
			}
			if(PlayerInfo[playerid][pCarKey] != vehid && PlayerInfo[playerid][pCarKey2] != vehid &&
			PlayerInfo[playerid][pCarKey3] != vehid &&
			PlayerInfo[playerid][pCarKey4] != vehid &&
			PlayerInfo[playerid][pCarKey5] != vehid)
			{
				SendClientMessage(playerid, COLOR_GREY, "Esse não é seu Carro VIP.");
				return true;
			}
			new cor1, cor2;
			if(sscanf(params, "dd", cor1, cor2))
			{
				SendClientMessage(playerid, COLOR_YELLOW, "USE: /cormeucarro [cor 1] [cor 2]");
				SendClientMessage(playerid, COLOR_YELLOW, "Cores = Entre 0 e 126!");
				return true;
			}
			new carid;
			new Veiculo;
			if(vehid == PlayerInfo[playerid][pCarKey])
			{
				carid = PlayerInfo[playerid][pCarKey];
				Veiculo = PlayerInfo[playerid][pVeiculo];
			}
			else if(vehid == PlayerInfo[playerid][pCarKey2])
			{
				carid = PlayerInfo[playerid][pCarKey2];
				Veiculo = PlayerInfo[playerid][pVeiculo2];
			}
			else if(vehid == PlayerInfo[playerid][pCarKey3])
			{
				carid = PlayerInfo[playerid][pCarKey3];
				Veiculo = PlayerInfo[playerid][pVeiculo3];
			}
			else if(vehid == PlayerInfo[playerid][pCarKey4])
			{
				carid = PlayerInfo[playerid][pCarKey4];
				Veiculo = PlayerInfo[playerid][pVeiculo4];
			}
			else if(vehid == PlayerInfo[playerid][pCarKey5])
			{
				carid = PlayerInfo[playerid][pCarKey5];
				Veiculo = PlayerInfo[playerid][pVeiculo5];
			}
			if(cor1 < 0 || cor1 > 126)
			{
				SendClientMessage(playerid, COLOR_GREY, "   Cores entre 0 e 126!");
				return true;
			}
			if(cor2 < 0 || cor2 > 126)
			{
				SendClientMessage(playerid, COLOR_GREY, "   Cores entre 0 e 126!");
				return true;
			}
           	if(IsPlayerInVehicle(playerid,carid) && CarInfo[Veiculo][cOwned] == 1)
			{
                CarInfo[Veiculo][cColorOne] = cor1;
				CarInfo[Veiculo][cColorTwo] = cor2;
                GameTextForPlayer(playerid, "Cor do seu Carro VIP Mudada! -R$50", 10000, 3);
                ChangeVehicleColor(carid,cor1,cor2);
                GiveDinheiro(playerid,-50);
				SBizzInfo[8][sbTill] += 50;
                ExtortionSBiz(8, 50);
                SalvarSEmpresa(8);
                Atualizar3Dtexts();
                SalvarCarro(Veiculo);
			}
 	 		return true;
	}

 // fim
 	CMD:estacionarmeucarro(playerid, params[])
	{
 		new vehid = GetPlayerVehicleID(playerid);
	    if(PlayerInfo[playerid][pCarKey] == 0 && PlayerInfo[playerid][pCarKey2] == 0&& PlayerInfo[playerid][pCarKey3] == 0&& PlayerInfo[playerid][pCarKey4] == 0&& PlayerInfo[playerid][pCarKey5] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "Você não tem um Carro VIP.");
			return true;
		}
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessage(playerid,COLOR_GREY,"Você precisa estar no seu veiculo VIP!");
			return 1;
		}
		if(IsPlayerInRC(playerid))
			return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode estacionar seu carro aqui!");

		if(PlayerInfo[playerid][pCarKey] != vehid && PlayerInfo[playerid][pCarKey2] != vehid &&
		PlayerInfo[playerid][pCarKey3] != vehid &&
		PlayerInfo[playerid][pCarKey4] != vehid &&
		PlayerInfo[playerid][pCarKey5] != vehid)
		{
			SendClientMessage(playerid, COLOR_GREY, "Esse não é seu Carro VIP.");
			return true;
		}
		if(IsPlayerInRC(playerid))return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode estacionar seu carro aqui!");
	   	new Float:x,Float:y,Float:z;
		new Float:a;
		new carid;
		new getcarid;
		new Veiculo;
   		if(vehid == PlayerInfo[playerid][pCarKey])
  		{
	  		carid = PlayerInfo[playerid][pCarKey];
		  	Veiculo = PlayerInfo[playerid][pVeiculo];
  		}
		else if(vehid == PlayerInfo[playerid][pCarKey2])
		{
			carid = PlayerInfo[playerid][pCarKey2];
			Veiculo = PlayerInfo[playerid][pVeiculo2];
		}
		else if(vehid == PlayerInfo[playerid][pCarKey3])
		{
			carid = PlayerInfo[playerid][pCarKey3];
			Veiculo = PlayerInfo[playerid][pVeiculo3];
		}
		else if(vehid == PlayerInfo[playerid][pCarKey4])
		{
			carid = PlayerInfo[playerid][pCarKey4];
			Veiculo = PlayerInfo[playerid][pVeiculo4];
		}
 		else if(vehid == PlayerInfo[playerid][pCarKey5])
		{
			carid = PlayerInfo[playerid][pCarKey5];
			Veiculo = PlayerInfo[playerid][pVeiculo5];
		}
		if(IsPlayerInVehicle(playerid,carid) && CarInfo[Veiculo][cOwned] == 1)
		{
  			getcarid = GetPlayerVehicleID(playerid);
			GetPlayerName(playerid, playername, sizeof(playername));
			GetVehiclePos(carid, x, y, z);
			GetVehicleZAngle(carid, a);
          	if(getcarid == carid)
			{
				CarInfo[Veiculo][cLocationx] = x;
				CarInfo[Veiculo][cLocationy] = y;
				CarInfo[Veiculo][cLocationz] = z;
				CarInfo[Veiculo][cAngle] = a;
				GameTextForPlayer(playerid, "Veiculo Estacionado!~n~Ele vai nascer aqui!", 10000, 3);
				DestroyVehicle(CarInfo[Veiculo][ownedvehicle]);
				CarInfo[Veiculo][ownedvehicle] = CreateVehicle(CarInfo[Veiculo][cModel],CarInfo[Veiculo][cLocationx],CarInfo[Veiculo][cLocationy],CarInfo[Veiculo][cLocationz]+1.0,CarInfo[Veiculo][cAngle],CarInfo[Veiculo][cColorOne],CarInfo[Veiculo][cColorTwo],60000);
				Controle(playerid, 1);
				SalvarCarro(Veiculo);
				SetVehicleToRespawn(CarInfo[Veiculo][ownedvehicle]);
				return 1;
  			}
		}
		return 1;
	}

 	CMD:trazercarrovip(playerid, params[])
	{
	    if(PlayerInfo[playerid][pAdmin] < 1340)
		{
			SendClientMessage(playerid, COLOR_GREY, "Você não pode usar este comando.");
			return true;
		}
		new Veiculo;

		if(sscanf(params, "d", Veiculo))
			return SendClientMessage(playerid, COLOR_GRAD1, "USE: /trazercarrovip [id]");

		if(Veiculo < 0 || Veiculo >= sizeof(CarInfo))
			return SendClientMessage(playerid, COLOR_GRAD1, "ID do carro VIP Invalido!");

		new Float:x,Float:y,Float:z;
		new Float:a;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);
		CarInfo[Veiculo][cLocationx] = x;
		CarInfo[Veiculo][cLocationy] = y;
		CarInfo[Veiculo][cLocationz] = z;
		CarInfo[Veiculo][cAngle] = a;
		GameTextForPlayer(playerid, "Veiculo Estacionado!~n~Ele vai nascer aqui!", 10000, 3);
		DestroyVehicle(CarInfo[Veiculo][ownedvehicle]);
		new carid2 = CreateVehicle(CarInfo[Veiculo][cModel],CarInfo[Veiculo][cLocationx],CarInfo[Veiculo][cLocationy],CarInfo[Veiculo][cLocationz]+1.0,CarInfo[Veiculo][cAngle],CarInfo[Veiculo][cColorOne],CarInfo[Veiculo][cColorTwo],60000);
		SalvarCarro(Veiculo);
		SetVehicleToRespawn(carid2);
		return true;
	}

 	CMD:ircarrovip(playerid, params[])
	{
	    if(PlayerInfo[playerid][pAdmin] < 1337)
		{
			SendClientMessage(playerid, COLOR_GREY, "Você não pode usar este comando.");
			return true;
		}
		if(!admtrampando[playerid])
			return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

		new Veiculo;

		if(sscanf(params, "d", Veiculo))
			return SendClientMessage(playerid, COLOR_GRAD1, "USE: /ircarrovip [id]");

		if(Veiculo < 0 || Veiculo >= sizeof(CarInfo))
			return SendClientMessage(playerid, COLOR_GRAD1, "ID do carro VIP Invalido!");

		GameTextForPlayer(playerid, " Você foi ate o carro vip", 10000, 3);
		SetPlayerPos(playerid, CarInfo[Veiculo][cLocationx],CarInfo[Veiculo][cLocationy],CarInfo[Veiculo][cLocationz]+1.0);
		return true;
	}


	CMD:comprarcarro(playerid, params[])
	{
    		if(!IsPlayerInAnyVehicle(playerid))
			{
				SendClientMessage(playerid,COLOR_GREY,"Você precisa estar no veiculo VIP!");
				return 1;
			}
  			new vehid = GetPlayerVehicleID(playerid);
     		if(PlayerInfo[playerid][pVIP] == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não é VIP e não pode comprar este carro !");
				return true;
			}
			//new string[128];
   			for(new i = 0; i < sizeof(CarInfo); i++)
      		{
				if(CarInfo[i][ownedvehicle] == vehid)
				{
     				if(PlayerInfo[playerid][pVIP] == 0)
					{
						SendClientMessage(playerid, COLOR_GREY, "Você não é VIP e não pode comprar este carro !");
						RemovePlayerFromVehicleEx(playerid);
						return true;
					}
                    if(PlayerInfo[playerid][pCarKey] != 0 && PlayerInfo[playerid][pVIP] == 1)
					{
						SendClientMessage(playerid, COLOR_GREY, "Seu VIP permite que você tenha apenas um carro !");
						RemovePlayerFromVehicleEx(playerid);
						return true;
					}

					if(PlayerInfo[playerid][pCarKey] != 0 &&
					PlayerInfo[playerid][pCarKey2] != 0 &&
					PlayerInfo[playerid][pCarKey3] != 0 &&
					PlayerInfo[playerid][pVIP] == 2)
					{
						SendClientMessage(playerid, COLOR_GREY, "Seu Sócio permite que você tenha no máximo 3 carros !");
						RemovePlayerFromVehicleEx(playerid);
						return true;
					}

					if(PlayerInfo[playerid][pCarKey] != 0 &&
					PlayerInfo[playerid][pCarKey2] != 0 &&
					PlayerInfo[playerid][pCarKey3] != 0 &&
					PlayerInfo[playerid][pCarKey4] != 0 &&
					PlayerInfo[playerid][pCarKey5] != 0 &&
					PlayerInfo[playerid][pVIP] == 5)
					{
						SendClientMessage(playerid, COLOR_GREY, "Seu Sócio permite que você tenha no máximo 5 carros !");
						RemovePlayerFromVehicleEx(playerid);
						return true;
					}
					if(PlayerInfo[playerid][pLevel] < 3)
					{
					    SendClientMessage(playerid, COLOR_GREY, "Você Precisa ter Nível 3 para comprar o veiculo");
					  	RemovePlayerFromVehicleEx(playerid);
					  	return true;
					}
					if(CarInfo[i][cOwned]==1)
					{
		   				SendClientMessage(playerid, COLOR_GREY, "Este carro VIP/Sócio já tem dono");
					    return true;
					}
					if(PlayerInfo[playerid][pCarKey] == 0)
					{
						if(PlayerInfo[playerid][pVIP] < 1)
     					{
         					SendClientMessage(playerid, COLOR_GREY, "Você não é um jogador VIP");
       		 				return true;
	        			}
						if(GetPlayerMoney(playerid) >= CarInfo[i][cValue])
						{
							PlayerInfo[playerid][pCarKey] = CarInfo[i][ownedvehicle];
							PlayerInfo[playerid][pVeiculo] = i;
							CarInfo[i][cOwned] = 1;
							CarOffered[playerid]=0;
							GetPlayerName(playerid, sendername, sizeof(sendername));
							strmid(CarInfo[i][cOwner], sendername, 0, strlen(sendername), 999);
							GiveDinheiro(playerid,-CarInfo[i][cValue]);
							GameTextForPlayer(playerid, "~w~Parabens~n~Voce comprou esse Carro PREMIUM!", 5000, 3);
							PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
							SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}A concessionária já encomendou outro veículo do mesmo modelo, em breve estará à venda!");
							SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Pague corretamente as despesas do carro, caso contrario ele será {FF0000}vendido{FFFFFF}!");
							SendClientMessage(playerid, COLOR_GRAD2, "USE: /ajuda para ver os comandos");

							format(CarInfo[i][cDescription], 64, "Concessionaria");
							//format(string, sizeof string, "{50AAFE}Dono: %s\n{FFFF00}Descrição\n{FFFFFF}»%s«", CarInfo[i][cOwner], CarInfo[i][cDescription]);
							//Update3DTextLabelText(CarInfo[i][cText], 0xFFFFAA, string);

                            CarInfo[i][cDate] = getdate()+10;//10 dias para liberar o carro

							SalvarCarro(i);
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Você não tem dinheiro para isso!");
							RemovePlayerFromVehicleEx(playerid);
						}
						return true;
					}
 					else if(PlayerInfo[playerid][pCarKey2] == 0)
					{
						if(GetPlayerMoney(playerid) >= CarInfo[i][cValue])
						{
							PlayerInfo[playerid][pCarKey2] = CarInfo[i][ownedvehicle];
							PlayerInfo[playerid][pVeiculo2] = i;
							CarInfo[i][cOwned] = 1;
							CarOffered[playerid]=0;
							GetPlayerName(playerid, sendername, sizeof(sendername));
							strmid(CarInfo[i][cOwner], sendername, 0, strlen(sendername), 999);
							GiveDinheiro(playerid,-CarInfo[i][cValue]);
							GameTextForPlayer(playerid, "~w~Parabens~n~Voce comprou esse Carro Premium!", 5000, 3);
							PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
							SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}A concessionária já encomendou outro veículo do mesmo modelo, em breve estará à venda!");
							SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Pague corretamente as despesas do carro, caso contrario ele será {FF0000}vendido{FFFFFF}!");
							SendClientMessage(playerid, COLOR_GRAD2, "USE: /ajuda para ver os comandos");
							Controle(playerid, 1);
							format(CarInfo[i][cDescription], 64, "Concessionaria");
							//format(string, sizeof string, "{50AAFE}Dono: %s\n{FFFF00}Descrição\n{FFFFFF}»%s«", CarInfo[i][cOwner], CarInfo[i][cDescription]);
							//Update3DTextLabelText(CarInfo[i][cText], 0xFFFFAA, string);
                            CarInfo[i][cDate] = getdate()+10;//10 dias para liberar o carro
							SalvarCarro(i);
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Você não tem dinheiro para isso!");
							RemovePlayerFromVehicleEx(playerid);
						}
						return true;
					}
 					else if(PlayerInfo[playerid][pCarKey3] == 0)
					{
						if(GetPlayerMoney(playerid) >= CarInfo[i][cValue])
						{
							PlayerInfo[playerid][pCarKey3] = CarInfo[i][ownedvehicle];
							PlayerInfo[playerid][pVeiculo3] = i;
							CarInfo[i][cOwned] = 1;
							CarOffered[playerid]=0;
							GetPlayerName(playerid, sendername, sizeof(sendername));
							strmid(CarInfo[i][cOwner], sendername, 0, strlen(sendername), 999);
							GiveDinheiro(playerid,-CarInfo[i][cValue]);
							GameTextForPlayer(playerid, "~w~Parabens~n~Voce comprou esse Carro Premium!", 5000, 3);
							PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
							SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}A concessionária já encomendou outro veículo do mesmo modelo, em breve estará à venda!");
							SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Pague corretamente as despesas do carro, caso contrario ele será {FF0000}vendido{FFFFFF}!");
							SendClientMessage(playerid, COLOR_GRAD2, "USE: /ajuda para ver os comandos");
							Controle(playerid, 1);
							format(CarInfo[i][cDescription], 64, "Concessionaria");
							//format(string, sizeof string, "{50AAFE}Dono: %s\n{FFFF00}Descrição\n{FFFFFF}»%s«", CarInfo[i][cOwner], CarInfo[i][cDescription]);
							//Update3DTextLabelText(CarInfo[i][cText], 0xFFFFAA, string);
                            CarInfo[i][cDate] = getdate()+10;//10 dias para liberar o carro
							SalvarCarro(i);
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Você não tem dinheiro para isso!");
							RemovePlayerFromVehicleEx(playerid);
						}
						return true;
					}
 					else if(PlayerInfo[playerid][pCarKey4] == 0)
					{
						if(GetPlayerMoney(playerid) >= CarInfo[i][cValue])
						{
							PlayerInfo[playerid][pCarKey4] = CarInfo[i][ownedvehicle];
							PlayerInfo[playerid][pVeiculo4] = i;
							CarInfo[i][cOwned] = 1;
							CarOffered[playerid]=0;
							GetPlayerName(playerid, sendername, sizeof(sendername));
							strmid(CarInfo[i][cOwner], sendername, 0, strlen(sendername), 999);
							GiveDinheiro(playerid,-CarInfo[i][cValue]);
							GameTextForPlayer(playerid, "~w~Parabens~n~Voce comprou esse Carro Premium!", 5000, 3);
							PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
							SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}A concessionária já encomendou outro veículo do mesmo modelo, em breve estará à venda!");
							SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Pague corretamente as despesas do carro, caso contrario ele será {FF0000}vendido{FFFFFF}!");
							SendClientMessage(playerid, COLOR_GRAD2, "USE: /ajuda para ver os comandos");
							Controle(playerid, 1);
							format(CarInfo[i][cDescription], 64, "Concessionaria");
							//format(string, sizeof string, "{50AAFE}Dono: %s\n{FFFF00}Descrição\n{FFFFFF}»%s«", CarInfo[i][cOwner], CarInfo[i][cDescription]);
							//Update3DTextLabelText(CarInfo[i][cText], 0xFFFFAA, string);
                            CarInfo[i][cDate] = getdate()+10;//10 dias para liberar o carro
							SalvarCarro(i);
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Você não tem dinheiro para isso!");
							RemovePlayerFromVehicleEx(playerid);
						}
						return true;
					}
  					else if(PlayerInfo[playerid][pCarKey5] == 0)
					{
						if(GetPlayerMoney(playerid) >= CarInfo[i][cValue])
						{
							PlayerInfo[playerid][pCarKey5] = CarInfo[i][ownedvehicle];
							PlayerInfo[playerid][pVeiculo5] = i;
							CarInfo[i][cOwned] = 1;
							CarOffered[playerid]=0;
							GetPlayerName(playerid, sendername, sizeof(sendername));
							strmid(CarInfo[i][cOwner], sendername, 0, strlen(sendername), 999);
							GiveDinheiro(playerid,-CarInfo[i][cValue]);
							GameTextForPlayer(playerid, "~w~Parabens~n~Voce comprou esse Carro Premium!", 5000, 3);
							PlayerPlaySound(playerid, 1147, 0.0, 0.0, 0.0);
							SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}A concessionária já encomendou outro veículo do mesmo modelo, em breve estará à venda!");
							SendClientMessage(playerid, COLOR_GRAD2, "{FFFFFF}Pague corretamente as despesas do carro, caso contrario ele será {FF0000}vendido{FFFFFF}!");
							SendClientMessage(playerid, COLOR_GRAD2, "USE: /ajuda para ver os comandos");
							Controle(playerid, 1);
							format(CarInfo[i][cDescription], 64, "Concessionaria");
							//format(string, sizeof string, "{50AAFE}Dono: %s\n{FFFF00}Descrição\n{FFFFFF}»%s«", CarInfo[i][cOwner], CarInfo[i][cDescription]);
							//Update3DTextLabelText(CarInfo[i][cText], 0xFFFFAA, string);
                            CarInfo[i][cDate] = getdate()+10;//10 dias para liberar o carro
							SalvarCarro(i);
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "Você não tem dinheiro para isso!");
							RemovePlayerFromVehicleEx(playerid);
						}
						return true;
					}
				}
			}
			return true;
	}
	CMD:ptd(playerid)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 15.0,191.7220, -1351.2840, 59.7982) || GetPlayerOrg(playerid) != 12)return true;
		{ //GATEGaragem
			MoveDynamicObject(PHOUSE2, 191.7220, -1351.2840, 51.6982,3,0.0000,0.0000,311.0000);
			SetTimer(#MovePHOUSE2, 5000, 0);
			SendClientMessage(playerid, 0x243defFF, #Portao aberto fechará em 5 segundos);
			ObjectMovePlayer[playerid] = PHOUSE2;
			if(IsDynamicObjectMoving(PHOUSE2)) PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
		}
	  	return 1;
	}
	BPF::MovePHOUSE2()
	{
	    foreach(Player, playerid)
		{
		    if(ObjectMovePlayer[playerid] == 0)
		    {
				PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
			}
		}
	    MoveDynamicObject(PHOUSE2,191.7220,-1351.2840,59.7982,3,0.0000, 0.0000, 311.0000);
	    return true;
	}
//--------------- portao Yakuza 1 ------------------
	CMD:pYakuza1(playerid)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 15.0,664.8619,-1307.4937,22.3109) || GetPlayerOrg(playerid) != 13)return true;
	    MoveDynamicObject(pYak1, 664.8619,-1307.4937,22.3109,3,0.0000,0.0000,0.0000);
	    SetTimer(#MovepYak1, 5000, 0);
	    SendClientMessage(playerid, 0x243defFF, #Portao aberto fechará em 5 segundos);
	    ObjectMovePlayer[playerid] = pYak1;
		if(IsDynamicObjectMoving(pYak1)) PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
	    return true;
	}
	BPF::MovepYak1()
	{
		foreach(Player, playerid)
		{
		    if(ObjectMovePlayer[playerid] == 0)
		    {
				PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
			}
		}
	    MoveDynamicObject(pYak1,664.8619, -1307.4937, 15.3109,3,0.0000, 0.0000, 0.0000);
	    return true;
	}
//------------------- portao Yakuza 2 --------------------
	CMD:pYakuza2(playerid)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 15.0,660.7543,-1227.8146,24.4440)|| GetPlayerOrg(playerid) != 13)return true;
	    MoveDynamicObject(pYak2, 660.7543,-1227.8146,24.4440,3,0.0000,0.0000,-118.2998);
	    SetTimer(#MovepYak2, 5000, 0);
	    SendClientMessage(playerid, 0x243defFF, #Portao aberto fechará em 5 segundos);
	    ObjectMovePlayer[playerid] = pYak2;
		if(IsDynamicObjectMoving(pYak1)) PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
	    return true;
	}
	BPF::MovepYak2()
	{
	    foreach(Player, playerid)
		{
		    if(ObjectMovePlayer[playerid] == 0)
		    {
				PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
			}
		}
	    MoveDynamicObject(pYak2,660.7543, -1227.8146, 17.4440,3,0.0000, 0.0000, -118.2998);
	    return true;
	}
//----------------- portao Yakuza 3 ---------------------
	CMD:pYakuza3(playerid)
	{
	    if(!IsPlayerInRangeOfPoint(playerid, 15.0,783.9084,-1152.4266,32.4053)|| GetPlayerOrg(playerid) != 13)return true;
	    MoveDynamicObject(pYak3, 783.9084,-1152.4266,32.4053,3,0.0000,0.0000,-90.2999);
	    SetTimer(#MovepYak3, 5000, 0);
	    SendClientMessage(playerid, 0x243defFF, #Portao aberto fechará em 5 segundos);
	    ObjectMovePlayer[playerid] = pYak3;
		if(IsDynamicObjectMoving(pYak1)) PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
	    return true;
	}
	BPF::MovepYak3()
	{
	    foreach(Player, playerid)
		{
		    if(ObjectMovePlayer[playerid] == 0)
		    {
				PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
			}
		}
	    MoveDynamicObject(pYak3,783.9084, -1152.4266, 25.4053,3,0.0000, 0.0000, -90.2999);
	    return true;
	}
//------------------[pedagios barras fechar]----------------------
	BPF::mbarp01()
	{
	    MoveDynamicObject(barp01,46.81650, -1525.97400, 4.85410,1,0.00000, 90.00000, 82.00000);
	    return true;
	}
	BPF::mbarp02()
	{
	    MoveDynamicObject(barp02,53.33270, -1537.40442, 4.87410,1,0.00000, 90.00000, 262.00000);
	    return true;
	}
	BPF::mbarp05()
	{
	    MoveDynamicObject(barp05,768.73651, -912.60010, 43.12160,1,0.00000, 91.00000, 60.00000);
	    return true;
	}
	BPF::mbarp06()
	{
	    MoveDynamicObject(barp06,769.08740, -896.87817, 42.82160,1,0.00000, 90.00000, 240.50000);
	    return true;
	}
	BPF::mbarp03()
	{
	    MoveDynamicObject(barp03,78.41940, -1257.75256, 14.06590,1,0.00000, 90.00000, 305.00000);
	    return true;
	}
	BPF::mbarp04()
	{
	    MoveDynamicObject(barp04,99.78246, -1274.84094, 14.06590,1,0.00000, 90.00000, 305.00000);
	    return true;
	}
	BPF::mbarp07()
	{
	    MoveDynamicObject(barp07,1188.22852, -682.40656, 61.64760,1,0.00000, 90.00000, 155.00000);
	    return true;
	}
	BPF::mbarp08()
	{
	    MoveDynamicObject(barp08,1172.00244, -684.12329, 61.82760,1,0.00000, 90.00000, 335.00000);
	    return true;
	}
	BPF::mbarp09()
	{
	    MoveDynamicObject(barp09,1639.75220, -31.47680, 36.32630,1,0.00000, 90.00000, 205.00000);
	    return true;
	}
	BPF::mbarp10()
	{
	    MoveDynamicObject(barp10,1646.75671, -20.79756, 36.32630,1,0.00000, 90.00000, 25.00000);
	    return true;
	}
static stock GetOrgName(orgid)
{
	new name[36];
	switch(orgid)
	{
	    case 1:name = "Policia Militar";
	    case 2:name = "BOPE";
	    case 3:name = "Exercito";
	    case 4:name = "Medicos";
	    case 5:name = "Los Aztecas";
	    case 7:name = "Governo";
	    case 8:name = "Hitmans";
	    case 9:name = "Reporteres";
	    case 11:name = "Policia Federal";
	    case 12:name = "Mafia Russa";
	    case 13:name = "Mafia Yakuza";
	    case 14:name = "Groove Street";
	    case 15:name = "Estado Islâmico";
	    case 16:name = "ROTA";
	    case 17:name = "Ballas";
	    case 18:name = "Los Vagos";
	    case 19:name = "Comando Vermelho";
	    case 20:name = "Bombeiros";
	    case 21:name = "PCC";
	    case 22:name = "The Triad";
	    case 23:name = "As FARC";
	    case 24:name = "Mayans";
	    case 25:name = "Sons Of Anarchy";
	    case 26:name = "Milícia";
	    case 27:name = "Destroyers";
	    case 28:name = "Hells Angels";
	    case 33:name = "Policia Civil";
	    case 34:name = "DETRAN";
	    case 99:name = "HQ Helper";
	    case 100:name = "HQ ADM";
	    default:name = "Civil";
	}
	return name;
}

static stock GetOrgNameG(orgid)
{
	new name[36];
	switch(orgid)
	{
	    case 1:name = "Policia Militar";
	    case 2:name = "BOPE";
	    case 3:name = "~g~Exercito";
	    case 4:name = "Medicos";
	    case 5:name = "Los Aztecas";
	    case 7:name = "Governo";
	    case 8:name = "Hitmans";
	    case 9:name = "Reporteres";
	    case 11:name = "Policia Federal";
	    case 12:name = "Mafia Russa";
	    case 13:name = "Mafia Yakuza";
	    case 14:name = "Groove Street";
	    case 15:name = "Estado Islâmico";
	    case 16:name = "ROTA";
	    case 17:name = "Ballas";
	    case 18:name = "Los Vagos";
	    case 19:name = "Comando Vermelho";
	    case 20:name = "Corpo de Bombeiros";
	    case 21:name = "PCC";
	    case 22:name = "The Triads";
	    case 23:name = "As FARC";
	    case 24:name = "Mayans";
	    case 25:name = "Sons Of Anarchy";
	    case 26:name = "Milícia";
	    case 33:name = "Policia Civil";
	    case 34:name = "Detran";
	    default:name = "Civil";
	}
	return name;
}
static stock GetOrgNameGM(orgid)
{
	new name[35];
	switch(orgid)
	{
	    case 1,2,33,35:name = "Policiais";
	    case 5:name = "Los Aztecas";
	    case 14:name = "Groove Street";
	    case 17:name = "Ballas";
	    case 18:name = "Los Vagos";
	    case 19:name = "Comando Vermelho";
	    case 21:name = "PCC";
	    default:name = "Desconhecido";
	}
	return name;
}

static stock GetPlayerGZColor(playerid)
{
	new orgid = GetPlayerOrg(playerid);
	new color;
	switch(orgid)
	{
	    case 1,2,11,16,3,33,34,35:color 	= 0x3e3d3d96;
	    case 5:color 	= TEAM_AZTECAS_COLOR;
	    case 12:color 	= 0xD48A30AA;
	    case 13:color 	= 0x00483AAA;
	    case 14:color 	= TEAM_GROVE_COLOR;
	    case 17:color 	= TEAM_BALLAS_COLOR;
	    case 18:color 	= TEAM_VAGOS_COLOR;
	    case 19:color 	= 0xFF3636AA;
	    case 21:color 	= 0xaae237AA;
	    case 28:color 	= 0x841B2DAA;
	    case 24:color 	= 0x33FFFFAA;
	    default:color   = -1;
	}
	return color;
}

	CMD:guerra(playerid, params[])
	{
		if(PlayerInfo[playerid][pJailed] != 0)
    	{
			SendClientMessage(playerid,COLOR_GRAD1,"Você não pode criar guerra na cadeia!");
			return true;
    	}
  	    if(TendoGuerra >= 1)
        {
            SendClientMessage(playerid, COLOR_GRAD1, "   Já está tendo uma guerra!");
            return true;
        }
        if(GetPlayerInterior(playerid) != 0)
        {
            SendClientMessage(playerid,COLOR_GRAD1,"Você não pode criar guerra em um interior!");
            return true;
        }
  	    if(teveguerra)
        {
            SendClientMessage(playerid, COLOR_GRAD1, "   Já teve uma guerra neste payday!");
            return true;
        }
        if(IsPlayerInRC(playerid))return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode criar guerra em área neutra!");
        new mins;
        if(sscanf(params, "d", mins))
        {
            return SendClientMessage(playerid, COLOR_GRAD1, "USE: /guerra [minutos]");
        }
        if(mins < 20 || mins > 120)
        {
            return SendClientMessage(playerid, COLOR_GRAD1, "Minutos de 20 - 120");
        }
		if(GetPlayerOrg(playerid) == 3 || GetPlayerOrg(playerid) == 15 || GetPlayerOrg(playerid) == 23)
	  	{
	    	new string[128];
			new Float:x,Float:y,Float:z;
 			GetPlayerPos(playerid,x,y,z);
			new location[MAX_ZONE_NAME];
			GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);

		    SendClientMessageToAll(GetPlayerColor(playerid), "~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*");
	        format(string, sizeof(string), "%s e os %s iniciaram uma Guerra, ela irá durar %d minutos.",NomePlayer(playerid), GetOrgName(GetPlayerOrg(playerid)), mins);
	        SendClientMessageToAll(GetPlayerColor(playerid), string);
	        format(string, sizeof(string), "Evitem a área proxima a: %s", location);
	        SendClientMessageToAll(GetPlayerColor(playerid), string);
			SendClientMessageToAll(GetPlayerColor(playerid), "~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*");
			foreach(Player, i)
			{
				EmGuerra[i] = 0;
			}
	    	Territorio[MinX] = x-200;
			Territorio[MinY] = y-200;
			Territorio[MaxX] = x+200;
			Territorio[MaxY] = y+200;
            GuerraMinX = x-200;
			GuerraMinY = y-200;
			GuerraMaxX = x+200;
			GuerraMaxY = y+200;
	    	GZGuerra = GangZoneCreate(x-200,y-200,x+200,y+200);
	    	if(GetPlayerOrg(playerid) == 3)
	    	{
				GangZoneShowForAll(GZGuerra,0x00660CC8);
				CorGuerra = 0x00660CC8;
			}
	    	else if(GetPlayerOrg(playerid) == 15)
	    	{
				GangZoneShowForAll(GZGuerra,0x10100FAA);
				CorGuerra = 0x10100FAA;
			}
	    	else if(GetPlayerOrg(playerid) == 23)
	    	{
				GangZoneShowForAll(GZGuerra,0x00ECF6AA);
				CorGuerra = 0x00ECF6AA;
			}

            PSG[3] = 0;
            PSG[15] = 0;
            PSG[23] = 0;
            GranaGuerra = 0;
            TempoGuerra = 60 * mins;
    		TimerGuerra = SetTimer("GuerraTerrorista", 1000, 1);
	    	BPFInfo[playerid][InicioGuerra] = 1;
	    	format(GuerraName, sizeof GuerraName, location);
	    	TendoGuerra = 1;
	    	teveguerra = true;

			return true;
		}
		else SendClientMessage(playerid,COLOR_GRAD1,"Você não pode criar uma guerra.");
		return true;
	}


	CMD:minhaidade(playerid, params[])
	{
	   	    new string[128];
	        new amount;
			if(sscanf(params, "d", amount))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: /minhaidade [idade]");
				return 1;
			}
		   	if(amount > 90 || amount < 8)
   			{
  				SendClientMessage(playerid, COLOR_LIGHTRED, "A Sua idade não pode ser menor a 8 nem maior a 90!");
	  			return 1;
	  		}
			PlayerInfo[playerid][pAge] = amount;
			format(string, sizeof(string), "Você editou a sua idade para: %d anos!", amount);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			return 1;
	}


	CMD:vamoceu(playerid, params[])
	{

			if (PlayerInfo[playerid][pAdmin] >= 5)
			{
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				if (IsPlayerConnected(playerid))
				{
					SetPlayerPos(playerid,slx, sly, slz+2500);
					SendClientMessage(playerid, COLOR_LIGHTRED, "UUUUP!!!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não esta autorizado a usar este comando!");
			}
			return 1;
	}

 CMD:testetempo(playerid, params[])
	{
	        if(PlayerInfo[playerid][pAdmin] < 2)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Você não esta autorizado a usar este comando!");
			    return 1;
			}
			new weather;
			if(sscanf(params, "d", weather))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "USE: /tempo [tempoid]");
			    return 1;
			}
			if(weather < 0||weather > 45) { SendClientMessage(playerid, COLOR_GREY, "   Tempo id de 0 ~ 45 !"); return 1; }
			SetPlayerWeather(playerid, weather);
			SendClientMessage(playerid, COLOR_GREY, "   Tempo setado!");
			return 1;
	}
	CMD:desligarcel(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
 		if(PlayerInfo[playerid][pVIP] < 1 && PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pAdminTemp] < 1)
	    {
      		SendClientMessage(playerid, COLOR_GRAD2, "Você não é	jogador VIP ou ADM");
		    return 1;
		}
		if (!PhoneOnline[playerid])
		{
			PhoneOnline[playerid] = 1;
			SendClientMessage(playerid, COLOR_GRAD2, "Você desligou seu celular");
			CellTime[playerid] = 0;
			Mobile[playerid] = 255;
			new pSpecialAction = GetPlayerSpecialAction(playerid);
			if (pSpecialAction == SPECIAL_ACTION_USECELLPHONE)
			{
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
				RemovePlayerAttachedObjectEx(playerid, Vaga_Celular);
			}
		}
		else if (PhoneOnline[playerid])
		{
			PhoneOnline[playerid] = 0;
			SendClientMessage(playerid, COLOR_GRAD2, "Você ligou seu celular");
		}
		return true;
	}

	CMD:desligarchat(playerid, params[])
	{
 		if(PlayerInfo[playerid][pVIP] < 1)
	    {
      		SendClientMessage(playerid, COLOR_GRAD2, "Você não é	jogador VIP");
		    return 1;
		}
		if (!cVIPc[playerid])
		{
			cVIPc[playerid] = 1;
			SendClientMessage(playerid, COLOR_GRAD2, "   Chat VIP Desativado!");
		}
		else if(cVIPc[playerid])
		{
			cVIPc[playerid] = 0;
			SendClientMessage(playerid, COLOR_GRAD2, "   Chat VIP Ligado");
		}
		return true;
	}

	CMD:desligarah(playerid, params[])
	{
		if(PlayerInfo[playerid][pAdmin] == 0 && PlayerInfo[playerid][pHelper] == 0)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Você não é um Admin!");
			return 1;
		}
		if (!cAdminHelperc[playerid])
		{
			cAdminHelperc[playerid] = 1;
			SendClientMessage(playerid, COLOR_GRAD2, "   Chat Admin + Helper Desativado!");
		}
		else if(cAdminHelperc[playerid])
		{
			cAdminHelperc[playerid] = 0;
			SendClientMessage(playerid, COLOR_GRAD2, "   Chat Admin + Helper Ligado");
		}
		return true;
	}

	CMD:desligarh(playerid, params[])
	{
		if(PlayerInfo[playerid][pHelper] < 1)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Você não éum Helper!");
			return 1;
		}
		if (!cHelperc[playerid])
		{
			cHelperc[playerid] = 1;
			SendClientMessage(playerid, COLOR_GRAD2, "   Chat Helper Desativado!");
		}
		else if(cHelperc[playerid])
		{
			cHelperc[playerid] = 0;
			SendClientMessage(playerid, COLOR_GRAD2, "   Chat Helper Ligado");
		}
		return true;
	}

	CMD:setarmat(playerid, params[])
	{
		if(PlayerInfo[playerid][pAdmin] >= 1340)
	 	{
			CofreOrg[5][Materiais] = CofreOrg[5][Materiais]+=100000; //
			CofreOrg[6][Materiais] = CofreOrg[6][Materiais]+=100000; //
			CofreOrg[8][Materiais] = CofreOrg[8][Materiais]+=100000; //
			CofreOrg[14][Materiais] = CofreOrg[14][Materiais]+=100000; //
			CofreOrg[12][Materiais] = CofreOrg[12][Materiais]+=100000; //
			CofreOrg[13][Materiais] = CofreOrg[13][Materiais]+=100000; //
			CofreOrg[15][Materiais] = CofreOrg[15][Materiais]+=100000; //
			CofreOrg[17][Materiais] = CofreOrg[17][Materiais]+=100000; //
			CofreOrg[18][Materiais] = CofreOrg[18][Materiais]+=100000; //
			CofreOrg[19][Materiais] = CofreOrg[19][Materiais]+=100000; //
			CofreOrg[20][Materiais] = CofreOrg[20][Materiais]+=100000; //
			CofreOrg[21][Materiais] = CofreOrg[21][Materiais]+=100000; //
			CofreOrg[22][Materiais] = CofreOrg[22][Materiais]+=100000; //
			CofreOrg[23][Materiais] = CofreOrg[23][Materiais]+=100000; //
			CofreOrg[24][Materiais] = CofreOrg[24][Materiais]+=100000; //
			CofreOrg[25][Materiais] = CofreOrg[25][Materiais]+=100000; //
			CofreOrg[26][Materiais] = CofreOrg[26][Materiais]+=100000; //
			CofreOrg[28][Materiais] = CofreOrg[28][Materiais]+=100000; //
			CofreOrg[29][Materiais] = CofreOrg[29][Materiais]+=100000; //
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"	Você setou 100000 de materiais para todas as gangs");
		}
		return true;
	}

 	CMD:setardrogas(playerid, params[])
	{
		if(PlayerInfo[playerid][pAdmin] >= 1340)
	 	{
			CofreOrg[5][Maconha] = CofreOrg[5][Maconha]+100000; //
			CofreOrg[6][Maconha] = CofreOrg[6][Maconha]+100000; //
			CofreOrg[8][Maconha] = CofreOrg[8][Maconha]+100000; //
			CofreOrg[14][Maconha] = CofreOrg[14][Maconha]+100000; //
			CofreOrg[12][Maconha] = CofreOrg[12][Maconha]+100000; //
			CofreOrg[13][Maconha] = CofreOrg[13][Maconha]+100000; //
			CofreOrg[15][Maconha] = CofreOrg[15][Maconha]+100000; //
			CofreOrg[17][Maconha] = CofreOrg[17][Maconha]+100000; //
			CofreOrg[18][Maconha] = CofreOrg[18][Maconha]+100000; //
			CofreOrg[19][Maconha] = CofreOrg[19][Maconha]+100000; //
			CofreOrg[20][Maconha] = CofreOrg[20][Maconha]+100000; //
			CofreOrg[21][Maconha] = CofreOrg[21][Maconha]+100000; //
			CofreOrg[22][Maconha] = CofreOrg[22][Maconha]+100000; //
			CofreOrg[23][Maconha] = CofreOrg[23][Maconha]+100000; //
			CofreOrg[24][Maconha] = CofreOrg[24][Maconha]+100000; //
			CofreOrg[25][Maconha] = CofreOrg[25][Maconha]+100000; //
			CofreOrg[26][Maconha] = CofreOrg[26][Maconha]+100000; //
			CofreOrg[28][Maconha] = CofreOrg[28][Maconha]+100000;
			CofreOrg[29][Maconha] = CofreOrg[29][Maconha]+100000; //
			SendClientMessage(playerid, COLOR_WHITE,"	Você setou 100000 de drogas para todas as gangs.");
			return true;
		}
		return true;
	}

	CMD:gravidadenormal(playerid, params[])
	{
	        if(PlayerInfo[playerid][pAdmin] < 4)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Você não é um administrador !");
	            return 1;
	        }
			SetGravity(Float:0.008);
			SendClientMessageToAll( COLOR_LIGHTBLUE, "Graviade mudada para: normal.");
			return 1;
	}

	CMD:gravidadepesada(playerid, params[])
	{
	        if(PlayerInfo[playerid][pAdmin] < 4)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Você não é um administrador !");
	            return 1;
	        }
			SetGravity(Float:0.018);
			SendClientMessageToAll( COLOR_LIGHTBLUE, "Graviade mudada para: pesada.");
			return 1;
	}
	CMD:gravidadeleve(playerid, params[])
	{
	        if(PlayerInfo[playerid][pAdmin] < 4)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Você não é um administrador !");
	            return 1;
	        }
			SetGravity(Float:0.004);
			SendClientMessageToAll( COLOR_LIGHTBLUE, "Graviade mudada para: leve.");
			return 1;
	}

	CMD:kick(playerid, params[])
	{
	if (!gPlayerLogged[playerid])
				return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado.");
	        new result[100];
			if(sscanf(params, "us[100]", giveplayerid, result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /kick [ID do Player] [motivo]");
				return true;
			}
    	    new string[128];
			if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				    if(PlayerInfo[giveplayerid][pAdmin] >= 5000)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode KICK este admin!");
							return true;
						}
						if(strcmp(result,"rt",true) == 0) { result = "Relógio Parado."; }
            			if(strcmp(result,"an", true) == 0) { result = "Anúncio Indevido."; }
            			if(strcmp(result,"dv", true) == 0) { result = "Divulguer."; }

         				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "[KICK]: %s foi kickado por %s Motivo: %s", giveplayer, sendername, (result));
						BPFLogs("kick", string);
						format(string, sizeof(string), "[KICK]: %s foi kickado por %s Motivo: %s", giveplayer, sendername, (result));
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						TextDrawShowForPlayer(giveplayerid, TextKick);
						TextDrawShowForPlayer(giveplayerid, TextKick1);
						Kick(giveplayerid);
						PlayerPlaySound(giveplayerid, 31202, 0.0, 0.0, 0.0);
						return true;
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "	Você não pode usar este comando!");
			}
			return true;
	}
	CMD:infobanconta(playerid, params[]){

		if (PlayerInfo[playerid][pAdmin] < 2)
		    return SendClientMessage(playerid, COLOR_GRAD2, "Você não pode usar este comando!");

		if(sscanf(params, "s[24]", params))
            return SendClientMessage(playerid, COLOR_GRAD2, "USE: /infobanconta [Nick_Correto]");

		showNickBan(playerid, params);
	    return 1;
	}
	CMD:infovip(playerid, params[]){

		if (PlayerInfo[playerid][pAdmin] < 1337)
		    return SendClientMessage(playerid, COLOR_GRAD2, "Você não pode usar este comando!");

		if(sscanf(params, "s[24]", params))
            return SendClientMessage(playerid, COLOR_GRAD2, "USE: /infovip [Nick_Correto]");

		showVIPoff(playerid, params);
	    return 1;
	}
	CMD:meuvip(playerid){

		showVIPplayer(playerid);
	    return 1;
	}

	CMD:verul(playerid, params[]){

		if (PlayerInfo[playerid][pAdmin] < 5)
		    return SendClientMessage(playerid, COLOR_GRAD2, "Você não pode usar este comando!");

		if(sscanf(params, "s[24]", params))
            return SendClientMessage(playerid, COLOR_GRAD2, "USE: /verul [Nick_Correto]");

		showUL(playerid, params);
	    return 1;
	}
	CMD:pegaratividade(playerid, params[]){

		if (PlayerInfo[playerid][pAdmin] < 1337)
		    return SendClientMessage(playerid, COLOR_GRAD2, "Você não pode usar este comando!");

		if(sscanf(params, "s[24]", params))
            return SendClientMessage(playerid, COLOR_GRAD2, "USE: /pegaratividade [Nick_Correto]");

		showLogDays(playerid, params);
	    return 1;
	}
	CMD:infobanip(playerid, params[]){

		if (PlayerInfo[playerid][pAdmin] < 2)
		    return SendClientMessage(playerid, COLOR_GRAD2, "Você não pode usar este comando!");

		if(sscanf(params, "s[24]", params))
            return SendClientMessage(playerid, COLOR_GRAD2, "USE: /infobanip [IP]");

		showIPBan(playerid, params);
	    return 1;
	}
	CMD:skick(playerid, params[])
	{
			if(sscanf(params, "u", giveplayerid))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /skick [ID Do Jogador]");
				return true;
			}
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
       			if(!admtrampando[playerid])
					return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        new string[128];
						Kick(giveplayerid);
						TextDrawShowForPlayer(giveplayerid, TextKick);
						TextDrawShowForPlayer(giveplayerid, TextKick1);
						format(string, sizeof(string), "Você kickou %s(ID: %d)",PlayerName(giveplayerid), giveplayerid);
				        SendClientMessage(playerid, COLOR_GRAD1, string);
                        PlayerPlaySound(giveplayerid, 31202, 0.0, 0.0, 0.0);
                        printf("SKICK: Admin %s kickou %s.", NomePlayer(playerid), NomePlayer(giveplayerid));
						return true;
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "	Você não pode usar este comando!");
			}
			return true;
	}
//----------------------------------[descongelar]------------------------------------------------
	CMD:ban(playerid, params[])
	{
	if (!gPlayerLogged[playerid])
				return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado.");
	    	new result[64];
			if(sscanf(params, "us[64]", giveplayerid, result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /ban [ID do Player] [motivo]");
				return true;
			}
    	    new string[128];
			if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
                    {
			        	if(PlayerInfo[giveplayerid][pAdmin] >= 5000)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode banir este admin!");
							return true;
						}
						if(BaniuPlayer[playerid] >= 1)
                        {
                            SBan(playerid, "Tentativa de Ban-ALL", "Automático");
                            return 1;
                        }
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "[BAN]: %s foi banido por %s Motivo: %s", giveplayer, sendername, (result));
						BPFLogs("ban", string);
						format(string, sizeof(string), "[BAN]: %s foi banido por %s Motivo: %s", giveplayer, sendername, (result));
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						PlayerInfo[giveplayerid][pBan] = 1;
						TextDrawShowForPlayer(giveplayerid, TextBan);
						TextDrawShowForPlayer(giveplayerid, TextBan1);
						SBan(giveplayerid, result, PlayerName(playerid));
						PlayerPlaySound(giveplayerid, 31202, 0.0, 0.0, 0.0);
                        if(gPlayerLogged[giveplayerid] == 0){Ban(giveplayerid);}else {SBan(giveplayerid, result, sendername);}
                        BaniuPlayer[playerid] ++;
                        SetTimerEx("PlayerBanALL", 7000,false,"i",playerid);
						return true;
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "	Você não pode usar este comando!");
			}
			return true;
    }

	CMD:sban(playerid, params[])
	{
	    	new result[64];
			if(sscanf(params, "us[64]", giveplayerid, result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /sban [ID do Player] [motivo]");
				return true;
			}
    	    new string[128];
			if (PlayerInfo[playerid][pAdmin] >= 1337)
			{
       			if(!admtrampando[playerid])
					return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
                    {
			        	if(PlayerInfo[giveplayerid][pAdmin] >= 1340)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode banir este admin!");
							return true;
						}
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "[BAN]: %s foi banido por %s, Motivo: %s", giveplayer, sendername, (result));
						BPFLogs("ban", string);
						format(string, sizeof(string), "[BAN]: %s foi banido secretamente por %s, Motivo: %s", giveplayer, sendername, (result));
						ABroadCast(COLOR_LIGHTRED, string, 1);
						PlayerInfo[giveplayerid][pBan] = 1;
						TextDrawShowForPlayer(giveplayerid, TextBan);
						TextDrawShowForPlayer(giveplayerid, TextBan1);
						SBan(giveplayerid, result, PlayerName(playerid));
						PlayerPlaySound(giveplayerid, 31202, 0.0, 0.0, 0.0);
						return true;
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "	Você não pode usar este comando!");
			}
			return true;
    }
    stock tban(playerid, diasban, adminname[], motivo[])
    {
        giveplayerid = playerid;
		PlayerInfo[giveplayerid][pDiaBanTemp] = day+diasban;
		PlayerInfo[giveplayerid][pMesBanTemp] = month;
		PlayerInfo[giveplayerid][pAnoBanTemp] = year;

		PlayerInfo[giveplayerid][pDataBanTemp] = getdate()+diasban;
		if(PlayerInfo[giveplayerid][pDataBanTemp] > 360)
		    PlayerInfo[giveplayerid][pDataBanTemp] -= 360;
		if(PlayerInfo[giveplayerid][pDataBanTemp] > 360)
		    PlayerInfo[giveplayerid][pDataBanTemp] -= 360;
		if(PlayerInfo[giveplayerid][pDataBanTemp] > 360)
		    PlayerInfo[giveplayerid][pDataBanTemp] -= 360;

		for(new dias = 1; dias < diasban; dias++)
		{
			if(PlayerInfo[giveplayerid][pMesBanTemp] == 1 && PlayerInfo[giveplayerid][pDiaBanTemp] > 31)
			{
				PlayerInfo[giveplayerid][pDiaBanTemp] -= 31;
				PlayerInfo[giveplayerid][pMesBanTemp]++;
			}
      		if(PlayerInfo[giveplayerid][pMesBanTemp] == 2 && PlayerInfo[giveplayerid][pDiaBanTemp] > 28)
			{
				PlayerInfo[giveplayerid][pDiaBanTemp] -= 28;
				PlayerInfo[giveplayerid][pMesBanTemp]++;
			}
 			if(PlayerInfo[giveplayerid][pMesBanTemp] == 3 && PlayerInfo[giveplayerid][pDiaBanTemp] > 31)
			{
				PlayerInfo[giveplayerid][pDiaBanTemp] -= 31;
				PlayerInfo[giveplayerid][pMesBanTemp]++;
			}
 			if(PlayerInfo[giveplayerid][pMesBanTemp] == 4 && PlayerInfo[giveplayerid][pDiaBanTemp] > 30)
			{
				PlayerInfo[giveplayerid][pDiaBanTemp] -= 30;
				PlayerInfo[giveplayerid][pMesBanTemp]++;
			}
      		if(PlayerInfo[giveplayerid][pMesBanTemp] == 5 && PlayerInfo[giveplayerid][pDiaBanTemp] > 31)
			{
				PlayerInfo[giveplayerid][pDiaBanTemp] -= 31;
				PlayerInfo[giveplayerid][pMesBanTemp]++;
			}
      		if(PlayerInfo[giveplayerid][pMesBanTemp] == 6 && PlayerInfo[giveplayerid][pDiaBanTemp] > 30)
			{
				PlayerInfo[giveplayerid][pDiaBanTemp] -= 30;
				PlayerInfo[giveplayerid][pMesBanTemp]++;
			}
      		if(PlayerInfo[giveplayerid][pMesBanTemp] == 7 && PlayerInfo[giveplayerid][pDiaBanTemp] > 31)
			{
				PlayerInfo[giveplayerid][pDiaBanTemp] -= 31;
				PlayerInfo[giveplayerid][pMesBanTemp]++;
			}
      		if(PlayerInfo[giveplayerid][pMesBanTemp] == 8 && PlayerInfo[giveplayerid][pDiaBanTemp] > 31)
			{
				PlayerInfo[giveplayerid][pDiaBanTemp] -= 31;
				PlayerInfo[giveplayerid][pMesBanTemp]++;
			}
      		if(PlayerInfo[giveplayerid][pMesBanTemp] == 9 && PlayerInfo[giveplayerid][pDiaBanTemp] > 30)
			{
				PlayerInfo[giveplayerid][pDiaBanTemp] -= 30;
				PlayerInfo[giveplayerid][pMesBanTemp]++;
			}
      		if(PlayerInfo[giveplayerid][pMesBanTemp] == 10 && PlayerInfo[giveplayerid][pDiaBanTemp] > 31)
			{
				PlayerInfo[giveplayerid][pDiaBanTemp] -= 31;
				PlayerInfo[giveplayerid][pMesBanTemp]++;
			}
      		if(PlayerInfo[giveplayerid][pMesBanTemp] == 11 && PlayerInfo[giveplayerid][pDiaBanTemp] > 30)
			{
				PlayerInfo[giveplayerid][pDiaBanTemp] -= 30;
				PlayerInfo[giveplayerid][pMesBanTemp]++;
			}
      		if(PlayerInfo[giveplayerid][pMesBanTemp] == 12 && PlayerInfo[giveplayerid][pDiaBanTemp] > 31)
			{
				PlayerInfo[giveplayerid][pDiaBanTemp] -= 31;
				PlayerInfo[giveplayerid][pMesBanTemp]++;
			}
      		if(PlayerInfo[giveplayerid][pMesBanTemp] > 12)
			{
				PlayerInfo[giveplayerid][pMesBanTemp] -= 12;
				PlayerInfo[giveplayerid][pAnoBanTemp]++;
			}
		}
		PlayerInfo[giveplayerid][pBan] = 1;
		OnPlayerSave(giveplayerid);
		SaveObjects(giveplayerid);
		TextDrawShowForPlayer(giveplayerid, TextBan);
		TextDrawShowForPlayer(giveplayerid, TextBan1);
		BanTemp(giveplayerid, motivo, adminname);
		return 0;
    }
	CMD:bantemp(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
	    	new result[64], diasban;
			if(sscanf(params, "uds[64]", giveplayerid, diasban, result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /bantemp [ID do Player] [dias] [motivo]");
				return true;
			}
			if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
			{
			    if(IsPlayerConnected(giveplayerid))
				    {
				       	if(PlayerInfo[giveplayerid][pAdmin] >= 3001)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode banir este admin!");
							return true;
						}
						new string[128];
	 		   			if(strcmp(NomePlayer(giveplayerid), "BPF_Ajudante", true) == 0)
			          		return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode banir o ajudante do server");
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						getdate(year, month, day);
						if(diasban > 359)
						{
						    SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Maximo 359 dias");
						    return 1;
						}
						format(string, sizeof(string), "[BAN]: %s foi banido temporariamente (%d dias) por %s, Motivo: %s (%d-%d-%d)", giveplayer, diasban, sendername, (result),day,month,year);
						BPFLogs("ban", string);
						format(string, sizeof(string), "[BAN]: %s foi banido temporariamente (%d dias) por %s, Motivo: %s", giveplayer, diasban, sendername, (result));
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						tban(giveplayerid, diasban, NomePlayer(playerid), result);
						PlayerPlaySound(giveplayerid, 31202, 0.0, 0.0, 0.0);
					}
				}
				else
				{
				SendClientMessage(playerid, COLOR_GRAD1, "	Você não pode usar este comando!");
			}
			return true;
    }


	CMD:sbantemp(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
	    	new result[64], diasban;
			if(sscanf(params, "uds[64]", giveplayerid, diasban, result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /sbantemp [ID do Player] [dias] [motivo]");
				return true;
			}
			if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
			{
       			if(!admtrampando[playerid])
					return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

			    if(IsPlayerConnected(giveplayerid))
			    {
			       	if(PlayerInfo[giveplayerid][pAdmin] >= 1340)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Você não pode banir este admin!");
						return true;
					}
					new string[128];
 		   			if(strcmp(NomePlayer(giveplayerid), "BPF_Ajudante", true) == 0)
				        return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode kickar o ajudante do server");
				   	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					getdate(year, month, day);
					if(diasban > 359)
					{
					    SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Maximo 359 dias");
					    return 1;
					}
					format(string, sizeof(string), "[BAN]: %s foi banido temporariamente (%d dias) por %s, Motivo: %s (%d-%d-%d)", giveplayer, diasban, sendername, (result),day,month,year);
					BPFLogs("ban", string);
					format(string, sizeof(string), "[BAN]: %s foi banido temporariamente (%d dias) (secretamente) por %s, Motivo: %s", giveplayer, diasban, sendername, (result));
					ABroadCast(COLOR_LIGHTRED, string, 1);
					tban(giveplayerid, diasban, NomePlayer(playerid), result);
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "	Você não pode usar este comando!");
			}
			return true;
    }
CMD:missao(playerid)
{
	if(!IsAMec(playerid))return SendClientMessage(playerid, COLOR_GRAD1, "Apenas mecânicos podem realizar missões.");
	if(MecanicMission[playerid])return ForT:pararmissao(playerid);
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525 || !IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_GRAD1, "Você precisa estar no carro de mecânico.");

	TimeMission[playerid] = 10*60; // 10 minutos para completar a missao
	MecanicMission[playerid] = true;
	new rand = random(sizeof(CarMissionSpawn));
	VehicleMission[playerid] = CreateVehicle(ReturnVehicle(), CarMissionSpawn[rand][0],CarMissionSpawn[rand][1],CarMissionSpawn[rand][2],CarMissionSpawn[rand][3], -1, -1, -1);
	SetVehicleHealth(VehicleMission[playerid], 380.0);
	UpdateVehicleDamageStatus(VehicleMission[playerid], 1, 2, 1, 1);
	SetPlayerCheckpoint(playerid, CarMissionSpawn[rand][0],CarMissionSpawn[rand][1],CarMissionSpawn[rand][2], 8.0);
	SetVehicleParamsForPlayer(VehicleMission[playerid], playerid, 1, 1);
    IsAttached[playerid] = false;
	SendClientMessage(playerid, COLOR_LIGHTRED, "Missão de mecânico: Vá até a marca no mapa para guinchar o carro estragado. voce tem 10 minutos");
	SendClientMessage(playerid, COLOR_YELLOW2, "OBS: Quanto mais rapido você for, mais dinheiro você ganha!");
	VTrancado[VehicleMission[playerid]] = 1;
    CostMecanicMission[playerid] = 0;
	return true;
}
CMD:pararmissao(playerid)
{
	if(!MecanicMission[playerid])return SendClientMessage(playerid, COLOR_GRAD1, "Você não esta em uma missão.");
	EndMission(playerid);
	return true;
}
 	CMD:payday(playerid, params[])
	{
			if (PlayerInfo[playerid][pAdmin] >= 1340)
			{
			    new string[128];
				PayDayManual();
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "AdmCmd: O admin %s efetuou o PayDay Manual.", sendername);
				SendClientMessageToAll(0xff6347FF, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "	Você não pode usar este comando!");
			}
			return true;
	}
//----------------------------------[Freeze]------------------------------------------------
 CMD:tapreso(playerid, params[])
	{
	        new playa;
			if(sscanf(params, "u", playa))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /congelar [ID do Player]");
				return true;
			}
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
       			if(!admtrampando[playerid])
					return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			        	if(PlayerInfo[playa][pAdmin] >= 1340 && PlayerInfo[playerid][pAdmin] < 3000)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode congelar um Admin Dono !");
							return true;
						}
                	    new string[128];
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						Controle(playa, 0);
						antihands[playa] = 1;
						format(string, sizeof(string), "AdmCmd: %s congelou %s",sendername,  giveplayer);
						printf("%s",string);
						format(string, sizeof(string), "AdmCmd: %s foi congelado por %s",giveplayer ,PlayerName(playerid));
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "	Você não pode usar este comando!");
			}
			return true;
	}

//----------------------------------[descongelar]------------------------------------------------
	CMD:tasolto(playerid, params[])
	{
	        new playa;
			if(sscanf(params, "u", playa))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /descongelar [ID do Player]");
				return true;
			}
			if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
			{
       			if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 3000)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo Admin USE: /trabalhar");
					return true;
				}
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
                	    new string[128];
			            PlayerInfo[playa][pMuted] = 0;
			    	    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						Controle(playa, 1);
						antihands[playa] = 0;
						format(string, sizeof(string), "AdmCmd: %s descongelou %s",sendername,  giveplayer);
						printf("%s",string);
						format(string, sizeof(string), "AdmCmd: %s foi descongelado por %s",giveplayer ,PlayerName(playerid));
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "	Você não pode usar este comando!");
			}
			return true;
	}

//----------------------------------[Setar emprego]-----------------------------------------------
	CMD:setemprego(playerid, params[])
	{
	        new para1, jobid;
			if(sscanf(params, "ud", para1, jobid))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /setemprego [playerid/ParteDoNome] [empregoid)]");
				return true;
			}
			if (PlayerInfo[playerid][pAdmin] >= 1340)
			{
       			if(!admtrampando[playerid])
					return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pEmprego] = jobid;
						new string[MAX_STRING];
						new jtext[20];
						switch(PlayerInfo[para1][pEmprego])
						{
					        case 1:jtext = "Detetive";
					        case 2:jtext = "Advogado";
					        case 3:jtext = "Prof.Sexo";
					        case 4:jtext = "Vendedor De Drogas";
					        case 5:jtext = "Detran";
					        case 6:jtext = "Segurança";
					        case 7:jtext = "Vendedor de armas";
					        case 9:jtext = "Motorista de Onibus";
					        case 11:jtext = "Caminhoneiro";
					        case 20:jtext = "Entregador de Pizza";
					        case 21:jtext = "Agricultor";
					        case 12:jtext = "Vendedor de carros";
					        case 13:jtext = "Taxista";
					        case 14:jtext = "Bombeiro";
					        default:jtext = "Desempregado";
						}
						format(string, 128, "	Emprego de %s[ID:%d] setado para %s ", NomePlayer(para1), para1, jtext);
                        SendClientMessage(playerid,COLOR_GRAD1,string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "	Você não pode usar este comando!");
			}
			return true;
	}


	CMD:admsecreto(playerid, params[])
	{
		if(PlayerInfo[playerid][pAdmin] > 1337)
		{
			if(admhide[playerid] == 1)
			{
				admhide[playerid] = 0;
				SendClientMessage(playerid,COLOR_GRAD2,"Você está jogando como admin Visível");
				SetPlayerToTeamColor(playerid);
			}
			else
			{
				admhide[playerid] = 1;
				SendClientMessage(playerid,COLOR_GRAD2,"Você está jogando como admin Invisível");
				SetPlayerToTeamColor(playerid);
			}
		}
		return true;
	}
//-0-0-0-0-
	CMD:criarhelper(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
          if(PlayerInfo[playerid][pAdmin] < 3000 && PlayerInfo[playerid][pAdminTemp] < 5000)
	    	{
				SendClientMessage(playerid, COLOR_GRAD1, "Você NÃO TEM AUTORIZAÇÂO PARA ULTILIZAR ESTE COMANDO!");
				return 1;
	    	}
				new para2;
				new level2;
				if(sscanf(params, "ud", para2, level2))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /criarhelper [ID do Player] [Nível(de 1 a 300)]");
					return 1;
				}
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(para2, giveplayer, sizeof(giveplayer));
			    if(IsPlayerConnected(para2))
			    {
			        if(para2 != INVALID_PLAYER_ID)
			        {

						if(!TemVagaHelper() && PlayerInfo[para2][pHelper] < 1)return SendClientMessage(playerid, COLOR_GRAD1, "Sem vagas de helpers, use: /limparhelper para limpar uma vaga!");
	            	    new string[200];

	       				format(string, sizeof(string), "Você promoveu %s para nível %d de Helper.", giveplayer,level2);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "Você foi promovido a nível %d de Helper, pelo admin %s", level2, sendername);
						SendClientMessage(para2, COLOR_LIGHTBLUE, string);
						getdate(year, month, day);
						gettime(hour,minute,second);
						format(string, sizeof(string), "%s deu Helper Nível %d para %s [%d/%d/%d] ás [%d:%d:%d].", sendername, level2, NomePlayer(para2), day,
						month, year, hour, minute, second);
						BPFLogs("darhelper", string);
						PlayerInfo[para2][pHelper] = level2;
						if(level2 > 0)
						{
						    SetVagaHelper(NomePlayer(para2), level2);
							AddHelper(NomePlayer(para2), level2);
						}
						else
						{
						    SetPlayerToTeamColor(para2);
		               		SetPlayerHealth(para2, 100);
						    PlayerInfo[para2][pHelper] = 0;
		               		helpertrampando[para2] = 0;
							RemoverHelper(NomePlayer(para2));
							RemoveVagaHelper(NomePlayer(para2));
						}
					}
				}
			return 1;
	}

stock AddHelper(Nome[], nivel)
{
	new stradmin[50];
	format(stradmin, sizeof stradmin, Pasta_Helpers, Nome);
	if(!DOF2_FileExists(stradmin))DOF2_CreateFile(stradmin);
	DOF2_SetInt(stradmin, "HelperNivel", nivel);
	return true;
}
stock RemoverHelper(Nome[])
{
	new stradmin[50];
	format(stradmin, sizeof stradmin, Pasta_Helpers, Nome);
	if(DOF2_FileExists(stradmin))DOF2_RemoveFile(stradmin);
	return true;
}

CMD:jetpack(playerid)
{
    if(PlayerInfo[playerid][pAdmin] != 1337 &&  PlayerInfo[playerid][pAdmin] != 1340 && PlayerInfo[playerid][pAdmin] != 5000)
	{
	if (TemJetpack[playerid] == 1)
 	{
        if(GetPlayerWantedLevelEx(playerid) > 0)
			return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode pegar um JetPack com Nível de procurado.");
        new string[100];
	    SetPlayerSpecialAction(playerid, 2);
		format(string, sizeof string, "* O jogador %s pegou seu JetPack.", NomePlayer(playerid));
	    SendClientMessageToAll(0x33AA33AA, string);
		return 1;
	}
		if(PlayerInfo[playerid][pVIP] < 5)
	    return SendClientMessage(playerid, COLOR_GRAD1, "Você não é um jogador SÓCIO-POWER ou não possui um JetPack.");
	}
	if (PlayerInfo[playerid][pAdmin] >= 3001)
 	{
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Aviso: Voce Pegou um JetPack!");
		return 1;
	}
	new string[100];

	    new Float:vid, Float:colete;
	    GetPlayerHealth(playerid, vid);
	    GetPlayerArmour(playerid, colete);

	    if(GetPlayerWantedLevelEx(playerid) > 0)
			return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode pegar um JetPack com Nível de procurado.");


	    format(string, sizeof string, "* O sócio %s pegou seu JetPack.", NomePlayer(playerid));
	    SendClientMessageToAll(0xFFCC00AA, string);
	    SetPlayerSpecialAction(playerid, 2);
    	return 1;
}
stock CountAdminTrampo()
{
	new count;
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pAdmin] && admtrampando[i])count ++;
	}
	return count;
}
	CMD:trabalhar(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
		if(PlayerInfo[playerid][pJailed] != 0)
	    {
	        if(PlayerInfo[playerid][pAdmin] < 1)
			{
				SendClientMessage(playerid,COLOR_YELLOW,"Você não pode trabalhar na cadeia!");
		      	return true;
	      	}
	    }
		new string[128];
		if(gettime() < AdmHelperComido[playerid] && PlayerInfo[playerid][pAdmin] < 1340)
		{
			format(string,sizeof(string),"Você não pode usar este comando com tanta Frequencia! espere %d segundos", AdmHelperComido[playerid]-gettime());
			SendClientMessage(playerid, COLOR_GRAD1, string);
			return true;
		}
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
		{
			if(admtrampando[playerid] > 0)
			{
				admtrampando[playerid] = 0;
				AdmHelperComido[playerid] = gettime()+60;
				GetPlayerName(playerid,sendername,sizeof(sendername));
				format(string, 128, "[Administração]: %s [%d] Está em modo jogo.",sendername, playerid);
				SendClientMessageToAll(COLOR_LIGHTRED, string);
				SetPlayerToTeamColor(playerid);
				SetPlayerArmour(playerid, 0.0);
            	SetPlayerHealth(playerid, 100);
				TirarAureola(playerid);
				SetPlayerSkin(playerid,skinadm[playerid]);
				KillTimer(TempoAdministrador);
				format(string, sizeof(string), "%s esta jogando", PlayerName(playerid));

				BPFLogs("admin", string);
				SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
    			}
			else
			{
				admtrampando[playerid] = 1;
				AdmHelperComido[playerid] = gettime()+60;
				GetPlayerName(playerid,sendername,sizeof(sendername));
				format(string, 128, "[Administração]: %s [%d] Está em modo trabalho.",sendername, playerid);
     			SendClientMessageToAll(COLOR_LIGHTRED, string);
       			SetPlayerToTeamColor(playerid);
       			ResetPlayerWeapons(playerid);
       			SetPlayerArmour(playerid, 0.0);
                SetPlayerHealth(playerid, 99999);
                ColocarAureola(playerid);
                skinadm[playerid] = GetPlayerSkin(playerid);
                SetPlayerSkin(playerid,217);
                if(PlayerInfo[playerid][pSex] == 2) { SetPlayerSkin(playerid, 211); }
				format(string, sizeof(string), "%s esta trabalhando", PlayerName(playerid));
				TempoAdministrador = SetTimerEx("Administrador", 100, true, "i", playerid);
				BPFLogs("admin", string);
           }
		}
		else SendClientMessage(playerid, 0xCD0400AA, "Você não pode usar este comando !");
		return true;
	}
	CMD:forcarjogo(playerid, params[])
	{
	    if(PlayerInfo[playerid][pAdmin] < 1340)return 1;
	    new target;
		if(sscanf(params, "u", target))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USE: /forcarjogo [id/nick]");
			return true;
		}
	    if(PlayerInfo[target][pAdmin] == 1)
	    {
			SendClientMessage(playerid,COLOR_GRAD1,"Apenas administradores fixos podem jogar !");
	      	return true;
	    }
		new string[128];
		if(gettime() < AdmHelperComido[playerid] && PlayerInfo[playerid][pAdmin] < 5000)
		{
			format(string,sizeof(string),"Você não pode usar este comando com tanta Frequencia! espere %d segundos", AdmHelperComido[playerid]-gettime());
			SendClientMessage(playerid, COLOR_GRAD1, string);
			return true;
		}
		if(PlayerInfo[target][pAdmin] >= 1)
		{
			if(admtrampando[target] > 0)
			{

				if(CountAdminTrampo() < 2 && PlayerInfo[playerid][pAdmin] < 5000)
			        return SendClientMessage(playerid, COLOR_GREY, "  Deve ter no mínimo 1 admin em modo trabalho para você poder entrar em modo jogo!");

				admtrampando[target] = 0;
				AdmHelperComido[target] = gettime()+60;
				GetPlayerName(target,sendername,sizeof(sendername));
				format(string, 128, " [Administração]: O admin %s entrou em modo Jogo, e seus comandos foram retirados!",sendername, playerid);
				ABroadCast(0xff6347FF,string,1);
				format(string,sizeof(string),"Você forcou o player %s a Entrar em Modo Jogo",PlayerName(target));
				SendClientMessage(playerid, COLOR_YELLOW, string);
				SetPlayerToTeamColor(target);
				SetPlayerArmour(target, 0.0);
            	SetPlayerHealth(target, 100);
				TirarAureola(target);
				KillTimer(TempoAdministrador);
				format(string, sizeof(string), "%s esta jogando", PlayerName(target));

				BPFLogs("admin", string);
				SetPlayerSkin(target, PlayerInfo[target][pSkin]);
			}
			else
			{
				admtrampando[target] = 1;
				AdmHelperComido[target] = gettime()+60;
				GetPlayerName(target,sendername,sizeof(sendername));
				format(string, 128, " [Administração]: O admin %s saiu de modo jogo, e seus comandos foram devolvidos!",sendername, playerid);
     			ABroadCast(0xff6347FF,string,1);
     			format(string,sizeof(string),"Você forcou o player %s a Sair em Modo Jogo",PlayerName(target));
				SendClientMessage(playerid, COLOR_YELLOW, string);
       			SetPlayerToTeamColor(target);
       			ResetPlayerWeapons(target);
       			SetPlayerArmour(target, 0.0);
                SetPlayerHealth(target, 99999);
                ColocarAureola(target);
				format(string, sizeof(string), "%s esta trabalhando", PlayerName(target));
				TempoAdministrador = SetTimerEx("Administrador", 100, true, "i", target);
				BPFLogs("admin", string);
           }
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando em quem nao é adm !");
		return true;
	}
    CMD:helpajuda(playerid, params[])
    {
  		if(PlayerInfo[playerid][pHelper] >= 1)
    	{
         	if(PlayerInfo[playerid][pJailed] != 0)
		    {
				SendClientMessage(playerid,COLOR_YELLOW,"Você não pode trabalhar na cadeia!");
		      	return true;
		    }
            new string[128];
			if(gettime() < AdmHelperComido[playerid])
			{
				format(string,sizeof(string),"Você não pode usar este comando com tanta Frequencia! espere %d segundos", AdmHelperComido[playerid]-gettime());
				SendClientMessage(playerid, COLOR_GRAD1, string);
				return true;
			}
            if(helpertrampando[playerid] > 0)
            {
                helpertrampando[playerid] = 0;
                AdmHelperComido[playerid] = gettime()+60;
                GetPlayerName(playerid,sendername,sizeof(sendername));
                format(string, 256, "[Administração]: O Helper %s saiu de modo ajuda, e seus comandos foram retirados",sendername);
                SendClientMessageToAll(0x55F6ACFF, string);
                SendClientMessage(playerid, COLOR_YELLOW, "Agora você não receberá duvidas de players que precisam!");
				SendClientMessageToAll(0xff6347FF, string);
                SetPlayerHealth(playerid,100);
           		format(string, sizeof(string), "* Helper %s saiu de modo ajuda.",sendername);
    			SendClientMessageInRange(30.0, playerid, string, 0x33AA33AA,0xC2A2DAAA,0xC2A2DAAA,0x33AA33AA,0xC2A2DAAA);
			}
            else
            {
                helpertrampando[playerid] = 1;
                AdmHelperComido[playerid] = gettime()+60;
                GetPlayerName(playerid,sendername,sizeof(sendername));
                format(string, 256, "[Administração]: O Helper %s entrou em modo ajuda, e seus comandos foram dados!",sendername);
                SendClientMessageToAll(0x55F6ACFF, string);
                SendClientMessage(playerid, COLOR_YELLOW, "Agora você receberá duvidas de players que precisam!");
				SetPlayerToTeamColor(playerid);
				ResetPlayerWeapons(playerid);
                SetPlayerHealth(playerid, 99999);
               	format(string, sizeof(string), "* Helper %s entrou em modo ajuda.",sendername);
    			SendClientMessageInRange(30.0, playerid, string, 0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA);
			}
        }
        else
        {
            SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando!");
        	return true;
	 	}
	 	return true;
    }
	CMD:vips(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0)
    		{
     			SendClientMessage(playerid,0xff6347FF, "* Você não está conectado.");
       			return 1;
       		}
       		new Cont = 0;
	    MEGAString[0] =EOS;
	    //MaluKoString[0] =EOS;
     	new string[500];
		strcat(MEGAString, "ID\tNome\tTitulo\tRank\n");
        foreach(Player, i)
		{
            GetPlayerName(i, sendername, sizeof(sendername));
                        if(PlayerInfo[i][pVIP] == 1)
				        {
            	    		format(string, sizeof(string), "%d\t%s\t%s\t{00fefe}VIP\n",i ,NomePlayer(i), getPlayerTitulo(i));
            	    		strcat(MEGAString, string);
            	    		Cont++;
						}
						else if(PlayerInfo[i][pVIP] == 2)
				        {
            	    		format(string, sizeof(string), "%d\t%s\t%s\t{faa788}SÓCIO\n",i ,NomePlayer(i), getPlayerTitulo(i));
            	    		strcat(MEGAString, string);
            	    		Cont++;
						}
						else if(PlayerInfo[i][pVIP] == 5)
				        {
            	    		format(string, sizeof(string), "%d\t%s\t%s\t{bb52fe}SÓCIO-POWER\n",i ,NomePlayer(i), getPlayerTitulo(i));
            	    		strcat(MEGAString, string);
            	    		Cont++;
						}
						else if(PlayerInfo[i][pVIP] == 6)
				        {
            	    		format(string, sizeof(string), "%d\t%s\t%s\t{fef33c}SÓCIO-GOLD\n",i ,NomePlayer(i), getPlayerTitulo(i));
            	    		strcat(MEGAString, string);
            	    		Cont++;
						}
						else if(PlayerInfo[i][pVIP] == 7)
				        {
            	    		format(string, sizeof(string), "%d\t%s\t%s\t{AEFFD1}SÓCIO-PLATINA\n",i ,NomePlayer(i), getPlayerTitulo(i));
            	    		strcat(MEGAString, string);
            	    		Cont++;
						}
			new titulo[350];
		    format(titulo, sizeof(titulo), "{FFFFFF}VIPs Online {FFFFFF}({00d900}%d{FFFFFF})",Cont);
			ShowPlayerDialog(playerid, DIALOG_SMS, DIALOG_STYLE_TABLIST_HEADERS, titulo,  MEGAString, "Enviar SMS", "Fechar");
		}
		return 1;
	}
	CMD:pcagencia(playerid)
    {
        if(PlayerToPoint(1.5, playerid, 1490.6569,1307.7158,1093.2891))
        {
            new str[255] = "Comprar 1pt de Melhora - R$20000\nComprar 1EXP - R$100000\n";
            ShowPlayerDialog(playerid, 1992, DIALOG_STYLE_LIST, "Computador da Escola", str, "Comprar", "Fechar");
        }
        return 1;
    }
//----------------------------------[HELP]-----------------------------------------------
    //Comandos de Voar no Balões
    CMD:voarbalao(playerid)
	{
		if(IsPlayerConnected(playerid))
		{
            if(UsandoBalao[playerid] > 0)
    		{
    			SendClientMessage(playerid, COLOR_GRAD3, "   Você ja esta usando um Balão, USE: /cancelarvou");
    			return 1;
    		}
            if(PlayerToPoint(1.5,playerid, 322.6606, -1836.0155, 3.7240)) //Balao 1
            {
                if(BalaoUsado1 < 999){
                    SendClientMessage(playerid, COLOR_GRAD3, "  Este Balão ja esta Sendo Usado!");
                    return 1;
                }
                BalaoUsado1 = playerid;
                ShowPlayerDialog(playerid, 1519, DIALOG_STYLE_LIST, "Escolha o Destino do Balão", "Praia Las Colinas - R$2000\nMulholland - R$1500\nAeroporto de Los Santos - R$1000", "Ir", "Cancelar");
                return 1;
            }
            if(PlayerToPoint(1.5,playerid, 275.7866, -1835.2069, 3.6759)) //Balao 2
            {
                if(BalaoUsado2 < 999){
                    SendClientMessage(playerid, COLOR_GRAD3, "  Este Balão ja esta Sendo Usado!");
                    return 1;
                }
                BalaoUsado2 = playerid;
                ShowPlayerDialog(playerid, 1519, DIALOG_STYLE_LIST, "Escolha o Destino do Balão", "Praia Las Colinas - R$2000\nMulholland - R$1500\nAeroporto de Los Santos - R$1000", "Ir", "Cancelar");
                return 1;
            }
            if(PlayerToPoint(1.5,playerid, 224.4657, -1831.7446, 3.7959)) //Balao 3
            {
                if(BalaoUsado3 < 999){
                    SendClientMessage(playerid, COLOR_GRAD3, "  Este Balão ja esta Sendo Usado!");
                    return 1;
                }
                BalaoUsado3 = playerid;
                ShowPlayerDialog(playerid, 1519, DIALOG_STYLE_LIST, "Escolha o Destino do Balão", "Praia Las Colinas - R$2000\nMulholland - R$1500\nAeroporto de Los Santos - R$1000", "Ir", "Cancelar");
                return 1;
            }
            if(PlayerToPoint(1.5,playerid, 180.0254, -1827.5009, 4.1038)) //Balao 4
            {
                if(BalaoUsado4 < 999){
                    SendClientMessage(playerid, COLOR_GRAD3, "  Este Balão ja esta Sendo Usado!");
                    return 1;
                }
                BalaoUsado4 = playerid;
                ShowPlayerDialog(playerid, 1519, DIALOG_STYLE_LIST, "Escolha o Destino do Balão", "Praia Las Colinas - R$2000\nMulholland - R$1500\nAeroporto de Los Santos - R$1000", "Ir", "Cancelar");
                return 1;
            }
            else
            {
                SendClientMessage(playerid, COLOR_GRAD3, " Você não esta dentro de um Balão!");
                return 1;
            }
        }
        return 1;
    }
    CMD:cancelarvou(playerid)
	{
		if(IsPlayerConnected(playerid))
		{
            if(UsandoBalao[playerid] > 0)
    		{
                new string[75];
                UsandoBalao[playerid] = 0;
                format(string,sizeof(string),"* Balão Sera Resetado em Segundos !");
            	SendClientMessageInRange(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                if(BalaoUsado1 == playerid) { SetTimer("ResetarBalao1",10000,0); }
                if(BalaoUsado2 == playerid) { SetTimer("ResetarBalao2",10000,0); }
                if(BalaoUsado3 == playerid) { SetTimer("ResetarBalao3",10000,0); }
                if(BalaoUsado4 == playerid) { SetTimer("ResetarBalao4",10000,0); }
                GivePlayerWeapon(playerid, 46, 1);
                return 1;
            }
            else
            {
    			SendClientMessage(playerid, COLOR_GREY, " Você não esta vuando ou não alugo um Balaão!");
    			return 1;
            }
        }
        return 1;
    }
    CMD:respbaloes(playerid)
	{
		if(IsPlayerConnected(playerid))
		{
            if(PlayerInfo[playerid][pAdmin] >= 1)
			{
                if(admtrampando[playerid] == 0)
    			{
    				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/pa)");
    				return 1;
    			}

                for(new i=0; i<MAX_PLAYERS; i++)
            	{
            		if(IsPlayerConnected(i)) { UsandoBalao[i] = 0; }
                }
                new string[75];
           		format(string, sizeof(string), "AdmCmd: %s Efetuo Respawn nos Balões do Servidor.", PlayerName(playerid));
        		SendClientMessageToAll(COLOR_LIGHTRED,string);
                SendClientMessage(playerid, COLOR_GRAD1, "Balões Resetados em Segundos!");

                SetTimer("ResetarBalao1",3000,0);
                SetTimer("ResetarBalao2",3000,0);
                SetTimer("ResetarBalao3",3000,0);
                SetTimer("ResetarBalao4",3000,0);
                return 1;
            }
            else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não esta autorizado a usar este comando!");
                return 1;
            }
        }
        return 1;
    }
    CMD:desalugarcarro(playerid)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(HireCar[playerid] != 299)
			{
			    new idcar = GetPlayerVehicleID(playerid);
			    if(HireCar[playerid] == 0)
			    {
					 SendClientMessage(playerid, COLOR_GRAD1, "Você não tem um carro alugado !");
					 return 1;
			    }
			    if(idcar == HireCar[playerid])
			    {
			        TogglePlayerControllable(playerid, 1);
			    }
				UnLockCar(HireCar[playerid]);
				SetVehicleToRespawn(HireCar[playerid]);
				HireCar[playerid] = 0;
				GameTextForPlayer(playerid, "~w~Voce desalugou o carro", 5000, 3);
			}
		}
		return 1;
	}
CMD:inventario(playerid){
if (!gPlayerLogged[playerid])
		return SendClientMessage(playerid, COLOR_GRAD1, "   Você não está logado !");

    if(PlayerInfo[playerid][pJailed] == 9) {
		SendClientMessage(playerid,COLOR_GRAD1," Você não pode usar este comando nas Celas da Administração!");
 		return true;
  	}
  	new string[128];
		format(string, sizeof(string), "* %s abriu seu Inventario!", NomePlayer(playerid));
		SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    Sound(playerid, 1039, 30.0);
    AbrirInventario(playerid);
    return 1;
}
CMD:cbug(playerid)
{
 	SendClientMessage(playerid, COLOR_GRAD1, "Bugue suas 7 balas de Desert Eagle, para ver o tempo do seu CBUG");
 	Cbugbalas[playerid] = 7;
	return 1;
}
CMD:destruirportao(playerid, params[])
{
if(PlayerInfo[playerid][pAdmin] < 1337)

			return SendClientMessage(playerid, COLOR_GRAD1, " Você não está autorizado a usar este comando !");
	new ta;
	for(new i; i<1000; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid,5, SistemaPortao[i][PortaoX],SistemaPortao[i][PortaoY],SistemaPortao[i][PortaoZ]))
		{
			ta = 1;
				        new Filea[40];
						format(Filea,40,"Portoes/Portao_%d.ini",i);

						if(DOF2_FileExists(Filea)){

			             DOF2_RemoveFile(Filea);
   		                }

						DestroyDynamicObject(SistemaPortao[i][PortaoObj]);
						DestroyDynamic3DTextLabel(SistemaPortao[i][Portao3d]);
				        SendClientMessage(playerid, -1, "{00ffff}• {ffffff}Você deletou este portão !");
	    }
	}
	if(ta == 0) return SendClientMessage(playerid,-1,"Você não esta Proximo a nenhum portao !");
	return 1;
}
CMD:destruircaixa(playerid, params[])
{
if(PlayerInfo[playerid][pAdmin] < 1337)

			return SendClientMessage(playerid, COLOR_GRAD1, " Você não está autorizado a usar este comando !");
	new ta;
	for(new i; i<1000; i++)
	{
		if(IsPlayerInRangeOfPoint(playerid,5, SistemaCaixa[i][CaixaX],SistemaCaixa[i][CaixaY],SistemaCaixa[i][CaixaZ]))
		{
			ta = 1;
						new Filea[40];
						format(Filea,40,"Caixas/Caixa_%d.ini",i);

						DestroyDynamicObject(SistemaCaixa[i][CaixaObj]);
						DestroyDynamic3DTextLabel(SistemaCaixa[i][Caixa3d]);
						SistemaCaixa[i][CaixaX] = 0;
					 	SistemaCaixa[i][CaixaY] = 0;
						SistemaCaixa[i][CaixaZ] = 0;
						SistemaCaixa[i][CaixaRX] = 0;
						SistemaCaixa[i][CaixaRY] = 0;
						SistemaCaixa[i][CaixaRZ] = 0;
						SistemaCaixa[i][CaixaInterior] = 0;
						SistemaCaixa[i][CaixaMundo] = 0;
				        SendClientMessage(playerid, -1, "{00ffff}• {ffffff}Você deletou esta caixa !");
				        if(DOF2_FileExists(Filea)) DOF2_RemoveFile(Filea);
	    }
	}
	if(ta == 0) return SendClientMessage(playerid,-1,"Você não esta Proximo a nenhuma caixa !");
	return 1;
}
	CMD:vip(playerid)
	{
	    ShowPlayerDialog(playerid,195,DIALOG_STYLE_LIST,"Comprar VIP","*Visualizar beneficios VIP\n*Visualizar beneficios SÓCIO-COMUM\n*Visualizar beneficios {bb52fe}SÓCIO-POWER\n*Visualizar beneficios {fef33c}SÓCIO-GOLD\n*Visualizar beneficios {AEFFD1}SÓCIO-PLATINA\n","Comprar","Voltar");
		return true;
	}
	CMD:vercombates(playerid){

	new string[256];
	MEGAString[0] = EOS;
	strcat(MEGAString, "» Logs de ínicio de combate (Quem atirou/bateu primeiro)\n\n");
	new c = 35;
	while(c--){

        if(strcmp(CombateInfo[c][iniciouCombate], "Ninguém", false)){

			format(string, sizeof string, "[%s] - %s iniciou um combate contra %s\n", CombateInfo[c][horaCombate], CombateInfo[c][iniciouCombate], CombateInfo[c][outroCombate]);
            strcat(MEGAString, string);
	    }
    }
	return ShowPlayerDialog(playerid, 1023, DIALOG_STYLE_MSGBOX, "» Log de Combates", MEGAString, "Fechar", "");
}
	CMD:creditos(playerid)
	{
	    new Strings[2900];
		strcat(Strings, "{00fffc}|____________________________| Créditos do Servidor |____________________________|\n\n");
		strcat(Strings, "{00FFFF}• wZAP\n");
		strcat(Strings, "       {888888}(Criador/Fundador do Servidor | Atual Scripter)\n");
		strcat(Strings, "       {888888}Discord: {00fffc}wZAP#5161{888888} | Função: Cuidar do servidor.\n\n");
		strcat(Strings, "{FFFFFF}• wZAP\n");
		strcat(Strings, "        {888888}(Criador/Idealizador do servidor)\n\n");
		strcat(Strings, "{FFFFFF}• wZAP\n");
		strcat(Strings, "        {888888}(Criador/Idealizador do servidor)\n\n");
		strcat(Strings, "{FFFFFF}• wZAP, Willian7535.\n");
		strcat(Strings, "     {888888}Donos atuais e antigos do servidor | Participantes da História do BPC\n\n");
		strcat(Strings, "{00FFFF}• wZAP \n");
		strcat(Strings, "       {888888}(Criador/Idealizador de Alguns sistemas | Scripter)\n");
		strcat(Strings, "       {888888}Discord: {00fffc}wZAP#5161{888888}.\n\n");
		strcat(Strings, "{FFFFFF}• Agradecimentos especiais\n");
		strcat(Strings, "   {888888}Gustavo_Brum,pastinha_milgrau,Boi & Fórum SA:MP\n");
		strcat(Strings, "     {888888}(Criadores de alguns sistemas do servidor)\n\n");
		strcat(Strings, "{00fffc}|____________________________________________________________________________|");
		ShowPlayerDialog(playerid, 99, DIALOG_STYLE_MSGBOX, "Creditos", Strings, "Fechar", "");
		return true;
	}
		CMD:configuracoes(playerid){
	if(gPlayerLogged[playerid] == 0)
    		{
     			SendClientMessage(playerid,0xff6347FF, "* Você não está conectado.");
       			return 1;
       		}
	    new texttr[120];
	    if(PlayerInfo[playerid][pChatTerritorio] == 1)texttr = "{ff6347}Desativado";
	    else if(PlayerInfo[playerid][pChatTerritorio] == 0)texttr = "{01DF01}Ativado";
	    new textduelo[120];
	    if(PlayerInfo[playerid][pChatDuelo] == 1)textduelo = "{ff6347}Desativado";
	    else if(PlayerInfo[playerid][pChatDuelo] == 0)textduelo = "{01DF01}Ativado";
	    new textvipaodaporra[120];
	    if(PlayerInfo[playerid][pChatVipDesativado] == 1)textvipaodaporra = "{ff6347}Desativado";
	    else if(PlayerInfo[playerid][pChatVipDesativado] == 0)textvipaodaporra = "{01DF01}Ativado";
	    new textsocio[120];
	    if(PlayerInfo[playerid][pChatSocioDesativado] == 1)textsocio = "{ff6347}Desativado";
	    else if(PlayerInfo[playerid][pChatSocioDesativado] == 0)textsocio = "{01DF01}Ativado";
	    new textnoticias[120];
	    if(PlayerInfo[playerid][pChatNoticias] == 1)textnoticias = "{ff6347}Desativado";
	    else if(PlayerInfo[playerid][pChatNoticias] == 0)textnoticias = "{01DF01}Ativado";
	    new textpfam[120];
	    if(PlayerInfo[playerid][pgFam] == 1)textpfam = "{ff6347}Desativado";
	    else if(PlayerInfo[playerid][pgFam] == 0)textpfam = "{01DF01}Ativado";
	    new textfodase[120];
	    if(PlayerInfo[playerid][pMenuRG] == 1)textfodase = "{00FFFF}Menu";
	    else if(PlayerInfo[playerid][pMenuRG] == 0)textfodase = "{FFCC00}Chat";
	    new textnobao[120];
	    if(PlayerInfo[playerid][pChatNoob] == 1)textnobao = "{ff6347}Desativado";
	    else if(PlayerInfo[playerid][pChatNoob] == 0)textnobao = "{01DF01}Ativado";
	    new textfome[120];
	    if(PlayerInfo[playerid][pChatFomeSede] == 1)textfome = "{ff6347}Desativado";
	    else if(PlayerInfo[playerid][pChatFomeSede] == 0)textfome = "{01DF01}Ativado";
	    MEGAString[0] =EOS;
	    new string[300];
        strcat(MEGAString, "{C2CBD1}sistema\t{00AA00}status\n");
        format(string, sizeof(string),"{FFFFFF}» {C2CBD1}Dominios Territoriais \t%s\n", texttr);
        strcat(MEGAString, string);
		format(string, sizeof(string),"{FFFFFF}» {C2CBD1}Duelos Arena 1x1 \t%s\n", textduelo);
		strcat(MEGAString, string);
		format(string, sizeof(string),"{FFFFFF}» {C2CBD1}Chat VIP \t%s\n", textvipaodaporra);
		strcat(MEGAString, string);
		format(string, sizeof(string),"{FFFFFF}» {C2CBD1}Chat Sócios\t%s\n", textsocio);
		strcat(MEGAString, string);
		format(string, sizeof(string),"{FFFFFF}» {C2CBD1}Chat Jornal ao vivo \t%s\n", textnoticias);
		strcat(MEGAString, string);
		format(string, sizeof(string),"{FFFFFF}» {C2CBD1}Chat Familia \t%s\n", textpfam);
		strcat(MEGAString, string);
		format(string, sizeof(string),"{FFFFFF}» {C2CBD1}RG Personalizado \t%s\n", textfodase);
		strcat(MEGAString, string);
		format(string, sizeof(string),"{FFFFFF}» {C2CBD1}Chat /noob \t%s\n", textnobao);
		strcat(MEGAString, string);
		format(string, sizeof(string),"{FFFFFF}» {C2CBD1}Sistema de Fome/Sede (Completo) \t%s\n", textfome);
		strcat(MEGAString, string);
 		ShowPlayerDialog(playerid, 170, DIALOG_STYLE_TABLIST_HEADERS, "Configurações de Sistemas", MEGAString, "Alterar", "Sair");
        return true;
	}
	CMD:conquistas(playerid){
	if(gPlayerLogged[playerid] == 0)
    		{
     			SendClientMessage(playerid,0xff6347FF, "* Você não está conectado.");
       			return 1;
       		}
	    new textlevel[4];
	    if(PlayerInfo[playerid][CLEVEL2] == 1)textlevel = "1";
	    else if(PlayerInfo[playerid][CLEVEL2] == 0)textlevel = "0";
	    new textmorreu[4];
	    if(PlayerInfo[playerid][CMORREU10] == 1)textmorreu = "1";
	    else if(PlayerInfo[playerid][CMORREU10] == 0)textmorreu = "0";
	    new textmatou[4];
	    if(PlayerInfo[playerid][CMATOU10] == 1)textmatou = "1";
	    else if(PlayerInfo[playerid][CMATOU10] == 0)textmatou = "0";
	    new textlider[4];
	    if(PlayerInfo[playerid][CLIDER] == 1)textlider = "1";
	    else if(PlayerInfo[playerid][CLIDER] == 0)textlider = "0";
	    new textnovato[4];
	    if(PlayerInfo[playerid][CNOVATO] == 1)textnovato = "1";
	    else if(PlayerInfo[playerid][CNOVATO] == 0)textnovato = "0";
	    new textpresente[4];
	    if(PlayerInfo[playerid][CPRESENTE] == 1)textpresente = "1";
	    else if(PlayerInfo[playerid][CPRESENTE] == 0)textpresente = "0";
	    new textemprego[4];
	    if(PlayerInfo[playerid][CEMPREGO] == 1)textemprego = "1";
	    else if(PlayerInfo[playerid][CEMPREGO] == 0)textemprego = "0";
	    new textcorg[4];
	    if(PlayerInfo[playerid][CORG] == 1)textcorg = "1";
	    else if(PlayerInfo[playerid][CORG] == 0)textcorg = "0";
	    new textadmin[4];
	    if(PlayerInfo[playerid][CADMIN] == 1)textadmin = "1";
	    else if(PlayerInfo[playerid][CADMIN] == 0)textadmin = "0";
	    new texthelper[4];
	    if(PlayerInfo[playerid][CHELPER] == 1)texthelper = "1";
	    else if(PlayerInfo[playerid][CHELPER] == 0)texthelper = "0";
	    new textvips[4];
	    if(PlayerInfo[playerid][CVIPS] == 1)textvips = "1";
	    else if(PlayerInfo[playerid][CVIPS] == 0)textvips = "0";
	    new texthoras[4];
	    if(PlayerInfo[playerid][CHRSJOGADAS] == 1)texthoras = "1";
	    else if(PlayerInfo[playerid][CHRSJOGADAS] == 0)texthoras = "0";
	    new textcasa[4];
	    if(PlayerInfo[playerid][CCASACONQUISTA] == 1)textcasa = "1";
	    else if(PlayerInfo[playerid][CCASACONQUISTA] == 0)textcasa = "0";
	    new textempresa[4];
	    if(PlayerInfo[playerid][CEMPRESACONT] == 1)textempresa = "1";
	    else if(PlayerInfo[playerid][CEMPRESACONT] == 0)textempresa = "0";
	    MEGAString[0] =EOS;
	    new string[300];
        strcat(MEGAString, "{FFFFFF}Conquistas\tFinalizada\t{00AA00}Premio\n");
        format(string, sizeof(string),"{FFFFFF}Upar Nivel 5\t{C2CBD1}%s/1 \t{00AA00}R$:7000\n", textlevel);
        strcat(MEGAString, string);
		format(string, sizeof(string),"{FFFFFF}Morrer 150 Vezes\t{C2CBD1}%s/1 \t{00AA00}R$:1550\n", textmorreu);
		strcat(MEGAString, string);
		format(string, sizeof(string),"{FFFFFF}Matar 50 Vezes\t{C2CBD1}%s/1 \t{00AA00}R$:2000\n", textmatou);
		strcat(MEGAString, string);
		format(string, sizeof(string),"{FFFFFF}Virar Lider\t{C2CBD1}%s/1 \t{00AA00}R$:8000\n", textlider);
		strcat(MEGAString, string);
		format(string, sizeof(string),"{FFFFFF}Registrar no Servidor\t{C2CBD1}%s/1 \t{00AA00}R$:1000\n", textnovato);
		strcat(MEGAString, string);
		format(string, sizeof(string),"{FFFFFF}Primeiro Presente\t{C2CBD1}%s/1 \t{00AA00}R$:2000\n", textpresente);
		strcat(MEGAString, string);
		format(string, sizeof(string),"{FFFFFF}Primeiro Emprego\t{C2CBD1}%s/1 \t{00AA00}R$:2000\n", textemprego);
		strcat(MEGAString, string);
		format(string, sizeof(string),"{FFFFFF}Primeira ORG\t{C2CBD1}%s/1 \t{00AA00}R$:2000\n", textcorg);
		strcat(MEGAString, string);
		format(string, sizeof(string),"{FFFFFF}Virar Admin\t{C2CBD1}%s/1 \t{00AA00}R$:1000000\n", textadmin);
		strcat(MEGAString, string);
		format(string, sizeof(string),"{FFFFFF}Virar Helper\t{C2CBD1}%s/1 \t{00AA00}R$:50000\n", texthelper);
		strcat(MEGAString, string);
		format(string, sizeof(string),"{FFFFFF}Ser VIP\t{C2CBD1}%s/1 \t{00AA00}R$:9000\n", textvips);
		strcat(MEGAString, string);
		format(string, sizeof(string),"{FFFFFF}500 Horas Jogadas\t{C2CBD1}%s/1 \t{00FF08}€:15Cash\n", texthoras);
		strcat(MEGAString, string);
		format(string, sizeof(string),"{FFFFFF}Comprar uma Casa\t{C2CBD1}%s/1 \t{00FF08}R$:50000\n", textcasa);
		strcat(MEGAString, string);
		format(string, sizeof(string),"{FFFFFF}Comprar uma Empresa\t{C2CBD1}%s/1 \t{00FF08}€:5Cash\n", textempresa);
		strcat(MEGAString, string);
 		ShowPlayerDialog(playerid, 100, DIALOG_STYLE_TABLIST_HEADERS, "Conquistas", MEGAString, "Fechar", "");
        return true;
	}
	CMD:itens(playerid)
		{
		if(PlayerInfo[playerid][pAdmin] < 3000)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Você não é um Admin!");
		    return true;
		}
		new Strings[2900];
		strcat(Strings, "{00BFFF}Menu dos itens de Inventário:\n\n");
		strcat(Strings, "{FFFF00}•{FFFFFF} Caixa Pequeno:[19056] | Caixa Gigante:[19057] | Caixa Extreme:[19058] | Caixa Reveillon: [19059]| Caixa Natal:[19064] | Caixa Medio:[19054] Caixa Gigante:[19055]\n");
		strcat(Strings, "{F78181}•{FFFFFF} Laser:[19080 ao 19084] | Chapeu de Bruxa:[19528] | Maleta:[1210] | Lanterna:[18641] | Luz Blue:[19607]\n");
		strcat(Strings, "{F781F3}•{FFFFFF} Portão:[980] | Jetpack:[370] | Mascara Demon:[11704] | Cajado skull:[3524] | Luz Vermelha:[19124] | Luva esquerda:[19555]\n");
		strcat(Strings, "{DA81F5}•{FFFFFF} Luva direita:[19556] | RC Bandit:[441] | RC Tiger:[564] | RC Raider:[465] | RC Baron:[464] | Veiculo(Hotring):[494]\n");
		strcat(Strings, "{ccff30}•{FFFFFF} MedKit:[11738] | Remedio:[1241] | Coracao:[1240] | Consolo:[321] | Casal:[1314] | Guitarra:[19319] | Aviaozinho:[2469]\n");
		strcat(Strings, "{ccff30}•{FFFFFF} Caldeirao:[19527] | Explosivo:[1654] | NRG-500:[522] | Infernus:[411] | Sultan:[560] | Cheetah:[415] | Monster de Inventário:[557] Turismo:[451]\n\n");
		strcat(Strings, "{FFA201}» Para dar algum item Use: /daritem [ID Player] [ITEM]");
		ShowPlayerDialog(playerid, 99, DIALOG_STYLE_MSGBOX, "ID DOS ITENS", Strings, "Fechar", "");
		return true;
		}
	CMD:infocaixas(playerid)
	{
	    MEGAString[0] = EOS;
		strcat(MEGAString, "{00BFFF}Como pegar as caixas surpresa?\n");
		strcat(MEGAString, "           {FFFFFF}Use o comando: '/gps' clique em Locais importantes depois em 'Presentes'\n");
		strcat(MEGAString, "           {00BFFF}OBSERVAÇÃO:{FFFFFF} Você receberá uma caixa surpresa a cada PayDay(Pagamento) de hora\n\n");
		strcat(MEGAString, "{00BFFF}Como funciona?\n");
		strcat(MEGAString, "           {FFFFFF}sistema aleatório, basta apertar ENTER e pegar uma caixa na SORTE!\n\n");
		strcat(MEGAString, "{00FF00}CAIXAS DISPONÍVEIS:\n");
		strcat(MEGAString, "{FFFFFF}» Caixa Surpresa {F78181}Pequena{FFFFFF} - Dinheiro & Respeito.\n");
		strcat(MEGAString, "{FFFFFF}» Caixa Surpresa {5FB404}Média{FFFFFF} - Dinheiro & Respeito.\n");
		strcat(MEGAString, "{FFFFFF}» Caixa Surpresa {FACC2E}Grande{FFFFFF} - Dinheiro, Respeito, Maça & Leite.\n");
		strcat(MEGAString, "{FFFFFF}» Caixa Surpresa {FBED2D}Gigante{FFFFFF} - Dinheiro, Respeito, Maça & Leite, Item.\n\n");
		strcat(MEGAString, "{FFFFFF}» Caixa Surpresa {FF5A00}Extreme\n");
		strcat(MEGAString, "{FFFFFF}Dinheiro, Respeito, Maça, Leite, Armas (...)\n");
		strcat(MEGAString, "{FFFFFF}Probabilidade de vir: Jetpack, Portão\n");
		strcat(MEGAString, "{FACC2E}EXTRA:{FFFFFF} Cash (0 á 500)\n");
		strcat(MEGAString, "{FACC2E}Acessórios:{FFFFFF} Ursinho, Prancha, Laser Aleatório...\n");
		strcat(MEGAString, "{FFA201}Monster | Probabilidade de vir na Extreme: (1/15)\n\n");
		strcat(MEGAString, "{FFFFFF}» Caixa Surpresa {2E37F3}Reveillon\n");
		strcat(MEGAString, "{FFFFFF}Dinheiro, Respeito, Pão, Suco, Armas (...)\n");
		strcat(MEGAString, "{FFFFFF}Probabilidade de vir: Jetpack, Portão\n");
		strcat(MEGAString, "{FACC2E}EXTRA:{FFFFFF} Cash (0 á 700)\n");
		strcat(MEGAString, "{FACC2E}EXTRA:{FFFFFF} Dias Sócio Gold (0 á 10)\n");
		strcat(MEGAString, "{FACC2E}Acessórios:{FFFFFF} Cavalo, Bota, Laser Aleatório...\n");
		strcat(MEGAString, "{FFA201}Monster / Turismo| Probabilidade de vir: (1/15)\n\n");
		strcat(MEGAString, "{FF0000}CAIXAS INDISPONÍVEIS:\n");
		strcat(MEGAString, "{FFFFFF}• Caixa Surpresa {DBA901}Páscoa.\n");
		strcat(MEGAString, "{FFFFFF}• Caixa Surpresa {FA58F4}Love.\n");
		strcat(MEGAString, "{FFFFFF}• Caixa Surpresa {61210B}Araia.\n");
		strcat(MEGAString, "{FFFFFF}• Caixa Surpresa {DA81F5}Sáfira.\n");
		strcat(MEGAString, "{FFFFFF}• Caixa Surpresa {39DEEE}Diamante.\n\n");
		ShowPlayerDialog(playerid, 99, DIALOG_STYLE_MSGBOX, "Conteúdo das Caixas", MEGAString, "Fechar", "");
		return true;
	}
	CMD:mekitkjms(playerid){
    GetPlayerPos(playerid, MedKitDados[playerid][PosPlayerX],MedKitDados[playerid][PosPlayerY], MedKitDados[playerid][PosPlayerZ]);
    MedKitDados[playerid][MedKits] = CreatePickup(19606,1, MedKitDados[playerid][PosPlayerX], MedKitDados[playerid][PosPlayerY], MedKitDados[playerid][PosPlayerZ]-1.5), MedKitDados[playerid][MedKitObject] = CreateObject(11736, MedKitDados[playerid][PosPlayerX], MedKitDados[playerid][PosPlayerY], MedKitDados[playerid][PosPlayerZ]-1, 0.0, 0.0, 0.0);
    MedKitDados[playerid][VidaMedKit] = 10;
    PlayerPlaySound(playerid, 32000, 0.0, 0.0, 0.0), MedKitDados[playerid][MedPlayer] = true;
    SendClientMessage(playerid, BRANCO_COR, "* Você usou um {00FFFF}MedKit{FFFFFF} de chao, fique em cima dele para ganhar vida/colete !");
    return 1;
}
DestruirMedKit(playerid)
{
    DestroyPickup(MedKitDados[playerid][MedKits]);
    DestroyObject(MedKitDados[playerid][MedKitObject]);
    MedKitDados[playerid][MedPlayer] = false;
    return 1;
}
	CMD:avadm(playerid, params[])
    {
        if(PlayerInfo[playerid][pAdmin] > 0)
        {
        ShowPlayerDialog(playerid, 9948, DIALOG_STYLE_LIST, "Avisos Brasil Paradise City", "{0FFFFF}» {FFFFFF}Anunciar Ajuda/Assistência\n{0FFFFF}» {FFFFFF}Anunciar Ant RPG\n{0FFFFF}» {FFFFFF}Anunciar TS3\n{0FFFFF}» {FFFFFF}Anunciar Duvida\n{0FFFFF}» {FFFFFF}Anunciar Atos Ant-RPG\n{0FFFFF}» {FFFFFF}Anunciar GMX\n{0FFFFF}» {FFFFFF}Anunciar Reportar Xiter\n{0FFFFF}» {FFFFFF}Anunciar Fórum", "Avisar","Cancelar");
        }
        else
        {
        SendClientMessage(playerid, COLOR_GREY, "   Você não é um Administrador!");
        }
        return true;
    }
	CMD:world(playerid)
	{
	    new Str[74];
	    format(Str, sizeof Str, "Current Virtual World: %d", GetPlayerVirtualWorld(playerid));
	    SendClientMessage(playerid, 0xACCBF1FF, Str);
	    return true;
	}
	CMD:andar(playerid, params[])
	{
	    if(!gPlayerLogged[playerid])return true;
	    MEGAString[0] = EOS;

		strcat(MEGAString,
		"Andar: Civil\n\
		Andar: Gang 1\n\
		Andar: Gang 2\n\
		Andar: Velho\n\
		Andar: Velho Gordo\n\
		Andar: Gordo\n\
		Andar: Mulher Normal\n\
		Andar: Mulher Busy\n\
		Andar: Mulher Prostituta\n\
		Andar: Mulher Sexy\n\
		Andar: Embreagado\n\
		Andar: Wuzi Mu\n\
		Andar: Silencioso\n\
		Andar: Shop\n\
		Corrida: Mulher 1\n\
		Corrida: Homem 1\n\
		Corrida: Civil\n\
		Corrida: Gordo\n\
		Corrida: Velho Gordo\n\
		Corrida: Gangster\n\
		Corrida: Velho\n\
		Corrida: Wuzi Mu\n\
		Corrida: Policial\n\
		Corrida: Mulher 2\n\
		Corrida: Mulher 3\n\
		Corrida: Mulher Sexy");

		ShowPlayerDialog(playerid, 4609, DIALOG_STYLE_LIST, "Estilos de Andar",MEGAString, #Selecionar, #Sair);
		return true;
	}
	CMD:aa(playerid, params[])
	{
	if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
	    MEGAString[0]=EOS;

	    if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
	    {
			strcat(MEGAString, "[1/Temp.] /punirnoob /bloquearn /bloquearan /bloqueararmas /tv /tapa /cascudo /par /vercarteira /calar /kick /ir /trazer /respawn /agendarcadeia /orelhagrande /flip \n");
			strcat(MEGAString, "[1/Temp.] /av /avadm /descongelar /infoarmas /ban /bantemp /voar /voar2 /voar3 /rarmas /m(egafone) /contagem \n");
			strcat(MEGAString, "[1/Temp.] /cnn /cnn2 /bnn /teleportes /cadeia /respawncarros(normal) /spawncarros(só em caso de xiter) /rpv /desbugarplayer\n");
            strcat(MEGAString, "[1/Temp.] /aviso /bloquearan /bloqueararmas /retiraravisos /hospitalizar /infoadmins /desligarah /reclife /togparticular /fly /rbqall /togocupado\n\n");
		}
	    if(PlayerInfo[playerid][pAdmin] >= 2)
	    {
			strcat(MEGAString, "[2] /settime /sethora /ip /desbugarplayer /rt /lt /finalizarguerra /abastecerid /repararid /infobanconta /infobanip\n\n");
		}
	    if(PlayerInfo[playerid][pAdmin] >= 3)
	    {
			strcat(MEGAString, "[3] /respawnid /destruirid /entrarcarro /blindar /fixveh /setskin\n\n");
		}
	    if(PlayerInfo[playerid][pAdmin] >= 4)
	    {
		  	strcat(MEGAString, "[4] /marcar /irmarca /vircarro  /darfome /darsede /ircarro /trazerumcarro /retirararmas\n");
		   	strcat(MEGAString, "[4] /darsaude /darcolete /dararma /forceskin /iniciarloteria /logout\n\n");
		}
		if(PlayerInfo[playerid][pAdmin] >= 5)
	    {
	        strcat(MEGAString, "[5] /lider /darlider /limparlider /verul /veh /matoumorreu /localizador\n\n");
		}
	    if(PlayerInfo[playerid][pAdmin] >= 1337)
	    {
	        strcat(MEGAString, "[MASTER] /criarhelper /limparhelper /infohelpers\n");
			strcat(MEGAString, "[MASTER] /guerranavio /infovip /deletarconta /clima\n");
			strcat(MEGAString, "[MASTER] /cnn /ircasa /iremp /irsemp /online /guerramorro || /destruircaixa /destruirportao ( Apenas em Locais indevidos)\n");
			strcat(MEGAString, "[MASTER] /desbanip /criaradmin /ats(autorizacao troca senha) /logoutpl /eventos\n");
			strcat(MEGAString, "[MASTER] /am /amudarnick /retirarbeneficios /antiafk\n");
			strcat(MEGAString, "[MASTER] /plus(Encomendas) /pegaratividade /autorizarn /criaradmintemp /limparadmintemp\n\n");
		}
	    if(PlayerInfo[playerid][pAdmin] >= 3000)
	    {
	        strcat(MEGAString, "[DONO] /avendersempresa /avendercasa /dargrana /setgrana /descricao\n");
	        strcat(MEGAString, "[DONO] /criaradmin /limparadmin /editar /avenderempresa /seditar\n");
	        strcat(MEGAString, "[DONO] /desbanconta /admvcarro /itens /daritem\n");
			strcat(MEGAString, "[DONO] /retirarvip /meucheater /desligarserver /setemprego\n");
            strcat(MEGAString, "[Dono] /setcash /setarmat /setardrogas /payday /ativarsenha /menucheater /trabalharid (Para liberar ADM)\n\n");
		}
        if(PlayerInfo[playerid][pAdmin] >= 3001)
	    {
	        strcat(MEGAString, "[Dono Geral] /avendersempresa /avendercasa /corona (hospitalizar) /dargrana /setgrana /descricao\n");
	        strcat(MEGAString, "[Dono Geral] /vamoceu /criaradmin /limparadmin /kboom /kboom2 /editar /avenderempresa /seditar\n");
	        strcat(MEGAString, "[Dono Geral] /desbanconta /admvcarro /tapreso /tasolto /itens /daritem\n");
			strcat(MEGAString, "[Dono Geral] /retirarvip /lompoc /meucheater /desligarserver /setemprego\n");
            strcat(MEGAString, "[Dono Geral] /setcash /setarmat /setardrogas /payday /ativarsenha /menucheater /trabalharid (Para liberar ADM)\n\n");
		}
	    if(PlayerInfo[playerid][pAdmin] >= 5000)
	    {
			strcat(MEGAString, "[Fundador] /limparadmin /destruirgz /criargz /lompoc (prenderADM) /corona (hospitalizar) /salvargz /ativarorgvip /logoutall\n");
			strcat(MEGAString, "[Fundador] /titulosfamilias /menucheater /troll /tapreso /tasolto /resettr /desbugarcam\n");
            strcat(MEGAString, "[Fundador] /agendarcash /desligarserver\n\n");

		}
	    if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
	    {
			strcat(MEGAString, "{33AA33}COMANDOS IMPORTANTES: /checksobeit /macros /aimbots /checkrt /checkbots /matoumorreu\n");
		}
		ShowPlayerDialog(playerid, 8724, DIALOG_STYLE_MSGBOX, "Comandos Admin", MEGAString, "OK","");
		return true;
	}
	CMD:eventos(playerid, params[])
	{
	    if(PlayerInfo[playerid][pAdmin] >= 1)
	    {
     	    SendClientMessage(playerid, COLOR_GRAD1, "Corrida: /criarcorrida /addstartpoint /addracepoint /iniciarcorrida /destruircorrida /salvarcorrida /largada\n\n");
            SendClientMessage(playerid, COLOR_GRAD1, "FallOut: /criarfall /iniciarfall /destruirfall");
            SendClientMessage(playerid, COLOR_GRAD1, "--HAY--: /iniciarhay /destruirhay");
            SendClientMessage(playerid, COLOR_GRAD1, "-Arena-: /arenax1 /arenax1 /sairarena");
            SendClientMessage(playerid, COLOR_GRAD1, "-Criar-: /criarevento");
            SendClientMessage(playerid, COLOR_GRAD1, "-NOVOS EVENTOS-: /trazertodosx1 /zumbi03");
		}
		return true;
	}
	CMD:irrancho(playerid)
	{
	    if(PlayerInfo[playerid][pEmprego] == 21)
   		{
	    	if(IsPlayerConnected(playerid))
		   	{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Para trabalhar vá ate a area marcada no mapa !");
				SetPlayerCheckpoint(playerid,1918.7303,173.7474,37.2722,5.0);
		 	}
		}
		else
			return SendClientMessage(playerid,COLOR_GREY,"Você não é Agricultor!");
		return 1;
	}
	CMD:help(playerid)return ForT:ajuda(playerid);
	CMD:ajuda(playerid)
	{
        ShowPlayerDialog(playerid, 10, DIALOG_STYLE_LIST, "{FFFFFF}»{00C2EC} Ajuda do Servidor", "{FFFFFF}»{00C2EC} Ajuda{FFFFFF} Novato\n{FFFFFF}»{00C2EC} Ajuda{FFFFFF} Empresa\n{FFFFFF}»{00C2EC} Ajuda{FFFFFF} Casa\n{FFFFFF}»{00C2EC} Ajuda{FFFFFF} Aluguel\n{FFFFFF}»{00C2EC} Ajuda{FFFFFF} Celular\n{FFFFFF}»{00C2EC} Ajuda{FFFFFF} Lider\n{FFFFFF}»{00C2EC} Ajuda{FFFFFF} Emprego\n{FFFFFF}»{00C2EC} Ajuda{FFFFFF} Cozinha\n{FFFFFF}»{00C2EC} Ajuda{FFFFFF} Casamento\n{FFFFFF}»{00C2EC} Ajuda{FFFFFF} Discord\n{FFFFFF}»{00C2EC} Servidor{FFFFFF} Creditos\n{FFFFFF}»{00C2EC} Ajuda{FFFFFF} VIP/Sócio\n{FFFFFF}»{00C2EC} Conta{FFFFFF} VIP\n{FFFFFF}»{00C2EC} Ajuda{FFFFFF} Veículo\n{FFFFFF}»{00C2EC} Ajuda{FFFFFF} Ouros\n{FFFFFF}»{00C2EC} Ajuda{FFFFFF} Fazenda\n{FFFFFF}»{00C2EC} Ajuda{FFFFFF} Peixe\n{FFFFFF}»{00C2EC} Ajuda{FFFFFF} Organização\n{FFFFFF}»{00C2EC} Ajuda{FFFFFF} Documentos\n{FFFFFF}»{00C2EC} Ajuda{FFFFFF} Rádio Portátil\n{FFFFFF}»{00C2EC} Ajuda{FFFFFF} Portão", "Selecionar", "Cancelar");
        return 1;
	}
		CMD:inforespawn(playerid)
	{

		MEGAString[0] = EOS;

		strcat(MEGAString, "{FF6600}O RESPAWN ACONTECE AUTOMATICAMENTE NOS HORARIOS:\n\n");
		strcat(MEGAString, "{FFFFFF}» 10:30:00\n");
        strcat(MEGAString, "» 12:30:00\n");
        strcat(MEGAString, "» 14:30:00\n");
		strcat(MEGAString, "» 16:30:00\n");
		strcat(MEGAString, "» 18:30:00\n");
        strcat(MEGAString, "» 20:30:00\n");
        strcat(MEGAString, "» 22:30:00\n");
        strcat(MEGAString, "» 00:30:00\n");
		strcat(MEGAString, "» 02:30:00\n");
		strcat(MEGAString, "» 04:30:00\n");

        ShowPlayerDialog(playerid, 4921, DIALOG_STYLE_MSGBOX, "RESPAWN AUTOMATICO", MEGAString, "Informado","");
		return 1;
	}
	CMD:radares(playerid)
	{
		if(GetPlayerOrg(playerid) != 33)return SendClientMessage(playerid, COLOR_GRAD1, "Você não é um policial rodoviário.");
		MEGAString[0] = EOS;
	    new gstring[15];
		for(new ii = 0; ii < 3; ii++)
     	{
     	    format(gstring, sizeof gstring, "Radar: %d\n", ii);
     	    strcat(MEGAString, gstring);
     	}
     	ShowPlayerDialog(playerid,4748, DIALOG_STYLE_LIST, "Localizar Radar", MEGAString, "Localizar", "Sair");
	    return true;
	}

	CMD:ajustarradar(playerid, params[])
	{
	    new totalvel;
	    if(sscanf(params, "d", totalvel))return SendClientMessage(playerid, COLOR_GRAD1, "USE: /ajustarradar [Máxima velocidade] (50 - 190)");
		if(GetPlayerOrg(playerid) != 33)return SendClientMessage(playerid, COLOR_GRAD1, "Você não é um policial rodoviário.");
		if(totalvel < 70 || totalvel > 190)return SendClientMessage(playerid, COLOR_GRAD1, "A máxima velocidade deve ficar entre 70 - 190 km/h");
	    new string[70];
		for(new ii = 0; ii < 45; ii++)
     	{
      		if(IsPlayerInRangeOfPoint(playerid, 5.0, RadarInfo[ii][R_X],RadarInfo[ii][R_Y],RadarInfo[ii][R_Z]))
        	{
	            format(string, sizeof string, "A máxima velocidade deste radar foi modificada para: %dkm", totalvel);
	            SendClientMessage(playerid, COLOR_LIGHTRED, string);
	            RadarInfo[ii][R_Velo] = totalvel;
	            return true;
	        }
     	}
	    return true;
	}
//Portoes hq adm
	CMD:pbanco(playerid, params[])
	{
         if(IsACop(playerid))
		 {
              if(IsPlayerInRangeOfPoint(playerid,4.0, 2144.2, 1627.1, 994.29999))
              {
                   MoveDynamicObject(portabanco,2144.2, 1627.1, 997.29999,3.0);
                   SetTimerEx("fecharbanco", 5000, false, "i", Gate);
              }
  		 }
  		 return 1;
  	}
  	CMD:pnavio(playerid, params[])
	{
         if(IsACop(playerid))
		{
		    if(PlayerToPoint(15.0, playerid, -1422, 494.5, 4.8))
		    {
		        MoveObject(portanavio, -1422, 494.5, 8.4,2);
				SetTimer("fecharnavio", 5000, false);
		    }
		    if(PlayerToPoint(5.0, playerid, -1383, 1494.1, 2))
		    {
                MoveObject(portanavio2, -1383, 1494.1, 4.6,2);
				SetTimer("fecharnavio2", 5000, false);
		    }
  		}
  		return 1;
	}
//----------------------------------{Portoes DP}--------------------------------------------
	CMD:pp(playerid, params[])
	{
		if ((IsACop(playerid)) && PlayerToPoint(15.0, playerid, 247.005905 , 72.448440 , 1003.640625) || PlayerInfo[playerid][pEmprego] == 2)
		{ //GATEInteriorCela
			MoveDynamicObject( PDDOORa, 247.005905 , 72.448440 , 1006.912902,3,0.0,0.0,1260.0);
			GameTextForPlayer(playerid, "~w~Porta das Celas ~n~~b~Aberto", 4000, 3);
			SetTimer("GaragemDpClosed", 4000, false);
			SendClientMessage(playerid, COLOR_DBLUE, "Portão aberto, ele se fechará em 5 segundos!");
		}
  		return true;
	}
	CMD:pp7(playerid, params[])
	{
		if (PlayerToPoint(1, playerid,245.3457,73.8463,1003.6406)) // /pp livre
		{
			MoveDynamicObject( PDDOORa, 247.005905 , 72.448440 , 1006.912902,3);
			GameTextForPlayer(playerid, "~w~Portao ~n~~b~Aberto", 4000, 3);
			SetTimer("GaragemDpClosed", 5000, false);
		}
	}
//----------------------------------{Portoes DP2}----------------------------------------
	CMD:pr(playerid, params[])
    {
		if ((IsACop(playerid)) && PlayerToPoint(15.0, playerid, 250.774871 , 60.822799 , 1003.640625))
		{ //GATEGaragem
			MoveDynamicObject( PDDOORb, 250.774871 , 60.822799 , 1006.862670,3,0.0,0.0,5130.0);
			GameTextForPlayer(playerid, "~w~Porta da Recepcao ~n~~b~Aberto", 5000, 3);
			SetTimer("GaragemDpClosed2", 5000, false);
			SendClientMessage(playerid, COLOR_DBLUE, "Portão aberto, ele se fechará em 5 segundos!");
		}
  		return true;
	}
//----------------------------------{Portoes DP3}----------------------------------------
	CMD:pv(playerid, params[])
	{
		if ((IsACop(playerid)) && PlayerToPoint(15.0, playerid, 248.142105 , 78.125961 , 1003.640625))
		{ //GATEGaragem
			MoveDynamicObject( PDDOORc, 248.142105 , 78.125961 , 1007.248718,3,0.0,0.0,12690.0);
			GameTextForPlayer(playerid, "~w~Porta do Vestiario ~n~~b~Aberto", 5000, 3);
			SetTimer("pd1", 5000, false);
			SendClientMessage(playerid, COLOR_DBLUE, "Portão aberto, ele se fechará em 5 segundos!");
		}
  		return true;
	}
//----------------------------------{Portoes LS}----------------------------------------
	CMD:pg2(playerid, params[])
	{
		if ((IsACop(playerid)) && PlayerToPoint(15.0, playerid, 1546.8681640625, -1627.3585205078, 15.156204223633))
		{ //GATEGaragem
			MoveDynamicObject( PDPMLS, 1546.86816, -1627.35852, 7.15620,3.0,0.0,0.0,90.0);
			GameTextForPlayer(playerid, "~w~Garagem Externa ~n~~b~Aberta", 4200, 3);
			SetTimer("pd2", 4200, false);
			SendClientMessage(playerid, COLOR_DBLUE, "Portão aberto, ele se fechará em 5 segundos!");
			ObjectMovePlayer[playerid] = PDPMLS;
			if(IsDynamicObjectMoving(PDPMLS)) PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
		}
	  	return true;
	}
//----------------------------------{Portoes LS2}----------------------------------------
	CMD:pg1(playerid, params[])
	{
		if ((IsACop(playerid)) && PlayerToPoint(15.0, playerid, 1588.555786, -1637.811157, 15.911808))
		{ //GATEGaragem
			MoveDynamicObject( PDGARAGE, 1588.195,-1637.969, 20.086790,3,0.0,0.0,0.0);
			GameTextForPlayer(playerid, "~w~Garagem Interna ~n~~b~Aberta", 5000, 3);
			SetTimer("pd3", 5000, false);
			SendClientMessage(playerid, COLOR_DBLUE, "Portão aberto, ele se fechará em 5 segundos!");
			ObjectMovePlayer[playerid] = PDGARAGE;
			if(IsDynamicObjectMoving(PDGARAGE)) PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
		}
	  	return true;
	}

//----------------------------------{Portoes BOPE}----------------------------------------
	CMD:pbope(playerid, params[])
	{
		if ((IsACop(playerid)) && PlayerToPoint(15.0, playerid, 283.095062, -1542.899170, 25.510294) || PlayerToPoint(15.0, playerid, 321.832672, -1488.615112, 25.527353) && PlayerToPoint(15.0, playerid, 321.832672, -1488.615112, 25.527353))
		{ //GATEGaragem
			MoveDynamicObject( gt3GATE, 283.095062, -1542.899170, 33.385311,3,0.0, 0.0, 326.2500);
			MoveDynamicObject( gt3GATE3, 321.832672, -1488.615112, 33.777353,3,0.0, 0.0, 323.6717);
			GameTextForPlayer(playerid, "~w~Portao BOPE ~n~~b~Aberto", 5000, 3);
			SendClientMessage(playerid, COLOR_DBLUE, "Portão aberto, ele se fechará em 5 segundos!");
			SetTimer("gt3GATE2", 5000, false);
			ObjectMovePlayer[playerid] = gt3GATE3;
			if(IsDynamicObjectMoving(gt3GATE3)) PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
		}
	  	return true;
	}
    CMD:pdpsf2(playerid, params[])
	{
		if((IsACop(playerid)) && PlayerToPoint(20.0, playerid, -1571.4054,661.2745,7.1875))
		{ //GATEGaragem
			MoveDynamicObject( PortaoPMSF, -1572, 672.90002441406, 6.6999998092651,3,0.0, 0.0, 90.00000);
			SetTimer("PTPMSF", 5000, false);
			SendClientMessage(playerid, COLOR_DBLUE, "Portão aberto, ele se fechará em 5 segundos!");
		}
	  	return true;
	}
	CMD:ppf(playerid, params[])
	{
		if ((IsACop(playerid)) && PlayerToPoint(15.0, playerid, 938.3903,-1027.6632,31.8984))
		{ //GATEGaragem
			MoveDynamicObject(PortaoPF1,950.0923,-1027.2639,31.8984,3);
			GameTextForPlayer(playerid, "~g~Aberto", 5000, 3);
			SetTimer("PoliciaFederalClosed", 5000, false);
			SendClientMessage(playerid, COLOR_DBLUE, "Portão aberto, ele se fechará em 5 segundos!");
			ObjectMovePlayer[playerid] = PortaoPF1;
			if(IsDynamicObjectMoving(PortaoPF1)) PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
		}
  		return 1;
	}
	CMD:pro(playerid, params[])
	{
		if ((IsACop(playerid)) && PlayerToPoint(15.0, playerid, 1810.06274, -1750.33496, 15.31620))
		{ //GATEGaragem
			MoveDynamicObject(PortaoPRO1,1809.9978,-1750.3315,23.5427,3);
			GameTextForPlayer(playerid, "~g~Aberto", 5000, 3);
			SetTimer("ROTAAAAAClosed", 5000, false);
			SendClientMessage(playerid, COLOR_DBLUE, "Portão aberto, ele se fechará em 5 segundos!");
			ObjectMovePlayer[playerid] = PortaoPRO1;
			if(IsDynamicObjectMoving(PortaoPRO1)) PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
		}
  		return 1;
	}
	CMD:ppre(playerid)
	{
		if (GetPlayerOrg(playerid) == 7 && PlayerToPoint(2.0,playerid,368.39999, 160.5, 1026.59998) || PlayerToPoint(2.0, playerid, 369.29999, 164.2, 1026.30005))
		{
			SendClientMessage(playerid, TEAM_BALLAS_COLOR, "Você abriu a porta da prefeitura!");
    		MoveDynamicObject(portagov, 368.79999, 160.7, 1030.09998,3);
    		SetTimer(#Moveportagov, 5000, 0);
			SendClientMessage(playerid, TEAM_BALLAS_COLOR, "O Portão Fechará em 5 segundos.");
			ObjectMovePlayer[playerid] = portagov;
			if(IsDynamicObjectMoving(portagov)) PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
		}
  		return 1;
	}
	BPF::Moveportagov()
	{
	    foreach(Player, playerid)
		{
		    if(ObjectMovePlayer[playerid] == 0)
		    {
				PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
			}
		}
    	MoveDynamicObject(portagov,368.79999, 160.7, 1027.19995, 2);
    	return true;
	}
    CMD:pmayans(playerid)
	{
		if (GetPlayerOrg(playerid) == 24 && PlayerToPoint(25.0, playerid, 493.8057,-1547.1104,9.8590))
		{
		    MoveDynamicObject(PortaoMayans, 493.8057,-1547.1104,9.8590,3,0.0000,0.0000,210.6994);
		    SetTimer(#MovePortaoMayans, 5000, 0);
			GameTextForPlayer(playerid, "~g~Aberto", 5000, 3);
			SendClientMessage(playerid, TEAM_BALLAS_COLOR, "O Portão Fechará em 5 segundos.");
	    }
	    return true;
	}

	BPF::MovePortaoMayans()
	{
	    MoveDynamicObject(PortaoMayans,493.8057, -1547.1104, 19.8590,3,0.0000, 0.0000, 210.6994);
	    return true;
	}
	CMD:pdetran(playerid)
	{
		if (GetPlayerOrg(playerid) == 34 && PlayerToPoint(25.0, playerid, 2274.3452,-126.6353,26.3123))
		{
		    MoveDynamicObject(portaomecls, 2277.3345,-144.1187,26.3123,256.3389);
		    SetTimer(#MovePortaoMec, 5000, 0);
			GameTextForPlayer(playerid, "~g~Aberto", 5000, 3);
			SendClientMessage(playerid, COLOR_DBLUE, "Portão aberto, ele se fechará em 5 segundos!");
			ObjectMovePlayer[playerid] = portaomecls;
			if(IsDynamicObjectMoving(portaomecls)) PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
	    }
	    return true;
	}

	BPF::MovePortaoMec()
	{
	    MoveDynamicObject(portaomecls,2277.24097,-126.57865,27.77959, 2);
	    return true;
	}
	CMD:ppc2(playerid, params[])
	{
		if ((IsACop(playerid)) && PlayerToPoint(15.0, playerid, 920.6636,-1221.9191,16.9766))
		{
		    MoveDynamicObject( PortaoPC, 923.6992,-1236.6648,21.3379,3);
			MoveDynamicObject( PortaoPC3, 923.0747,-1205.6384,21.3828,3);
		    SetTimer(#MovePortaoPC, 5000, 0);
		    GameTextForPlayer(playerid, "~g~Portao Aberto", 5000, 3);
		    SendClientMessage(playerid, COLOR_DBLUE, "Portão aberto, ele se fechará em 5 segundos!");
		    ObjectMovePlayer[playerid] = PortaoPC3;
		    ObjectMovePlayer[playerid] = PortaoPC;
			if(IsDynamicObjectMoving(PortaoPC)) PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
		}
	    return true;
	}
	BPF::MovePortaoPC()
	{
	    foreach(Player, playerid)
		{
		    if(ObjectMovePlayer[playerid] == 0)
		    {
				PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
			}
		}
	    MoveDynamicObject(PortaoPC,924.12072754,-1226.29992676,19.55584717, 2);
	    MoveDynamicObject(PortaoPC3,923.64532471,-1217.44934082,19.52149582, 2);
	    return true;
	}
	CMD:ppc(playerid, params[])
	{
		if ((IsACop(playerid)) && PlayerToPoint(15.0, playerid, 921.7433,-1209.4417,16.9766))
		{
		    MoveDynamicObject(pportaozin, 922.3876,-1195.3900,16.9766,2);
		    SetTimer(#Movepportaozin, 5000, 0);
		    GameTextForPlayer(playerid, "~g~Portao Aberto", 5000, 3);
		    SendClientMessage(playerid, COLOR_DBLUE, "Portão aberto, ele se fechará em 5 segundos!");
		    ObjectMovePlayer[playerid] = pportaozin;
			if(IsDynamicObjectMoving(pportaozin)) PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
		}
	    return true;
	}
	BPF::Movepportaozin()
	{
	    foreach(Player, playerid)
		{
		    if(ObjectMovePlayer[playerid] == 0)
		    {
				PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
			}
		}
	    MoveDynamicObject(pportaozin, 922.90002441406, -1205.5999755859, 17.39999961853,3);
	    return true;
	}
//----------------------------------{Exercito}----------------------------------------
	CMD:pgn(playerid, params[])
	{
		if ((IsACop(playerid)) && PlayerToPoint(15.0, playerid, -1531.3978271484, 482.25979614258, 8.9530792236328))
		{ //GATEGaragem
			MoveDynamicObject(PDEx, -1531.3978271484, 482.25979614258, 13.9530792236328,3,0.0,0.0,360);
			GameTextForPlayer(playerid, "~w~Portao Exercito ~n~~b~Aberto", 5000, 3);
			SetTimer("PDEx2", 5000, false);
			SendClientMessage(playerid, COLOR_DBLUE, "Portão aberto, ele se fechará em 5 segundos!");
			ObjectMovePlayer[playerid] = PDEx;
			if(IsDynamicObjectMoving(PDEx)) PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
		}
	  	return true;
	}
	CMD:pgn2(playerid, params[])
	{
		if ((IsACop(playerid)) && PlayerToPoint(40.0, playerid, -1468.76184, 501.28259, 11.96320))
		{ //GATEGaragem
			MoveDynamicObject( PDPE3, -1468.76184, 501.28259, 11.96320,3.0,0.0,0.0,0.0);
			GameTextForPlayer(playerid, "~w~Gate ~n~~b~Aberto", 4200, 3);
			SetTimer("pdppe3", 10000, false);
			SendClientMessage(playerid, COLOR_DBLUE, "Gate Aberto, ele fechará em 10 segundos!");
			ObjectMovePlayer[playerid] = PDPE3;
			if(IsDynamicObjectMoving(PDPE3)) PlayerPlaySound(playerid, 6000, 0.0, 0.0, 0.0);
		}
	  	return true;
	}
    CMD:plate(playerid, params[])
	{
		if ((IsACop(playerid)) && PlayerToPoint(40.0, playerid, -1456.71191, 501.31519, 9.84300))
		{ //GATEGaragem
			MoveDynamicObject( PDPE, -1456.71191, 501.31519, 9.84300,3.0,0.0,0.0,0.0);
			GameTextForPlayer(playerid, "~w~Plataforma ~n~~b~Descida", 4200, 3);
			SetTimer("pdppe", 10000, false);
			SendClientMessage(playerid, COLOR_DBLUE, "Plataforma Descida, ela subirá em 10 segundos!");
			ObjectMovePlayer[playerid] = PDPE;
			if(IsDynamicObjectMoving(PDPE)) PlayerPlaySound(playerid, 6000, 0.0, 0.0, 0.0);
		}
	  	return true;
	}
	CMD:plate2(playerid, params[])
	{
		if ((IsACop(playerid)) && PlayerToPoint(40.0, playerid, -1414.45007, 516.45117, 16.67820))
		{ //GATEGaragem
			MoveDynamicObject( PDPE2, -1414.45007, 516.45117, 9.63820,3.0,0.0,0.0,0.0);
			GameTextForPlayer(playerid, "~w~Plataforma ~n~~b~Descida", 4200, 3);
			SetTimer("pdppe2", 10000, false);
			SendClientMessage(playerid, COLOR_DBLUE, "Plataforma Descida, ela subirá em 10 segundos!");
			ObjectMovePlayer[playerid] = PDPE2;
			if(IsDynamicObjectMoving(PDPE2)) PlayerPlaySound(playerid, 6000, 0.0, 0.0, 0.0);
		}
	  	return true;
	}
//----------------------------------{PortaoReporter}----------------------------------------
	CMD:preporter(playerid, params[])
	{
		if ((IsAJornal(playerid)) && PlayerToPoint(15.0, playerid, 777.80017089844, -1330.2664794922, 14.200000762939))
		{ //PortaoAdmin
			MoveDynamicObject( PortaoReporter, 777.80017089844, -1330.2664794922, 20.200000762939,3,0.0,0.0,0.0);
			GameTextForPlayer(playerid, "~w~Portao Reporter ~n~~b~Aberto", 5000, 3);
			SetTimer("PortaoReporter2", 5000, false);
			SendClientMessage(playerid, COLOR_DBLUE, "Portão aberto, ele se fechará em 5 segundos!");
			ObjectMovePlayer[playerid] = PortaoReporter;
			if(IsDynamicObjectMoving(PortaoReporter)) PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
		}
	  	return true;
	}

//----------------------------------{Portao Policia Federal}----------------------------------------

	CMD:ajudahelper(playerid, params[])
	{
			if(PlayerInfo[playerid][pHelper] >= 1)
			{
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
				SendClientMessage(playerid, COLOR_WHITE, "*** AJUDA PARA HELPERS *** comando somente para helpers");
				SendClientMessage(playerid, COLOR_GRAD1, "*** Nível 1 *** /h - chat para helpers | /ah - chat para helpers e admins | /avh - aviso de helpers /avajuda - Mensagem Automatica Helper");
				SendClientMessage(playerid, COLOR_GRAD1, "*** Nível 1 *** /helpajuda - entra em modo helper ou normal | /par - mensagens particulares | /hqhelper - ir para HQ helper");
				SendClientMessage(playerid, COLOR_GRAD1, "*** Nível 1 *** /desligarh - desliga o chat de helpers | /desligarah - desliga chat de helpers + admins");
				SendClientMessage(playerid, COLOR_GRAD1, "*** Nível 1 *** /meavalie - oferece a um player que ele te avalie, isto aumenta seu Nível de Helper");
				SendClientMessage(playerid, COLOR_GRAD1, "*** Nível 1 *** /ir - comando para o helper poder ir até os players");
				SendClientMessage(playerid, COLOR_GRAD1, "/punirnoob /bloquearn (Bloqueia mandar mensagens no Chat Noob) /bloquearan (Bloqueia o Player Mandar ANG)");
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			}
			return true;
	}
    CMD:destruirveiculos(playerid, params[])
	{
	        if(PlayerInfo[playerid][pAdmin] < 1337)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "	Você não pode usar este comando!");
			    return true;
			}
			new pode = 1;
			for(new i; i < MAX_VEHICLES; i++)
			{
			    foreach(Player, p)
			    {
			        if(i == VehicleMission[p])
			        {
			            pode = 0;
			        }
			        if(CarConce[i] == 1)
			        {
			            pode = 0;
			        }
			        if(TextoCarros[i] == 1)
					{
					 	pode = 1;
					}

			    }

			    if(pode == 1)
				{
				    if(hassiren[i]) {
	              		DestroyDynamicObject(siren[i]);
	                	hassiren[i] = 0;
	                 	siren[i] = -1;
            		}
			        TextoCarros[i] = 0;
					DestroyVehicle(i);
				}
			}
			for(new i = 0; i < sizeof(CreatedCars); i++)
			{
	    		CreatedCars[i] = 0;
			}
			CreatedCar = 0;
			//SendClientMessage(playerid, COLOR_GREY, "   Todos os veículos criados foram destruídos!");
			new string[100];
			format(string, sizeof(string), "AdmCmd: O admin %s destruiu todos os carros criados no servidor.", NomePlayer(playerid));
            ABroadCast(0x33CCFFAA,string,1);
			return true;
	}
	CMD:habilidades(playerid)
	{
	    ShowPlayerDialog(playerid, menuskills, DIALOG_STYLE_LIST, "Habilidades",
		"1 - Detetive\n\
		 2 - Advogado\n\
		 3 - Profissional de Sexo\n\
		 4 - Vendedor de Drogas\n\
		 5 - Ladrão de Carros\n\
		 6 - Repórter\n\
		 7 - Mecânico", "Selecionar", "Sair");

		return true;
	}

	CMD:darlicencas(playerid, params[])
	{
	        if(PlayerInfo[playerid][pAdmin] >= 5000)
	        {
          		if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 3000)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo Admin USE: /trabalhar");
					return true;
				}
				if(sscanf(params, "u", giveplayerid))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "USE: /darlicencas [ID do Player]");
				    return true;
				}
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
                	    new string[128];
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "* Você deu todas as licenças para %s.",giveplayer);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
				        {
				        	format(string, sizeof(string), "* Admin MOLE lhe deu todas as licenças.");
						}
				        else
				        {
				        	format(string, sizeof(string), "* Admin %s lhe deu todas as licenças.",PlayerName(playerid));
				        }
				        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        PlayerInfo[giveplayerid][pGunLic] = 1;
				        PlayerInfo[giveplayerid][pBoatLic] = 1;
				        PlayerInfo[giveplayerid][pFlyLic] = 1;
				        PlayerInfo[giveplayerid][pCarLic] = 1;
				        return true;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
				    return true;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GRAD1, "	Você não pode usar este comando!");
	            return true;
	        }
	    	return true;
	}
	CMD:rlicencas(playerid, params[])
	{
	        if(PlayerInfo[playerid][pAdmin] >= 1337)
	        {
          		if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 3000)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo Admin USE: /trabalhar");
					return true;
				}
				if(sscanf(params, "u", giveplayerid))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "USE: /rlicencas [ID do Player]");
				    return true;
				}
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
                	    new string[128];
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "* Você retirou todas as licenças de %s.",giveplayer);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
				        {
				        	format(string, sizeof(string), "* Admin MOLE retirou todas as suas licenças.");
						}
				        else
				        {
				        	format(string, sizeof(string), "* Admin %s retirou todas as suas licenças.",PlayerName(playerid));
				        }
				        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        PlayerInfo[giveplayerid][pGunLic] = 0;
				        PlayerInfo[giveplayerid][pBoatLic] = 0;
				        PlayerInfo[giveplayerid][pFlyLic] = 0;
				        PlayerInfo[giveplayerid][pCarLic] = 0;
				        return true;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
				    return true;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GRAD1, "	Você não pode usar este comando!");
	            return true;
	        }
	    	return true;
	}

	CMD:arrombar(playerid, params[])
	{
            if(IsACop(playerid) || IsAHit(playerid) || IsATriad(playerid))
            {
                for(new i = 0; i < sizeof(HouseInfo); i++)
				{
					if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
					{
					    SetPlayerInterior(playerid,HouseInfo[i][hInt]);
						SetPlayerPos(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
						SetPlayerVirtualWorld(playerid,HouseInfo[i][hWorld]);
						GameTextForPlayer(playerid, "~r~Arrombou a Porta", 5000, 1);
						PlayerInfo[playerid][pInt] = HouseInfo[i][hInt];
						PlayerInfo[playerid][pLocal] = i;
						HouseEntered[playerid] = i;
						PlayerPlaySound(playerid, 32400, 0.0, 0.0, 0.0);
					}
				}
				if(IsPlayerInTriad(playerid) && IsACop(playerid))
	    		{
	    		    GameTextForPlayer(playerid, "~r~Arrombou a Porta", 5000, 1);
	    		    PlayerPlaySound(playerid, 32400, 0.0, 0.0, 0.0);
	    		    SendClientMessage(playerid, COLOR_GRAD1, "Você entrou na Base Triad!");
	    		    SendFamilyMessage(22, COLOR_WHITE, "ATENÇÃO: Algum Policial Invadiu Seu Estacionamento e Os Alarmes Foram Disparados!!!");
	    		    if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 891.5677,5.4377,4991.5107);
	     				SetPlayerFacingAngle(playerid,90.0);
					}
					else
					{
						SetPlayerInterior(playerid,0);
						SetPlayerVirtualWorld(playerid,0);
						SetPlayerPos(playerid,891.5677,5.4377,4991.5107);
						SetPlayerFacingAngle(playerid,90.0);
					}
	    		}
	    		if(PlayerToPoint(15.0, playerid, 933.0598,78.7635,4989.5107))
	    		{
	    		    GameTextForPlayer(playerid, "~r~Arrombou a Saida", 5000, 1);
	    		    PlayerPlaySound(playerid, 32400, 0.0, 0.0, 0.0);
	    		    SendClientMessage(playerid, COLOR_GRAD1, "Você saiu da Base Triad!");
	    		    SendFamilyMessage(22, COLOR_WHITE, "ATENÇÃO: Algum Policial Saiu de Seu Estacionamento!!!");
					if (GetPlayerState(playerid) == 2)
					{
						new tmpcar = GetPlayerVehicleID(playerid);
						SetVehiclePos(tmpcar, 1447.9453,-2698.9082,13.5391);
						SetVehicleZAngle(tmpcar,90.0);
					}
					else
					{
						SetPlayerInterior(playerid,0);
						SetPlayerVirtualWorld(playerid,0);
						SetPlayerPos(playerid,1447.9453,-2698.9082,13.5391);
						SetPlayerFacingAngle(playerid,90.5748);
					}
				}
            }
            else
            {
                SendClientMessage(playerid, COLOR_GREY, "Você não é um Oficial ou um Hitman !");
			    return true;
            }
			return true;
	}
	CMD:mudarsexo(playerid, x_sexo[])
	{
	    if(PlayerToPoint(10, playerid,1969.2876,-371.6323,1093.7289))
		{
	        GetPlayerName(playerid, sendername, sizeof(sendername));
			if(isnull(x_sexo))
			{
				SendClientMessage(playerid, COLOR_WHITE, "|______________ Cartório ______________|");
				SendClientMessage(playerid, COLOR_WHITE, "|Use: /mudarsexo [Numero/sexo]");
				SendClientMessage(playerid, COLOR_GREY, "| 1 - Homem");
				SendClientMessage(playerid, COLOR_GREY, "| 2 - Mulher");
				return 1;
			}
			if(PlayerInfo[playerid][pLevel] < 20)
			{
				SendClientMessage(playerid,COLOR_GRAD2,"Você precisa ser Level 20+ para mudar o sexo.");
				return true;
			}
			if(GetPlayerMoney(playerid) < 50000)return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem R$50000 para mudar o Sexo.");
			new string[128];
			if(strcmp(x_sexo,"1",true) == 0 || strcmp(x_sexo,"homem",true) == 0)
			{
			 	GiveDinheiro(playerid,-5000);
				format(string, sizeof(string), "* Jogador %s mudou seu sexo para masculino.", sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				PlayerInfo[playerid][pSex] = 1;
				SetPlayerSkin(playerid, 23);
				SendClientMessage(playerid,COLOR_GREEN,"Você mudou seu sexo para masculino!");
		   	 	return 1;
			}
            if(strcmp(x_sexo,"2",true) == 0 || strcmp(x_sexo,"mulher",true) == 0)
			{
			    GiveDinheiro(playerid,-5000);
		   		format(string, sizeof(string), "* Jogador %s mudou seu sexo para feminino.", sendername);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
   				PlayerInfo[playerid][pSex] = 2;
   				SetPlayerSkin(playerid, 150);
				SendClientMessage(playerid,COLOR_GREEN,"Você trocou seu sexo para feminino!");
		   		return 1;
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está Dentro da igreja de LS.");
		}
		return true;
	}
	CMD:divorcio(playerid, params[])
	{
            if(!PlayerToPoint(10.0, playerid, 1959.3009,-373.1479,1093.7289))
	    	{
				SendClientMessage(playerid, COLOR_GREY, "Você não está dentro da Igreja de Los Santso !");
			    return true;
			}
			if(PlayerInfo[playerid][pMarried] == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não está casado !");
				return true;
	        }
			if(sscanf(params, "u", giveplayerid))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USE: /divorciar [ID do Player]");
				return true;
			}
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
            	    	new string[128];
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode se pedir em divórcio!"); return true; }
					    new dstring[MAX_PLAYER_NAME];
						new wstring[MAX_PLAYER_NAME];
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "%s", giveplayer);
						strmid(wstring, string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s", PlayerInfo[playerid][pMarriedTo]);
						strmid(dstring, string, 0, strlen(string), 255);
						if(strcmp(dstring ,wstring, true ) == 0 )
						{
						    format(string, sizeof(string), "* Você enviou papéis de divórcio para %s.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s pediu papéis de divórcio (Digite /aceitar divorcio) para aceitar.", PlayerName(playerid));
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        DivorceOffer[giveplayerid] = playerid;
					        return true;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "  Esse jogador não está casado com você !");
						    return true;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de você !");
						return true;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Esta Offline !");
			    return true;
			}
			return true;
	}

	CMD:casar(playerid, params[])
	{
	        if(!PlayerToPoint(10.0, playerid, 1964.0280,-369.0365,1093.7289))
	    	{
				SendClientMessage(playerid, COLOR_GREY, "Você não está dentro da Igreja de Los Santos !");
			    return true;
			}
	        if(GetPlayerMoney(playerid) < 100)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Para se Casar Custa R$100 !");
	            return true;
	        }
	        if(PlayerInfo[playerid][pMarried] > 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você já é casado !");
				return true;
	        }
			if(sscanf(params, "u", giveplayerid))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USE: /casar [ID do Player]");
				return true;
			}
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerInfo[giveplayerid][pMarried] > 0)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Este jogador(a) ja é casado(a) !");
			            return true;
			        }
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
                	    new string[128];
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode propor a si mesmo!"); return true; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Você propôs casamento a %s.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s Você foi pedida em casamento (Digite /aceitar casamento) para aceitar.", PlayerName(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        ProposeOffer[giveplayerid] = playerid;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   O Jogador não está perto de você !");
						return true;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   O jogador esta offline !");
			    return true;
			}
	    	return true;
	}

	CMD:padrinho(playerid, params[])
	{
	        if(!PlayerToPoint(10.0, playerid, 1964.0280,-369.0365,1093.7289))
	    	{
				SendClientMessage(playerid, COLOR_GREY, "Você não está dentro da igreja de Los Santos !");
			    return true;
			}
			if(sscanf(params, "u", giveplayerid))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USE: /padrinho [ID do Player]");
				return true;
			}
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
                	    new string[128];
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode ser marido e padrinho do casamento!"); return true; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Você chamou %s para ser seu padrinho de casamento.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s Você foi chamado para ser Padrinho do Casamento (Digite /aceitar padrinho) para aceitar.", PlayerName(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        MarryWitnessOffer[giveplayerid] = playerid;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   O Jogador não está perto de você !");
						return true;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   O Jogador esta offline !");
			    return true;
			}
	    	return true;
	}

//--------------------------------------Prefeito Comandos-------------------------------------------
static stock SacarOrgGrana(org,valor)
{
	new antes = CofreOrg[org][Dinheiro];
	CofreOrg[org][Dinheiro] = antes-valor;
	new arquivo[75];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"Dinheiro",CofreOrg[org][Dinheiro]);
	DOF2_SaveFile();
	return true;
}
static stock DepositarOrgGrana(org,valor)
{
	new antes = CofreOrg[org][Dinheiro];
	CofreOrg[org][Dinheiro] = antes+valor;
	new arquivo[75];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"Dinheiro",CofreOrg[org][Dinheiro]);
	DOF2_SaveFile();
	return true;
}


	CMD:setartaxa(playerid, params[])
    {
            new NovaTaxa;
            if(sscanf(params, "d", NovaTaxa))return SendClientMessage(playerid, COLOR_GRAD1, "USE: /setartaxa [Valor]");
	        if(PlayerInfo[playerid][pLider] != 7)
	        {
				SendClientMessage(playerid, COLOR_GREY, "Você não é o Prefeito !");
				return true;
	        }
	        if(NovaTaxa < 1 || NovaTaxa > 5000)
	        {
				SendClientMessage(playerid, COLOR_GREY, "   Valor entre 1 - 5000 !");
				return true;
	        }
	        GetPlayerName(playerid, sendername, sizeof(sendername));
			TaxValue = NovaTaxa;
			new string[128];
			format(string, sizeof string, "*O Prefeito %s setou a taxa de impostos por jogador para: R$%d.", sendername,TaxValue);
			SendClientMessageToAll(COLOR_LIGHTBLUE, string);
			return true;
	}
	CMD:bolsafamilia(playerid, params[])
	{
	        if(PlayerInfo[playerid][pLider] != 7)
	        {
				SendClientMessage(playerid, COLOR_GREY, "Você não é o Prefeito !");
				return true;
	        }
	        if(PlayerInfo[playerid][pJailed] >= 1)
	        {
	            SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando na cadeia");
	            return 1;
			}
			new dindin;
			if(sscanf(params, "ud", giveplayerid, dindin))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: /bolsafamilia [ID do Player] [quantidade]");
				return true;
			}
			if(admtrampando[giveplayerid] != 0 && PlayerInfo[giveplayerid][pAdmin] >= 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar para admins em trabalho!");
			    return true;
			}
			if(dindin < 1 || dindin > 100000)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Pagamento mínimo 1, máximo 100000 por vez");
			    return true;
			}
   			new string[128];
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerInfo[giveplayerid][pLocal] == 106)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando neste local");
						return true;
					}
					if (ProxDetectorS(5.0, playerid, giveplayerid))
					{
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						playerdinheiro = GetPlayerMoney(playerid);
						if (CofreOrg[7][Dinheiro] >= dindin)
						{
							SacarOrgGrana(7,dindin);
							PLV +=dindin;
							GiveDinheiro(giveplayerid, dindin);
							format(string, sizeof(string), "Você deu Bolsa Famlia %s(Para: %d), R$%d.", giveplayer,giveplayerid, dindin);
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							SendClientMessage(playerid, COLOR_GRAD1, string);
							format(string, sizeof(string), "Você recebeu R$%d de bolsa familia do prefeito %s(ID: %d).", dindin, sendername, playerid);
							SendClientMessage(giveplayerid, COLOR_GRAD1, string);
							format(string, sizeof(string), "%s deu grana para %s", sendername, giveplayer);
							BPFLogs("pay", string);
							//ABroadCast(COLOR_YELLOW,string,1);
							PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
							format(string, sizeof(string), "* %s deu Bolsa Familia para %s.", sendername ,giveplayer);
							SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não está com essa grana no Cofre.");
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Jogador está longe.");
					}
				}//invalid id
			}
			else
			{
				format(string, sizeof(string), "   %d não é um jogador ativo.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
			return true;
	}
	CMD:pagamento(playerid, params[])
    {
	        if(PlayerInfo[playerid][pLider] != 7)
	        {
				SendClientMessage(playerid, COLOR_GREY, "Você não é o Prefeito !");
				return true;
	        }
	        new org,dindin;
			if(sscanf(params, "dd", org, dindin))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: /pagamento [ID da Org] [quantidade]");
				return true;
			}
	        if(Tax < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Não há Dinheiro suficiente no banco de Impostos !");
				return true;
			}
			if(org < 1 || org > 35)
			{
				SendClientMessage(playerid, COLOR_GREY, "Organizações de 1 a 35");
				return true;
			}
			new Orgs = 0;
    	    new string[128];
			foreach(Player, i)
			{
			    if(GetPlayerOrg(i) == org)
			    {
			        Orgs += 1;
			    }
			}
			if(Orgs >= 1)
			{
			    new price = dindin * Orgs;
			    if(CofreOrg[7][Dinheiro] < price)return SendClientMessage(playerid, COLOR_GRAD1, "O cofre do Governo não tem esse dinheiro todo!");
                SacarOrgGrana(7,price);
                PLV += price;
                format(string, sizeof(string), "Você deu R$%d de taxa para cada um da Organização %s!",dindin, GetOrgName(org));
				SendClientMessage(playerid, COLOR_GREY, string);
				format(string, sizeof(string), "Gasto Total: R$%d!",price);
				SendClientMessage(playerid, COLOR_GREY, string);
			    foreach(Player, i)
				{
				    if(GetPlayerOrg(i) == org)
			    	{
				        format(string, sizeof(string), "* Você recebeu R$%d do banco de Impostos pelo Prefeito.",dindin);
						SendClientMessage(i, COLOR_LIGHTBLUE, string);
						GiveDinheiro(i, dindin);
			     	}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "  Não há nenhum Membro Desta Org Online no Momento !");
				return true;
			}
			return true;
	}
	CMD:limparpref(playerid, params[])
	{
	    	if(PlayerInfo[playerid][pAdmin] <= 1337)
	        {
				SendClientMessage(playerid, COLOR_GREY, "Somente Administradores MASTER podem usar este comando!");
				return true;
	        }
			ShowPlayerDialog(playerid, 5556, DIALOG_STYLE_TABLIST_HEADERS, "Prefeitura",
			"Limpar Lucros Empresas\n\
			Limpar Lucros Organizacoes\n\
			Limpar Lucros Postos Gasolinas\n\
			Limpar Multas Arquivadas\n\
			Limpar Crimes Arquivados\n\
            Limpar Lucros Investidos\n\
			Limpar Manutencao de Carros\n\
			Limpar Manutencao de Hidrelétricas\n\
			Limpar Manutencao de Encanamentos\n\
			Limpar Reparo de Estradas\n\
			Limpar Conserto de Estragos\n\
            Limpar Dinheiro Usado\n", #Selecionar, #Voltar);
     		return true;
	}
	CMD:precoonibus(playerid, params[])
    {
    	new newPreco;

		if(sscanf(params, "d", newPreco))

			return SendClientMessage(playerid, COLOR_GRAD1, "USE: /precoonibus [Valor]");

		if(PlayerInfo[playerid][pLider] != 7)

			return SendClientMessage(playerid, COLOR_GREY, "   Você não é o Prefeito !");

		if(newPreco < 0 || newPreco > 1200)

			return SendClientMessage(playerid, COLOR_GREY, "   Valor do ônibus entre 0 - 1200 !");

		precobusao = newPreco;

		static
			string[128]
		;

   		format(string, sizeof string, "* O prefeito setou o preço do ônibus para: {FFFFFF}%d", precobusao);
    	SendClientMessageToAll(0xFF8A00FF, string);

		return 1;
	}
	CMD:dartaxa(playerid, params[])
    {
	        if(PlayerInfo[playerid][pLider] != 7)
	        {
				SendClientMessage(playerid, COLOR_GREY, "Você não é o Prefeito !");
				return true;
	        }
	        if(Tax < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Não há Dinheiro suficiente no banco de Impostos !");
				return true;
			}
			new Cops = 0;
    	    new string[128];
			foreach(Player, i)
			{
			    if(IsACop(i))
			    {
			        Cops += 1;
			    }
			}
			if(Cops >= 1)
			{
			    new price = Tax / Cops;
			    if(CofreOrg[7][Dinheiro] < Tax)return SendClientMessage(playerid, COLOR_GRAD1, "O cofre do Governo não tem esse dinheiro todo!");
                SacarOrgGrana(7,Tax);
                PLV += Tax;
				SendClientMessage(playerid, COLOR_GREY, "Você deu a taxa para todos os policiais online!");
			    foreach(Player, i)
				{
				    if(IsACop(i))
				    {
				        format(string, sizeof(string), "* Você recebeu R$%d do banco de Impostos pelo Prefeito.",price);
						SendClientMessage(i, COLOR_LIGHTBLUE, string);
						GiveDinheiro(i, price);
			     	}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "  Não há nenhum Policial Online no Momento !");
				return true;
			}
			return true;
	}
//------------------------------------------------/Prefeito Comandos--------------------------------------------------------
	CMD:mudarlocal(playerid, params[])
	{
	        if(PlayerInfo[playerid][pAdmin] >= 1  && PlayerInfo[playerid][pAdmin] <= 5000)
				{
				    if(PlayerInfo[playerid][pSpawn] == 2)
		            {
		                SendClientMessage(playerid, COLOR_GREY, "Você vai nascer no local normal de nascimento ou em sua HQ !");
		                PlayerInfo[playerid][pSpawn] = 0;
		                return 1;
		            }
		            else if(PlayerInfo[playerid][pSpawn] == 0)
		            {
		                if(PlayerInfo[playerid][pPHousekey] != 500)
	        			{
		                	SendClientMessage(playerid, COLOR_GREY, "  Agora você vai nascer em sua casa !");
		                	PlayerInfo[playerid][pSpawn] = 1;
		                	return 1;
						}
						else
						{
                            SendClientMessage(playerid, COLOR_GREY, "  Agora você vai nascer Na HQ ADM!");
		                	PlayerInfo[playerid][pSpawn] = 2;
		                	return 1;
						}
		            }
		            else if(PlayerInfo[playerid][pSpawn] == 1)
		            {
		                SendClientMessage(playerid, COLOR_GREY, "  Agora você vai nascer Na HQ ADM!");
		                PlayerInfo[playerid][pSpawn] = 2;
		                return 1;
		            }
		            return 1;
				}
	        if(PlayerInfo[playerid][pPHousekey] != 500)
	        {
	            if(Spectate[playerid] != 255 && PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pAdminTemp] < 1)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Você está na TV, não pode mudar o spawn !");
	                return true;
	            }
	            if(PlayerInfo[playerid][pSpawn] == 1)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Você vai nascer no local normal de nascimento ou em sua HQ !");
	                PlayerInfo[playerid][pSpawn] = 0;
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "  Agora você vai nascer em sua casa !");
	                PlayerInfo[playerid][pSpawn] = 1;
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Você não tem casa, não pode mudar o local !");
		        return true;
	        }
	    	return true;
	}

 	CMD:roupas(playerid, params[])
	{
	        if(PlayerInfo[playerid][pMembro] >= 1 || PlayerInfo[playerid][pLider] >= 1)
	        {
	            if(IsAtClothShop(playerid))
				{
					Controle(playerid, 0);
					SelectChar[playerid] = 255;
					SelectCharID[playerid] = PlayerInfo[playerid][pMembro];
					SelectCharPlace[playerid] = 1;
					PlayerInfo[playerid][pSkin] = ChosenSkin[playerid];
			    	SendClientMessage(playerid, COLOR_LIGHTRED, "* Use 'Proximo' para trocar a skin.");
				    SendClientMessage(playerid, COLOR_LIGHTRED, "* Quando Você achar a Skin preferida, Digite 'Confirma'.");

					new rand = random(sizeof(gInviteSpawns));

					SetPlayerPos(playerid, gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]); // Warp the player
					SetPlayerFacingAngle(playerid, gInviteSpawns[rand][3]);
					SetPlayerCameraPos(playerid,gInviteSpawns[rand][0] + 3, gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
					SetPlayerCameraLookAt(playerid,gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
					Controle(playerid, 0);
				    SelectChar[playerid] = 255;
				    SelectCharID[playerid] = GetPlayerOrg(playerid);
				    SelectCharPlace[playerid] = 1;
					ConviteInfoOrg(PlayerName(playerid), InviteJob[playerid], 1);
                    ShowPlayerDialog(playerid, 643, DIALOG_STYLE_MSGBOX, "{00BFFF}Escolha Sua Skin", "{FFFFFF}Proximo: {00BFFF}Para trocar sua skin.\n{00BFFF}Confirmar: {FFFFFF}Para confirmar sua skin.", "Confirmar", "Próximo");
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você não está em uma loja de roupas !");
					return true;
				}
            }
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Civis não podem usar esse comando !");
				return true;
			}
	    	return true;
	}
	CMD:sound(playerid, soundid[])
	{
	    new sd;
		if(sscanf(soundid, "d", sd))
		{
			SendClientMessage(playerid, COLOR_WHITE,"USE: /sound [id]");
			return true;
		}
		PlayerPlaySound(playerid, sd, 0.0, 0.0, 0.0);
	    return true;
	}
	CMD:loteria(playerid, params[])
	{
	    new string[128];
     	if(PlayerInfo[playerid][pLottoNr] > 0)return SendClientMessage(playerid, COLOR_GREY, "Você já tem um bilhete de loteria !");
      	if(PlayerInfo[playerid][pLottoWin] > 0)
		{
		    format(string, sizeof(string), "* Você tem um Bilhete Premiado no Valor de R$%d.", PlayerInfo[playerid][pLottoWin]);
			SendClientMessage(playerid, COLOR_GREEN, string);
			SendClientMessage(playerid, COLOR_GREY, "   Reclame Seu Prêmio na Lotérica Primeiro!");
	   		return 1;
		}
   		if(GetPlayerMoney(playerid) < 10)return SendClientMessage(playerid, COLOR_GREY, "Você não tem R$10 para pagar o número de loteria !");
     	new lottonr;
		if(sscanf(params, "d", lottonr))return SendClientMessage(playerid, COLOR_WHITE,"USE: /loteria [número]");
		if(lottonr < 1 || lottonr > 50)return SendClientMessage(playerid, COLOR_GREY, "   Número da loteria, de 1 a 50 !");

			format(string, sizeof(string), "* Você comprou um bilhete de loteria com número: %d.", lottonr);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GiveDinheiro(playerid, - 10);
			PlayerInfo[playerid][pLottoNr] = lottonr;
			return true;
	}
    CMD:retirarpremio(playerid, params[])
	{
	    if(PlayerToPoint(2.0,playerid,822.0089,1.8799,1004.1796))
	    {
		    new string[128];
	      	if(PlayerInfo[playerid][pLottoWin] > 0)
			{
			    format(string, sizeof(string), "[Loteria] %s Retirou seu premio da loteria.", PlayerName(playerid));
			    SendClientMessageToAll(COR_3DLABEL, string);
			    format(string, sizeof(string), "* Você retirou seu premio no valor de R$%d.", PlayerInfo[playerid][pLottoWin]);
				SendClientMessage(playerid, COLOR_GREEN, string);
				SendClientMessage(playerid, COLOR_GREY, "   O dinheiro foi depositado em sua conta!");
				PlayerInfo[playerid][pConta]=PlayerInfo[playerid][pLottoWin]+PlayerInfo[playerid][pConta];
				PlayerInfo[playerid][pLottoWin] = 0;
		   		return 1;
			}
	   		else
	   		{
	   		    SendClientMessage(playerid, COLOR_GREY, "   Voçê não tem um bilhete premiado!");
	   		    return 1;
	   		}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Você não está na loterica!");
		}
			return true;
	}
 CMD:beber(playerid, x_nr[])
	{
	        if(IsAtBar(playerid))
	        {
	            if(PlayerInfo[playerid][pDorgado2] >= 70)
	            {
	            	PlayerInfo[playerid][pDoenca] = 4;
	            	PlayerInfo[playerid][pDorgado2] = 0;
	            	SendClientMessage(playerid, COLOR_GRAD2, "* Você está infectado com cirrose, vá até um hospital se tratar !");
	            	return true;
				}
				new string[128];
	            if(PlayerDrunk[playerid] < 10)
	            {
	            	if(PlayerInfo[playerid][pDoenca] == 4)
  					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "* Você está com cirrose, vá até um hospital se tratar !");
			    		return true;
  	        		}
	                new Float:health;
					if(isnull(x_nr))
					{
						SendClientMessage(playerid, COLOR_WHITE, "|__________________[ Bar's Drinks ]__________________|");
						SendClientMessage(playerid, COLOR_WHITE, "Use: /beber [Bebida]");
				  		SendClientMessage(playerid, COLOR_GREY, "Nomes Válidos: Cerveja (R$3), Vodka (R$5), Whisky (R$10), Coca-Cola (R$2), Água (R$1)");
						return true;
					}
				    if(strcmp(x_nr,"Cerveja",true) == 0)
					{
						if(PlayerInfo[playerid][pAge] < 0)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "BarMan - Você Não Tem 18 Anos ou mais Para Poder Beber.");
						    return true;
						}
						PlayerInfo[playerid][pSede] += 15+random(10);
						if(PlayerInfo[playerid][pSede] > 100) PlayerInfo[playerid][pSede] = 100;
					    GivePlayerMoney(playerid, - 3);
					    PlayerDrunk[playerid] += 1;
					    PlayerInfo[playerid][pDorgado2] += 2;
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Voce Esta~n~~p~Tonto~n~~g~beba agua ou coca-cola", 3500, 1); }
						SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 3000);
						ApplyAnimation(playerid, "FOOD","EAT_Vomit_P",3.0,0,0,0,0,0);
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 15; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 15.0); }
						}
					}
					else if(strcmp(x_nr,"Vodka",true) == 0)
					{
					    if(PlayerInfo[playerid][pAge] < 0)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "BarMan - Você Não Tem 18 Anos ou mais Para Poder Beber.");
						    return true;
						}
						PlayerInfo[playerid][pSede] += 15+random(10);
						if(PlayerInfo[playerid][pSede] > 100) PlayerInfo[playerid][pSede] = 100;
					    GivePlayerMoney(playerid, - 5);
					    PlayerDrunk[playerid] += 2;
					    PlayerInfo[playerid][pDorgado2] += 2;
					    SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 3000);
					    ApplyAnimation(playerid, "FOOD","EAT_Vomit_P",3.0,0,0,0,0,0);
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Voce Esta~n~~p~Tonto~n~~g~beba agua ou coca-cola", 3500, 1); }
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 25; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 25.0); }
						}
					}
					else if(strcmp(x_nr,"Whisky",true) == 0)
					{
					    if(PlayerInfo[playerid][pAge] < 0)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "BarMan - Você Não Tem 18 Anos ou mais Para Poder Beber");
						    return true;
						}
						PlayerInfo[playerid][pSede] += 15+random(10);
						if(PlayerInfo[playerid][pSede] > 100) PlayerInfo[playerid][pSede] = 100;
					    GivePlayerMoney(playerid, - 10);
					    PlayerDrunk[playerid] += 3;
					    PlayerInfo[playerid][pDorgado2] += 2;
					    SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 3000);
					    ApplyAnimation(playerid, "FOOD","EAT_Vomit_P",3.0,0,0,0,0,0);
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Voce Esta~n~~p~Tonto~n~~g~beba agua ou coca-cola", 3500, 1); }
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 27; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 27.0); }
						}
					}
					else if(strcmp(x_nr,"Coca-Cola",true) == 0)
					{
                        PlayerInfo[playerid][pSede] += 15+random(10);
					    if(PlayerInfo[playerid][pSede] > 100) PlayerInfo[playerid][pSede] = 100;
					    GivePlayerMoney(playerid, - 2);
					    if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 5; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 5.0); }
							SetPlayerDrunkLevel(playerid, 0);
							PlayerDrunk[playerid] = 0;
						    PlayerDrunkTime[playerid] = 0;
						    SetPlayerDrunkLevel (playerid, 0);
						}
					}
					else if(strcmp(x_nr,"agua",true) == 0)
					{
                        PlayerInfo[playerid][pSede] += 15+random(10);
					    if(PlayerInfo[playerid][pSede] > 100) PlayerInfo[playerid][pSede] = 100;
					    GivePlayerMoney(playerid, - 1);
					    if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 5; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 5.0); }
							SetPlayerDrunkLevel(playerid, 0);
							PlayerDrunk[playerid] = 0;
						    PlayerDrunkTime[playerid] = 0;
						    SetPlayerDrunkLevel (playerid, 0);
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_WHITE, "BarMan - Não não vendemos essa bebida.");
					    return true;
					}
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* %s bebeu um(a) %s.", sendername ,x_nr);
					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
					SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Você não pode beber mais, Você vomitou...!");
	                SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 3000);
	                new Float:x, Float:y, Float:z;
	                GetPlayerPos(playerid, x, y, z);
	                SoundInRange(32201, 20.0, x, y, z);

					format(string, sizeof(string), "* %s acaba de vomitar...", NomePlayer(playerid));
					SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    ApplyAnimation(playerid,"FOOD","EAT_Vomit_P",4.1,0,1,1,1,1);
					return true;
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Você não está em um bar !");
	            return true;
	        }
	    	return true;
	}
	CMD:ligarsom(playerid)
	{
	    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "Você Precisa Estar em um Veículo.");
        new mot, lu, alar, por, cap, porma, ob;
	    GetVehicleParamsEx(GetPlayerVehicleID(playerid), mot, lu, alar, por, cap, porma, ob);
	    if(mot != VEHICLE_PARAMS_OFF)
	    {
	        SendClientMessage(playerid, COLOR_GREY, " O Carro Precisa estar Desligado.");
			return true;
	    }
		if(isPertoCarSound(playerid))return SendClientMessage(playerid, COLOR_GREY, " Já existe um Carro com som tocando muito próximo a este local !");
		if(isPertoSound(playerid))return SendClientMessage(playerid, COLOR_GREY, "Existe um rádio tocando muito próximo a este local !");
		if(isPlayerCarSound(playerid))return SendClientMessage(playerid, COLOR_GREY, " Seu Rádio/Som ja está tocando, desligue-o primeiro !");
	    new VehicleModel = GetVehicleModel(GetPlayerVehicleID(playerid));
		if(VehicleModel != 535)
		{
		    SendClientMessage(playerid, COLOR_GREY, " Somente o SlamVam(ID:535)Tem Suporte para Som.");
		    return true;
		}
		if(VehicleInfo[GetPlayerVehicleID(playerid)][SoundCar] != 1086) return SendClientMessage(playerid, COLOR_GRAD1, "Antes Equipe seu carro com um Som na Transfender.");
		ShowPlayerDialog(playerid, 5412, DIALOG_STYLE_LIST,
		"Ligando Som do Carro",
		"Radios\n\
		Charlie Brown JR - {12FFEF}Lutar pelo que é meu\n\
		Ellie Goulding - {12FFEF}Burn\n\
		Zedd - {12FFEF}Clarity\n\
		Anna Naklab - {12FFEF}Parra for cuva\n\
		Lil Jon - {12FFEF}Da Blow\n\
		Birdy - {12FFEF}Wings\n\
		RÁDIO - {12FFEF}SSGAMES\n\
		RÁDIO - {12FFEF}Hunter FM\n\
		RÁDIO - {12FFEF}SkyPlus FM\n\
		RÁDIO - {12FFEF}Energy FM\n\
		RÁDIO - {FFFF00}Radio Uuno\n\
		RÁDIO - Brasil Paradise City Online\n\
		Desligar","Ligar","Sair");
	    return true;
	}
	CMD:desligarsom(playerid)
	{
	    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "Você Precisa Estar em um Veículo.");
		if(VehicleInfo[GetPlayerVehicleID(playerid)][carRadioOn] == 1)
		{
		    	destroyPlayerCarSound(playerid);
		        new string[100];
				format(string, sizeof(string), "* %s desligou o som do seu carro.", NomePlayer(playerid));
				SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    			VehicleInfo[GetPlayerVehicleID(playerid)][carRadioOn] = 0;
			 	SendClientMessage(playerid, COLOR_GREY, " Som Desligado.");
				return true;
		}
		else
		{
		     SendClientMessage(playerid, COLOR_GREY, " O Som Já está Desligado.");
			 return true;
		}
	}
    CMD:radio(playerid, params[])
	{
	    ShowPlayerDialog(playerid, 5409, DIALOG_STYLE_LIST,
		"Brasil Paradise City - MP3",
		"Radios\n\
		Charlie Brown JR - {FFFF00}Lutar pelo que é meu\n\
		Ellie Goulding - {FFFF00}Burn\n\
		Zedd - {FFFF00}Clarity\n\
		Anna Naklab - {FFFF00}Parra for cuva\n\
		Lil Jon - {FFFF00}Da Blow\n\
		Birdy - {FFFF00}Wings\n\
		Skillet - {FFFF00}Comatose\n\
		RÁDIO - {FFFF00}Hunter FM\n\
		RÁDIO - {FFFF00}SkyPlus FM\n\
		RÁDIO - {FFFF00}SSGAMERS\n\
		RÁDIO - {FFFF00}Radio SSGamers\n\
		RÁDIO - Brasil Paradise City Online\n\
		Desligar","Ouvir","Sair");
	    return 1;
	}
	CMD:mp3(playerid, x_nr[])
	{
	        if(PlayerInfo[playerid][pCDPlayer])
	        {
				if(isnull(x_nr))
				{
					SendClientMessage(playerid, COLOR_WHITE, "|__________________[ Musica ]__________________|");
					SendClientMessage(playerid, COLOR_WHITE, "USE: /mp3 [nome]");
			  		SendClientMessage(playerid, COLOR_GREY, "Nomes Disponíveis: On, Off, Proximo");
					return true;
				}
			    if(strcmp(x_nr,"on",true) == 0)
				{
				    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~g~CD Player On", 5000, 5);
				    new channel = Music[playerid];
				    PlayerPlaySound(playerid, Songs[channel][0], 0.0, 0.0, 0.0);
				}
	            else if(strcmp(x_nr,"off",true) == 0)
				{
				    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~r~CD Player Off", 5000, 5);
				    PlayerFixRadio(playerid);
				}
				else if(strcmp(x_nr,"Prooximo",true) == 0)
				{
				    if(Music[playerid] == 0) { Music[playerid] = 1; }
				    else if(Music[playerid] == 1) { Music[playerid] = 2; }
				    else if(Music[playerid] == 2) { Music[playerid] = 3; }
				    else if(Music[playerid] == 3) { Music[playerid] = 4; }
				    else if(Music[playerid] == 4) { Music[playerid] = 5; }
				    else if(Music[playerid] == 5) { Music[playerid] = 6; }
				    else if(Music[playerid] == 6) { Music[playerid] = 0; }
				    new channel = Music[playerid];
				    PlayerPlaySound(playerid, Songs[channel][0], 0.0, 0.0, 0.0);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Comando Musical Desconhecido !");
				    return true;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não possui um CD-Player !");
			    return true;
			}
	    	return true;
	}
CMD:familias(playerid){

	new cString[256];
	MEGAString[0] = EOS;
	strcat(MEGAString, "Id\tNome da familia\tLíder da familia\tStatus\n");
    for(new f; f != MAX_FAMILIAS; f++){

        if(strcmp(FamiliaInfo[f][fName], "Ninguém", false)){

			format(cString, sizeof(cString), "%02d\t%s\t%s\t%s\n", FamiliaInfo[f][fID], FamiliaInfo[f][fName], FamiliaInfo[f][fLeader], IsPlayerOnline(FamiliaInfo[f][fLeader]) ? ("{33AA33}Online") : ("{B4B5B7}Offline"));
            strcat(MEGAString, cString);
		}
    }
    ShowPlayerDialog(playerid, 2409, 5, "Famílias do servidor", MEGAString, "Informações", "Fechar");
    return 1;
}

CMD:familia(playerid, params[]){

    MEGAString[0] = EOS;

   	new idx,
		tmp[128],
		x_nr[76]
	;

    new string[128];

    x_nr = strtok(params, idx);
	if(isnull(x_nr)){

		if(PlayerInfo[playerid][pFamiliaLeader] != 1 || PlayerInfo[playerid][pFamiliaSubLeader] != 1)
		    return ForT:familia(playerid, "ajuda");

		SendClientMessage(playerid, COLOR_WHITE, "Comandos da familia:");
		SendClientMessage(playerid, COLOR_GREY, "/familias /familia /aceitarfamilia /sairfamilia");
		SendClientMessage(playerid, COLOR_GREY, "OBS: Para falar no chat da familia, use {FFFFFF}@ [Texto]");
		return true;
	}
    if(strcmp(x_nr,"ajuda",true) == 0){

        strcat(MEGAString, "{1E90FF}Uso correto do comando: {FFFFFF}/familia [Nome]\n\n");
        strcat(MEGAString, "{B4B5B7}Nomes disponíveis:\n");
        strcat(MEGAString, "{1E90FF}• Ajuda:	{B4B5B7}Mostra os comandos da família\n");
        strcat(MEGAString, "{1E90FF}• Criar:	{B4B5B7}Usado para criar uma família\n");
        strcat(MEGAString, "{1E90FF}• DarSub:	{B4B5B7}Promove alguém para sub-líder\n");
        strcat(MEGAString, "{1E90FF}• RetirarSub:	{B4B5B7}Remover alguém de sub-líder\n");
        strcat(MEGAString, "{1E90FF}• Info:		{B4B5B7}Usado para ver as informações da família\n");
        strcat(MEGAString, "{1E90FF}• Depositar:	{B4B5B7}Para depositar dinheiro ao cofre da família\n");
        strcat(MEGAString, "{1E90FF}• Sacar:	{B4B5B7}Para sacar dinheiro do cofre da família\n");
        strcat(MEGAString, "{1E90FF}• Spawn:	{B4B5B7}Setar o local de spawn da família\n");
        strcat(MEGAString, "{1E90FF}• Carro:	{B4B5B7}Usado para comprar um carro para a família\n");
        strcat(MEGAString, "{1E90FF}• Convidar:	{B4B5B7}Usado para convidar alguém para a família\n");
        strcat(MEGAString, "{1E90FF}• Expulsar:	{B4B5B7}Usado para expulsar alguém da família\n");
        strcat(MEGAString, "{1E90FF}• Membros:	{B4B5B7}Usado ver todos membros online da família\n");
        strcat(MEGAString, "{1E90FF}• Sair:	    {B4B5B7}Usado para sair da família\n");
        strcat(MEGAString, "{1E90FF}• Limpar:	{B4B5B7}Usado para limpar a vaga de um membro da família\n");
        strcat(MEGAString, "{1E90FF}• Destruir:	{B4B5B7}Usado para destruir a família");
        ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Comandos da família", MEGAString, "Fechar", "");
    }
    if(strcmp(x_nr,"sair",true) == 0){

        if(PlayerInfo[playerid][pFamiliaID] == 0)
            return SendClientMessage(playerid, COLOR_GRAD1, "Você não é de um família!");

		if(PlayerInfo[playerid][pFamiliaLeader] == 1){

			SendClientMessage(playerid, COLOR_LIGHTBLUE, #Você saiu da família!);
			PlayerInfo[playerid][pFamiliaID] = 0;
			PlayerInfo[playerid][pFamiliaSubLeader] = 0;
		}
		return 1;
    }
    if(strcmp(x_nr,"criar",true) == 0){
    
    if(PlayerInfo[playerid][pFamiliavip] < 1)
     					{
         					SendClientMessage(playerid, COLOR_GREY, "Você não tem nenhuma autorização para criar uma familia compre usando /menuvip");
       		 				return true;
	        			}
           PlayerInfo[playerid][pFamiliavip] -= 1;
        tmp = strtok(params, idx);
		if(!strlen(tmp))
		    return SendClientMessage(playerid, COLOR_GRAD1, "USE: /familia Criar [Nome da família]");

        createFamilia(playerid, tmp, PlayerName(playerid));
    }
	if(strcmp(x_nr,"darsub",true) == 0){

        tmp = strtok(params, idx);
		if(!strlen(tmp))
		    return SendClientMessage(playerid, COLOR_GRAD1, "USE: /familia DarSub [playerid]");

        if(PlayerInfo[playerid][pFamiliaLeader] == 0)
            return SendClientMessage(playerid, COLOR_GRAD1, "Você não é um líder de uma família!");

		new id = strval(tmp);
		if(!IsPlayerConnected(id))
		    return SendClientMessage(playerid, COLOR_GRAD1, "Este jogador não está conectado!");

		PlayerInfo[id][pFamiliaSubLeader] = PlayerInfo[playerid][pFamiliaLeader];

		for(new i; i < MAX_MEMBERS; ++i){

	    	if(strcmp(PlayerName(id), MemberList[PlayerInfo[playerid][pFamiliaLeader]][i], true) == 0){
	      //  if(PlayerInfo[id][pFamiliaID] == PlayerInfo[playerid][pFamiliaLeader]){

	            if(strcmp(FamiliaInfo[PlayerInfo[playerid][pFamiliaLeader]][fSubLeader], "Ninguém", true) == 0){
            	 //if(strcmp(MemberList[PlayerInfo[playerid][pFamiliaLeader]][i], "Ninguém", false)){

	            	ClearMember(PlayerName(id), PlayerInfo[playerid][pFamiliaLeader]);

					new file[78];
	                format(file, sizeof file, "Familias/Familia%d.ini", PlayerInfo[playerid][pFamiliaLeader]);
	                format(FamiliaInfo[PlayerInfo[playerid][pFamiliaLeader]][fSubLeader], 25, PlayerName(id));
					DOF2_SetString(file, "SubLeader", PlayerName(id));
					DOF2_SaveFile();

					format(string, 256, "Voce deu sub lider da sua familia para %s", PlayerName(id));
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, 256, "Voce foi promovido para sub lider da familia %s", FamiliaInfo[PlayerInfo[playerid][pFamiliaLeader]][fName]);
					SendClientMessage(id, COLOR_LIGHTBLUE, string);

					return 1;
				}
				else{

					SendClientMessage(playerid, -1, #Você já tem um sub-líder remova-o para promover outro!);
					return 1;
				}
			}
			else {

				SendClientMessage(playerid, COLOR_GRAD1, "Você só pode dar sub-líder para membro da sua família!");
				return 1;
			}
		}
		//SendClientMessage(playerid, COLOR_GRAD1, "Você só pode dar sub-líder para membro da sua família!");
		return 1;
    }
    if(strcmp(x_nr,"retirarsub",true) == 0){

        tmp = strtok(params, idx);
		if(!strlen(tmp))
		    return SendClientMessage(playerid, COLOR_GRAD1, "USE: /familia RetirarSub [playerid]");

        if(PlayerInfo[playerid][pFamiliaLeader] == 0)
            return SendClientMessage(playerid, COLOR_GRAD1, "Você não é um líder de uma família!");

		new id = strval(tmp);
		if(!IsPlayerConnected(id))
		    return SendClientMessage(playerid, COLOR_GRAD1, "Este jogador não está conectado!");

		if(PlayerInfo[id][pFamiliaID] != PlayerInfo[playerid][pFamiliaID])
		    return SendClientMessage(playerid, COLOR_GRAD1, " Esta pessoa não é da sua família.");

        if(strcmp(FamiliaInfo[PlayerInfo[playerid][pFamiliaLeader]][fSubLeader], PlayerName(id), true) == 0){

    	    strmid(FamiliaInfo[PlayerInfo[playerid][pFamiliaLeader]][fSubLeader], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
    	    new file[78];
		    format(file, sizeof file, "Familias/Familia%d.ini", PlayerInfo[playerid][pFamiliaLeader]);
		    DOF2_SetString(file, "SubLeader", "Ninguém");
			DOF2_SaveFile();

			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Voce retirou o sub lider da sua familia");
			format(string, 256, "Voce foi retirado de sub lider da familia %s", FamiliaInfo[PlayerInfo[playerid][pFamiliaLeader]][fName]);
			SendClientMessage(id, COLOR_LIGHTBLUE, string);

			InviteFamilia(PlayerName(id), PlayerInfo[PlayerInfo[playerid][pFamiliaLeader]][pFamiliaID]);
			PlayerInfo[id][pFamiliaSubLeader] = 0;
		}
		else{

		    SendClientMessage(playerid, COLOR_GRAD1, "Este jogador não é Sub-Líder da sua família");
		}
        return 1;
    }
    if(strcmp(x_nr,"info",true) == 0){

		ShowInfoFamilia(playerid, PlayerInfo[playerid][pFamiliaID]);
    }
    if(strcmp(x_nr,"depositar",true) == 0){

        tmp = strtok(params, idx);
		if(!strval(tmp))
		    return SendClientMessage(playerid, COLOR_GRAD1, "USE: /familia Depositar [Quantidade]");

		if(strval(tmp) > PlayerInfo[playerid][pCash])
		    return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem essa quantia!");

		FamiliaInfo[PlayerInfo[playerid][pFamiliaID]][fMoney] += strval(tmp);

		GivePlayerMoney(playerid, -strval(tmp));

		format(string, sizeof string, "Você depositou $%s no cofre da sua família!", ConvertMoney(strval(tmp)));
		SendClientMessage(playerid, COLOR_GRAD1, string);

		salvarFamilia(PlayerInfo[playerid][pFamiliaID]);

	}
	if(strcmp(x_nr,"sacar",true) == 0){

	    tmp = strtok(params, idx);
		if(!strval(tmp))
		    return SendClientMessage(playerid, COLOR_GRAD1, "USE: /familia Sacar [Quantidade]");

		if(PlayerInfo[playerid][pFamiliaLeader] == 0)
		    return SendClientMessage(playerid, COLOR_GRAD1, "Você não é um líder de uma família!");

		if(strval(tmp) > FamiliaInfo[PlayerInfo[playerid][pFamiliaID]][fMoney])
		    return SendClientMessage(playerid, COLOR_GRAD1, "Sua família não tem tudo isso!");

        FamiliaInfo[PlayerInfo[playerid][pFamiliaID]][fMoney] = FamiliaInfo[PlayerInfo[playerid][pFamiliaID]][fMoney]-strval(tmp);

		GivePlayerMoney(playerid, strval(tmp));

		format(string, sizeof string, "Você sacou $%s no cofre da sua família!", ConvertMoney(strval(tmp)));
		SendClientMessage(playerid, COLOR_GRAD1, string);

		salvarFamilia(PlayerInfo[playerid][pFamiliaID]);
	}
    if(strcmp(x_nr,"spawn",true) == 0){

        new i = PlayerInfo[playerid][pFamiliaLeader];

        if(i == 0)
            return SendClientMessage(playerid, COLOR_GRAD1, "Você não é um líder de uma família!");

       	new Float:X, Float:Y, Float:Z;
       	GetPlayerPos(playerid, X, Y, Z);

       	FamiliaInfo[i][fSpawnX] = X;
       	FamiliaInfo[i][fSpawnY] = Y;
       	FamiliaInfo[i][fSpawnZ] = Z;

       	FamiliaInfo[i][fInt] = GetPlayerInterior(playerid);
       	FamiliaInfo[i][fWorld] = GetPlayerVirtualWorld(playerid);


        DestroyDynamicPickup(FamiliaInfo[i][fPickup]);
        FamiliaInfo[idx][fPickup] = CreateDynamicPickup(1314, 23, FamiliaInfo[i][fSpawnX], FamiliaInfo[i][fSpawnY], FamiliaInfo[i][fSpawnZ]);

        DestroyDynamic3DTextLabel(FamiliaInfo[i][fText]);
        format(string, 78, "HQ da família %s", FamiliaInfo[i][fName]);
		FamiliaInfo[idx][fText] = CreateDynamic3DTextLabel(string, 0xCD853FFF, FamiliaInfo[i][fSpawnX], FamiliaInfo[i][fSpawnY], FamiliaInfo[i][fSpawnZ], 15.0);

       	format(string, sizeof string, "Você setou o spawn da sua família nas posições X: %f, Y: %f, Z:%f, Interior: %d, World: %d", FamiliaInfo[i][fSpawnX], FamiliaInfo[i][fSpawnY], FamiliaInfo[i][fSpawnZ], FamiliaInfo[i][fInt], FamiliaInfo[i][fWorld]);
		SendClientMessage(playerid, 0x1E90FFFF, string);

		salvarFamilia(i);
		carregarFamilias();
    }
    if(strcmp(x_nr,"carro",true) == 0){

        if(IsPlayerInRangeOfPoint(playerid, 5.0, FamiliaInfo[PlayerInfo[playerid][pFamiliaID]][fSpawnX], FamiliaInfo[PlayerInfo[playerid][pFamiliaID]][fSpawnY], FamiliaInfo[PlayerInfo[playerid][pFamiliaID]][fSpawnZ])){

			strcat(MEGAString, "Veiculo\tNome\tCusto da compra/troca\n");
    	    for(new i; i < 5; i++){

    	    	new text[25];
				if(FamiliaInfo[PlayerInfo[playerid][pFamiliaID]][fVehicle][i] == 0)
				    text = "Nenhum";
				else
					format(text, 25, veehName[GetVehicleModel(FamiliaInfo[PlayerInfo[playerid][pFamiliaID]][fVehicle][i])-400]);

				format(string, 128, "{1E90FF}Veiculo%d:\t%s\t{33AA33}$100.000\n", i+1, text);
				strcat(MEGAString, string);
			}
			ShowPlayerDialog(playerid, 2510, 5, "Escolha um slot para comprar/trocar de carro", MEGAString, "Selecionar","Fechar");
		}
		else{

			SendClientMessage(playerid, COLOR_GRAD1, "Você não está proximo a HQ da sua família!");
		}
	}
	if(strcmp(x_nr,"convidar",true) == 0){

        tmp = strtok(params, idx);
		if(!strlen(tmp))
		    return SendClientMessage(playerid, COLOR_GRAD1, "USE: /familia Convidar [playerid]");

        if(PlayerInfo[playerid][pFamiliaLeader] == 0)
            return SendClientMessage(playerid, COLOR_GRAD1, "Você não é um líder de uma família!");

		new id = strval(tmp);

		if(PlayerInfo[id][pFamiliaID] > 1 || PlayerInfo[id][pFamiliaLeader] > 1 || PlayerInfo[id][pFamiliaSubLeader] > 1)
		    return SendClientMessage(playerid, COLOR_GRAD1, " Este jogador já é membro de uma família.");

		if(!IsPlayerConnected(id))
		    return SendClientMessage(playerid, COLOR_GRAD1, "Este jogador não está conectado!");

		format(string, sizeof(string), " Você convidou %s para a sua família. Aguarde até que ele aceite.", PlayerName(id));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), " Você foi convidado por %s para a família %s.", PlayerName(playerid), FamiliaInfo[PlayerInfo[playerid][pFamiliaID]][fName]);
		SendClientMessage(id, COLOR_LIGHTBLUE, string);
		SendClientMessage(id, COLOR_LIGHTBLUE, "Caso queira aceitar, digite /familia aceitar. Senão, digite /familia recusar");

		InviteOffer2[id] = playerid;
	}
	if(strcmp(x_nr,"aceitar",true) == 0){

	    if(PlayerInfo[playerid][pFamiliaID] == 1)
	        return SendClientMessage(playerid, COLOR_GRAD1, " Você já é de uma família.");

        if(InviteOffer2[playerid] == -1)
		    return SendClientMessage(playerid, COLOR_GRAD1, " Você não foi convidado para uma família.");

		InviteFamilia(PlayerName(playerid), PlayerInfo[InviteOffer2[playerid]][pFamiliaID]);
		PlayerInfo[playerid][pFamiliaID] = PlayerInfo[InviteOffer2[playerid]][pFamiliaID];


		format(string, sizeof(string), " Você aceitou o convite de %s para a família %s. Seja bem vindo.", PlayerName(InviteOffer2[playerid]), FamiliaInfo[PlayerInfo[InviteOffer2[playerid]][pFamiliaID]][fName]);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), " O player %s aceitou o seu convite para participar da sua família.", PlayerName(playerid));
		SendClientMessage(InviteOffer2[playerid], COLOR_LIGHTBLUE, string);

		InviteOffer2[playerid] = -1;
	}
	if(strcmp(x_nr,"recusar",true) == 0){

	    if(InviteOffer2[playerid] == -1)
		    return SendClientMessage(playerid, COLOR_GRAD1, " Você não foi convidado para uma família.");

		format(string, sizeof string, " O jogador %s recusou o seu convite para a sua família.", PlayerName(playerid));
		SendClientMessage(InviteOffer2[playerid], COLOR_LIGHTBLUE, " Você recusou o convite para a família.");
        SendClientMessage(playerid, COLOR_LIGHTBLUE, " Você recusou o convite para a família.");
        InviteOffer2[playerid] = -1;
	}
	if(strcmp(x_nr,"expulsar",true) == 0){

        tmp = strtok(params, idx);
		if(!strlen(tmp))
		    return SendClientMessage(playerid, COLOR_GRAD1, "USE: /familia Expulsar [playerid]");

        if(PlayerInfo[playerid][pFamiliaLeader] == 0)
            return SendClientMessage(playerid, COLOR_GRAD1, "Você não é um líder de uma família!");

		new id = strval(tmp);

		if(PlayerInfo[id][pFamiliaID] != PlayerInfo[playerid][pFamiliaID])
		    return SendClientMessage(playerid, COLOR_GRAD1, " Esta pessoa não é da sua família.");

        new iString[128];
		format(iString, sizeof(iString), " Você expulsou %s da sua família.", PlayerName(id));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, iString);
		format(iString, sizeof(iString), " Você foi expulso da família pelo líder %s.", PlayerName(playerid));
		SendClientMessage(id, COLOR_LIGHTBLUE, iString);

		PlayerInfo[id][pFamiliaID] = 0;
		PlayerInfo[id][pFamiliaSubLeader] = 0;
		PlayerInfo[id][pFamiliaLeader] = 0;
		ClearMember(PlayerName(id), PlayerInfo[playerid][pFamiliaID]);
	}
	if(strcmp(x_nr,"membros",true) == 0){

        if(PlayerInfo[playerid][pFamiliaID] == 0)
            return SendClientMessage(playerid, COLOR_GRAD1, "Você não é de uma família!");

	   	SendClientMessage(playerid, -1, "Membros Online:");
		foreach(Player, i){

		    if(PlayerInfo[i][pFamiliaID] == PlayerInfo[playerid][pFamiliaID]){

				new cargo[20];
				if(PlayerInfo[i][pFamiliaLeader] > 1)
				    cargo = "[Líder]";
				else if(PlayerInfo[i][pFamiliaSubLeader] > 1)
				    cargo = "[Sub-Líder]";
				else cargo = " ";

				format(string, sizeof string, "%s %s", PlayerName(i), cargo);
                SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
	}
	return 1;
}
	CMD:emprego(playerid, x_nr[])
	{
	        if(PlayerInfo[playerid][pJailed] == 9)
		    {
				SendClientMessage(playerid,COLOR_GRAD1,"Você não pode usar este comando nas Celas da Administração!");
		      	return true;
		    }
		    if(PlayerInfo[playerid][pEmprego] != 0)
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você tem um emprego digite /sairdoemprego para sair do emprego.");
					return true;
				}
		    if(strcmp(x_nr,"taxista",true) == 0)
			{
				if(PlayerInfo[playerid][pLider] != 0 && PlayerInfo[playerid][pMembro] != 0)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, " Você possui uma organização e não pode pegar este emprego!");
				    return true;
				}
			if(PlayerToPoint(2.0, playerid,1752.8048,-1884.9341,13.5573))
		        {
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Você acabou de adquirir um novo emprego, digite /ajuda para ver os comandos!");
			    PlayerInfo[playerid][pSkin] = 253;
			    PlayerInfo[playerid][pEmprego] = 13;
			    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
			    SetPlayerPos(playerid, 1752.8048,-1884.9341,13.5573);
			    SetPlayerFacingAngle(playerid, 61.3339);
			    SetPlayerInterior(playerid, 0);
			    SetPlayerVirtualWorld(playerid, 0);
			    }
		    	return true;
			}
			if(strcmp(x_nr,"bombeiro",true) == 0)
			{
				if(PlayerInfo[playerid][pLider] != 0 && PlayerInfo[playerid][pMembro] != 0)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, " Você possui uma organização e não pode pegar este emprego!");
				    return true;
				}
			if(PlayerToPoint(2.0, playerid,2018.2883,-2091.3528,13.6337))
		        {
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Você acabou de adquirir um novo emprego, digite /ajuda para ver os comandos!");
			    PlayerInfo[playerid][pSkin] = 275;
			    PlayerInfo[playerid][pEmprego] = 14;
			    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
			    SetPlayerPos(playerid, 2018.2883,-2091.3528,13.6337);
			    SetPlayerFacingAngle(playerid, 61.3339);
			    SetPlayerInterior(playerid, 0);
			    SetPlayerVirtualWorld(playerid, 0);
		    	}
		    	return true;
			}
			else if(strcmp(x_nr,"caminhoneiro",true) == 0)
			{
				if(PlayerInfo[playerid][pLider] != 0 && PlayerInfo[playerid][pMembro] != 0)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, " Você possui uma organização e não pode pegar este emprego!");
				    return true;
				}
			if(PlayerToPoint(2.0, playerid,2426.5676,-2102.7278,13.5469))
		        {
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Você acabou de adquirir um novo emprego, digite /ajuda para ver os comandos!");
			    PlayerInfo[playerid][pSkin] = 16;
			    PlayerInfo[playerid][pEmprego] = 11;
			    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
			    SetPlayerPos(playerid, 2426.5676,-2102.7278,13.5469);
			    SetPlayerFacingAngle(playerid, 61.3339);
			    SetPlayerInterior(playerid, 0);
			    SetPlayerVirtualWorld(playerid, 0);
		    	}
		    	return true;
			}
			else if(strcmp(x_nr,"onibus",true) == 0)
			{
			if(PlayerToPoint(2.0, playerid,2905.7576,-898.6685,11.0469))
		        {
			    PlayerInfo[playerid][pSkin] = 253;
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Você acabou de adquirir um novo emprego, digite /ajuda para ver os comandos!");
			    PlayerInfo[playerid][pEmprego] = 9;
			    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
			    SetPlayerPos(playerid, 2905.7576,-898.6685,11.0469);
			    SetPlayerFacingAngle(playerid, 90.7641);
			    SetPlayerInterior(playerid, 0);
			    SetPlayerVirtualWorld(playerid, 0);
		    	}
		    	return true;
			}
			else if(strcmp(x_nr,"mecanico",true) == 0)
			{
				if(PlayerInfo[playerid][pLider] != 0 && PlayerInfo[playerid][pMembro] != 0)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, " Você possui uma organização e não pode pegar este emprego!");
				    return true;
				}
			if(PlayerToPoint(2.0, playerid,1561.6332,-2167.2244,13.5643))
		        {
			    PlayerInfo[playerid][pEmprego] = 5;
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Você acabou de adquirir um novo emprego, digite /ajuda para ver os comandos!");
			    PlayerInfo[playerid][pSkin] = 50;
			    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
			    SetPlayerPos(playerid, 1561.6332,-2167.2244,13.5643);
			    SetPlayerFacingAngle(playerid, 93.2263);
			    SetPlayerInterior(playerid, 0);
			    SetPlayerVirtualWorld(playerid, 0);
		    	}
		    	return true;
			}
			else if(strcmp(x_nr,"agricultor",true) == 0)
			{
			if(PlayerToPoint(2.0, playerid,1926.1124,171.1314,37.2813))
		        {
                PlayerInfo[playerid][pEmprego] = 21;
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Você acabou de adquirir um novo emprego, digite /ajuda para ver os comandos!");
			    SetPlayerPos(playerid, 1926.1124,171.1314,37.2813);
			    SetPlayerFacingAngle(playerid, 155.8103);
			    SetPlayerInterior(playerid, 0);
			    SetPlayerVirtualWorld(playerid, 0);
		    	}
		    	return true;
			}
			else if(strcmp(x_nr,"entregador",true) == 0)
			{
			if(PlayerInfo[playerid][pLider] != 0 && PlayerInfo[playerid][pMembro] != 0)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, " Você possui uma organização e não pode pegar este emprego!");
				    return true;
				}
			if(PlayerToPoint(2.0, playerid,2103.5515,-1806.4950,13.5547))
		        {
			    PlayerInfo[playerid][pEmprego] = 20;
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "*Você acabou de adquirir um novo emprego, digite /ajuda para ver os comandos!");
			    PlayerInfo[playerid][pSkin] = 155;
			    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
			    SetPlayerPos(playerid, 2103.5515,-1806.4950,13.5547);
			    SetPlayerFacingAngle(playerid, 270.7468);
			    SetPlayerInterior(playerid, 0);
			    SetPlayerVirtualWorld(playerid, 0);
		    	}
		    	return true;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "* Emprego Inexistente !");
			}
			return true;
	}
	CMD:kitsocio(playerid, x_nr[])
	{
	        if(gettime() < GetPVarInt(playerid, "VarDano"))
				return SendClientMessage(playerid, COLOR_GRAD1,"Você só poderá equipar 3 minutos após tomar dano de alguém !");
	        if(PlayerInfo[playerid][pJailed] == 9)
		    {
				SendClientMessage(playerid,COLOR_GRAD1,"Você não pode usar este comando nas Celas da Administração!");
		      	return true;
		    }
		    if(isnull(x_nr))
				{
					SendClientMessage(playerid, -1, "/kitsocio 1       {9C9C9C}(Soco inglês, Faca, Granada, Eagle, Combat-Shotgun, MP5, M4, Sniper, RPG, Spray)");
				    SendClientMessage(playerid, -1, "/kitsocio 2       {9C9C9C}(Soco inglês, Katana, Molotov, Eagle, Shotgun, MP5, AK-47, Sniper, RPG, Extintor)");
				    SendClientMessage(playerid, -1, "/kitsocio 3       {9C9C9C}(Soco inglês, Faca, Tear Gás, Eagle, Shotgun, MP5, M4, Sniper, RPG, Extintor)");
				    SendClientMessage(playerid, -1, "/kitsocio 4       {9C9C9C}(Armas simples, como Faca, Eagle, Shotgun, M4, Sniper)");
				    SendClientMessage(playerid, -1, "/kitsocio platina {9C9C9C}(Soco inglês, Faca, Granada, Eagle, Shotgun, MP5, M4, Sniper, Bazooka TeleGuiada, Spray)");
					return 1;
				}
		    if(PlayerInfo[playerid][pVIP] == 0)
				{
				    SendClientMessage(playerid, -1, "Para usar {DBED15}/kitsocio {FFFFFF}precisa ser Sócio-Gold ou Sócio-Platina.");
					return true;
				}
			new string[250];
		    if(strcmp(x_nr,"1",true) == 0)
			{
				if(PlayerInfo[playerid][pVIP] < 6)
     					{
         					SendClientMessage(playerid, COLOR_GREY, "Você não é um jogador Sócio");
       		 				return true;
	        			}
                if(PlayerInfo[playerid][pVIP] == 6)
		 			{
         		format(string, sizeof string, "[{fef33c}SÓCIO-GOLD{2641FE}]: %s Pegou Seu KitSócio.", NomePlayer(playerid));
		 		SendClientMessageToAll(0x2641FEFF, string);
		 			}
		 		else if(PlayerInfo[playerid][pVIP] == 7)
		 			{
         		format(string, sizeof string, "[{AEFFD1}SÓCIO-PLATINA{2641FE}]: %s Pegou Seu KitSócio.", NomePlayer(playerid));
		 		SendClientMessageToAll(0x2641FEFF, string);
		 			}
                SendClientMessage(playerid,COLOR_LIGHTRED,"Lembre-se,você não pode estar em batalha! ou levará cadeia!");
				ResetPlayerWeapons(playerid);
				TempDropArmasBody[playerid] = 0;
				GivePlayerWeapon(playerid, 27, 900);
                GivePlayerWeapon(playerid, 29, 900);
                GivePlayerWeapon(playerid, 31, 900);
                GivePlayerWeapon(playerid, 34, 900);
                GivePlayerWeapon(playerid, 35, 5);
                GivePlayerWeapon(playerid, 41, 900);
		    	GivePlayerWeapon(playerid, 24, 900);
			   	GivePlayerWeapon(playerid, 16, 20);
			   	GivePlayerWeapon(playerid, 1, 1);
			   	GivePlayerWeapon(playerid, 4, 1);
				SetPlayerArmour(playerid, 100);
				SetPlayerHealth(playerid, 100);
		    	return true;
			}
			if(strcmp(x_nr,"2",true) == 0)
			{
                if(PlayerInfo[playerid][pVIP] == 6)
		 			{
         		format(string, sizeof string, "[{fef33c}SÓCIO-GOLD{2641FE}]: %s Pegou Seu KitSócio.", NomePlayer(playerid));
		 		SendClientMessageToAll(0x2641FEFF, string);
		 			}
		 		else if(PlayerInfo[playerid][pVIP] == 7)
		 			{
         		format(string, sizeof string, "[{AEFFD1}SÓCIO-PLATINA{2641FE}]: %s Pegou Seu KitSócio.", NomePlayer(playerid));
		 		SendClientMessageToAll(0x2641FEFF, string);
		 			}
                SendClientMessage(playerid,COLOR_LIGHTRED,"Lembre-se,você não pode estar em batalha! ou levará cadeia!");
				ResetPlayerWeapons(playerid);
				TempDropArmasBody[playerid] = 0;
				GivePlayerWeapon(playerid, 42, 900);
                GivePlayerWeapon(playerid, 29, 900);
                GivePlayerWeapon(playerid, 34, 900);
                GivePlayerWeapon(playerid, 30, 900);
                GivePlayerWeapon(playerid, 35, 5);
                GivePlayerWeapon(playerid, 25, 900);
		    	GivePlayerWeapon(playerid, 24, 900);
			   	GivePlayerWeapon(playerid, 18, 20);
			   	GivePlayerWeapon(playerid, 1, 1);
			   	GivePlayerWeapon(playerid, 8, 1);
				SetPlayerArmour(playerid, 100);
				SetPlayerHealth(playerid, 100);
		    	return true;
			}
			else if(strcmp(x_nr,"3",true) == 0)
			{
				if(PlayerInfo[playerid][pVIP] == 6)
		 			{
         		format(string, sizeof string, "[{fef33c}SÓCIO-GOLD{2641FE}]: %s Pegou Seu KitSócio.", NomePlayer(playerid));
		 		SendClientMessageToAll(0x2641FEFF, string);
		 			}
		 		else if(PlayerInfo[playerid][pVIP] == 7)
		 			{
         		format(string, sizeof string, "[{AEFFD1}SÓCIO-PLATINA{2641FE}]: %s Pegou Seu KitSócio.", NomePlayer(playerid));
		 		SendClientMessageToAll(0x2641FEFF, string);
		 			}
                SendClientMessage(playerid,COLOR_LIGHTRED,"Lembre-se,você não pode estar em batalha! ou levará cadeia!");
				ResetPlayerWeapons(playerid);
				TempDropArmasBody[playerid] = 0;
				GivePlayerWeapon(playerid, 42, 900);
                GivePlayerWeapon(playerid, 29, 900);
                GivePlayerWeapon(playerid, 34, 900);
                GivePlayerWeapon(playerid, 31, 900);
                GivePlayerWeapon(playerid, 35, 5);
                GivePlayerWeapon(playerid, 25, 900);
		    	GivePlayerWeapon(playerid, 24, 900);
			   	GivePlayerWeapon(playerid, 17, 20);
			   	GivePlayerWeapon(playerid, 4, 1);
			   	GivePlayerWeapon(playerid, 1, 1);
				SetPlayerArmour(playerid, 100);
				SetPlayerHealth(playerid, 100);
		    	return true;
			}
			else if(strcmp(x_nr,"4",true) == 0)
			{
			    if(PlayerInfo[playerid][pVIP] == 6)
		 			{
         		format(string, sizeof string, "[{fef33c}SÓCIO-GOLD{2641FE}]: %s Pegou Seu KitSócio.", NomePlayer(playerid));
		 		SendClientMessageToAll(0x2641FEFF, string);
		 			}
		 		else if(PlayerInfo[playerid][pVIP] == 7)
		 			{
         		format(string, sizeof string, "[{AEFFD1}SÓCIO-PLATINA{2641FE}]: %s Pegou Seu KitSócio.", NomePlayer(playerid));
		 		SendClientMessageToAll(0x2641FEFF, string);
		 			}
                SendClientMessage(playerid,COLOR_LIGHTRED,"Lembre-se,você não pode estar em batalha! ou levará cadeia!");
				ResetPlayerWeapons(playerid);
				TempDropArmasBody[playerid] = 0;
                GivePlayerWeapon(playerid, 29, 900);
                GivePlayerWeapon(playerid, 34, 900);
                GivePlayerWeapon(playerid, 31, 900);
                GivePlayerWeapon(playerid, 25, 900);
		    	GivePlayerWeapon(playerid, 24, 900);
			   	GivePlayerWeapon(playerid, 4, 1);
				SetPlayerArmour(playerid, 100);
				SetPlayerHealth(playerid, 100);
		    	return true;
			}
			else if(strcmp(x_nr,"platina",true) == 0)
			{
				if(PlayerInfo[playerid][pVIP] < 7)
     					{
         					SendClientMessage(playerid, COLOR_GREY, "Você não é um jogador Sócio Platina");
       		 				return true;
	        			}
         		format(string, sizeof string, "[{AEFFD1}SÓCIO-PLATINA{2641FE}]: %s Pegou Seu KitSócio.", NomePlayer(playerid));
		 		SendClientMessageToAll(0x2641FEFF, string);
                SendClientMessage(playerid,COLOR_LIGHTRED,"Lembre-se,você não pode estar em batalha! ou levará cadeia!");
				ResetPlayerWeapons(playerid);
				TempDropArmasBody[playerid] = 0;
				GivePlayerWeapon(playerid, 41, 900);
                GivePlayerWeapon(playerid, 29, 900);
                GivePlayerWeapon(playerid, 34, 900);
                GivePlayerWeapon(playerid, 31, 900);
                GivePlayerWeapon(playerid, 36, 5);
                GivePlayerWeapon(playerid, 25, 900);
		    	GivePlayerWeapon(playerid, 24, 900);
			   	GivePlayerWeapon(playerid, 16, 20);
			   	GivePlayerWeapon(playerid, 4, 1);
			   	GivePlayerWeapon(playerid, 1, 1);
				SetPlayerArmour(playerid, 100);
				SetPlayerHealth(playerid, 100);
		    	return true;
            }
			else
			{
			        SendClientMessage(playerid, -1, "/kitsocio 1       {9C9C9C}(Soco inglês, Faca, Granada, Eagle, Combat-Shotgun, MP5, M4, Sniper, RPG, Spray)");
				    SendClientMessage(playerid, -1, "/kitsocio 2       {9C9C9C}(Soco inglês, Katana, Molotov, Eagle, Shotgun, MP5, AK-47, Sniper, RPG, Extintor)");
				    SendClientMessage(playerid, -1, "/kitsocio 3       {9C9C9C}(Soco inglês, Faca, Tear Gás, Eagle, Shotgun, MP5, M4, Sniper, RPG, Extintor)");
				    SendClientMessage(playerid, -1, "/kitsocio 4       {9C9C9C}(Armas simples, como Faca, Eagle, Shotgun, M4, Sniper)");
				    SendClientMessage(playerid, -1, "/kitsocio platina {9C9C9C}(Soco inglês, Faca, Granada, Eagle, Shotgun, MP5, M4, Sniper, Bazooka TeleGuiada, Spray)");
			}
			return true;
	}
	CMD:servico(playerid, x_nr[])
	{
	        if(PlayerInfo[playerid][pJailed] == 9)
		    {
				SendClientMessage(playerid,COLOR_GRAD1,"Você não pode usar este comando nas Celas da Administração!");
		      	return true;
		    }

			if(isnull(x_nr))
			{
				SendClientMessage(playerid, COLOR_WHITE, "|__________________[ Nomes dos Serviços ]__________________|");
				SendClientMessage(playerid, COLOR_WHITE, "USE: /servico [nome]");
		  		SendClientMessage(playerid, COLOR_GREY, "Serviços: taxi, Onibus, Medico, Mecanico, Policia, Bombeiro,Advogado");
				return true;
			}
    	    new string[128];
		    if(strcmp(x_nr,"taxi",true) == 0)
			{
			    if(TaxistaDrivers < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Não tem Taxista online agora, tente /servico onibus...");
		            return true;
		        }
		        if(TransportDuty[playerid] > 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "Você não pode ligar para um Taxista agora !");
		            return true;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s Necessita de um Taxista. (Use /aceitar taxi - Para Aceitar a Chamada)", PlayerName(playerid));
		    	SendFamilyMessage(10, TEAM_AZTECAS_COLOR, string);
		    	SendFamilyMessage(30, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você chamou um Taxista,espere a resposta...");
		    	TaxistaCall = playerid;
		    	return true;
			}
			if(strcmp(x_nr,"pizza",true) == 0)
			{
			    if(PizOns < 1)
		        {
		            SendClientMessage(playerid, COLOR_LIGHTRED, "  Não tem nenhum Entregador online agora, espere algum entrar !");
		            return true;
      		  	}
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s Necessita de uma pizza. (Use /aceitar entrega - Para Aceitar a Chamada)", PlayerName(playerid));
		    	EmpregoMensagem(TEAM_AZTECAS_COLOR, string, 20);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você chamou um entregador de Pizza, espere a resposta...");
		    	PizzaCall = playerid;
		    	return true;
			}
			else if(strcmp(x_nr,"moto-taxi",true) == 0)
			{
			    if(TaxistaDrivers < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "  Não tem nenhum Moto-Taxista online agora, espere algum entrar !");
		            return true;
      		  	}
          		if(TransportDuty[playerid] > 0)
 		      	{
		            SendClientMessage(playerid, COLOR_GREY, "Você não pode ligar para um Moto-Taxista agora !");
		            return true;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s Necessita de um Taxista. (Use /aceitar moto-Taxista - Para Aceitar a Chamada)", PlayerName(playerid));
		    	SendFamilyMessage(10, TEAM_AZTECAS_COLOR, string);
		    	SendFamilyMessage(30, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você chamou um Moto-Taxista... Agora espere a resposta.");
		    	TaxistaCall = playerid;
		    	return true;
			}
			else if(strcmp(x_nr,"onibus",true) == 0)
			{
			    if(BusDrivers < 1)
		        {
		            SendClientMessage(playerid, COLOR_LIGHTRED, "* Não tem motorista de onibus online neste momento, espere um entrar !");
		            return true;
		        }
		        if(TransportDuty[playerid] > 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "Você não pode chamar um onibus agora !");
		            return true;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s Necessita de um Onibus. (Use /aceitar onibus - Para aceitar a chamada)", PlayerName(playerid));
		    	SendEmpregoMessage(10, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você chamou um Onibus... Agora espere a resposta.");
		    	BusCall = playerid;
		    	return true;
			}
			else if(strcmp(x_nr,"medico",true) == 0)
			{
			    if(Medics < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Não tem nenhum medico online neste momento, espere um entrar !");
		            return true;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s Necessita da Medicos. (Use /aceitar medico - Para aceitar a chamada)", PlayerName(playerid));
		    	SendFamilyMessage(4, TEAM_AZTECAS_COLOR, string);
		    	SendFamilyMessage(31, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você chamou a Medicos.... Agora espere por resposta.");
		    	MedicCall = playerid;
		    	return true;
			}
			else if(strcmp(x_nr,"bombeiro",true) == 0)
			{
			    if(Bombers < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Nenhum Bombeiro online neste momento, espere um entrar !");
		            return 1;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s Necessita de Bombeiros. (Use /aceitar bombeiro - Para aceitar a chamada)", PlayerName(playerid));
		    	SendFamilyMessage(20, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você chamou os Bombeiros.... Agora espere por resposta.");
		    	BombCall = playerid;
		    	return true;
			}
			else if(strcmp(x_nr,"policia",true) == 0)
			{
			    if(Copsronda < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "Nenhum Policial em ronda no momento.");
		            return true;
		        }
		        foreach(Player, i)
				{
				    if(IsACop(i))
				    {
				        if(PolicialInRonda[i] == 1)
				        {
				            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Estão fazendo uma chamada.");
				            return true;
				        }
					}
				}
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s está precisando de um Policial. (Digite /aceitar chamada para aceitar a chamada)", PlayerName(playerid));
		    	SendFamilyMessage(1, TEAM_AZTECAS_COLOR, string);
		    	SendFamilyMessage(2, TEAM_AZTECAS_COLOR, string);
		    	SendFamilyMessage(3, TEAM_AZTECAS_COLOR, string);
		    	SendFamilyMessage(16, TEAM_AZTECAS_COLOR, string);
		    	SendFamilyMessage(27, TEAM_AZTECAS_COLOR, string);
		    	SendFamilyMessage(11, TEAM_AZTECAS_COLOR, string);
		    	SendFamilyMessage(33, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você chamou um Policial Aguarde a Resposta.");
		    	CopsrondaCall = playerid;
		    	return true;
			}
			else if(strcmp(x_nr,"mecanico",true) == 0)
			{
			    if(Mechanics < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Nenhum Mecânico online neste momento, espere um entrar !");
		            return true;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s Necessita de um mecânico. (Use /aceitar mecanico - Para aceitar a chamada)", PlayerName(playerid));
		    	SendEmpregoMessage(5, TEAM_AZTECAS_COLOR, string);
		    	SendFamilyMessage(34, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você chamou um mecânico... Agora espere por uma resposta.");
		    	MechanicCall = playerid;
		    	return true;
			}
			else if(strcmp(x_nr,"advogado",true) == 0)
			{
			    if(AdvOns < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Não tem nenhum Advogado online agora.");
		            return true;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s Precisa de um Advogado. (Use /aceitar advogado - Para Aceitar a Chamada)", PlayerName(playerid));
		    	SendEmpregoMessage(2, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você chamou por um Advogado,espere uma resposta...");
		    	AdvCall = playerid;
		    	return true;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Serviço Inexistente !");
			}
			return true;
	}
//Amarrar
    CMD:amarrar(playerid, params[])
	{
     		if(IsAMember(playerid))
    		{
			    if(PlayerInfo[playerid][pCargo] < 3)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Você precisa de cargo 3 ou mais para amarrar as pessoas. !");
			        return true;
			    }
			    if(PlayerInfo[playerid][pJailed] != 0)return SendClientMessage(playerid,COLOR_YELLOW,"Você não pode usar esse comando na cadeia!");
				if(sscanf(params, "u", giveplayerid))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USE: /amarrar [ID do Player]");
					return true;
				}
			    if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				    	if(PlayerInfo[giveplayerid][pLevel] == 2)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode sequestrar novatos!");
							return true;
						}
						if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    new car = GetPlayerVehicleID(playerid);
						    if(giveplayerid == playerid)
							{
								SendClientMessage(playerid, COLOR_GREY, "Você não pode se amarrar !");
								return true;
							}
						    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(giveplayerid, car))
						    {
                        	    new string[128];
						        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        format(string, sizeof(string), "* Você foi amarrado por %s.", PlayerName(playerid));
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Você amarrou %s.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s amarrou %s", sendername ,giveplayer);
								SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								GameTextForPlayer(giveplayerid, "~r~Amarrado", 2500, 3);
								Controle(giveplayerid, 0);
								PlayerTied[giveplayerid] = 1;
								PlayerInfo[giveplayerid][pMuted] = 1;
        						pamarrar = 1;
			                    SetTimer("Amarrar",180000, 0);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   O Jogador não está no seu carro, ou você não é o motorista !");
						        return true;
						    }
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de Você !");
						    return true;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
				    return true;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não é um mafioso !");
			}
			return true;
	}

	CMD:ficha(playerid, params[])
	{
			if(!IsACop(playerid))
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não é um policial!");
			    return true;
			}
			if(OnDuty[playerid] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não Bateu o cartão!");
			    return true;
			}
			if(PlayerInfo[playerid][pJailed] != 0)return SendClientMessage(playerid,COLOR_YELLOW,"Você não pode usar esse comando na cadeia!");
			new tmpcar = GetPlayerVehicleID(playerid);
			if(sscanf(params, "u", giveplayerid))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /ficha [ID do Player]");
				return true;
			}
			if(IsAPoliciaCar(tmpcar)||PlayerToPoint(60.0, playerid,232.8069,164.0555,1003.0234)||PlayerToPoint(60.0, playerid,232.2051,117.3912,1003.2188)||PlayerToPoint(20.0, playerid,322.4880,309.1409,999.1484)||PlayerToPoint(40.0, playerid,246.1936,69.8609,1003.6406))
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    new string[75];
				    if(GetPlayerWantedLevelEx(giveplayerid) > 0)
				    {
				        GetPlayerName(giveplayerid, sendername, sizeof(sendername));
						SendClientMessage(playerid, COLOR_WHITE, "|______________ Ficha Na Policia ______________|");
						format(string, sizeof(string), "Nome: %s", PlayerName(giveplayerid));
						SendClientMessage(playerid, COLOR_WHITE,string);
						format(string, sizeof(string), "Crime: %s", PlayerCrime[giveplayerid][pAccusedof]);
						SendClientMessage(playerid, COLOR_GRAD2,string);
						format(string, sizeof(string), "Acusador: %s", PlayerCrime[giveplayerid][pVictim]);
						SendClientMessage(playerid, COLOR_GRAD3,string);
					}
				    else
				    {
				        GetPlayerName(giveplayerid, sendername, sizeof(sendername));
						SendClientMessage(playerid, COLOR_WHITE, "|______________ Ficha Na Policia ______________|");
						format(string, sizeof(string), "Nome: %s", PlayerName(giveplayerid));
						SendClientMessage(playerid, COLOR_WHITE,string);
						format(string, sizeof(string), "Crime: ********");
						SendClientMessage(playerid, COLOR_GRAD2,string);
						format(string, sizeof(string), "Acusador: ********");
						SendClientMessage(playerid, COLOR_GRAD3,string);
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
				    return true;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Você tem que estar em um carro da policia ou em alguma HQ da policia!");
				return true;
			}
			return true;
	}

	CMD:lenco(playerid, params[])// by JP
	{
	    new string[MAX_STRING];
	    if(IsPlayerConnected(playerid))
	    {
	        if(sscanf(params, "u", giveplayerid))
			{
	        	SendClientMessage(playerid, COLOR_GRAD2, "USE: /lenco [ID/ParteDoNick]");
				return 1;
			}
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(giveplayerid == playerid) { return 1; }
			        if(BlindFold[giveplayerid] == 0)
			        {
			        	if(PlayerTied[giveplayerid] == 1)
			        	{
			            	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(giveplayerid))
	        				{
               					SendClientMessage(playerid, COLOR_GREY, "   O Player deve estar no mesmo veículo que você !");
        						return 1;
	        				}
	        				GetPlayerName(playerid, sendername, sizeof(sendername));
	        				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
	        				SetPlayerCameraPos(giveplayerid, 2000,-2000,2000);
							SetPlayerCameraLookAt(giveplayerid, 2000,-2000,2000);
							SetPlayerInterior(giveplayerid,20);
							//GangZoneShowForPlayer(giveplayerid, BlackRadar, 0x000000FF);
			            	BlindFold[giveplayerid] = 1;
			            	format(string, sizeof(string), "* %s colocou um lenço nos olhos de %s", sendername, giveplayer);
			            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			        	}
			        	else
			        	{
			            	SendClientMessage(playerid, COLOR_GREY, "    O Player deve ser amarrado primeiro !");
							return 1;
						}
					}
					else
					{
					    new Float:x, Float:y, Float:z;
					    GetPlayerPos(giveplayerid,x,y,z);
					    if(PlayerToPoint(5, playerid, x, y, z))
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
	        				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
	        				SetPlayerInterior(giveplayerid,0);
					        SetCameraBehindPlayer(giveplayerid);
					    	BlindFold[giveplayerid] = 0;
					    	//GangZoneHideForPlayer(giveplayerid, BlackRadar);
					    	format(string, sizeof(string), "* %s tira o lenço dos olhos %s", sendername, giveplayer);
			            	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   O Player não está perto de você !");
						    return 1;
						}
					}
			    }
			}
	    }
	    return 1;
	}

	stock isOrgSeq(playerid){

		switch(GetPlayerOrg(playerid))
		{
		    case 5,6,8,22,12,13,14,15,17,18,19,21,23,24,25,26,27,28:return 1;
		}
		return 0;
	}

	CMD:sequestrar(playerid, params[])
	{
			if(isOrgSeq(playerid))
 			{
			    if(PlayerInfo[playerid][pCargo] < 3)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Você precisa de cargo 3+ para amarrar!");
			        return 1;
			    }
				if(sscanf(params, "u", giveplayerid))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USE: /sequestrar [ID/Nome]");
					return 1;
				}
			    if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
					    if(Sequestrado[giveplayerid] == 1)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Este jogador já está sendo sequestrado!");
					        return 1;
	                    }
						if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    new org = GetPlayerOrg(playerid);
							new car = GetPlayerVehicleID(playerid);
						    if(giveplayerid == playerid)return SendClientMessage(playerid, COLOR_GREY, "Você não pode sequestrar a si mesmo!");
						    if(SeqOrg[org])return SendClientMessage(playerid, COLOR_GREY, "Sua organização ja ultrapassou o limite de sequestros neste payday!");
						    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(giveplayerid, car))
						    {
                        	    new string[128];
						        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        format(string, sizeof(string), "* Você foi sequestrado por %s.", sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Você está sequestrando %s.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s está sequestrando %s.", sendername ,giveplayer);
								SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								GameTextForPlayer(giveplayerid, "~>~~r~SEQUESTRADO~<~", 2500, 3);
								TogglePlayerControllable(giveplayerid, 0);
								format(string, sizeof(string), "[SEQUESTRO]: O %s %s está sequestrando %s.",GetOrgName(org),PlayerName(playerid),PlayerName(giveplayerid));
							    SendClientMessageToAll(COLOR_LIGHTRED, string);
                           		Sequestrado[giveplayerid] = 1;
	    				   		PlayerTied[giveplayerid] = 0;
			               		PlayerInfo[giveplayerid][pMuted] = 0;
					   			PlayerInfo[giveplayerid][pInt] = 0;
					   			SeqOrg[org]++;
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   Jogador não esta no seu carro ou você não e o motorista!");
						        return 1;
						    }
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Esse jogador esta longe de você!");
						    return 1;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Esse não é um jogador ativo!");
				    return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não e membro de uma familia!");
			}
			return 1;
	}


	CMD:retirar(playerid, params[])
	{
			if(!IsACop(playerid))
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não é um policial!");
			    return true;
			}
			if(OnDuty[playerid] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não Bateu o cartão!");
			    return true;
			}
			if(PlayerInfo[playerid][pJailed] != 0)return SendClientMessage(playerid,COLOR_YELLOW,"Você não pode usar esse comando na cadeia!");
	        if(IsACop(playerid) || IsAGOV(playerid))
	        {
	            if(PlayerInfo[playerid][pCargo] < 2)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Você precisa de cargo 2 para usar este comando !");
	                return true;
	            }
	            new x_nr[32];
        	    new string[128];
				if(sscanf(params, "s[32]u", x_nr, giveplayerid))
				{
					SendClientMessage(playerid, COLOR_WHITE, "|__________________[ Retirar ]__________________|");
					SendClientMessage(playerid, COLOR_WHITE, "USE: /retirar [nome] [ID do Player]");
			  		SendClientMessage(playerid, COLOR_GREY, "Nomes Disponíveis: Motorista, Piloto, Marujo, PorteLegal, Armas, Drogas, Materiais");
					return true;
				}
			    if(strcmp(x_nr,"Motorista",true) == 0)
				{
					if(IsPlayerConnected(giveplayerid))
					{
				        if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
					        new cop[MAX_PLAYER_NAME];
				            GetPlayerName(playerid, cop, sizeof(cop));
				            new fudido[MAX_PLAYER_NAME];
				            GetPlayerName(giveplayerid, fudido, sizeof(fudido));
				      		format(string, sizeof(string), "* Você retirou a licença de motorista de %s.", fudido);
				      		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Oficial %s Retirou sua licença de motorista.", cop);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pCarLic] = 0;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de você !");
						    return true;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
					    return true;
					}
				}
				else if(strcmp(x_nr,"Piloto",true) == 0)
				{
					if(IsPlayerConnected(giveplayerid))
					{
				       	if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
					        new cop[MAX_PLAYER_NAME];
				            GetPlayerName(playerid, cop, sizeof(cop));
				            new fudido[MAX_PLAYER_NAME];
				            GetPlayerName(giveplayerid, fudido, sizeof(fudido));
					        format(string, sizeof(string), "* Você retirou a licença de Voo de %s.", fudido);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Oficial %s Retirou sua licença de Voo.", cop);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pFlyLic] = 0;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de Você !");
						    return true;
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
					    return true;
					}
				}
				else if(strcmp(x_nr,"PorteLegal",true) == 0)
				{
					if(IsPlayerConnected(giveplayerid))
					{
				        GetPlayerName(giveplayerid, sendername, sizeof(sendername));
				        if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
					        new cop[MAX_PLAYER_NAME];
				            GetPlayerName(playerid, cop, sizeof(cop));
				            new fudido[MAX_PLAYER_NAME];
				            GetPlayerName(giveplayerid, fudido, sizeof(fudido));
					        format(string, sizeof(string), "* Você retirou a licença de Porte de Armas de %s.", fudido);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Oficial %s Retirou sua licença de Porte de Armas.", cop);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pGunLic] = 0;
				      	}
				      	else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de Você !");
						    return true;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
					    return true;
					}
				}
				else if(strcmp(x_nr,"Marujo",true) == 0)
				{
					if(IsPlayerConnected(giveplayerid))
					{
				        GetPlayerName(giveplayerid, sendername, sizeof(sendername));
				        if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
					        new cop[MAX_PLAYER_NAME];
				            GetPlayerName(playerid, cop, sizeof(cop));
				            new fudido[MAX_PLAYER_NAME];
				            GetPlayerName(giveplayerid, fudido, sizeof(fudido));
					        format(string, sizeof(string), "* Você retirou a licença de Navegacao de %s.", fudido);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Oficial %s Retirou sua licença de Navegacao.", cop);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pBoatLic] = 0;
			      		}
				        else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de Você !");
						    return true;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
					    return true;
					}
				}
				else if(strcmp(x_nr,"Armas",true) == 0)
				{
					if(IsPlayerConnected(giveplayerid))
					{
				        GetPlayerName(giveplayerid, sendername, sizeof(sendername));
				        if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
                            new cop[MAX_PLAYER_NAME];
				            GetPlayerName(playerid, cop, sizeof(cop));
				            new fudido[MAX_PLAYER_NAME];
				            GetPlayerName(giveplayerid, fudido, sizeof(fudido));
					        format(string, sizeof(string), "* Você retirou as Armas de %s.", fudido);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				       		format(string, sizeof(string), "* Oficial %s retirou suas Armas.", cop);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        ResetPlayerWeapons(giveplayerid);
					    }
				       	else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de Você !");
						    return true;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
					    return true;
					}
				}
				else if(strcmp(x_nr,"Drogas",true) == 0)
				{
					if(IsPlayerConnected(giveplayerid))
					{
				        GetPlayerName(giveplayerid, sendername, sizeof(sendername));
				        if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    new cop[MAX_PLAYER_NAME];
				            GetPlayerName(playerid, cop, sizeof(cop));
				            new fudido[MAX_PLAYER_NAME];
				            GetPlayerName(giveplayerid, fudido, sizeof(fudido));
					        format(string, sizeof(string), "* Você retirou as Drogas de %s.", fudido);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					        format(string, sizeof(string), "* Oficial %s retirou suas Drogas.", cop);
					        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        PlayerInfo[giveplayerid][pDrogas] = 0;
					        PlayerInfo[giveplayerid][pDrogas2] = 0;
					        PlayerInfo[giveplayerid][pDrogas3] = 0;
						}
					    else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de Você !");
						    return true;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
					    return true;
					}
				}
				else if(strcmp(x_nr,"Materiais",true) == 0)
				{
					if(IsPlayerConnected(giveplayerid))
					{
				       	GetPlayerName(giveplayerid, sendername, sizeof(sendername));
				        if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    new cop[MAX_PLAYER_NAME];
				            GetPlayerName(playerid, cop, sizeof(cop));
				            new fudido[MAX_PLAYER_NAME];
				            GetPlayerName(giveplayerid, fudido, sizeof(fudido));
					        format(string, sizeof(string), "* Você retirou os Materiais de %s.", fudido);
					        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					       	format(string, sizeof(string), "* Oficial %s Retirou seus Materiais.", cop);
					       	SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					      	PlayerInfo[giveplayerid][pMats] = 0;
						}
				      	else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de Você !");
						    return true;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
					    return true;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Nome inválido !");
					return true;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Você não e COP !");
	            return true;
	        }
	    	return true;
	}

   CMD:newsenhaadmin(playerid, params[]){

	    if(PlayerInfo[playerid][pAdmin] < 3001)
			return SendClientMessage(playerid, COLOR_GREY, "Você não pode usar este comando !");

		if(sscanf(params, "s[128]", params))
		    return SendClientMessage(playerid, COLOR_GREY, "USE: /newsenhaadmin [Nova Senha]");

		format(SenhaAdministracao, 128, params);

		new string[256];

		format(string, sizeof string, "AdmCmd: %s mudou a senha da administração:", NomePlayer(playerid));
    	ABroadCast(0x00660CC8, string, 1);

		format(string, sizeof string, "ADMCMD: A NOVA SENHA DA ADMINISTRAÇÃO É [%s], TIREM SS PARA NÃO PERDER!", params);
    	ABroadCast(COLOR_LIGHTRED, string, 1);
    	ABroadCast(COLOR_LIGHTBLUE, string, 1);
    	ABroadCast(0x33CCFFAA, string, 1);
    	ABroadCast(COLOR_WHITE, string, 1);
    	ABroadCast(TEAM_BALLAS_COLOR, string, 1);
    	ABroadCast(0xFE85E0AA, string, 1);
		BPFLogs("senhaadmin", string);

    	SalvarSenhaAdmin();
		return 1;
	}

	isPlayerRegistered(nick[]){

	    new file[89];

	    format(file, sizeof file, Pasta_Contas, nick);

	    if(DOF2_FileExists(file))return 1;

	    return 0;
	}

	SalvarSenhaAdmin(){

		if(!DOF2_FileExists(Pasta_Senha)){

		    DOF2_CreateFile(Pasta_Senha);
		}

		DOF2_SetString(Pasta_Senha, "senha", SenhaAdministracao);
		DOF2_SaveFile();
	}

	LoadSenhaAdmin(){

	    if(DOF2_FileExists(Pasta_Senha)){

	        format(SenhaAdministracao, 128, DOF2_GetString(Pasta_Senha, "senha"));
	    }
	    return SenhaAdministracao;
	}
	CMD:refemliberar(playerid, params[])
	{
			if(IsAMember(playerid))
 			{
				if(sscanf(params, "u", giveplayerid))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /refemliberar [ID do Player]");
					return 1;
				}
				if (IsPlayerConnected(giveplayerid))
				{
                	if(Sequestrado[giveplayerid] == 0)
       				{
          				SendClientMessage(playerid, COLOR_GREY, "Este jogador não está sendo sequestrado!");
	            		return 1;
              		}
       				if (ProxDetectorS(8.0, playerid, giveplayerid))
		  			{
      					if(giveplayerid == playerid)
			       		{
 							SendClientMessage(playerid, COLOR_GREY, "Você não se pode salvar a si mesmo!");
				       		return 1;
				   		}
                   	    new string[128];
	    				format(string, sizeof(string), "* Você liberou %s.",PlayerName(giveplayerid));
				   		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		           		format(string, sizeof(string), "* Você foi liberado pelo sequestrador %s.",PlayerName(playerid));
				   		SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
        				format(string, sizeof(string), "[SEQUESTRO] A Vítima %s foi liberada pelo sequestrador %s. Fim do sequestro!",PlayerName(giveplayerid),PlayerName(playerid));
				   		SendClientMessageToAll(COLOR_DBLUE, string);
			   			format(string, sizeof(string), "* %s Liberou %s.",PlayerName(playerid),PlayerName(giveplayerid));
   						SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
  				 		Sequestrado[giveplayerid] = 0;
						PlayerTied[giveplayerid] = 0;
     					PlayerInfo[giveplayerid][pMuted] = 0;
         				Controle(giveplayerid, 1);
	    			}
			    	else SendClientMessage(playerid, COLOR_GREY, "Esse jogador não perto de você!");
      			}
      			else SendClientMessage(playerid, COLOR_GRAD1, " Jogador Offline !");
			}
			else SendClientMessage(playerid, COLOR_GREY, "Você não pode usar este comando");
			return 1;
	}
	stock GetNivelAdv(playerid)
	{
       	new level = PlayerInfo[playerid][pLawSkill];
       	switch(level)
       	{
           	case 0..19:return 1;
           	case 20..99:return 2;
           	case 100..149:return 3;
           	case 150..249:return 4;
           	case 250..369:return 5;
           	case 370..499:return 6;
           	default:return 7;
		}
	    return -1;
	}
	CMD:advogados(playerid)
	{
		new string[128], advogadosonlines;
    	gs_Buffer[0] = EOS;
    	strcat(gs_Buffer, "Id\tNome\tNível\n");
    	for(new i = 0; i < MAX_PLAYERS; i++)
   		{
       		if(IsPlayerConnected(i))
       		{
       		    if(PlayerInfo[i][pEmprego] == 2)
       		    {
       		        advogadosonlines++;
       		        GetPlayerName(i, sendername, sizeof(sendername));
        	       	format(string, 128, "%02d\t%s\t{00FFFF}Nível %d\n\n", i, sendername, GetNivelAdv(i));
        	       	strcat(gs_Buffer, string);
        	       	BPFInfo[playerid][Tels] = PlayerInfo[i][pPnumber];
   					BPFInfo[playerid][pTels] = i;
        	    }
    	    }
    	}
   		format(string, sizeof string, "Advogados Online ({01DF01}%d{FFFFFF})", advogadosonlines);
   		return ShowPlayerDialog(playerid, DIALOG_SMS, 5, string, gs_Buffer, "Enviar SMS","Fechar");
	}
	CMD:refem(playerid, params[])
	{
		new acao[25];
		if(sscanf(params, "s[25]", acao))return SendClientMessage(playerid, COLOR_GRAD1, "USE: /refem [nome]"),
		                                        SendClientMessage(playerid, COLOR_GRAD1, "Nomes disponíveis: salvar, liberar");
		if(strcmp(acao, "salvar", true) == 0)
		{
            return SendClientMessage(playerid, COLOR_GRAD1, "Este comando foi trocado para: /refemsalvar [ID do Player]");
		}
		if(strcmp(acao, "liberar", true) == 0)
		{
			return SendClientMessage(playerid, COLOR_GRAD1, "Este comando foi trocado para: /refemliberar [ID do Player]");
		}
		return true;
	}
	CMD:refemsalvar(playerid, params[])
	{
			if(IsACop(playerid))
            {
			    if(PlayerInfo[playerid][pCargo] < 2)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Você precisa de cargo 2 ou mais para salvar as pessoas !");
			        return true;
			    }
				if(sscanf(params, "u", giveplayerid))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USE: /refemsalvar [ID do Player]");
					return true;
				}
				if(IsPlayerConnected(giveplayerid))
				{
			   		if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode salvar si mesmo!"); return true; }
						if(Sequestrado[giveplayerid])
						{
                       	    new string[128];
                       	    new org = GetPlayerOrg(playerid);
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
						    format(string, sizeof(string), "* Você foi salvo por %s.", sendername);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "[SEQUESTRO] Atenção, %s %s conseguiu salvar o refém %s. Fim do Sequestro!",GetOrgName(org),sendername,giveplayer);
	                        SendClientMessageToAll(COLOR_DBLUE, string);
							format(string, sizeof(string), "* Você salvou %s.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							GameTextForPlayer(giveplayerid, "~g~Libertado", 2500, 3);
							Controle(giveplayerid, 1);
							Sequestrado[giveplayerid] = 0;
							PlayerTied[giveplayerid] = 0;
							PlayerInfo[giveplayerid][pMuted] = 0;
							PLO += 100;
							DepositarOrgGrana(7,100);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   O Jogador não está sequestrado !");
						    return true;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de Você !");
					    return true;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
				    return true;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não é um Oficial !");
			}
			return true;
	}
	CMD:desamarrar(playerid, params[])
	{
			if(IsAMember(playerid) || IsACop(playerid))
 			{
			    if(PlayerInfo[playerid][pCargo] < 2)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Você precisa de cargo 2 ou mais para desamarrar as pessoas !");
			        return true;
			    }
				if(sscanf(params, "u", giveplayerid))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USE: /desamarrar [ID do Player]");
					return true;
				}
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode desamarrar à sí mesmo!"); return true; }
							if(PlayerTied[giveplayerid])
							{
                        	    new string[128];
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* Você foi libertado por %s.", sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Você libertou %s.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(giveplayerid, "~g~Libertado", 2500, 3);
								Controle(giveplayerid, 1);
								PlayerTied[giveplayerid] = 0;
								PlayerInfo[giveplayerid][pMuted] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   O Jogador não está sequestrado !");
							    return true;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de Você !");
						    return true;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
				    return true;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não é um Ganngster !");
			}
			return true;
	}
	CMD:corrida(playerid, params[])
    {
	        if(PlayerInfo[playerid][pEmprego] == 9 || PlayerInfo[playerid][pEmprego] == 13 || IsAMec(playerid))
			{
        	    new string[128];
				if(TransportDuty[playerid] > 0)
				{
				    if(TransportDuty[playerid] == 1)
				    {
				        TaxistaDrivers -= 1;
				        HideTaxista(playerid);
						if(TransportPlayer[playerid] !=-1)
						{
						    HideTaxista(TransportPlayer[playerid]);
							TransportPlayer[TransportPlayer[playerid]] = -1;
				        	TransportPlayer[playerid] = -1;
						}
				    }
				    else if(TransportDuty[playerid] == 2)
				    {
				        BusDrivers -= 1;
				    }
				    TransportDuty[playerid] = 0;
					format(string, sizeof(string), "* Voce está de folga e recebeu R$%d.", TransportMoney[playerid]);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					GiveDinheiro(playerid, TransportMoney[playerid]);
					TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
					return true;
				}
				new Veh = GetPlayerVehicleID(playerid);
				if(IsATaxistaCar(Veh))
				{
					if(PlayerInfo[playerid][pEmprego] == 13 || GetPlayerOrg(playerid) == 30)
					{
					    if(GetPlayerState(playerid) == 2)
					    {
							if(sscanf(params, "d", moneys))
							{
								SendClientMessage(playerid, COLOR_WHITE, "USE: /corrida [Preço]");
								return true;
							}
							if(moneys < 1 || moneys > 999) { SendClientMessage(playerid, COLOR_GREY, "   Preço da corrida mínimo R$1 Máximo R$999!"); return true; }
						    TaxistaDrivers += 1; TransportDuty[playerid] = 1; TransportValue[playerid] = moneys;
						    GetPlayerName(playerid,sendername,sizeof(sendername));
		    				format(string, sizeof(string), "Taxista %s está em serviço, Corrida: R$%d - Chame um Taxista /servico taxi", sendername, TransportValue[playerid]);
		    				OOCNews(TEAM_GROVE_COLOR,string);
		    				ShowTaxista(playerid);
		    				new gstring[60];
		    				format(gstring, sizeof(gstring), "taximetro:~r~0/0");
						    PlayerTextDrawSetString(playerid,Taxistam[playerid], gstring);
						   	format(gstring, sizeof(gstring), "$00000");
							PlayerTextDrawSetString(playerid,ValorTaxista[playerid], gstring);
						 	format(gstring, sizeof(gstring), "Passageiro:~n~~w~Ninguem");
						 	PlayerTextDrawSetString(playerid,passTaxista[playerid], gstring);
		    				return true;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Você não é o motorista!");
						    return true;
						}
					}
				}
				else if(IsAOniCar(Veh) && PlayerInfo[playerid][pEmprego] == 9)
				{
				    if(GetPlayerState(playerid) == 2)
				    {
						if(sscanf(params, "d", moneys))
						{
							SendClientMessage(playerid, COLOR_WHITE, "USE: /corrida [Preco]");
							return true;
						}
						if(moneys < 1 || moneys > 999) { SendClientMessage(playerid, COLOR_GREY, "   Preço da corrida Mínimo R$1 Máximo R$999!"); return true; }
					    BusDrivers += 1; TransportDuty[playerid] = 2; TransportValue[playerid]= moneys;
					    GetPlayerName(playerid,sendername,sizeof(sendername));
	    				format(string, sizeof(string), "Motorista de onibus %s está em serviço, Corrida: R$%d - Chame um onibus /servico onibus", sendername, TransportValue[playerid]);
	    				OOCNews(TEAM_GROVE_COLOR,string);
	    				return true;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Você não é o motorista!");
					    return true;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Você não está em um Taxi,onibus ou carro de Detran!");
				    return true;
				}
			}
			else
			{
			    SendClientMessage(playerid,COLOR_GREY,"Você não é um Taxista/motorista de ônibus!");
			    return true;
			}
	    	return true;
 	}
	CMD:minhaslicencas(playerid, params[])
    {
	        new text1[20];
	        new text2[20];
	        new text4[20];
	        new text5[20];
    	    new string[128];
	        if(PlayerInfo[playerid][pCarLic]) { text1 = "Passou"; } else { text1 = "Negativo"; }
            if(PlayerInfo[playerid][pFlyLic]) { text4 = "Passou"; } else { text4 = "Negativo"; }
			if(PlayerInfo[playerid][pBoatLic]) { text2 = "Passou"; } else { text2 = "Negativo"; }
	        if(PlayerInfo[playerid][pGunLic]) { text5 = "Passou"; } else { text5 = "Negativo"; }
	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Licencas __________________|");
	        format(string, sizeof(string), "** Motorista: %s.", text1);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Piloto: %s.", text4);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Marujo: %s.", text2);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Pescador: Passou.");
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Armas: %s.", text5);
			SendClientMessage(playerid, COLOR_GREY, string);
	    	return true;
 	}

 	CMD:mostrarlicencas(playerid, params[])
    {
			if(sscanf(params, "u", giveplayerid))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USE: /mostrarlicencas [ID do Player]");
				return true;
			}
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if(PlayerInfo[giveplayerid][pAdmin] && admtrampando[giveplayerid])
			    	{
						SendClientMessage(playerid, COLOR_GREY, "Você não pode mostrar licenças para admins em modo trabalho !");
						return true;
		    		}
				    if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Para ver suas licencas Use: /minhaslicencas!"); return true; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    new text1[20];
				        new text2[20];
				        new text4[20];
				        new text5[20];
						if(PlayerInfo[playerid][pCarLic]) { text1 = "Passou"; } else { text1 = "Negativo"; }
                        if(PlayerInfo[playerid][pFlyLic]) { text4 = "Passou"; } else { text4 = "Negativo"; }

                	    new string[128];
						if(PlayerInfo[playerid][pBoatLic]) { text2 = "Passou"; } else { text2 = "Negativo"; }
				        if(PlayerInfo[playerid][pGunLic]) { text5 = "Passou"; } else { text5 = "Negativo"; }
				        format(string, sizeof(string), "|__________ Licencas de %s __________|", PlayerName(playerid));
				        SendClientMessage(giveplayerid, COLOR_WHITE, string);
				        format(string, sizeof(string), "** Motorista: %s.", text1);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Piloto: %s.", text4);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Marujo: %s.", text2);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Pescador: Passou.");
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Armas: %s.", text5);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "* %s mostrou suas licencas para você.", PlayerName(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Você mostrou suas licencas para %s.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador esta longe de Você !");
					    return true;
					}
				}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   O Jogador está offline !");
	            return true;
			}
	    	return true;
 	}

	CMD:finalizarguerra(playerid, result[])
	{
	   	if(PlayerInfo[playerid][pAdmin] < 2)
	   	{
			SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando!");
			return 1;
	   	}

	   	if(!TendoGuerra)return SendClientMessage(playerid, COLOR_GRAD1, "Não está havendo uma guerra.");

        TempoGuerra = 0;
        EndGuerra();
        teveguerra=false;
        new string[128];
		format(string, sizeof string, "AdmCmd: O admin %s finalizou a Guerra.", NomePlayer(playerid));
		SendClientMessageToAll(COLOR_LIGHTRED, string);
	    return 1;
	}

//-------------------- Ckeck S0beit Installed BY: SA-MP TEAM -------------

CMD:checksobeit(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pAdminTemp] < 1) return 1;
	new pid, string[128];
	if(sscanf(params, "u", pid)) return SendClientMessage(playerid, -1, "USE: /checksobeit [playerid]");
	if(!IsPlayerConnected(pid)) return SendClientMessage(playerid, -1, "Player não conectado.");
	if(!gPlayerLogged[pid]) return SendClientMessage(playerid, -1, "Player não logado.");
	if(!admtrampando[playerid]) return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando, pois não está em modo trabalho!");

	if((gettime()-TempoAFK[pid]) > 3)return SendClientMessage(playerid, -1, "Este player está de ESC.");

    SendClientMessage(playerid, COLOR_LIGHTRED, "FUNCIONALIDADE:");
    SendClientMessage(playerid, COLOR_GRAD1, "IMPORTANTE LER: Se um jogador for congelado, e NÃO tiver o s0beit instalado em seu computador");
    SendClientMessage(playerid, COLOR_GRAD1, "A posição Z (Altura) da camera, fica no máximo 1.10000 metros de diferença da posição Z da skin.");
    SendClientMessage(playerid, COLOR_GRAD1, "Se o resultado for acima de 1.50000 metros, é de certeza que o jogador tem o s0beit instalado!");
	SendClientMessage(playerid, COLOR_GRAD1, "Você terá o resultado em alguns segundos, aguarde...");

	new Float:x, Float:y, Float:z;
	GetPlayerPos(pid, x, y, z);
	SetPVarFloat(pid, "s0bx", x);
	SetPVarFloat(pid, "s0by", y);
	SetPVarFloat(pid, "s0bz", z);
	SetPVarInt(pid, "s0bint", GetPlayerInterior(pid));

    SetPlayerInterior(pid, 0);
	SetPlayerPos(pid, 2821.2642,2475.0986,17.6719);
	SetPlayerFacingAngle(pid, 223.6292);
	Controle(pid, false);
	SetCameraBehindPlayer(pid);


	format(string, sizeof(string), "[Anti-S0beit]: Admin %s iniciou uma checagem de s0beit em %s.", NomePlayer(playerid), NomePlayer(pid));
    ABroadCast(COLOR_LIGHTRED, string, 1);
	BPFLogs("s0beitCheck", string);


    //Starts0bCheck(pid, 0);
    SendClientMessage(pid, -1, "Por favor aguarde enquanto estamos realizando uma checagem.");
    SetTimerEx("Starts0bCheck", 2000, 0, "dd", pid, 0);

	return 1;
}


BPF::Starts0bCheck(playerid, type)
{
	if(IsPlayerConnected(playerid))
	{
	    new string[128];
		// Don't check people in tutorial or hospital.
		if(	IsPlayerInRangeOfPoint(playerid, 1.0, 1192.256836, -1304.637939, 7.0000) || 		// All Saints
		    IsPlayerInRangeOfPoint(playerid, 1.0, 2012.323608, -1436.354370, 5.0000) || 		// County General
		    IsPlayerInRangeOfPoint(playerid, 1.0, 764.4561160, -1761.971436, 0.0000) || 		// Tutorial First Position.
		    IsPlayerInRangeOfPoint(playerid, 1.0, 2324.685303, -2340.955078, 0.0000))
		{
			format(string, sizeof(string), "[Anti-S0beit]: Não foi possível realizar a checagem de s0beit em %s.", NomePlayer(playerid));
		    ABroadCast(0xFF0000FF, string, 1);
			BPFLogs("s0beitCheck", string);
			return 1; // Tutorial Second Position.
		}

	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        new Float:pos[3];
	        GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	        SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		}
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("Finishs0bCheck", 5000, 0, "ii", playerid, type);
	}
	else
	{
	    ABroadCast(0xFF0000FF, "[Anti-S0beit]: Player não está mais conectado.", 1);
	}
	return 1;
}

forward Finishs0bCheck(playerid, type);
public Finishs0bCheck(playerid, type)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:testpos[6], string[128];
		GetPlayerCameraPos(playerid, testpos[0], testpos[1], testpos[2]);
		GetPlayerPos(playerid, testpos[3], testpos[4], testpos[5]);
		TogglePlayerControllable(playerid, 1);

		if(floatabs(testpos[2] - testpos[5]) > 1.5)
		{
			format(string, sizeof string, "[Anti-S0beit]: RESULTADO: %s tem o s0beit instalado.", NomePlayer(playerid));
		    ABroadCast(COLOR_LIGHTRED, string, 1);
			BPFLogs("s0beitCheck", string);
			format(string, sizeof string, "[Anti-S0beit]: Posição Z da Camera: %f.", testpos[2]);
		    ABroadCast(COLOR_LIGHTRED, string, 1);
			BPFLogs("s0beitCheck", string);
			format(string, sizeof string, "[Anti-S0beit]: Posição Z do Player: %f.", testpos[5]);
		    ABroadCast(COLOR_LIGHTRED, string, 1);
			BPFLogs("s0beitCheck", string);
			format(string, sizeof string, "[Anti-S0beit]: Diferença absoluta da Posição Z: %f Metros.\r\n\r\n", floatabs(testpos[2] - testpos[5]));
		    ABroadCast(COLOR_LIGHTRED, string, 1);
			BPFLogs("s0beitCheck", string);

            SendClientMessage(playerid, -1, "Obrigado, você agora pode continuar jogando.");
			SetOriginalPos(playerid);
		}
		else
		{

			format(string, sizeof string, "[Anti-S0beit]: RESULTADO: %s não tem o s0beit instalado.", NomePlayer(playerid));
		    ABroadCast(COLOR_GREEN, string, 1);
			BPFLogs("s0beitCheck", string);
			format(string, sizeof string, "[Anti-S0beit]: Posição Z da Camera: %f.", testpos[2]);
		    ABroadCast(COLOR_GREEN, string, 1);
			BPFLogs("s0beitCheck", string);
			format(string, sizeof string, "[Anti-S0beit]: Posição Z do Player: %f.", testpos[5]);
		    ABroadCast(COLOR_GREEN, string, 1);
			BPFLogs("s0beitCheck", string);
			format(string, sizeof string, "[Anti-S0beit]: Diferença absoluta da Posição Z: %f Metros.\r\n\r\n", floatabs(testpos[2] - testpos[5]));
		    ABroadCast(COLOR_GREEN, string, 1);
			BPFLogs("s0beitCheck", string);

		    SendClientMessage(playerid, -1, "Obrigado, você agora pode continuar jogando.");
            SetOriginalPos(playerid);
		}
	}
	else
	{
	    ABroadCast(0xFF0000FF, "[Anti-S0beit]: Player não está mais conectado.", 1);
	}
	return 1;
}


stock SetOriginalPos(playerid)
{
	SetPlayerInterior(playerid, GetPVarInt(playerid, "s0bint"));

	SetPlayerPos(playerid, GetPVarFloat(playerid, "s0bx"), GetPVarFloat(playerid, "s0by"), GetPVarFloat(playerid, "s0bz"));

	return 0;
}
 	CMD:venderarma(playerid, params[])
    {
    	if(PlayerInfo[playerid][pJailed] != 0)
    	{
	  	 	SendClientMessage(playerid,COLOR_YELLOW,"Você não pode vender armas na cadeia!");
	   		return true;
    	}
		new string[128];
		new x_weapon[32],weapon[MAX_PLAYERS],ammo[MAX_PLAYERS],price[MAX_PLAYERS];
		if(sscanf(params, "us[64]", giveplayerid, x_weapon))
		{
			SendClientMessage(playerid,COLOR_GRAD1,"USE: /VenderArma [ID do Player] [Arma]");
			SendClientMessage(playerid,COLOR_GREY,"Armas: SNIPER(25) spistola(100) eagle(150) mp5(200) shotgun(200)");
			SendClientMessage(playerid,COLOR_GREY,"Armas: rifle (600) ak47(600) m4(600) colete(500)");
			return true;
		}
  		if (PlayerInfo[playerid][pEmprego] != 7)
		{
		    SendClientMessage(playerid,COLOR_GREY,"Você não é um Vendendor de Armas !");
		    return true;
		}
		if (giveplayerid == playerid)
		{
		    SendClientMessage(playerid,COLOR_GREY,"Você não pode vender armas pra si mesmo!");
		    return true;
		}
		if (IsPlayerConnected(giveplayerid))
		{
			if(strcmp(x_weapon,"spistola",true) == 0)
			{
				if(PlayerInfo[playerid][pMats] > 99)
				{
					weapon[playerid] = 23;
					price[playerid] = 100;
					ammo[playerid] = 50;
					PlayerInfo[giveplayerid][pGun2] = 23;
					PlayerInfo[giveplayerid][pAmmo2] = 50;
				}
				else
				{
					SendClientMessage(playerid,COLOR_GREY,"Materiais insulficiente para Arma!");
					return true;
				}
			}
			else if(strcmp(x_weapon,"sniper",true) == 0)
			{
				if(PlayerInfo[playerid][pMats] > 24)
				{
					weapon[playerid] = 34;
					price[playerid] = 25;
					ammo[playerid] = 10;
					PlayerInfo[giveplayerid][pGun1] = 14;
					PlayerInfo[giveplayerid][pAmmo1] = 1;
				}
				else
				{
					SendClientMessage(playerid,COLOR_GREY,"Materiais insulficiente para Arma!");
					return true;
				}
			}
			else if(strcmp(x_weapon,"eagle",true) == 0)
			{
				if(PlayerInfo[playerid][pMats] > 199)
				{
					weapon[playerid] = 24;
					price[playerid] = 150;
					ammo[playerid] = 50;
					PlayerInfo[giveplayerid][pGun2] = 24;
					PlayerInfo[giveplayerid][pAmmo2] = 50;
				}
				else
				{
					SendClientMessage(playerid,COLOR_GREY,"Materiais insulficiente para Arma!");
					return true;
				}
			}
			else if(strcmp(x_weapon,"mp5",true) == 0)
			{
				if(PlayerInfo[playerid][pMats] > 199)
				{
					weapon[playerid] = 29;
					price[playerid] = 200;
					ammo[playerid] = 200;
					PlayerInfo[giveplayerid][pGun2] = 29;
					PlayerInfo[giveplayerid][pAmmo2] = 200;
				}
				else
				{
					SendClientMessage(playerid,COLOR_GREY,"Materiais insulficiente para Arma!");
					return true;
				}
			}
			else if(strcmp(x_weapon,"shotgun",true) == 0)
			{
				if(PlayerInfo[playerid][pMats] > 199)
				{
					weapon[playerid] = 25;
					price[playerid] = 200;
					ammo[playerid] = 50;
					PlayerInfo[giveplayerid][pGun2] = 25;
					PlayerInfo[giveplayerid][pAmmo2] = 50;
				}
				else
				{
					SendClientMessage(playerid,COLOR_GREY,"Materiais insulficiente para Arma!");
					return true;
				}
			}
			else if(strcmp(x_weapon,"ak47",true) == 0)
			{
				if(PlayerInfo[playerid][pMats] > 599)
				{
					weapon[playerid] = 30;
					price[playerid] = 600;
					ammo[playerid] = 250;
					PlayerInfo[giveplayerid][pGun2] = 30;
					PlayerInfo[giveplayerid][pAmmo2] = 250;
				}
				else
				{
					SendClientMessage(playerid,COLOR_GREY,"Você não tem Materiais para essa arma!");
					return true;
				}
			}
			else if(strcmp(x_weapon,"m4",true) == 0)
			{
				if(PlayerInfo[playerid][pMats] > 599)
				{
					weapon[playerid] = 31;
					price[playerid] = 600;
					ammo[playerid] = 250;
					PlayerInfo[giveplayerid][pGun2] = 31;
					PlayerInfo[giveplayerid][pAmmo2] = 250;
				}
				else
				{
					SendClientMessage(playerid,COLOR_GREY,"Você não tem Materiais para essa arma!");
					return true;
				}
			}
			else if(strcmp(x_weapon,"rifle",true) == 0)
			{
				if(PlayerInfo[playerid][pMats] > 599)
				{
					weapon[playerid] = 33;
					price[playerid] = 600;
					ammo[playerid] = 50;
					PlayerInfo[giveplayerid][pGun2] = 33;
					PlayerInfo[giveplayerid][pAmmo2] = 50;
				}
				else
				{
					SendClientMessage(playerid,COLOR_GREY,"Materiais insulficiente para Arma!");
					return true;
				}
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"Nome da arma inválida!");
				return true;
			}
			if (ProxDetectorS(5.0,playerid,giveplayerid))
			{
			    if(giveplayerid == playerid)
				{
					SendClientMessage(playerid,COLOR_GRAD1,"Você não está numa loja de armas!");
					return true;
				}
				if(PlayerInfo[playerid][pMiserPerk] > 0)
				{
				    new skill = 2 * PlayerInfo[playerid][pMiserPerk];
				    new mats = price[playerid] / 100;
				    price[playerid] -= (mats)*(skill);
				}
				GetPlayerName(giveplayerid,giveplayer,sizeof(giveplayer));
				GetPlayerName(playerid,sendername,sizeof(sendername));
				format(string,sizeof(string),"Você vendeu %s,um %s com %d ammo,para %d Materiais .",giveplayer,x_weapon,ammo[playerid],price[playerid]);
				PlayerPlaySound(playerid,1052,0.0,0.0,0.0);
				SendClientMessage(playerid,COLOR_GRAD1,string);
				format(string,sizeof(string),"Você recebeu uma %s com %d a partir de munição %s.",x_weapon,ammo[playerid],PlayerName(playerid));
				SendClientMessage(giveplayerid,COLOR_GRAD1,string);
				PlayerPlaySound(giveplayerid,1052,0.0,0.0,0.0);
				format(string,sizeof(string),"* %s vendeu armas para %s.",sendername ,giveplayer);
				SendClientMessageInRange(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				GivePlayerWeapon(giveplayerid,weapon[playerid],ammo[playerid]);
				PlayerInfo[playerid][pMats] -= price[playerid];
			}
			else
			{
				SendClientMessage(playerid,COLOR_GRAD1,"O cliente nao esta proximo de Você.");
				return true;
			}
		}
		else
		{
			format(string,sizeof(string),"%d não está online.",giveplayerid);
			SendClientMessage(playerid,COLOR_GRAD1,string);
		}
		return true;
	}
	CMD:abastecer(playerid, params[])
	{
     		if(!IsPlayerInAnyVehicle(playerid))
     		{
       			SendClientMessage(playerid,0xF78181AA,"Você não está em um veículo!");
       			return true;
			}
     		new vid = GetPlayerVehicleID(playerid);
      		if(Gas[vid] >= 100)
        		return SendClientMessage(playerid,0xF78181AA,"O tanque já está cheio.");

			if(IsAtGasStation(playerid))
			{
  				GameTextForPlayer(playerid,"~n~~w~Reabastecendo~n~ ~r~~h~Aguarde",3003,3);
				SetTimer("Fillup",5000,0);
				Controle(playerid, 0);
				Refueling[playerid] = 1;
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"Você não está em um Posto de Gasolina");
			}
			return true;
	}
	CMD:pegarcombustivel(playerid, params[])
	{
			if(IsAtGasStation(playerid))
			{
			    if(GetPlayerMoney(playerid) < 5000)
					return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode pagar pelo combustivel reserva.");

				if(!PlayerInfo[playerid][pGalao])
					return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem um Galão de Gasolina, compre um na 24/7!");

				if(PlayerInfo[playerid][pGasReserva] >= 50)
					return SendClientMessage(playerid, COLOR_GRAD1, "Você pode carregar no máximo 50 litros de gasolina reserva.");
			    new string[128];

			    PlayerInfo[playerid][pGasReserva] += 10;
			    format(string, sizeof string, "*Você pegou 10 de gasolina por R$5000, ao todo você tem %d de gasolina reserva.", PlayerInfo[playerid][pGasReserva]);
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			    SendClientMessage(playerid, -1, "Agora quando acabar a gasolina de seu carro, você pode usar /abastecerveiculo.");
			    GiveDinheiro(playerid, -5000);
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"Você não está em um Posto de Gasolina");
			}
			return true;
	}
	CMD:abastecerveiculo(playerid, params[])
	{
	    new litros;
	    if(sscanf(params, "d", litros))return SendClientMessage(playerid, COLOR_GRAD1, "USE: /abastecerveiculo [litros]");
     	if(!IsPlayerInAnyVehicle(playerid))
     	{
       		SendClientMessage(playerid,0xF78181AA,"Você não está em um veículo!");
       		return true;
		}
		if(!PlayerInfo[playerid][pGalao])
			return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem um Galão de Gasolina, compre um na 24/7!");

     	new vid = GetPlayerVehicleID(playerid);
	    if(litros > PlayerInfo[playerid][pGasReserva] || litros < 1)
			return SendClientMessage(playerid, COLOR_GRAD1, "Você não possui esta quantidade de gasolina reserva.");
		Gas[vid] += litros;
		PlayerInfo[playerid][pGasReserva] -= litros;
		new string[128];
		format(string, sizeof string, "*Você abasteceu seu carro com %d litros de gasolina reserva.", litros);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof string, "*Você possui agora %d litros de gasolina reserva.", PlayerInfo[playerid][pGasReserva]);
		SendClientMessage(playerid, -1, string);
		return true;
	}
	CMD:imo(playerid, params[])
	{
	    	if(!IsACop(playerid))
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não é um Policial!");
			    return true;
			}
			if(OnDuty[playerid] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não Bateu o cartão!");
			    return true;
			}
			if(PlayerInfo[playerid][pJailed] == 9)
		    {
				SendClientMessage(playerid,COLOR_GRAD1,"Você não pode usar este comando nas Celas da Administração!");
		      	return true;
		    }
			if(IsACop(playerid) || IsAGOV(playerid))
			{
			    if(IsPlayerInAnyVehicle(playerid))
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Não é possivel imobilizar de dentro do carro !");
			        return true;
			    }

			    new suspect = GetClosestPlayer(playerid);
			    if(IsPlayerConnected(suspect))
				{
				    if(IsPlayerInAnyVehicle(suspect))
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Não é possivel imobilizar um player dentro do carro !");
				        return true;
				    }
				    if(PlayerInfo[suspect][pAdmin] && admtrampando[suspect])
			    	{
						SendClientMessage(playerid, COLOR_GREY, "Você não pode imobilizar admins em modo trabalho !");
						return true;
		    		}
				    if(GetDistanceBetweenPlayers(playerid,suspect) < 3)
					{
                	    new string[128];
					    if(IsPlayerInAnyVehicle(suspect))
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   O suspeito está em um carro, faça ele descer antes !");
					        return true;
					    }
    					if(IsACop(giveplayerid))
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode dar imo em Policiais!");
							return true;
						}
					    GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Você foi imobilizado por %s por 20 segundos.", PlayerName(playerid));
						SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Você imobilizou o(a) %s por 20 segundos.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Oficial %s imobilizou %s.", sendername ,giveplayer);
						SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GameTextForPlayer(suspect, "~r~Imobilizado", 2500, 3);
						Controle(suspect, 0);
						ApplyAnimation(suspect, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
						PlayerCuffed[suspect] = 1;
						PlayerCuffedTime[suspect] = 20;
						antihands[suspect] = 1;
		            }
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Ele não está perto de Você!");
					    return true;
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não é um Oficial !");
			}
	    	return true;
	}

	CMD:algemar(playerid, params[])
	{
	    	if(!IsACop(playerid))
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não é um policial!");
			    return true;
			}
			if(OnDuty[playerid] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não Bateu o cartão!");
			    return true;
			}
			if(sscanf(params, "u", giveplayerid))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USE: /algemar [ID do Player]");
				return true;
			}
		    if(IsPlayerInAnyVehicle(playerid))
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Não é possivel algemar de dentro do carro !");
		        return true;
		    }
			if(IsPlayerConnected(giveplayerid))
			{
        	    new string[128];
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(IsACop(giveplayerid))
			        {
           				SendClientMessage(playerid, COLOR_GREY, "Você não pode algemar COPs !");
       					return true;
			        }
			        if(PlayerInfo[giveplayerid][pAdmin] && admtrampando[giveplayerid])
			    	{
						SendClientMessage(playerid, COLOR_GREY, "Você não pode algemar admins em modo trabalho !");
						return true;
		    		}
				    if(IsPlayerInAnyVehicle(giveplayerid))
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Não é possivel algemar um player dentro do carro !");
				        return true;
				    }
					if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid)
						{
							SendClientMessage(playerid, COLOR_GREY, "Você nao pode se algemar!");
							return true;
						}
						new skin = GetPlayerSkin(giveplayerid);
      					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
      					format(string, sizeof(string), "* Você foi algemado pelo: %s.", PlayerName(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						SetArmament(giveplayerid, 11749);
						format(string, sizeof(string), "* Você algemou %s.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Oficial %s algemou %s.", sendername ,giveplayer);
						SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GameTextForPlayer(giveplayerid, "~r~Algemado", 2500, 3);
						PlayerCuffed[giveplayerid] = 2;
						antihands[giveplayerid] = 1;

                        new id = CountAttachedObjects(giveplayerid);
						SetPlayerAttachedObject(giveplayerid, id, 19418, 6,
						CUFF_CuffObjectOffsets[skin][0], CUFF_CuffObjectOffsets[skin][1], CUFF_CuffObjectOffsets[skin][2],
						CUFF_CuffObjectOffsets[skin][3], CUFF_CuffObjectOffsets[skin][4], CUFF_CuffObjectOffsets[skin][5],
						CUFF_CuffObjectOffsets[skin][6], CUFF_CuffObjectOffsets[skin][7], CUFF_CuffObjectOffsets[skin][8]);

                        SetPlayerAttachedObjectEx(19418,Vaga_Corrente,giveplayerid,id);
						SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_CUFFED);
			   		}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de Você !");
					    return true;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
			    return true;
			}
			return true;
	}
	CMD:arrastar(playerid, params[])
	{
	    	if(!IsACop(playerid))
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não é um policial!");
			    return true;
			}
			if(OnDuty[playerid] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não Bateu o cartão!");
			    return true;
			}
			if(!IsPlayerInAnyVehicle(playerid))
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não está dentro de um veiculo!");
			    return true;
			}
			if(sscanf(params, "u", giveplayerid))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USE: /arrastar [ID do Player]");
				return true;
			}
			if(IsPlayerConnected(giveplayerid))
			{
        	    new string[128];
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerInfo[giveplayerid][pAdmin] && admtrampando[giveplayerid])
			    	{
						SendClientMessage(playerid, COLOR_GREY, "Você não pode arrastar admins em modo trabalho !");
						return true;
		    		}
					if (ProxDetectorS(5.0, playerid, giveplayerid))
					{
					    if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(giveplayerid))
					    {
					        if(PlayerCuffed[giveplayerid] == 2)
					        {
					        	return SendClientMessage(playerid, COLOR_WHITE, "Este player já foi Arrastado em Seu Carro.");
							}
					    }
					    if(GetPlayerVehicleID(playerid) == Inenforcer[giveplayerid])
					    {
					        return SendClientMessage(playerid, COLOR_WHITE, "Este player já está dentro de seu carro,Na Cela.");
					    }
					    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 427)
					    {
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
	      					format(string, sizeof(string), "* Você foi arrastado pelo: %s para a Cela.", PlayerName(playerid));
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Você arrastou %s para a Cela.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Oficial %s arrastou e algemou %s para a Cela.", sendername ,giveplayer);
							SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							GameTextForPlayer(giveplayerid, "~r~Arrastado e Algemado para a Cela", 2500, 3);
							Controle(giveplayerid, 1);
							PlayerCuffed[giveplayerid] = 2;
							antihands[giveplayerid] = 1;
							new id = CountAttachedObjects(giveplayerid);
							SetPlayerAttachedObject(giveplayerid, id, 19418, 6, -0.031999, 0.024000, -0.024000, -7.900000, -32.000011, -72.299987, 1.115998, 1.322000, 1.406000);
                            SetPlayerAttachedObjectEx(19418,Vaga_Corrente,giveplayerid,id);
							SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_CUFFED);
					        SetPlayerVirtualWorld(giveplayerid, GetPlayerVehicleID(playerid));
					     	SetPlayerPos(giveplayerid, 2079.6230,-1374.6514,3000.5588);
					     	SetPlayerFacingAngle(giveplayerid, 0);
					        SetCameraBehindPlayer(giveplayerid);
					        SetPlayerInterior(giveplayerid, 1);
							Inenforcer[giveplayerid] = GetPlayerVehicleID(playerid);
							SendClientMessage(giveplayerid, COLOR_GREY, "	*Voçê só pode sair daqui se for Desalgemado!");
							return 1;
					    }
      					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
      					format(string, sizeof(string), "* Você foi arrastado pelo: %s.", PlayerName(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Você arrastou %s.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Oficial %s arrastou e algemou %s.", sendername ,giveplayer);
						SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GameTextForPlayer(giveplayerid, "~r~Arrastado e Algemado", 2500, 3);
						Controle(giveplayerid, 0);
						PlayerCuffed[giveplayerid] = 2;
						antihands[giveplayerid] = 1;
						new id = CountAttachedObjects(playerid);
						SetPlayerAttachedObject(giveplayerid, id, 19418, 6, -0.031999, 0.024000, -0.024000, -7.900000, -32.000011, -72.299987, 1.115998, 1.322000, 1.406000);
                        SetPlayerAttachedObjectEx(19418,Vaga_Corrente,giveplayerid,id);
						SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_CUFFED);
				        PutPlayerInVehicle(giveplayerid, GetPlayerVehicleID(playerid), 1);
			   		}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de Você !");
					    return true;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
			    return true;
			}
			return true;
	}
    CMD:vozdeprisao(playerid, params[])return ForT:vdp(playerid,params);
	CMD:vdp(playerid, params[])
	{
	    	if(!IsACop(playerid))
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não é um policial!");
			    return true;
			}
			if(OnDuty[playerid] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não Bateu o cartão!");
			    return true;
			}
	  		if(PlayerInfo[playerid][pJailed] == 9)
		    {
				SendClientMessage(playerid,COLOR_GRAD1,"Você não pode usar este comando nas Celas da Administração!");
		      	return true;
		    }
			if(sscanf(params, "u", giveplayerid))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USE: /vozdeprisao [ID do Player]");
				return true;
			}
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(WantedPoints[giveplayerid] == 0)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Este jogador não está sendo procurado!");
				        return true;
			        }
			        if(PlayerInfo[giveplayerid][pAdmin] && admtrampando[giveplayerid])
			    	{
						SendClientMessage(playerid, COLOR_GREY, "Você não pode dar vdp em admins em modo trabalho !");
						return true;
		    		}
			        if(VozDePrisao[giveplayerid] == 1)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Alguem ja deu voz de prisao a este Jogador!");
				        return true;
			        }
					if (ProxDetectorS(9.0, playerid, giveplayerid))
					{
                	    new string[128];
     					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
      					format(string, sizeof(string), "*Oficial %s diz: Parado! Você é procurado pela justiça, renda-se agora!", PlayerName(playerid));
						SendClientMessage(giveplayerid, COLOR_YELLOW, string);
						format(string, sizeof(string), "OBS: Se você desconectar agora, será preso automaticamente, faça com que o policial perca-o de vista!!!", PlayerName(playerid));
						SendClientMessage(giveplayerid, COLOR_YELLOW2, string);
						format(string, sizeof(string), "*Você deu voz de prisao a %s.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "Se o jogador se desconectar agora, será preso automaticamente, não perca-o de vista!!!", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTRED, string);
						PutaGorda[giveplayerid] = SetTimerEx("VozDePrisaoo", 1000, 1, "ii", giveplayerid, playerid);
						VozDePrisao[giveplayerid] = 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de Você !");
					    return true;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
			    return true;
			}
			return true;
	}
	CMD:desalgemar(playerid, params[])
	{
			if(IsACop(playerid))
			{
				if(sscanf(params, "u", giveplayerid))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USE: /desalgemar [ID do Player]");
					return true;
				}
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode se desalgemar!"); return true; }
                       	    new string[128];
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
						    format(string, sizeof(string), "* Você foi desalgemado pelo: %s.", PlayerName(playerid));
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Você desalgemou %s.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							GameTextForPlayer(giveplayerid, "~g~Desalgemado", 2500, 3);
							Controle(giveplayerid, 1);
							RemoveArmament(giveplayerid);
							antihands[giveplayerid] = 0;
							PlayerCuffed[giveplayerid] = 0;
							RemovePlayerAttachedObjectEx(giveplayerid, Vaga_Corrente);
							SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_NONE);
							ClearAnimations(giveplayerid);
							SetTimerEx("desbugarse", 1000, 0, "i", giveplayerid);
							if(Inenforcer[giveplayerid] > 0)
							{
								SendClientMessage(giveplayerid, COLOR_GREY, "	Agora voce pode sair!Aperte F para Sair");
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de você !");
						    return true;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
				    return true;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não e PM/PR/PC/Exercito !");
			}
			return true;
	}
	CMD:mijar(playerid)
	{
	    ApplyAnimation(playerid, "PAULNMAC", "Piss_in", 4.0, 1, 0, 0, 0, 0);
	    SetPlayerSpecialAction(playerid, 68);
	    return 1;
	}

BPF::TempoProcurar(playerid, procuradoid)
{
    if(!IsPlayerConnected(procuradoid))
	{
        KillTimer(TimerSS[playerid]);
		PlayerTextDrawHide(playerid, localidade[playerid]);
		DisablePlayerCheckpoint(playerid);
		Procurarpp[playerid] = 0;
		DestroyPickup(Procurarpp[playerid]);
		RemovePlayerMapIcon(playerid, 0);
		return SendClientMessage(playerid, COLOR_LIGHTRED, "[INFO] O jogador que você estava procurando acaba de desconectar do servidor!");
    }
    new string[128];
    if(TempoProc[playerid] > 0)TempoProc[playerid] --;

    format(string, sizeof string, "_~n~~b~procurar ~h~~h~tempo~n~~w~%d", TempoProc[playerid]);
    GameTextForPlayer(playerid, string, 5000, 4);
	if(TempoProc[playerid] <= 0)
	{
		KillTimer(TimerSS[playerid]);
		PlayerTextDrawHide(playerid, localidade[playerid]);
		DisablePlayerCheckpoint(playerid);
		Procurarpp[playerid] = 0;
		DestroyPickup(Procurarpp[playerid]);
		RemovePlayerMapIcon(playerid, 0);
		return 1;
	}

	new Float:x,Float:y,Float:z;
	GetPlayerPos(procuradoid, x, y, z);

	for(new i = 0; i != sizeof(gSAZones); i++)
	{
		if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4])
		{
			if(GetPlayerInterior(procuradoid) > 0)
			{
			    format(string, sizeof string, "~y~Localizacao do ~r~~h~%s: ~w~~h~[Algum Interior]", NomePlayer(procuradoid));
			}
			else
				format(string, sizeof string, "~y~Localizacao do ~r~~h~%s: ~w~~h~[%s]", NomePlayer(procuradoid), gSAZones[i][SAZONE_NAME]);

			PlayerTextDrawSetString(playerid, localidade[playerid], string);
			PlayerTextDrawShow(playerid, localidade[playerid]);
			break;
		}
	}

	SetPlayerMapIcon(playerid, 0, x, y, z, 0, 0x0004F6AA);
	DestroyPickup(Procurarpp[playerid]);
	Procurarpp[playerid] = 0 ;
	Procurarpp[playerid] = CreatePickup(19607,2, x, y, z+2, -1);
	CP[playerid] = 597;
	return 1;
}
	CMD:procuraroff(playerid, params[])
	{
        KillTimer(TimerSS[playerid]);
		PlayerTextDrawHide(playerid, localidade[playerid]);
		DisablePlayerCheckpoint(playerid);
		Procurarpp[playerid] = 0;
		DestroyPickup(Procurarpp[playerid]);
		RemovePlayerMapIcon(playerid, 0);
		return true;
	}
	CMD:procurar(playerid, params[])
	{
		    if(PlayerInfo[playerid][pEmprego] != 1)
		    {
				SendClientMessage(playerid, COLOR_GREY, "Você não é Detetive !");
				return true;
		    }

			if(sscanf(params, "u", giveplayerid))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /procurar [ID do Player]");
				return true;
			}
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(gettime() < GetPVarInt(playerid, #VarFlood12) && PlayerInfo[playerid][pDetSkill] < 401)
					    return SendClientMessage(playerid, COLOR_GRAD1, #Seu nível você só pode procurar alguem novamente de 10 em 10 segundos!);
					SetPVarInt(playerid, #VarFlood12, gettime()+10);

				    if(PlayerInfo[giveplayerid][pAdmin] && admtrampando[giveplayerid])
				    {
						SendClientMessage(playerid, COLOR_GREY, "Você não pode procurar admins em modo trabalho !");
						return true;
				    }
	             if(PlayerInfo[giveplayerid][pAdmin] > 3000 && PlayerInfo[playerid][pAdmin] != 3001 && PlayerInfo[playerid][pAdmin] != 5000)
                 {
                 SendClientMessage(playerid, COLOR_GRAD2, "Você não pode procurar por Admins Donos!");
                 return 1;
                 }

			        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode se procurar!"); return true; }
			        if(GetPlayerInterior(giveplayerid) > 0)
					{
					   	SendClientMessage(playerid, COLOR_YELLOW, "Este player está em um interior!");
					   	return true;
	    			}


					KillTimer(TimerSS[playerid]);
				    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));

					if(PlayerInfo[playerid][pDetSkill] <= 50)
					{
						TempoProc[playerid] = 180;
					}
					else if(PlayerInfo[playerid][pDetSkill] <= 100)
					{
						TempoProc[playerid] = 240;
					}
					else if(PlayerInfo[playerid][pDetSkill] <= 200)
					{
						TempoProc[playerid] = 300;
					}
					else if(PlayerInfo[playerid][pDetSkill] <= 400)
					{
						TempoProc[playerid] = 360;
					}
					else
					{
						TempoProc[playerid] = 120;
					}



					TimerSS[playerid] = SetTimerEx("TempoProcurar",1000,true,"ii",playerid,giveplayerid);

					TempoProcurar(playerid, giveplayerid);

					PlayerInfo[playerid][pDetSkill] ++;
     				UsedFind[playerid] = 1;
					if(PlayerInfo[playerid][pDetSkill] == 50)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Seu nível de detetive agora é 2, Você pode procurar mais rápido e encontrar mais rápido."); }
					else if(PlayerInfo[playerid][pDetSkill] == 100)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Seu nível de detetive agora é 3, Você pode procurar mais rápido e encontrar mais rápido."); }
					else if(PlayerInfo[playerid][pDetSkill] == 200)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Seu nível de detetive agora é 4, Você pode procurar mais rápido e encontrar mais rápido."); }
					else if(PlayerInfo[playerid][pDetSkill] == 400)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Seu nível de detetive agora é 5, Você pode procurar mais rápido e encontrar mais rápido."); }
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Esse não é um jogador ativo !");
			}
	    	return true;
	}

 	CMD:localizar(playerid, params[])
	{
	    new string[128];
		if(IsPlayerConnected(playerid))
		{
			if(!IsACop(playerid) && !IsAHit(playerid) && !IsATriad(playerid) && PlayerInfo[playerid][pEmprego] != 1)
			{
				SendClientMessage(playerid, COLOR_GRAD1,"Você não é um Assassino, Policial ou detetive!");
				return true;
			}
			if(sscanf(params, "u", giveplayerid))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /localizar [ID do Player]");
				return true;
			}
			if(PlayerInfo[giveplayerid][pAdmin] >= 1 && admtrampando[giveplayerid] == 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não pode localizar Admins em modo de trabalho!");
				return 1;
			}
			if(PlayerInfo[giveplayerid][pAdmin] > 3000 && PlayerInfo[playerid][pAdmin] != 3001 && PlayerInfo[playerid][pAdmin] != 5000)
                 {
                 SendClientMessage(playerid, COLOR_GRAD2, "Você não pode procurar por Admins Donos!");
                 return 1;
                 }
			if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode se localizar!"); return true; }
			if(IsPlayerConnected(giveplayerid))
			{

			    if(gettime() < GetPVarInt(playerid, #VarFloodLocalizar))
			    return SendClientMessage(playerid, COLOR_GRAD1, #  Você só pode localizar alguém novamente de 10 em 10 segundos!);
				SetPVarInt(playerid, #VarFloodLocalizar, gettime()+10);

				new Nome[MAX_PLAYER_NAME];
				GetPlayerName(giveplayerid, Nome, sizeof(Nome));
				new location[MAX_ZONE_NAME];
				new Float:x,Float:y,Float:z;
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					if(IsACop(playerid))
					{
						GetPlayerPos(giveplayerid,x,y,z);
						GetPlayerName(giveplayerid, Nome, sizeof(Nome));
						GetPlayer2DZone(giveplayerid, location, MAX_ZONE_NAME);
						if(WantedPoints[giveplayerid] == 0)
							SendClientMessage(playerid, COLOR_GREY, "A pessoa informada não é um suspeito.");
						if(GetPlayerInterior(giveplayerid) > 0)
					 		format(string, sizeof(string), "Suspeito: %s última vez visto próximo de [Algum Interior].", Nome);
						else
						    format(string, sizeof(string), "Suspeito: %s última vez visto próximo de [%s].", Nome,location);
						SendClientMessage(playerid, COLOR_YELLOW, string);
						GZLocalizar[playerid] = GangZoneCreate(x-70,y-70,x+70,y+70);
						GangZoneShowForPlayer(playerid, GZLocalizar[playerid], 0xB1C998AA);
						GangZoneFlashForPlayer(playerid, GZLocalizar[playerid], 0xFF6347AA);
						return true;
					}
				 	else if(IsAHit(playerid) || IsATriad(playerid))
					{
						GetPlayerPos(giveplayerid,x,y,z);
						GetPlayerName(giveplayerid, Nome, sizeof(Nome));
						GetPlayer2DZone(giveplayerid, location, MAX_ZONE_NAME);
						if(GoChase[playerid] != giveplayerid)
							SendClientMessage(playerid, COLOR_GREY, "A pessoa informada não é o seu contrato.");
						if(GetPlayerInterior(giveplayerid) > 0)
					 		format(string, sizeof(string), "Player: %s última vez visto próximo de [Algum Interior].", Nome);
						else
					    	format(string, sizeof(string), "Player: %s última vez visto próximo de [%s].", Nome,location);
						SendClientMessage(playerid, COLOR_YELLOW, string);
						GZLocalizar[playerid] = GangZoneCreate(x-70,y-70,x+70,y+70);
						GangZoneShowForPlayer(playerid, GZLocalizar[playerid], 0xB1C998AA);
						GangZoneFlashForPlayer(playerid, GZLocalizar[playerid], 0xFF6347AA);
						return true;
					}
				 	else if(PlayerInfo[playerid][pEmprego] == 1)
					{
						GetPlayerPos(giveplayerid,x,y,z);
						GetPlayerName(giveplayerid, Nome, sizeof(Nome));
						GetPlayer2DZone(giveplayerid, location, MAX_ZONE_NAME);
						if(GetPlayerInterior(giveplayerid) > 0)
					 		format(string, sizeof(string), "Localização: %s última vez visto próximo de [Algum Interior].", Nome);
						else
					    	format(string, sizeof(string), "Localização: %s última vez visto próximo de [%s].", Nome,location);
						SendClientMessage(playerid, COLOR_YELLOW, string);
						GZLocalizar[playerid] = GangZoneCreate(x-70,y-70,x+70,y+70);
						GangZoneShowForPlayer(playerid, GZLocalizar[playerid], 0xB1C998AA);
						GangZoneFlashForPlayer(playerid, GZLocalizar[playerid], 0xFF6347AA);
						return true;
					}
				}
			}
			else
			{
					SendClientMessage(playerid, COLOR_GRAD1, "   Esse jogador está off-line.");
			}
	 		return true;
		}
		return true;
	}
	CMD:procurarcarro(playerid, params[])
	{
		    if(!IsACop(playerid) && !IsAHit(playerid) && !IsATriad(playerid) && PlayerInfo[playerid][pEmprego] != 1)
			{
				SendClientMessage(playerid, COLOR_GRAD1,"Você não é um Assassino, Policial ou detetive!");
				return true;
			}
			new idcar;
			if(sscanf(params, "d", idcar))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /procurarcarro [Nº da placa]");
				return true;
			}
				if (idcar == INVALID_VEHICLE_ID) return SendClientMessage(playerid, 0xCD0400AA, "Não exite um carro com esta placa.");
				GetVehiclePos(idcar, VehicleInfo[idcar][vPX], VehicleInfo[idcar][vPY], VehicleInfo[idcar][vPZ]);
				SetPlayerCheckpoint(playerid, VehicleInfo[idcar][vPX], VehicleInfo[idcar][vPY], VehicleInfo[idcar][vPZ],5.0);
				SendClientMessage(playerid, COLOR_GREY, "Siga o checkpoint para encontrar o veiculo.");
				//GPSPos[playerid] = 1;
		return 1;
	}
	CMD:explodirporta(playerid, params[])
	{
		if(IsACop(playerid))
		{
		   SendClientMessage(playerid, 0xAFAFAFAA, "Você não está autorizado a usar este comando !");
		   return 1;
		}
		if(GetPlayerOrg(playerid) == 7)
		{
		   return 1;
		}
		if(GetPlayerOrg(playerid) == 4)
		{
		   return 1;
		}
    	if(tempoinvasaosistema == 1)
    	{
   			SendClientMessage(playerid,0xAFAFAFAA,"Espere 5 minutos para invadir o sistema !");
    		return 1;
    	}
    	if(invasaopenitenciaria == 1)
    	{
   			return SendClientMessage(playerid, 0xE3E3E3FF, "Já está tendo uma tentativa de invasão a penitenciária!");
    	}
		new string[128];
 		ApplyAnimation(playerid,"BOMBER","BOM_Plant_Loop",4.0,1,0,0,0,0);
		        if(PlayerInfo[playerid][pExplosivos] < 1)return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem um explosivo, compre um no mercado negro.");
        if(!PlayerInfo[playerid][ComExplosivo])return SendClientMessage(playerid, COLOR_GRAD1, "Você não esta com o explosivo em mãos, pegue em seu inventário.");
		if(PlayerToPoint(1.0,playerid, 1797.2847,-1577.1489,14.0731))
		{
			GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            format(string, sizeof(string), "[Atenção]: %s e os %s estão tentando explodir a porta da [PENITENCIÁRIA]",playername,NomeORG(playerid));
            SendClientMessageToAll(COLOR_LIGHTRED, string);
			SendClientMessage(playerid, -1, "Espere 160 segundos para terminar de invadir o sistema da penitenciária, para cancelar a invasão, digite: /pararinvasao.");
			format(string, sizeof(string), "[ALERTA COPS] %s[%d] Está tentando invadir o sistema da penitenciária !", playername, playerid);
            SendFamilyMessage(1, COLOR_LIGHTRED, string);
            SendFamilyMessage(2, COLOR_LIGHTRED, string);
            SendFamilyMessage(16, COLOR_LIGHTRED, string);
            SendFamilyMessage(35, COLOR_LIGHTRED, string);
            SendFamilyMessage(33, COLOR_LIGHTRED, string);
            SendFamilyMessage(11, COLOR_LIGHTRED, string);
            SendFamilyMessage(3, COLOR_LIGHTRED, string);
            SendFamilyMessage(7, COLOR_LIGHTRED, string);
			SetPlayerCriminal(playerid,255, "Invasão Sistema Penitenciária");
			SetPlayerAttachedObject(playerid,4,3026,1,-0.1,-0.0,0.0,0.0,0.0,0.0);
			WantedPoints[playerid] += 2;
            ProvocoInvasao[playerid] = 1;
			invasaopenitenciaria = 1;
            tempoinvasaosistema = 1;
            SetTimer("Ainvasao", 2000, 0);
        	tempoinvasao = SetTimerEx("InvasaoPenitenciaria", 160000, 0, "i", playerid);
    		TempoContagem[playerid] = SetTimerEx("ContagemInvasaoo", 1000, 1, "i", playerid);
            Contagem[playerid] = 160;
        	return 1;
  	    }
  	    return 1;
	}
	CMD:explodircofre(playerid, params[])
	{
		 if(PlayerInfo[playerid][pExplosivos] > 0)
		 {
			  if(!IsACop(playerid))
			  {
                   for(new i = 0; i < MAX_HOUSES; i++)
                   {
                        if(PlayerToPoint(4.0,playerid, 2144.1084,1626.3708,993.6882))
		                {
							 if(dinamitoubanco[i] == 1)
							 {
								  SendClientMessage(playerid, COLOR_GRAD1, "* Alguém já está dinamitando a porta do banco!");
								  return 1;
							 }
							 new string[128];
                             dinamitoubanco[playerid] = 1;
                             dinamitebanco1 = CreateObject(1654, 2143.7, 1626.9, 994.40002, 0, 0, 0);
                             dinamitebanco2 = CreateObject(1654, 2144.7, 1626.9, 994.40002, 0, 0, 0);
                             format(string, sizeof(string), "[%s] %s[%d] dinamitou a porta e está tentando invadir cofre do banco!",NomeORG(playerid), PlayerName(playerid), playerid);
			                 SendClientMessageToAll(GetPlayerColor(playerid), string);
			                 format(string, sizeof(string), "[%s] colocou dinamites na porta, irá explodir em 10 segundos, afaste-se um pouco.", PlayerName(playerid));
			                 ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			                 format(string, sizeof(string), "[ALERTA COPS] %s[%d] DINAMITOU A PORTA E ESTÁ TENTANDO INVADIR O COFRE DO BANCO !", NomePlayer(playerid), playerid);
		                     SendFamilyMessage(1, COLOR_LIGHTRED, string);
                             SendFamilyMessage(2, COLOR_LIGHTRED, string);
                             SendFamilyMessage(16, COLOR_LIGHTRED, string);
                             SendFamilyMessage(35, COLOR_LIGHTRED, string);
                             SendFamilyMessage(33, COLOR_LIGHTRED, string);
                             SendFamilyMessage(11, COLOR_LIGHTRED, string);
                             SendFamilyMessage(3, COLOR_LIGHTRED, string);
                             SendFamilyMessage(7, COLOR_LIGHTRED, string);
                             RemovePlayerAttachedObject(playerid, Vaga_Roubo);
		                     PosicionarObjetos(playerid, Vaga_Roubo, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
			                 SetPlayerCriminal(playerid,255, "Dinamitando Banco");
			                 tempoexplodir[playerid] = SetTimerEx("TempoExplodir", 10000, 0, "i", playerid);
			                 return 1;
			            }
			            if(PlayerToPoint(4.0,playerid, -1383, 1494.1, 2))
		                {
							 if(dinamitounavio[i] == 1)
							 {
								  SendClientMessage(playerid, COLOR_GRAD1, "* Alguém já está dinamitando o navio!");
								  return 1;
							 }
							 new string[128];
                             dinamitounavio[playerid] = 1;
                             dinamitenavio = CreateObject(1654, -1382.8, 1494.1, 2.4, 0, 0, 100);
                             format(string, sizeof(string), "[%s] %s[%d] dinamitou a porta e está tentando invadir cofre do navio!",NomeORG(playerid), PlayerName(playerid), playerid);
			                 SendClientMessageToAll(GetPlayerColor(playerid), string);
			                 format(string, sizeof(string), "[%s] colocou dinamites na porta, irá explodir em 10 segundos, afaste-se um pouco.", PlayerName(playerid));
			                 ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			                 format(string, sizeof(string), "[ALERTA COPS] %s[%d] DINAMITOU A PORTA E ESTÁ TENTANDO INVADIR O COFRE DO NAVIO !", NomePlayer(playerid), playerid);
		                     SendFamilyMessage(1, COLOR_LIGHTRED, string);
                             SendFamilyMessage(2, COLOR_LIGHTRED, string);
                             SendFamilyMessage(16, COLOR_LIGHTRED, string);
                             SendFamilyMessage(35, COLOR_LIGHTRED, string);
                             SendFamilyMessage(33, COLOR_LIGHTRED, string);
                             SendFamilyMessage(11, COLOR_LIGHTRED, string);
                             SendFamilyMessage(3, COLOR_LIGHTRED, string);
                             SendFamilyMessage(7, COLOR_LIGHTRED, string);
                             RemovePlayerAttachedObject(playerid, Vaga_Roubo);
	                         PosicionarObjetos(playerid, Vaga_Roubo, 0, 0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
			                 SetPlayerCriminal(playerid,255, "Dinamitando A Porta do Navio");
			                 tempoexplodir[playerid] = SetTimerEx("TempoExplodir", 10000, 0, "i", playerid);
			                 return 1;
			            }
		           }
			  }
		 }
		 else
		 {
              SendClientMessage(playerid, COLOR_GRAD5, "Você não tem uma dinamite, compre uma com um mafioso !");
	    	  return 1;
		 }
		 return 1;
	}
	CMD:proteger(playerid, params[])
	{
		    if(PlayerInfo[playerid][pEmprego] != 6)
		    {
				SendClientMessage(playerid, COLOR_GREY, "Você não é um segurança!");
				return true;
		    }
		    new money;
			if(sscanf(params, "ud", giveplayerid, money))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /proteger [ID do Player] [preço]");
				return true;
			}
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "   Preço mínimo 1, máximo 99999!"); return true; }
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "Você não pode se proteger !");
					        return true;
					    }
                	    new string[128];
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Você se ofereceu para proteger %s por R$%d.", giveplayer, money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Segurança %s ofereceu segurança por R$%d, (Digite /aceitar segurança) para aceitar.", sendername, money);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						GuardOffer[giveplayerid] = playerid;
						GuardPrice[giveplayerid] = money;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador não está perto de você !");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está Offline!");
			}
			return true;
	}

	CMD:cancelar(playerid, x_Emprego[])
    {
		if(isnull(x_Emprego))
		{
			SendClientMessage(playerid, COLOR_WHITE, "|__________________[ Cancelar ]__________________|");
			SendClientMessage(playerid, COLOR_WHITE, "USE: /cancelar [nome]");
			SendClientMessage(playerid, COLOR_GREY, "Nomes Validos: Sexo, Drogas, reparo, Advogado, segurança, aovivo, Abastecimento, Carro, Boxe");
			SendClientMessage(playerid, COLOR_GREY, "Nomes Validos: taxi, Onibus, Medico, Mecanico, Policia, convite, ajuda, Bombeiro");
			return true;
		}
	    new string[128];
		if(strcmp(x_Emprego,"sexo",true) == 0)
		{
			SexOffer[playerid] = 999;
			SexPrice[playerid] = 0;
		}
		else if(strcmp(x_Emprego,"convite",true) == 0)
		{
		    format(string, sizeof(string), "* %s Não Aceitou seu Convite para Entrar na Organização[%s].", PlayerName(playerid), NomeORG(InviteOffer[playerid]));
			SendClientMessage(InviteOffer[playerid], COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Voce não Aceitou o Convite de %s para Entrar na Organização[%s].", PlayerName(InviteOffer[playerid]), NomeORG(InviteOffer[playerid]));
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			InviteOffer[playerid] = 999;
			InviteJob[playerid] = 0;
		}
		else if(strcmp(x_Emprego,"drogas",true) == 0)
		{
			DrugOffer[playerid] = 999;
			DrugPrice[playerid] = 0;
			DrugGram[playerid] = 0;
		}
		else if(strcmp(x_Emprego,"ajuda",true) == 0)
		{
			MercOffer[playerid] = 999;
			MercMoney[playerid] = 0;

			foreach(Player, i)
			{
			    if(GetPVarInt(playerid, "MercID") == i)
			    {
			        format(string, sizeof string, "O Mercenário %s não está mais ajudando você!", NomePlayer(playerid));
					SendClientMessage(i, COLOR_LIGHTRED, string);
					format(string, sizeof string, "Você parou de ajudar %s.", NomePlayer(i));
                    SendClientMessage(playerid, COLOR_LIGHTRED, string);
					break;
				}
			    if(GetPVarInt(i, "MercID") == playerid)
			    {
			        format(string, sizeof string, "* %s não quer mais a sua ajuda!!", NomePlayer(playerid));
					SendClientMessage(i, COLOR_LIGHTRED, string);
					format(string, sizeof string, "Você não quer mais a ajuda de %s", NomePlayer(i));
                    SendClientMessage(playerid, COLOR_LIGHTRED, string);
					SetPVarInt(i, "MercID", 999);
					SetPVarInt(i, "MercORG", 999);
					break;
				}
			}
			SetPVarInt(playerid, "MercID", 999);
			SetPVarInt(playerid, "MercORG", 999);
		}
		else if(strcmp(x_Emprego,"reparo",true) == 0)
		{
			RepairOffer[playerid] = 999;
			RepairPrice[playerid] = 0;
			RepairCar[playerid] = 0;
		}
		else if(strcmp(x_Emprego,"segurança",true) == 0)
		{
			GuardOffer[playerid] = 999;
			GuardPrice[playerid] = 0;
		}
		else if(strcmp(x_Emprego,"aovivo",true) == 0)
		{
			LiveOffer[playerid] = 999;
		}
		else if(strcmp(x_Emprego,"abastecercarro",true) == 0)
		{
			RefillOffer[playerid] = 999;
			RefillPrice[playerid] = 0;
		}
		else if(strcmp(x_Emprego,"carro",true) == 0)
		{
			CarOffer[playerid] = 999;
			CarPrice[playerid] = 0;
			CarID[playerid] = 0;
		}
		else if(strcmp(x_Emprego,"padrinho",true) == 0)
		{
			MarryWitnessOffer[playerid] = 999;
		}
		else if(strcmp(x_Emprego,"casamento",true) == 0)
		{
			ProposeOffer[playerid] = 999;
		}
		else if(strcmp(x_Emprego,"divorcio",true) == 0)
		{
			DivorceOffer[playerid] = 999;
		}
		else if(strcmp(x_Emprego,"multa",true) == 0)
		{
			TicketOffer[playerid] = 999;
			TicketMoney[playerid] = 0;
		}
		else if(strcmp(x_Emprego,"taxi",true) == 0)
		{
	        if(TransportDuty[playerid] == 1 && TaxistaCallTime[playerid] > 0)
	        {
         		TaxistaAccepted[playerid] = 999;
				GameTextForPlayer(playerid, "~w~Voce~n~~r~Cancelou a Chamada", 5000, 1);
				TaxistaCallTime[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				TaxistaCall = 999;
    		}
	        else
    		{
				if(IsPlayerConnected(TaxistaCall)) { if(TaxistaCall == playerid) { TaxistaCall = 999; } }
				foreach(Player, i)
				{
				    if(TaxistaAccepted[i] < 999)
				    {
			   			if(TaxistaAccepted[i] == playerid)
				        {
				            TaxistaAccepted[i] = 999;
					        GameTextForPlayer(i, "~w~Cliente~n~~r~Cancelou a Chamada", 5000, 1);
				        	TaxistaCallTime[i] = 0;
					        DisablePlayerCheckpoint(i);
		        		}
					}
				}
			}
		}
		else if(strcmp(x_Emprego,"pizza",true) == 0)
		{
	        if(PizzaCallTime[playerid] > 0)
	        {
         		PizzaAccepted[playerid] = 999;
				GameTextForPlayer(playerid, "~w~Voce~n~~r~Cancelou a Chamada", 5000, 1);
				PizzaCallTime[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				PizzaCall = 999;
    		}
	        else
    		{
				if(IsPlayerConnected(PizzaCall)) { if(PizzaCall == playerid) { PizzaCall = 999; } }
				foreach(Player, i)
				{
				    if(PizzaAccepted[i] < 999)
				    {
			   			if(PizzaAccepted[i] == playerid)
				        {
				            PizzaAccepted[i] = 999;
					        GameTextForPlayer(i, "~w~Cliente~n~~r~Cancelou a Chamada", 5000, 1);
				        	PizzaCallTime[i] = 0;
					        DisablePlayerCheckpoint(i);
		        		}
					}
				}
			}
		}
		else if(strcmp(x_Emprego,"advogado",true) == 0)
		{
	        if(AdvCallTime[playerid] > 0)
	        {
         		AdvAccepted[playerid] = 999;
				GameTextForPlayer(playerid, "~w~Voce~n~~r~Cancelou a Chamada", 5000, 1);
				AdvCallTime[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				AdvCall = 999;
    		}
	        else
    		{
				if(IsPlayerConnected(AdvCall)) { if(AdvCall == playerid) { AdvCall = 999; } }
				foreach(Player, i)
				{
				    if(AdvAccepted[i] < 999)
				    {
			   			if(AdvAccepted[i] == playerid)
				        {
				            AdvAccepted[i] = 999;
					        GameTextForPlayer(i, "~w~Cliente~n~~r~Cancelou a Chamada", 5000, 1);
				        	AdvCallTime[i] = 0;
					        DisablePlayerCheckpoint(i);
		        		}
					}
				}
			}
		}
		else if(strcmp(x_Emprego,"bus",true) == 0 || strcmp(x_Emprego,"onibus",true) == 0)
		{
  			if(TransportDuty[playerid] == 2 && BusCallTime[playerid] > 0)
	      	{
	            BusAccepted[playerid] = 999;
				GameTextForPlayer(playerid, "~w~Voce~n~~r~Cancelou a Chamada", 5000, 1);
				BusCallTime[playerid] = 0;
				BusCall = 999;
	     	}
	        else
	        {
				if(IsPlayerConnected(BusCall)) { if(BusCall == playerid) { BusCall = 999; } }
				foreach(Player, i)
				{
      				if(BusAccepted[i] < 999)
			     	{
				      	if(BusAccepted[i] == playerid)
				   		{
				            BusAccepted[i] = 999;
					        GameTextForPlayer(i, "~w~Cliente~n~~r~Cancelou a Chamada", 5000, 1);
				        	BusCallTime[i] = 0;
					        DisablePlayerCheckpoint(i);
					    }
					}
				}
			}
		}
		else if(strcmp(x_Emprego,"mecanico",true) == 0)
		{
	      	if(MechanicCallTime[playerid] > 0)
	     	{
	            MechanicAccepted[playerid] = 999;
				GameTextForPlayer(playerid, "~w~Voce~n~~r~Cancelou a Chamada", 5000, 1);
				MechanicCallTime[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				MechanicCall = 999;
	       	}
	      	else
	        {
				if(IsPlayerConnected(MechanicCall)) { if(MechanicCall == playerid) { MechanicCall = 999; } }
				foreach(Player, i)
				{
				    if(MechanicAccepted[i] < 999)
				    {
			      		if(MechanicAccepted[i] == playerid)
				       	{
					        MechanicAccepted[i] = 999;
					       	GameTextForPlayer(i, "~w~Cliente~n~~r~Cancelou a Chamada", 5000, 1);
					      	MechanicCallTime[i] = 0;
					       	DisablePlayerCheckpoint(i);
					    }
					}
				}
			}
		}
		else if(strcmp(x_Emprego,"medico",true) == 0)
		{
  			if(MedicCallTime[playerid] > 0)
	      	{
	           	MedicAccepted[playerid] = 999;
				GameTextForPlayer(playerid, "~w~Voce~n~~r~Cancelou a Chamada", 5000, 1);
				MedicCallTime[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				MedicCall = 999;
    		}
	       	else
	      	{
				if(IsPlayerConnected(MedicCall)) { if(MedicCall == playerid) { MedicCall = 999; } }
				foreach(Player, i)
				{
			        if(MedicAccepted[i] < 999)
			       	{
				        if(MedicAccepted[i] == playerid)
				        {
		           			MedicAccepted[i] = 999;
					        GameTextForPlayer(i, "~w~Paciente~n~~r~Cancelou a Chamada", 5000, 1);
				         	MedicCallTime[i] = 0;
					       	DisablePlayerCheckpoint(i);
				      	}
	   				}
				}
			}
		}

		else if(strcmp(x_Emprego,"bombeiro",true) == 0)
		{
  			if(BombCallTime[playerid] > 0)
	      	{
	           	BombAccepted[playerid] = 999;
				GameTextForPlayer(playerid, "~w~Voce~n~~r~Cancelou a Chamada", 5000, 1);
				BombCallTime[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				BombCall = 999;
    		}
	       	else
	      	{
				if(IsPlayerConnected(BombCall)) { if(BombCall == playerid) { BombCall = 999; } }
				foreach(Player, i)
				{
			        if(BombAccepted[i] < 999)
			       	{
				        if(BombAccepted[i] == playerid)
				        {
		           			BombAccepted[i] = 999;
					        GameTextForPlayer(i, "~w~Paciente~n~~r~Cancelou a Chamada", 5000, 1);
				         	BombCallTime[i] = 0;
					       	DisablePlayerCheckpoint(i);
				      	}
	   				}
				}
			}
		}
		else if(strcmp(x_Emprego,"policia",true) == 0)
		{
	     	if(CopsrondaCallTime[playerid] > 0)
	        {
	           	CopsrondaAccepted[playerid] = 999;
				GameTextForPlayer(playerid, "~w~Voce~n~~r~Cancelou a Chamada", 5000, 1);
				CopsrondaCallTime[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				CopsrondaCall = 999;
  			}
	        else
	       	{
				if(IsPlayerConnected(CopsrondaCall)) { if(CopsrondaCall == playerid) { CopsrondaCall = 999; } }
				foreach(Player, i)
				{
			       	if(CopsrondaAccepted[i] < 999)
			      	{
				        if(CopsrondaAccepted[i] == playerid)
				        {
				            CopsrondaAccepted[i] = 999;
				          	GameTextForPlayer(i, "~w~Cliente~n~~r~Cancelou a Chamada", 5000, 1);
					        CopsrondaCallTime[i] = 0;
					        DisablePlayerCheckpoint(i);
		      			}
				    }
				}
			}
		}
		else { return true; }
		format(string, sizeof(string), "* Você cancelou: %s.", x_Emprego);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		return true;
	}
	CMD:aceitar(playerid, x_Emprego[])
    {
            if(PlayerInfo[playerid][pJailed] == 9)
		    {
				SendClientMessage(playerid,COLOR_GRAD1,"Você não pode usar este comando nas Celas da Administração!");
		      	return true;
		    }
			if(isnull(x_Emprego))
			{
				SendClientMessage(playerid, COLOR_WHITE, "|__________________[ Aceitar ]__________________|");
				SendClientMessage(playerid, COLOR_WHITE, "USE: aceitar [nome]");
				SendClientMessage(playerid, COLOR_GREY, "Nomes Validos: Transa, drogas, Reparo, Advogado, segurança, emprego, aovivo, chamada , Assalto, Bombeiro");
				SendClientMessage(playerid, COLOR_GREY, "Nomes Validos: Carro, Taxi, Onibus, Boxe, Medico, Mecanico, Multa ,divorcio, convite, mercenario");
				return true;
			}
            //new para1;
   	    	new string[128];
			if(strcmp(x_Emprego,"convite",true) == 0)
			{
				if(InviteOffer[playerid] < 999)
			    {
					if(IsPlayerConnected(InviteOffer[playerid]))
					{
				        if(PlayerInfo[InviteOffer[playerid]][pLider] == 1) { SetSpawnInfo(playerid, 2, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
		 	            else if(PlayerInfo[InviteOffer[playerid]][pLider] == 2) { SetSpawnInfo(playerid, 2, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
			            else if(PlayerInfo[InviteOffer[playerid]][pLider] == 3) { SetSpawnInfo(playerid, 2, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
			            else if(PlayerInfo[InviteOffer[playerid]][pLider] == 4) { SetSpawnInfo(playerid, 2, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
			            else if(PlayerInfo[InviteOffer[playerid]][pLider] == 5) { SetSpawnInfo(playerid, 5, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
			            else if(PlayerInfo[InviteOffer[playerid]][pLider] == 6) { SetSpawnInfo(playerid, 5, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
                        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 7) { SetSpawnInfo(playerid, 2, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
			            else if(PlayerInfo[InviteOffer[playerid]][pLider] == 8) { SetSpawnInfo(playerid, 10, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
		 	            else if(PlayerInfo[InviteOffer[playerid]][pLider] == 9) { SetSpawnInfo(playerid, 10, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
			            else if(PlayerInfo[InviteOffer[playerid]][pLider] == 10) { SetSpawnInfo(playerid, 10, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
                        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 11) { SetSpawnInfo(playerid, 5, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
                        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 12) { SetSpawnInfo(playerid, 2, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
                        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 13) { SetSpawnInfo(playerid, 2, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
                        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 14) { SetSpawnInfo(playerid, 10, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
                        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 15) { SetSpawnInfo(playerid, 5, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
                        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 16) { SetSpawnInfo(playerid, 5, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
                        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 17) { SetSpawnInfo(playerid, 2, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
                        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 18) { SetSpawnInfo(playerid, 5, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
                        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 19) { SetSpawnInfo(playerid, 5, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
                        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 20) { SetSpawnInfo(playerid, 5, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
                        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 21) { SetSpawnInfo(playerid, 5, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
			            else if(PlayerInfo[InviteOffer[playerid]][pLider] == 22) { SetSpawnInfo(playerid, 5, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
			            else if(PlayerInfo[InviteOffer[playerid]][pLider] == 23) { SetSpawnInfo(playerid, 5, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
                        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 24) { SetSpawnInfo(playerid, 5, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
                        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 25) { SetSpawnInfo(playerid, 2, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
			            else if(PlayerInfo[InviteOffer[playerid]][pLider] == 26) { SetSpawnInfo(playerid, 10, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0);  }
			            else if(PlayerInfo[InviteOffer[playerid]][pLider] == 27) { SetSpawnInfo(playerid, 5, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
			            else if(PlayerInfo[InviteOffer[playerid]][pLider] == 28) { SetSpawnInfo(playerid, 5, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
			            else if(PlayerInfo[InviteOffer[playerid]][pLider] == 29) { SetSpawnInfo(playerid, 5, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
			            else if(PlayerInfo[InviteOffer[playerid]][pLider] == 30) { SetSpawnInfo(playerid, 5, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
                        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 31) { SetSpawnInfo(playerid, 5, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
                        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 32) { SetSpawnInfo(playerid, 5, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
                        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 33) { SetSpawnInfo(playerid, 5, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
                        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 34) { SetSpawnInfo(playerid, 5, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); }
						PlayerInfo[playerid][pMembro] = InviteJob[playerid];
						PlayerInfo[playerid][pCargo] = 1;
					   	format(string, 128, "* %s aceitou seu convite para entrar na sua organização.", PlayerName(playerid));
					   	SendClientMessage(InviteOffer[playerid], COLOR_LIGHTBLUE, string);
					    format(string, sizeof(string), "* Você aceitou o convite de %s para entrar para organização: %s, parabéns.", PlayerName(InviteOffer[playerid]), NomeORG(InviteOffer[playerid]));
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						ConviteInfoOrg(PlayerName(playerid), InviteJob[playerid], 1);
                        SetPlayerSpawn(playerid);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "    O jogador que lhe convidou não está conectado.");
						return true;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Você não foi convidado para nenhuma organização.");
					return true;
				}
			}
			else if(strcmp(x_Emprego,"assalto",true) == 0)
			{
			    if(OfAssalto[playerid] < 999)
			    {
			        if(IsPlayerConnected(OfAssalto[playerid]))
			        {
			            if (ProxDetectorS(5.0, playerid, OfAssalto[playerid]))
						{
				           	GetPlayerName(OfAssalto[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Você aceitou um assalto de %s e pagou $%d", giveplayer, precoassalto[playerid]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s aceitou seu assalto e pagou $%d.", sendername, precoassalto[playerid]);
			                SendClientMessage(OfAssalto[playerid], COLOR_LIGHTBLUE, string);
							GiveDinheiro(playerid, - precoassalto[playerid]);
							GiveDinheiro(OfAssalto[playerid], precoassalto[playerid]);
							SetPlayerCriminal(OfAssalto[playerid],255, "Assalto");
							OfAssalto[playerid] = 999;
							precoassalto[playerid] = 0;
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   O Assaltante está longe de você!");
						    return 1;
						}
			        }
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Assaltante não está mais conectado!");
						OfAssalto[playerid] = 999;
						precoassalto[playerid] = 0;
						return 1;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Você não foi assaltado!");
				    return 1;
				}
			}
			else if(strcmp(x_Emprego,"divorcio",true) == 0)
			{
			    if(DivorceOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(DivorceOffer[playerid]))
			        {
			            if(ProxDetectorS(10.0, playerid, DivorceOffer[playerid]))
						{
						    GetPlayerName(DivorceOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Voce aceitou o pedido de %s para ser testemunha de seu divorcio.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s aceitou o seu pedido para ser testemunha do seu divorcio.", PlayerName(playerid));
							SendClientMessage(DivorceOffer[playerid], COLOR_LIGHTBLUE, string);
							ClearMarriage(playerid);
							ClearMarriage(DivorceOffer[playerid]);
							PlayerInfo[playerid][pPHousekey] = 500;
							PlayerInfo[playerid][pPbiskey] = 255;
							PlayerInfo[playerid][pPFazkey] = 255;
							return true;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   O jogador que te enviou os papéis do divórcio não está perto de você!");
						    return true;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Ninguém te enviou qualquer papel de divórcio!");
				    return true;
				}
			}
			else if(strcmp(x_Emprego,"padrinho",true) == 0)
			{
			    if(MarryWitnessOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(MarryWitnessOffer[playerid]))
			        {
			            if(ProxDetectorS(10.0, playerid, MarryWitnessOffer[playerid]))
						{
						    GetPlayerName(MarryWitnessOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Você aceitou o pedido de %s para ser padrinho de seu casamento.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s aceitou o seu pedido para ser padrinho do seu casamento.", PlayerName(playerid));
							SendClientMessage(MarryWitnessOffer[playerid], COLOR_LIGHTBLUE, string);
							MarryWitness[MarryWitnessOffer[playerid]] = playerid;
							MarryWitnessOffer[playerid] = 999;
							return true;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   O jogador que pediu para ser padrinho de seu casamento não está perto de você!");
						    return true;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Ninguém pediu para ser padrinho de seu casamento!");
				    return true;
				}
			}
	        else if(strcmp(x_Emprego,"casamento",true) == 0)
			{
			    if(ProposeOffer[playerid] < 999)
			    {
			        if(!PlayerToPoint(10.0, playerid, 1964.0280,-369.0365,1093.7289))
			        {
			            SendClientMessage(playerid, COLOR_GREY, "Você não está dentro da igreja de Los Santos !");
			            return true;
			        }
			        if(IsPlayerConnected(ProposeOffer[playerid]))
			        {
			            if(ProxDetectorS(10.0, playerid, ProposeOffer[playerid]))
						{
						    if(MarryWitness[ProposeOffer[playerid]] == 999)
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   O jogador não possui um padrinho de casamento!");
						        return true;
						    }
						    if(IsPlayerConnected(MarryWitness[ProposeOffer[playerid]]))
						    {
							    if(ProxDetectorS(12.0, ProposeOffer[playerid], MarryWitness[ProposeOffer[playerid]]))
								{
								    GetPlayerName(ProposeOffer[playerid], giveplayer, sizeof(giveplayer));
									GetPlayerName(playerid, sendername, sizeof(sendername));
									format(string, sizeof(string), "* Voce aceitou o pedido de %s para ser seu marido.", giveplayer);
									SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
									format(string, sizeof(string), "* %s aceitou o seu pedido para ser sua esposa.", PlayerName(playerid));
									SendClientMessage(ProposeOffer[playerid], COLOR_LIGHTBLUE, string);
									format(string, sizeof(string), "Padre: %s voce aceita %s como seu legitimo marido? (use 'sim', qualquer outra coisa cancela o casamento)", sendername, giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									MarriageCeremoney[playerid] = 1;
									ProposedTo[ProposeOffer[playerid]] = playerid;
									GotProposedBy[playerid] = ProposeOffer[playerid];
									MarryWitness[ProposeOffer[playerid]] = 999;
									ProposeOffer[playerid] = 999;
									return true;
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "   O padrinho de casamento nao esta perto de sua noiva/noivo!");
								    return true;
								}
							}
							return true;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "  O jogador não esta perto de você!");
						    return true;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Ninguém te fez uma proposta!");
				    return true;
				}
			}
			else if(strcmp(x_Emprego,"multa",true) == 0)
			{
			    if(TicketOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(TicketOffer[playerid]))
			        {
			            if (ProxDetectorS(5.0, playerid, TicketOffer[playerid]))
						{
				           	GetPlayerName(TicketOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Você pagou a multa de R$%d para o Oficial %s.", TicketMoney[playerid], giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s pagou a multa de R$%d.", sendername, TicketMoney[playerid]);
							SendClientMessage(TicketOffer[playerid], COLOR_LIGHTBLUE, string);
							GiveDinheiro(playerid, - TicketMoney[playerid]);
							GiveDinheiro(TicketOffer[playerid], TicketMoney[playerid]);
							DepositarOrgGrana(7,TicketMoney[playerid]);
							TicketOffer[playerid] = 999;
							TicketMoney[playerid] = 0;
							return true;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "O policial não está perto de você !");
						    return true;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Ninguém lhe deu uma multa !");
				    return true;
				}
			}
			else if(strcmp(x_Emprego,"pizza",true) == 0)
			{
			    if(PizzaOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(PizzaOffer[playerid]))
			        {
			            if (ProxDetectorS(5.0, playerid, PizzaOffer[playerid]))
						{
						    if(!EntregandoPizza[PizzaOffer[playerid]])
						        return SendClientMessage(playerid, COLOR_GREY, " Este entregador não tem uma pizza em mãos para vender !");

						    if(GetPlayerMoney(playerid) < PizzaMoney[playerid])
						        return SendClientMessage(playerid, COLOR_GREY, "Você não possui dinheiro suficiente para pagar !");

							GetPlayerName(PizzaOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Você comprou uma pizza por R$%d do entregador %s.", PizzaMoney[playerid], giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s aceitou uma pizza que você ofereceu, ele pagou R$%d!", sendername, PizzaMoney[playerid]);
							SendClientMessage(PizzaOffer[playerid], COLOR_LIGHTBLUE, string);
							GiveDinheiro(playerid, - PizzaMoney[playerid]);
							GiveDinheiro(PizzaOffer[playerid], PizzaMoney[playerid]);
							Groceries[playerid][pPizzas] += 1;
							Groceries[playerid][pPizza] += 14;
							EntregandoPizza[PizzaOffer[playerid]] = false;
							RemovePlayerAttachedObjectEx(PizzaOffer[playerid], Vaga_Pizza);
							SetPlayerSpecialAction(PizzaOffer[playerid], 0);
							PizzaOffer[playerid] = 999;
							PizzaMoney[playerid] = 0;
							return true;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "O Entregador não está perto de você !");
						    return true;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Ninguem lhe ofereceu uma Pizza !");
				    return true;
				}
			}
			else if(strcmp(x_Emprego,"mercenario",true) == 0)
			{
			    if(MercOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(MercOffer[playerid]))
			        {
			            if (ProxDetectorS(5.0, playerid, MercOffer[playerid]))
						{

							if(!GetPlayerOrg(playerid))
								return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode ser ajudado!");

							if(GetPVarInt(MercOffer[playerid], "MercID") != 999)
								return SendClientMessage(playerid, COLOR_GRAD1, "Este mercenário ja está ajudando alguém!");

							foreach(Player, i){
							    if(GetPVarInt(i, "MercID") == playerid){
									format(string, sizeof string, "Você ja está sendo ajudado por %s, digite (/cancelar ajuda) para cancelar!", NomePlayer(i));
									return SendClientMessage(playerid, COLOR_LIGHTRED, string);
								}
							}

							GetPlayerName(MercOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Você pagou R$%d para o mercenário %s lhe ajudar.", MercMoney[playerid], giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você pode cancelar a ajuda usando (/cancelar ajuda)");
							format(string, sizeof(string), "* %s aceitou sua ajuda por R$%d.", sendername, MercMoney[playerid]);
							SendClientMessage(MercOffer[playerid], COLOR_LIGHTBLUE, string);
							SendClientMessage(MercOffer[playerid], COLOR_LIGHTBLUE, "Você pode cancelar a ajuda usando (/cancelar ajuda)");
							GiveDinheiro(playerid, - MercMoney[playerid]);
							GiveDinheiro(MercOffer[playerid], MercMoney[playerid]);

							SetPVarInt(MercOffer[playerid], "MercID", playerid);
							SetPVarInt(MercOffer[playerid], "MercORG", GetPlayerOrg(playerid));

							MercOffer[playerid] = 999;
							MercMoney[playerid] = 0;
							return true;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "O mercenário não está perto de você !");
						    return true;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Ninguém se ofereceu para ajudar você !");
				    return true;
				}
			}

			else if(strcmp(x_Emprego,"mototaxi",true) == 0)
			{
			    if(TransportDuty[playerid] != 1)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Você não está em corrida, USE: /corrida !");
				    return true;
			    }
	            if(TaxistaCallTime[playerid] > 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Você já aceitou uma chamada de Moto-Taxista !");
				    return true;
	            }
	            if(TaxistaCall < 999)
	            {
	                if(IsPlayerConnected(TaxistaCall))
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                	GetPlayerName(TaxistaCall, giveplayer, sizeof(giveplayer));
	                	format(string, sizeof(string), "* Você aceitou a chamada do(a) %s, A marca estará visível até você chegar.",giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* Moto-Taxista : %s aceitou sua chamada, se mantenha neste local e espere chegar.",PlayerName(playerid));
						SendClientMessage(TaxistaCall, COLOR_LIGHTBLUE, string);
						GameTextForPlayer(playerid, "~w~Cliente~n~~r~Va Ate a Marca Vermelha", 5000, 1);
						TaxistaCallTime[playerid] = 1;
						TaxistaAccepted[playerid] = TaxistaCall;
						TaxistaCall = 999;
						return true;
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Não tem nenhuma chamada de Taxista no momento !");
			    	return true;
	            }
			}
			else if(strcmp(x_Emprego,"taxi",true) == 0)
			{
			    if(TransportDuty[playerid] != 1)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Você não está em corrida, USE: /corrida !");
				    return true;
			    }
	            if(TaxistaCallTime[playerid] > 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Você já aceitou uma chamada de Taáxi !");
				    return true;
	            }
	            if(TaxistaCall < 999)
	            {
	                if(IsPlayerConnected(TaxistaCall))
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                	GetPlayerName(TaxistaCall, giveplayer, sizeof(giveplayer));
	                	format(string, sizeof(string), "* Voce aceitou a chamada do(a) %s, A marca estará visível até você chegar.",giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* Taxista: %s aceitou sua chamada, mantenha-se neste local e espere-o chegar.",PlayerName(playerid));
						SendClientMessage(TaxistaCall, COLOR_LIGHTBLUE, string);
						GameTextForPlayer(playerid, "~w~Cliente~n~~r~Va Ate a Marca Vermelha", 5000, 1);
						SendClientMessage(playerid, COLOR_GREY, "   Para Cancelar a chamada,digite /cancelar taxi !");
						TaxistaCallTime[playerid] = 1;
						TaxistaAccepted[playerid] = TaxistaCall;
						TaxistaCall = 999;
						return true;
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Não tem nenhuma chamada de Taxista no momento !");
			    	return true;
	            }
			}
			else if(strcmp(x_Emprego,"onibus",true) == 0)
			{
			    if(TransportDuty[playerid] != 2)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Você não está em corrida, USE: /corrida !");
				    return true;
			    }
	            if(BusCallTime[playerid] > 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Você já aceitou a chamada de Onibus !");
				    return true;
	            }
	            if(BusCall < 999)
	            {
	                if(IsPlayerConnected(BusCall))
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                	GetPlayerName(BusCall, giveplayer, sizeof(giveplayer));
	                	format(string, sizeof(string), "* Voce aceitou a chamada do(a) %s, A marca estará visível até você chegar.",giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* Motorista : %s aceitou sua chamada, mantenha-se neste local e espere-o chegar.",PlayerName(playerid));
						SendClientMessage(BusCall, COLOR_LIGHTBLUE, string);
						GameTextForPlayer(playerid, "~w~Cliente~n~~r~Va Ate a Marca Vermelha", 5000, 1);
						SendClientMessage(playerid, COLOR_GREY, "   Para Cancelar a chamada,digite /cancelar onibus !");
						BusCallTime[playerid] = 1;
						BusAccepted[playerid] = BusCall;
						BusCall = 999;
						return true;
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Não tem nenhuma chamada de onibus no momento !");
			    	return true;
	            }
			}
			else if(strcmp(x_Emprego,"medico",true) == 0)
			{
			    if(PlayerInfo[playerid][pMembro] == 4 || PlayerInfo[playerid][pLider] == 4 || PlayerInfo[playerid][pMembro] == 31 || PlayerInfo[playerid][pLider] == 31)
			    {
		            if(MedicCallTime[playerid] > 0)
		            {
		                SendClientMessage(playerid, COLOR_GREY, "Você já aceitou um chamado medico!");
					    return true;
		            }
                    if(MedicCall < 999)
	                {
		                if(IsPlayerConnected(MedicCall))
		                {
		                    GetPlayerName(playerid, sendername, sizeof(sendername));
		                	GetPlayerName(MedicCall, giveplayer, sizeof(giveplayer));
		                	format(string, sizeof(string), "* Voce aceitou a chamada do(a) %s, A marca estará visível até você chegar.",giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	                        format(string, sizeof(string), "* Medico : %s aceitou sua chamada, mantenha-se neste local e espere-o chegar.",PlayerName(playerid));
							SendClientMessage(MedicCall, COLOR_LIGHTBLUE, string);
							GameTextForPlayer(playerid, "~w~Cliente~n~~r~Ir Ate a Marca Vermelha", 5000, 1);
							SendClientMessage(playerid, COLOR_GREY, "   Para Cancelar a chamada,digite /cancelar medico !");
							MedicCallTime[playerid] = 1;
							MedicAccepted[playerid] = MedicCall;
							MedicCall = 999;
							return true;
						}
		            }
		            else
		            {
		                SendClientMessage(playerid, COLOR_GREY, "   Nenhuma chamada de médico no momento !");
				    	return true;
		            }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Você não é um Medico !");
				    return true;
				}
			}
			else if(strcmp(x_Emprego,"bombeiro",true) == 0)
			{
			    if(PlayerInfo[playerid][pEmprego] == 14)
			    {
		            if(BombCallTime[playerid] > 0)
		            {
		                SendClientMessage(playerid, COLOR_GREY, "Você já aceitou um chamado de bombeiro!");
					    return true;
		            }
                    if(BombCall < 999)
	                {
		                if(IsPlayerConnected(BombCall))
		                {
		                    GetPlayerName(playerid, sendername, sizeof(sendername));
		                	GetPlayerName(BombCall, giveplayer, sizeof(giveplayer));
		                	format(string, sizeof(string), "* Voce aceitou a chamada do(a) %s, A marca estará visível até você chegar.",giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	                        format(string, sizeof(string), "* Bombeiro : %s aceitou sua chamada, mantenha-se neste local e espere-o chegar.",PlayerName(playerid));
							SendClientMessage(BombCall, COLOR_LIGHTBLUE, string);
							GameTextForPlayer(playerid, "~w~Chamada~n~~r~Ir Ate a Marca Vermelha", 5000, 1);
							SendClientMessage(playerid, COLOR_GREY, "   Para Cancelar a chamada,digite /cancelar bombeiro !");
							BombCallTime[playerid] = 1;
							BombAccepted[playerid] = BombCall;
							BombCall = 999;
							return true;
						}
		            }
		            else
		            {
		                SendClientMessage(playerid, COLOR_GREY, "   Nenhuma chamada de bombeiro no momento !");
				    	return true;
		            }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Você não é um Bombeiro !");
				    return true;
				}
			}
			else if(strcmp(x_Emprego,"mecanico",true) == 0)
            {
   			 	if(PlayerInfo[playerid][pEmprego] == 5)
   			 	{
	            	if(MechanicCallTime[playerid] > 0)
	            	{
	                	SendClientMessage(playerid, COLOR_GREY, "Você já aceitou uma chamada de Mecânico!");
				    	return true;
	            	}
		            if(MechanicCall < 999)
		            {
		                if(IsPlayerConnected(MechanicCall))
		                {
		                    GetPlayerName(playerid, sendername, sizeof(sendername));
		                	GetPlayerName(MechanicCall, giveplayer, sizeof(giveplayer));
		                	format(string, sizeof(string), "* Voce aceitou a chamada do(a) %s, A marca estará visível até você chegar.",giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	                        format(string, sizeof(string), "* Mecânico: %s aceitou sua chamada, mantenha-se neste local e espere-o chegar.",PlayerName(playerid));
							SendClientMessage(MechanicCall, COLOR_LIGHTBLUE, string);
							GameTextForPlayer(playerid, "~w~Cliente~n~~r~Va Ate a Marca Vermelha", 5000, 1);
							SendClientMessage(playerid, COLOR_GREY, "   Para Cancelar a chamada,digite /cancelar mecanico !");
							MechanicCallTime[playerid] = 1;
							MechanicAccepted[playerid] = MechanicCall;
							MechanicCall = 999;
							return true;
						}
		            }
		            else
		            {
		                SendClientMessage(playerid, COLOR_GREY, "   Nenhuma chamada de mecânico no momento !");
				    	return true;
		            }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Você não é um mecânico !");
				    return true;
				}
			}
			else if(strcmp(x_Emprego,"chamada",true) == 0)
			{
			    if(IsACop(playerid))
			    {
		            if(CopsrondaCallTime[playerid] > 0)
		            {
		                SendClientMessage(playerid, COLOR_GREY, "Você aceitou o chamado!");
					    return true;
		            }
				    if(PolicialInRonda[playerid] == 1)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Você já está em um chamado...");
				        return true;
				    }
                    if(CopsrondaCall < 999)
	                {
		                if(IsPlayerConnected(CopsrondaCall))
		                {
		                    GetPlayerName(playerid, sendername, sizeof(sendername));
		                	GetPlayerName(CopsrondaCall, giveplayer, sizeof(giveplayer));
		                	format(string, sizeof(string), "* Voce aceitou a chamada do(a) %s, A marca estará visível até você chegar.",giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	                        format(string, sizeof(string), "* Policial : %s aceitou sua chamada, mantenha-se neste local e espere-o chegar.",PlayerName(playerid));
							SendClientMessage(CopsrondaCall, COLOR_LIGHTBLUE, string);
							GameTextForPlayer(playerid, "~w~Cliente~n~~r~Va Ate a Marca Vermelha", 5000, 1);
							SendClientMessage(playerid, COLOR_GREY, "   Para Cancelar a chamada,digite /cancelar policia !");
							CopsrondaCallTime[playerid] = 1;
							CopsrondaAccepted[playerid] = CopsrondaCall;
							CopsrondaCall = 999;
							return true;
						}
		            }
		            else
		            {
		                SendClientMessage(playerid, COLOR_GREY, "   Ninguém solicitou um policial ");
				    	return true;
		            }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Você não é um Policial !");
				    return true;
				}
			}
		    else if(strcmp(x_Emprego,"emprego",true) == 0)
			{
				if(PlayerInfo[playerid][pEmprego] != 0)
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "{FFFFFF}Você já possui um emprego, use {5AEFF9}/sairdoemprego{FFFFFF} para poder pegar outro");
					return true;
				}
			    if(GettingEmprego[playerid] > 0)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Boa sorte com seu novo emprego, digite /ajuda para saber seus comandos!");
			        PlayerInfo[playerid][pEmprego] = GettingEmprego[playerid];
			        GettingEmprego[playerid] = 0;
			        return true;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Você ainda não esta no lugar de um emprego!");
			        return true;
			    }
			}
			else if(strcmp(x_Emprego,"abastecimento",true) == 0)
			{
			    if(RefillOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(RefillOffer[playerid]))
			        {
			            if(GetPlayerMoney(playerid) > RefillPrice[playerid])
			            {
			                if(IsPlayerInAnyVehicle(playerid))
							{
			                	GetPlayerName(RefillOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
			                	new car = GetPlayerVehicleID(playerid);
			                	new fuel;
			                	PlayerInfo[RefillOffer[playerid]][pMechSkill] ++;
			                	if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 50)
								{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "* Sua habilidade de mecânico agora é nível 2, agora você pode abastecer com 40 de combustivel"); }
								else if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 100)
								{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "* Sua habilidade de mecânico agora é nível 3, agora você pode abastecer com 60 de combustivel."); }
								else if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 200)
								{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "* Sua habilidade de mecânico agora é nível 4, agora você pode abastecer com 80 de combustivel."); }
								else if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 400)
								{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "* Sua habilidade de mecânico agora é nível 5, agora você pode abastecer com 100 de combustivel."); }
								new level = PlayerInfo[RefillOffer[playerid]][pMechSkill];
								if(level >= 0 && level <= 50)
								{ fuel = 15; }
								else if(level >= 51 && level <= 100)
								{ fuel = 40; }
								else if(level >= 101 && level <= 200)
								{ fuel = 60; }
								else if(level >= 201 && level <= 400)
								{ fuel = 80; }
								else if(level >= 401)
								{ fuel = 100; }
			                	format(string, sizeof(string), "* Seu veículo foi abastecido com %d% de combustível por R$%d pelo mecânico %s.",fuel,RefillPrice[playerid],giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Você abasteceu o carro de %s com %d% de combustível por R$%d, esse dinheiro será adicionado ao seu salário.",sendername,fuel,RefillPrice[playerid]);
								SendClientMessage(RefillOffer[playerid], COLOR_LIGHTBLUE, string);
								PlayerInfo[RefillOffer[playerid]][pSalario] += RefillPrice[playerid];
								GiveDinheiro(playerid, -RefillPrice[playerid]);
								DepositarOrgGrana(7,RefillPrice[playerid]);
								PLPG += RefillPrice[playerid];
								DepositarOrgGrana(7,RefillPrice[playerid]);
								if(Gas[car] < 100) { Gas[car] += fuel; }
								if(Gas[car] > 100) { Gas[car] = 100; }
					        	RefillOffer[playerid] = 999;
								RefillPrice[playerid] = 0;
								return true;
							}
							else
							{
						    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você não está em um carro!");
						    	return true;
							}
			            }
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar pelo abastecimento !");
						    return true;
						}
			        }
			        return true;
			    }
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Ninguém ofereceu abastecimento para seu carro!");
				    return true;
				}
			}
			else if(strcmp(x_Emprego,"aovivo",true) == 0)
			{
			    if(LiveOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(LiveOffer[playerid]))
			        {
				        if (ProxDetectorS(5.0, playerid, LiveOffer[playerid]))
						{
						    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você está congelado até o final da conversa.");
							SendClientMessage(LiveOffer[playerid], COLOR_LIGHTBLUE, "* Você está congelado até o final da conversa (use /aovivo denovo).");
							TalkingLive[playerid] = LiveOffer[playerid];
							TalkingLive[LiveOffer[playerid]] = playerid;
							LiveOffer[playerid] = 999;
							return true;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Você está longe do repórter !");
							return true;
						}
					}
					return true;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Ninguém te ofereceu uma conversa ao vivo!");
				    return true;
				}
			}
			else if(strcmp(x_Emprego,"seguranca",true) == 0)
			{
			    if(GuardOffer[playerid] < 999)
			    {
			        if(GetPlayerMoney(playerid) > GuardPrice[playerid])
				    {
					    if(IsPlayerConnected(GuardOffer[playerid]))
					    {
					        GetPlayerName(GuardOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Você aceitou a proteção por R$%d do Segurança: %s.",GuardPrice[playerid],giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s aceitou sua proteção, e R$%d será adicionado no seu salário.",sendername,GuardPrice[playerid]);
							SendClientMessage(GuardOffer[playerid], COLOR_LIGHTBLUE, string);
							PlayerInfo[GuardOffer[playerid]][pSalario] += GuardPrice[playerid];
							GiveDinheiro(playerid, -GuardPrice[playerid]);
					        GuardOffer[playerid] = 999;
							GuardPrice[playerid] = 0;
							return true;
						}
						return true;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar pela proteção !");
					    return true;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Ninguém te ofereceu proteção!");
			        return true;
			    }
			}
			else if(strcmp(x_Emprego,"maconha",true) == 0)
			{
			    if(DrugOffer[playerid] < 999)
			    {
			        if(GetPlayerMoney(playerid) > DrugPrice[playerid])
				    {
				        if(PlayerInfo[playerid][pDrogas] < 7)
				        {
					        if(IsPlayerConnected(DrugOffer[playerid]))
					        {
					            GetPlayerName(DrugOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* você comprou %d gramas de maconha do traficante: %s por R$%d.",DrugGram[playerid],giveplayer,DrugPrice[playerid]);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s comprou suas %d gramas de maconha, e R$%d será adicionado no seu salário.",sendername,DrugGram[playerid],DrugPrice[playerid]);
								SendClientMessage(DrugOffer[playerid], COLOR_LIGHTBLUE, string);
								PlayerInfo[DrugOffer[playerid]][pSalario] += DrugPrice[playerid];
								PlayerInfo[DrugOffer[playerid]][pDrogasSkill] ++;
								GiveDinheiro(playerid, -DrugPrice[playerid]);
								PlayerInfo[playerid][pDrogas] += DrugGram[playerid];
								PlayerInfo[DrugOffer[playerid]][pDrogas] -= DrugGram[playerid];
								if(PlayerInfo[DrugOffer[playerid]][pDrogasSkill] == 50)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Seu nível de traficante agora é 2, e você pode comprar mais erva por um preço mais barato."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrogasSkill] == 100)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Seu nível de traficante agora é 3, e você pode comprar mais erva por um preço mais barato."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrogasSkill] == 200)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Seu nível de traficante agora é 4, e você pode comprar mais erva por um preço mais barato."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrogasSkill] == 400)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Seu nível de traficante agora é 5, e você pode comprar mais erva por um preço mais barato."); }
					            DrugOffer[playerid] = 999;
								DrugPrice[playerid] = 0;
								DrugGram[playerid] = 0;
								return true;
							}
							return true;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Você está totalmente carregado com maconha, use ou venda primeiro !");
						    return true;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar essas maconhas !");
					    return true;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Ninguém te ofereceu maconha !");
			        return true;
			    }
			}
			else if(strcmp(x_Emprego,"cocaina",true) == 0)
			{
			    if(DrugOffer[playerid] < 999)
			    {
			        if(GetPlayerMoney(playerid) > DrugPrice[playerid])
				    {
				        if(PlayerInfo[playerid][pDrogas2] < 7)
				        {
					        if(IsPlayerConnected(DrugOffer[playerid]))
					        {
					            GetPlayerName(DrugOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* você comprou %d gramas de cocaína do traficante: %s por R$%d.",DrugGram[playerid],giveplayer,DrugPrice[playerid]);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s comprou suas %d gramas de cocaína, e R$%d será adicionado no seu salário.",sendername,DrugGram[playerid],DrugPrice[playerid]);
								SendClientMessage(DrugOffer[playerid], COLOR_LIGHTBLUE, string);
								PlayerInfo[DrugOffer[playerid]][pSalario] += DrugPrice[playerid];
								PlayerInfo[DrugOffer[playerid]][pDrogasSkill] ++;
								GiveDinheiro(playerid, -DrugPrice[playerid]);
								PlayerInfo[playerid][pDrogas2] += DrugGram[playerid];
								PlayerInfo[DrugOffer[playerid]][pDrogas2] -= DrugGram[playerid];
								if(PlayerInfo[DrugOffer[playerid]][pDrogasSkill] == 50)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Seu nível de traficante agora é 2, e você pode comprar mais pó por um preço mais barato."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrogasSkill] == 100)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Seu nível de traficante agora é 3, e você pode comprar mais pó por um preço mais barato."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrogasSkill] == 200)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Seu nível de traficante agora é 4, e você pode comprar mais pó por um preço mais barato."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrogasSkill] == 400)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Seu nível de traficante agora é 5, e você pode comprar mais pó por um preço mais barato."); }
					            DrugOffer[playerid] = 999;
								DrugPrice[playerid] = 0;
								DrugGram[playerid] = 0;
								return true;
							}
							return true;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Você está carregado com crack, use ou venda primeiro !");
						    return true;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por essa cocaína !");
					    return true;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Ninguém te ofereceu cocaína !");
			        return true;
			    }
			}
   			else if(strcmp(x_Emprego,"crack",true) == 0)
			{
			    if(DrugOffer[playerid] < 999)
			    {
			        if(GetPlayerMoney(playerid) > DrugPrice[playerid])
				    {
				        if(PlayerInfo[playerid][pDrogas3] < 7)
				        {
					        if(IsPlayerConnected(DrugOffer[playerid]))
					        {
					            GetPlayerName(DrugOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* você comprou %d pedras de crack do traficante: %s por R$%d.",DrugGram[playerid],giveplayer,DrugPrice[playerid]);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s comprou suas %d pedras de crack, e R$%d será adicionado no seu salário.",sendername,DrugGram[playerid],DrugPrice[playerid]);
								SendClientMessage(DrugOffer[playerid], COLOR_LIGHTBLUE, string);
								PlayerInfo[DrugOffer[playerid]][pSalario] += DrugPrice[playerid];
								PlayerInfo[DrugOffer[playerid]][pDrogasSkill] ++;
								GiveDinheiro(playerid, -DrugPrice[playerid]);
								PlayerInfo[playerid][pDrogas3] += DrugGram[playerid];
								PlayerInfo[DrugOffer[playerid]][pDrogas3] -= DrugGram[playerid];
								if(PlayerInfo[DrugOffer[playerid]][pDrogasSkill] == 50)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Seu nível de traficante agora é 2, e você pode comprar mais pedras por um preço mais barato."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrogasSkill] == 100)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Seu nível de traficante agora é 3, e você pode comprar mais pedras por um preço mais barato."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrogasSkill] == 200)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Seu nível de traficante agora é 4, e você pode comprar mais pedras por um preço mais barato."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrogasSkill] == 400)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Seu nível de traficante agora é 5, e você pode comprar mais pedras por um preço mais barato."); }
					            DrugOffer[playerid] = 999;
								DrugPrice[playerid] = 0;
								DrugGram[playerid] = 0;
								return true;
							}
							return true;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Você está carregado com crack, use ou venda primeiro !");
						    return true;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar por esse crack !");
					    return true;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Ninguém te ofereceu crack !");
			        return true;
			    }
			}
			else if(strcmp(x_Emprego,"transa",true) == 0)
			{
			    if(SexOffer[playerid] < 999)
				{
					if(GetPlayerMoney(playerid) > SexPrice[playerid])
			  		{
						if (IsPlayerConnected(SexOffer[playerid]))
						{
						    new Car = GetPlayerVehicleID(playerid);
						    if(IsPlayerInAnyVehicle(playerid) && IsPlayerInVehicle(SexOffer[playerid], Car))
						    {
								GetPlayerName(SexOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Você fez sexo com a profissional do sexo %s, por R$%d.", giveplayer, SexPrice[playerid]);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s teve relações sexuais com você, R$%d foi adicionado em seu salário.", sendername, SexPrice[playerid]);
								SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, string);
								PlayerInfo[SexOffer[playerid]][pSalario] += SexPrice[playerid];
								GiveDinheiro(playerid, -SexPrice[playerid]);
								PlayerInfo[SexOffer[playerid]][pSexSkill] ++;
								if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 50)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Seu nível de sexo agora é 2, e pode oferecer uma melhor Sexo (saúde) e menos chance de DST."); }
								else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 100)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Seu nível de sexo agora é 3, e pode oferecer uma melhor Sexo (saúde) e menos chance de DST."); }
								else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 200)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Seu nível de sexo agora é 4, e pode oferecer uma melhor Sexo (saúde) e menos chance de DST."); }
								else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 400)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Seu nível de sexo agora é 5, e pode oferecer uma melhor Sexo (saúde) e menos chance de DST."); }
								if(PlayerInfo[playerid][pDoenca] == 0)
								{
								    if(Condom[playerid] < 1)
									{
									    new Float:health;
									    new level = PlayerInfo[SexOffer[playerid]][pSexSkill];
									    if(level >= 0 && level <= 50)
									    {
									        if(GetPlayerHealth(playerid, health) < 80) {
											SetPlayerHealth(playerid, health + 20.0); } else { SetPlayerHealth(playerid, 100.0); }
											new rand = random(sizeof(STD1));
											PlayerInfo[playerid][pDoenca] = STD1[rand];
											PlayerInfo[SexOffer[playerid]][pDoenca] = STD1[rand];
											if(STD1[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 20 de Saúde e não pegou nenhuma DST durante o sexo."); }
											else if(STD1[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 20 de Saúde + uma Pereba no CU devido ao sexo."); }
											else if(STD1[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 20 de Saúde + uma Duenca na Cabeca do Pau devido ao sexo."); }
											else if(STD1[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 20 de Saúde + uma Duenca na Buceta devido ao sexo."); }
										}
										else if(level >= 51 && level <= 100)
									    {
									        if(GetPlayerHealth(playerid, health) < 60) {
											SetPlayerHealth(playerid, health + 40.0); } else { SetPlayerHealth(playerid, 100.0); }
											new rand = random(sizeof(STD2));
											PlayerInfo[playerid][pDoenca] = STD2[rand];
											PlayerInfo[SexOffer[playerid]][pDoenca] = STD2[rand];
											if(STD2[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 40 de Saúde e não pegou nenhuma DST durante o sexo."); }
											else if(STD2[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 40 de Saúde + um Pereba no CU devido ao Sexo."); }
											else if(STD2[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 40 de Saúde + um Duenca na Cabeca do Pau devido ao Sexo."); }
											else if(STD2[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 40 de Saúde + uma Duenca na Buceta devido ao Sexo."); }
										}
										else if(level >= 101 && level <= 200)
									    {
									        if(GetPlayerHealth(playerid, health) < 40) {
											SetPlayerHealth(playerid, health + 60.0); } else { SetPlayerHealth(playerid, 100.0); }
											new rand = random(sizeof(STD3));
											PlayerInfo[playerid][pDoenca] = STD3[rand];
											PlayerInfo[SexOffer[playerid]][pDoenca] = STD3[rand];
											if(STD3[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 60 de Saúde e não pegou nenhuma DST durante o sexo."); }
											else if(STD3[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 60 de Saúde + um Pereba no CU devido ao Sexo."); }
											else if(STD3[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 60 de Saúde + um Duenca na Cabeca do Pau devido ao Sexo."); }
											else if(STD3[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 60 de Saúde + uma Duenca na Buceta devido ao Sexo."); }
										}
										else if(level >= 201 && level <= 400)
									    {
									        if(GetPlayerHealth(playerid, health) < 20) {
											SetPlayerHealth(playerid, health + 80.0); } else { SetPlayerHealth(playerid, 100.0); }
											new rand = random(sizeof(STD4));
											PlayerInfo[playerid][pDoenca] = STD4[rand];
											PlayerInfo[SexOffer[playerid]][pDoenca] = STD4[rand];
											if(STD4[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 80 de Saúde + DST enquanto não ter relações sexuais."); }
											else if(STD4[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 80 de Saúde + um Pereba no CU devido ao Sexo."); }
											else if(STD4[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 80 de Saúde + um Duenca na Cabeca do Pau devido ao Sexo."); }
											else if(STD4[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 80 de Saúde + uma Duenca na Buceta devido ao Sexo."); }
										}
										else if(level >= 401)
										{
											SetPlayerHealth(playerid, 100.0);
											SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Seu nível de sexo é tão alto que você ganhou 100% de saúde e nenhuma DST.");
											SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* A Prostitura tem um nível de sexo tão alto que você ganhou 100% de saúde e nenhuma DST.");
										}
				      				}
									else
									{
									    SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* O Jogador usou camisinha.");
									    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você está usando camisinha.");
									    Condom[playerid] --;
									}
								}
								else
								{
								    SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Este jogador já está infectado com DST, no pode pegar mais uma.");
								    return true;
								}
								SexOffer[playerid] = 999;
								return true;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "Você ou a Profissional do sexo não estão em um carro !");
							    return true;
							}
						}//Connected ou not
						return true;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar o sexo!");
					    return true;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Você não tem nenhuma oferta de sexo !");
				    return true;
				}
			}
			else if(strcmp(x_Emprego,"reparo",true) == 0)
			{
			    if(RepairOffer[playerid] < 999)
			    {
			        if(GetPlayerMoney(playerid) > RepairPrice[playerid])
				    {
					    if(IsPlayerInAnyVehicle(playerid))
					    {
					        if(IsPlayerConnected(RepairOffer[playerid]))
					        {
						        GetPlayerName(RepairOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        RepairCar[playerid] = GetPlayerVehicleID(playerid);
						        SetVehicleHealth(RepairCar[playerid], 1000.0);
						        RepairVehicleWithBomber(RepairCar[playerid]);
								format(string, sizeof(string), "* O mecânico %s reparou seu veículo por R$%d.",giveplayer,RepairPrice[playerid]);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Você reparou o veículo de %s, e R$%d foi adicionado no seu salário.",sendername,RepairPrice[playerid]);
								SendClientMessage(RepairOffer[playerid], COLOR_LIGHTBLUE, string);
								PlayerInfo[RepairOffer[playerid]][pMechSkill] ++;
				                if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 50)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "* Seu Detran e cargo 2, Agora ele pode adicionar combustivel para qualquer carro."); }
								else if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 100)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "* Seu Detran e cargo 3, Agora ele pode adicionar combustivel para qualquer carro."); }
								else if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 200)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "* Seu Detran e cargo 4, Agora ele pode adicionar combustivel para qualquer carro."); }
								else if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 400)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "* Seu Detran e cargo 5, Agora ele pode adicionar combustivel para qualquer carro."); }
								PlayerInfo[RepairOffer[playerid]][pSalario] += RepairPrice[playerid];
								GiveDinheiro(playerid, -RepairPrice[playerid]);
						        RepairOffer[playerid] = 999;
								RepairPrice[playerid] = 0;
								return true;
							}
							return true;
						}
						return true;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Você não pode permitir o reparo !");
					    return true;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Falta uma oferta para Você reparar o carro !");
			        return true;
			    }
			}
			else if(strcmp(x_Emprego,"advogado",true) == 0)
			{
	            if(AdvCallTime[playerid] > 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "Você já aceitou uma chamada de Advogado !");
				    return true;
	            }
	            if(AdvCall < 999)
	            {
	                if(IsPlayerConnected(AdvCall))
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                	GetPlayerName(AdvCall, giveplayer, sizeof(giveplayer));
	                	format(string, sizeof(string), "* Você aceitou a chamada do(a) %s, A marca estará visível até você chegar.",giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* Advogado : %s aceitou sua chamada, a qualquer momento ele poderá chegar.",PlayerName(playerid));
						SendClientMessage(TaxistaCall, COLOR_LIGHTBLUE, string);
						GameTextForPlayer(playerid, "~w~Cliente~n~~r~Va Ate a Marca Vermelha", 5000, 1);
						AdvCallTime[playerid] = 1;
						AdvAccepted[playerid] = AdvCall;
						AdvCall = 999;
						return true;
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Não tem nenhuma chamada de Taxista no momento !");
			    	return true;
	            }
			}
	        if(strcmp(x_Emprego,"carro",true) == 0)
			{
			    if(CarOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(CarOffer[playerid]))
			        {
			            if(GetPlayerMoney(playerid) > CarPrice[playerid])
			            {
			                if(IsPlayerInVehicle(CarOffer[playerid], CarID[playerid]))
			                {
				                GetPlayerName(CarOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
				                new points;
				                PlayerInfo[CarOffer[playerid]][pCarSkill] ++;
				                if(PlayerInfo[CarOffer[playerid]][pCarSkill] == 50)
								{ SendClientMessage(CarOffer[playerid], COLOR_YELLOW, "* Seu Nível de Vendedor de Carros agora e 2, os players vão poder chamar mais vezes os carros."); }
								else if(PlayerInfo[CarOffer[playerid]][pCarSkill] == 100)
								{ SendClientMessage(CarOffer[playerid], COLOR_YELLOW, "* Seu Nível de Vendedor de Carros agora e 3, os players vão poder chamar mais vezes os carros."); }
								else if(PlayerInfo[CarOffer[playerid]][pCarSkill] == 200)
								{ SendClientMessage(CarOffer[playerid], COLOR_YELLOW, "* Seu Nível de Vendedor de Carros agora e 4, os players vão poder chamar mais vezes os carros."); }
								else if(PlayerInfo[CarOffer[playerid]][pCarSkill] == 400)
								{ SendClientMessage(CarOffer[playerid], COLOR_YELLOW, "* Seu Nível de Vendedor de Carros agora e 5, os players vão poder chamar mais vezes os carros."); }
								new level = PlayerInfo[CarOffer[playerid]][pCarSkill];
								if(level >= 0 && level <= 50) { points = 1; }
								else if(level >= 51 && level <= 100) { points = 2; }
								else if(level >= 101 && level <= 200) { points = 3; }
								else if(level >= 201 && level <= 400) { points = 4; }
								else if(level >= 401) { points = 4; }
				                format(string, sizeof(string), "* Você comprou um carro por R$%d, Pelo Vendedor De Carros %s. (Você pode usar /chamarcarro %d vezes)",CarPrice[playerid],giveplayer,points);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Você vendeu seu carro para %s por R$%d, o cliente poderá digitar /chamarcarro %d vezes.",sendername,CarPrice[playerid],points);
								SendClientMessage(CarOffer[playerid], COLOR_LIGHTBLUE, string);
								SendClientMessage(CarOffer[playerid], COLOR_LIGHTBLUE, "* O dinheiro será adicionado a seu próximo salário!");
								PlayerInfo[CarOffer[playerid]][pSalario] += CarPrice[playerid];
								GiveDinheiro(playerid, -CarPrice[playerid]);
								RemovePlayerFromVehicle(CarOffer[playerid]);
								CarCalls[playerid] = points;
						        CarOffer[playerid] = 999;
								CarPrice[playerid] = 0;
								return 1;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   O vendedor de carros não está dentro do carro oferecido !");
						    	return 1;
							}
			            }
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Você não pode pagar o carro !");
						    return 1;
						}
			        }
			        return 1;
			    }
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Nenhuma oferta de carro !");
				    return 1;
				}
			}
			return true;
	}

stock IsAHeli(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
	    case 548, 425, 417, 487, 488, 497, 563:return 1;
	}
	return 0;
}
	CMD:plataforma(playerid)
	{
				if(!IsACop(playerid) && PlayerInfo[playerid][pEmprego] != 14)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Você não é um policial / bombeiro!");
				    return true;
				}
				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Você precisa ser Motorista!");
				    return true;
				}
				if(!IsAHeli(GetPlayerVehicleID(playerid)))
				{
				    SendClientMessage(playerid, COLOR_GREY, "Você precisa estar em um Helicoptero!");
				    return true;
				}
					if(Platform[GetPlayerVehicleID(playerid)] == 0)
					{
	    				new Float:P[3];
						GetVehiclePos(GetPlayerVehicleID(playerid), P[0], P[1], P[2]);
						Platform1[GetPlayerVehicleID(playerid)] = CreateDynamicObject(3857, P[0], P[1], P[2]-1,0.0, 0.0, 96.0);
						Platform2[GetPlayerVehicleID(playerid)] = CreateDynamicObject(1886, P[0], P[1], P[2]-1,0.0, 0.0, 96.0);
						Platform3[GetPlayerVehicleID(playerid)] = CreateDynamicObject(1886, P[0], P[1], P[2]-1,0.0, 0.0, 96.0);
						new atach1 = Platform1[GetPlayerVehicleID(playerid)];
						new atach2 = Platform2[GetPlayerVehicleID(playerid)];
						new atach3 = Platform3[GetPlayerVehicleID(playerid)];
						new get = GetPlayerVehicleID(playerid);
						AttachObjectToVehicle(atach1, get, -0.004999, 0.454999, -1.624998, 404.011169, 272.355529, 0.000000); //Object Model: 3857 |
						AttachObjectToVehicle(atach2, get, 1.104999, 0.504999, -1.599998, 542.701843, 361.800964, 0.000000); //Object Model: 1886 |
						AttachObjectToVehicle(atach3, get, -1.139999, 0.504999, -1.599998, 542.701843, 361.800964, 0.000000); //Object Model: 1886 |
	                    Platform[GetPlayerVehicleID(playerid)] = 1;
	                    SendClientMessage(playerid, COLOR_LIGHTBLUE, "» Use {FFFFFF}/plataforma {33CCFF}novamente para Retirá-la!");
	                    return 1;
					}
					if(Platform[GetPlayerVehicleID(playerid)] == 1)
					{
					    DestroyObject(Platform1[GetPlayerVehicleID(playerid)]);
					    DestroyObject(Platform2[GetPlayerVehicleID(playerid)]);
					    DestroyObject(Platform3[GetPlayerVehicleID(playerid)]);
					    Platform[GetPlayerVehicleID(playerid)] = 0;
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, "» Voce Retirou a Plataforma.");
					    return 1;
					}
		return 1;
	}
	CMD:corda(playerid)
	{
		if(!IsACop(playerid) && PlayerInfo[playerid][pEmprego] != 14)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Você não é um policial / Bombeiro!");
		    return true;
		}
		if(GetPlayerState(playerid) != PLAYER_STATE_PASSENGER)
		{
		    //SendClientMessage(playerid, COLOR_GREY, "Você precisa ser passageiro!");
		    //return true;
		}
		if(!IsAHeli(GetPlayerVehicleID(playerid)))
		{
		    SendClientMessage(playerid, COLOR_GREY, "Você não está em um helicoptero!");
		    return true;
		}
		if(GetVehicleSpeed(GetPlayerVehicleID(playerid)) > 4)
		{
		    SendClientMessage(playerid, COLOR_GREY, "   O Helicoptero tem que estar praticamente parado!");
		    return true;
		}
		if(GetPVarInt(playerid,"roped") == 0)
	 	{
	  		GetPlayerPos(playerid,pl_pos[playerid][0],pl_pos[playerid][1],pl_pos[playerid][2]);

   MapAndreas_FindZ_For2DCoord(pl_pos[playerid][0],pl_pos[playerid][1],pl_pos[playerid][3]);

            pl_pos_z[playerid] = pl_pos[playerid][3];

			pl_pos[playerid][4] = floatsub(pl_pos[playerid][2],pl_pos[playerid][3]);

			if(pl_pos[playerid][4] >= ropelength) return SendClientMessage(playerid,COLOR_LIGHTRED,"O Helicoptero está muito alto para descer!");
	      	if(pl_pos[playerid][4] <= 3) return RemovePlayerFromVehicle(playerid);

			SetPVarInt(playerid,"roped", 1);
			SetPVarInt(playerid,"chop_id", GetPlayerVehicleID(playerid));

			SetPlayerCheckpoint(playerid,pl_pos[playerid][0],pl_pos[playerid][1],floatsub(pl_pos[playerid][3],offsetz),25.0);

			SetPlayerPos(playerid,pl_pos[playerid][0],pl_pos[playerid][1],floatsub(pl_pos[playerid][2],3));

			SetPlayerVelocity(playerid,0,0,0);
	        for(new rep=0;rep!=10;rep++) ApplyAnimation(playerid,"ped","abseil",4.0,0,0,0,1,0);
	        for(new cre=0;cre<=pl_pos[playerid][4];cre++)
	        {
	        	r0pes[playerid][cre] = CreateDynamicObject(3004,pl_pos[playerid][0],pl_pos[playerid][1],floatadd(pl_pos[playerid][3],cre),87.640026855469,342.13500976563, 350.07507324219);
	      	}
	       	SetTimerEx("syncanim",dur,0,"i",playerid);
	 	}
		return 1;
	}


	CMD:multar(playerid, params[])
	{
			if(!IsACop(playerid))
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não é um policial!");
			    return true;
			}
			if(OnDuty[playerid] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não Bateu o cartão!");
			    return true;
			}
			if(PlayerInfo[playerid][pJailed] != 0)return SendClientMessage(playerid,COLOR_YELLOW,"Você não pode usar esse comando na cadeia!");
			new result[64];
			if(sscanf(params, "uds[64]", giveplayerid, moneys, result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /multar [ID do Player] [custo] [motivo]");
				return true;
			}
			if(moneys < 1000 || moneys > 30000) { SendClientMessage(playerid, COLOR_GREY, "Custo entre 1000 e 30000 !"); return true; }
			if(IsPlayerConnected(giveplayerid))
			{
				if(PlayerInfo[giveplayerid][pJailed] > 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não pode multar jogadores que estejam presos!");
					return true;
				}
				if(giveplayerid == playerid)return SendClientMessage(playerid, COLOR_GREY, "Você não pode multar a si mesmo!");
    			if (ProxDetectorS(25.0, playerid, giveplayerid))
				{
				    new string[256];
				    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* Você multou %s por R$%d, Razao: %s", giveplayer, moneys, result);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Oficial %s lhe aplicou uma multa no valor de R$%d, Razao: %s", sendername, moneys, (result));
					SendClientMessage(giveplayerid, COLOR_LIGHTRED, string);
					TicketOffer[giveplayerid] = playerid;
					TicketMoney[giveplayerid] = moneys;
					PMA++;
					format(string, sizeof(string),
					"* O policial %s está lhe aplicando uma multa de R$%d, motivo: %s\n\
					Para aceitar esta multa basta apertar em 'ACEITAR'\n\
					OBS: Caso não aceite, você será procurado por não aceitar a multa!", NomePlayer(playerid), moneys, result);
					ShowPlayerDialog(giveplayerid, 5988, DIALOG_STYLE_MSGBOX, "Multa aplicada", string, "ACEITAR", "RECUSAR");
					return true;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "O jogador está longe !");
					return true;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "O jogador está Offline !");
			}
			return true;
    }
    CMD:venderpizza(playerid, params[])
	{
	    	if(PlayerInfo[playerid][pEmprego] != 20)return SendClientMessage(playerid, COLOR_GRAD1, "Você não é um entregador de pizza.");

			if(sscanf(params, "ud", giveplayerid, moneys))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /venderpizza [id] [custo]");
				return true;
			}
			if(moneys < 10 || moneys > 100000) { SendClientMessage(playerid, COLOR_GREY, "Custo da pizza entre 10 e 100000 !"); return true; }
			if(!EntregandoPizza[playerid])return SendClientMessage(playerid, COLOR_GRAD1, "Você nao tem nenhuma pizza em mãos.");
			if(IsPlayerConnected(giveplayerid))
			{
    			if (ProxDetectorS(10.0, playerid, giveplayerid))
				{
				    new string[256];
				    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* Você ofereceu uma pizza para %s por R$%d.", giveplayer, moneys);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Entregador de pizza %s quer lhe vender uma pizza por R$%d, (/aceitar pizza)", sendername, moneys);
					SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					PizzaOffer[giveplayerid] = playerid;
					PizzaMoney[giveplayerid] = moneys;
					return true;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "O jogador está longe !");
					return true;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "O jogador está Offline !");
			}
			return true;
    }


	BPF::PresoMulta(playerid)
	{
		if(IsPlayerConnected(playerid))
		{
		    if(TicketOffer[playerid] < 999)
		    {
				TicketOffer[playerid] = 999;
				TicketMoney[playerid] = 0;
				PlayerInfo[playerid][pJailed] = 1;
	            WantedPoints[playerid] = 0;
	      		SetPlayerWantedLevelEx(playerid, WantedPoints[playerid]);
	            PlayerInfo[playerid][pJailTime] = 5*60;
	            SendClientMessage(playerid, COLOR_LIGHTRED, "*Você deveria ter pagado suas multas, agora foi preso por 5 minutos na DP Policia Militar.");
			}
		}
	}
	CMD:cameraman(playerid)
	{
	    if(PlayerInfo[playerid][pMembro] == 9 || PlayerInfo[playerid][pLider] == 9 || PlayerInfo[playerid][pMembro] == 32 || PlayerInfo[playerid][pLider] == 32)
		{
		    if(CamreaInfo[cameraman] != playerid)
		    {
			    if(CamreaInfo[cameraman] != INVALID_PLAYER_ID)
			    {
	                SendClientMessage(playerid, COLOR_GREY, "Alguem está de Camera-Man!Peça que ele saia.");
					return 1;
			    }
			}
	        OnAir(playerid,0);
		}
        return 1;
	}
	CMD:audiencia(playerid)
	{
	    new string[MAX_STRING];
	    if(GetPlayerOrg(playerid) == 9 || GetPlayerOrg(playerid) == 32)
		{
			format(string, sizeof(string), "Audiencia de Pessoas Assistindo Televisão: %d", CamreaInfo[audience]);
			SendClientMessage(playerid, 0xff6347FF, string);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Você não é um Reporter !");
		    return 1;
		}
		return true;
	}
	CMD:noar(playerid)
	{
	    if(PlayerInfo[playerid][pMembro] == 9 || PlayerInfo[playerid][pLider] == 9 || PlayerInfo[playerid][pMembro] == 32 || PlayerInfo[playerid][pLider] == 32)
		{
		    new string[MAX_STRING];
		    if(CamreaInfo[cameraman] == playerid)
		    {
		        format(string, sizeof(string), "Repórter %s: Ligou sua Camera e está no Ar Agora!Use /assistir", NomePlayer(playerid));
				OOCNews(0xFFA500F6,string);
				OnAir(playerid,1);
		    }
		}
		return 1;
	}
	CMD:liberarfamilia(playerid, params[])
	{
    if (PlayerInfo[playerid][pAdmin] < 5000) return 1;
	    		if (!gPlayerLogged[playerid])
		return SendClientMessage(playerid, COLOR_GRAD1, "   Você não está logado !");
			new para1;
			if(sscanf(params, "u", para1))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USE: /aovivo [ID do Player]");
					return true;
				}
			GetPlayerName(para1, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
		    if(IsPlayerConnected(para1))
		    {
		        if(para1 != INVALID_PLAYER_ID)
		        {
		            new string[128];
					format(string, sizeof string, "{FFD700}[Familia VIP] {FFFFFF} Admin %s te deu autorização para criar uma Família", sendername);
					SendClientMessage(para1, COLOR_DBLUE, string);
					PlayerInfo[para1][pFamiliavip] += 1;
					format(string, sizeof string, "{FFD700}[Familia VIP]: {FFFFFF} Você setou 1 mês de Familia VIP para %s", giveplayer);
					SendClientMessage(playerid, COLOR_DBLUE, string);
				}
			}
			return true;
	}
	CMD:pegarmsge(playerid)
	{
	    if(PlayerInfo[playerid][pAdmin] >= 1340)
	    {
	        PlayerInfo[playerid][pDecod] += 100;
	        SendClientMessage(playerid, -1, "Você ganhou um ponto de experiencia !");
	        return 1;
	    }
	    return 1;
	}
	CMD:assistir(playerid)
	{
     	if(playerid != CamreaInfo[cameraman])
 		{
 		    if(!PlayerInfo[playerid][pTelevisao])
				return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem uma Televisão, compre um na 24/7!");

   			Assistindo(playerid);
		 	return 1;
	    }
	    else
	    {
	    	SendClientMessage(playerid,0xCD0400AA,"Você é o Camera Man, Voce não pode assistir a TV!");
		}
		return 1;
	}
	CMD:desligartv(playerid)
	{
     	if(player_viewer[playerid] && playerid != CamreaInfo[cameraman])
 		{
		 	RemovePlayer(playerid);
		 	return 1;
	    }
	    SendClientMessage(playerid,0xCD0400AA,"Você não está assistindo TV!");
		return 1;
	}
	CMD:foradoar(playerid)
	{
	    new string[MAX_STRING];
	    if(PlayerInfo[playerid][pMembro] == 9 || PlayerInfo[playerid][pLider] == 9 || PlayerInfo[playerid][pMembro] == 32 || PlayerInfo[playerid][pLider] == 32)
		{
		    if(CamreaInfo[cameraman] == playerid)
		    {
		        format(string, sizeof(string), "Repórter %s: Desligou sua Camera e guardou seus Equipamentos.", NomePlayer(playerid));
				OOCNews(0xFFA500F6,string);
	 			OffAir();
		    }
		}
		return 1;
	}
	CMD:prevertempo(playerid)
	{
	    if(PlayerInfo[playerid][pMembro] == 9 || PlayerInfo[playerid][pLider] == 9 || PlayerInfo[playerid][pMembro] == 32 || PlayerInfo[playerid][pLider] == 32)
		{
		    if(teveprevisao) return SendClientMessage(playerid, COLOR_GREY, "Já Houve Previsão Neste Payday!");
			new rdtempo = random(44);
			UpdateWeather(0, rdtempo, playerid);
			return true;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "   Você não é um Reporter !");
		}
		return 1;
	}
 CMD:noticias(playerid, result[])
	{
			if(PlayerInfo[playerid][pMembro] == 9 || PlayerInfo[playerid][pLider] == 9 || PlayerInfo[playerid][pMembro] == 32 || PlayerInfo[playerid][pLider] == 32)
			{
			    new tmpcar = GetPlayerVehicleID(playerid);
		        if(PlayerInfo[playerid][pMuted] == 1)
				{
					SendClientMessage(playerid, 0xA92BF6F6, "Você nao poder falar, Você foi calado");
					return true;
				}
                if(IsAJornalCar(tmpcar)||PlayerToPoint(5,playerid,755.4222,-1361.7944,13.5132))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					if(isnull(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USE: /noticias [Texto]");
						return true;
					}
            	    new string[256];
					format(string, sizeof(string), "Reporter %s: %s", sendername, result);
					OOCNews(0xFFA500F6,string);
					PlayerInfo[playerid][pNewsSkill] ++;
					if(PlayerInfo[playerid][pNewsSkill] == 50)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Seu Reporter Agora e cargo 2, logo logo ja pode voar no helicoptero e falar AoVivo."); }
					else if(PlayerInfo[playerid][pNewsSkill] == 100)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Seu Reporter Agora e cargo 3, logo logo ja pode voar no helicoptero e falar AoVivo."); }
					else if(PlayerInfo[playerid][pNewsSkill] == 200)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* O Seu Reporter Agora e cargo 4 e pode fazer coberturas com helicoptero"); }
					else if(PlayerInfo[playerid][pNewsSkill] == 400)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* O Seu Reporter Agora e cargo 5 e pode conversar AoVivo com quem ele quizer."); }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Você não está no Jornal ou na Van !");
				    return true;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não é um Reporter !");
			}
			return true;
	}
	CMD:aovivo(playerid, params[])
	{
			if(PlayerInfo[playerid][pMembro] == 9 || PlayerInfo[playerid][pLider] == 9 || PlayerInfo[playerid][pMembro] == 32 || PlayerInfo[playerid][pLider] == 32)
			{
			    if(TalkingLive[playerid] != 255)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* A Conversa AoVivo Terminou.");
			        SendClientMessage(TalkingLive[playerid], COLOR_LIGHTBLUE, "* A Conversa AoVivo Terminou.");
			        Controle(playerid, 1);
			        Controle(TalkingLive[playerid], 1);
		            TalkingLive[TalkingLive[playerid]] = 255;
			        TalkingLive[playerid] = 255;
			        return true;
			    }
			    if(PlayerInfo[playerid][pCargo] < 2)
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Seu Cargo é baixo para falar com alguem AoVivo !");
				    return true;
				}
				if(sscanf(params, "u", giveplayerid))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USE: /aovivo [ID do Player]");
					return true;
				}
				if (IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if (ProxDetectorS(5.0, playerid, giveplayerid))
						{
                    	    new string[128];
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode falar AoVivo com você mesmo!"); return true; }
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Você ofereceu a %s para ter uma conversa AoVivo.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s Você tem uma oferta para conversas ao vivo, Digite (/aceitar aovivo) para aceitar.", PlayerName(playerid));
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							LiveOffer[giveplayerid] = playerid;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "Você esta longe deste player !");
						    return true;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   ID/Nick - Invalido !");
				    return true;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não é um reporter !");
			}
			return true;
	}
	CMD:venderdrogas(playerid, params[])
	{
			if(PlayerInfo[playerid][pJailed] != 0)
	    	{
		   		SendClientMessage(playerid,COLOR_YELLOW,"Você não pode vender drogas na cadeia!");
		   		return true;
	    	}
		    if(PlayerInfo[playerid][pEmprego] != 4)
		    {
				SendClientMessage(playerid, COLOR_GREY, "Você não é Vendedor De Drogas!");
				return true;
		    }
			new playa;
			new money;
			new needed;
			new droga[45];
			if(sscanf(params, "us[45]dd", playa, droga, needed, money))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /venderdrogas [playerid] [nome] [quantidade] [preco]");
				SendClientMessage(playerid, COLOR_GRAD2, "Nomes disponiveis: maconha, cocaina, crack");
				return true;
			}
			if(needed < 1 || needed > 99) { SendClientMessage(playerid, COLOR_GREY, "   Minimo de drogas 1, e Maximo de drogas 99!"); return true; }
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "  Preco maior que 1, menor que 99999!"); return true; }
			if(!IsPlayerConnected(playa))return SendClientMessage(playerid, COLOR_GRAD1, " Jogador Offline!");

            new string[128];
			if(strcmp(droga, "maconha", true)==0)
			{
				if(needed > PlayerInfo[playerid][pDrogas]) { SendClientMessage(playerid, COLOR_GREY, "Você nao tem esta quantidade de drogas com Você !"); return true; }
				if (ProxDetectorS(8.0, playerid, playa))
				{
				    if(playa == playerid)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Você não pode vender maconha pra você mesmo!");
				        return true;
				    }
				    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
				    format(string, sizeof(string), "* Você ofereceu %s com %d gramas de maconha por R$%d .", giveplayer, needed, money);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* O Traficante %s quer vender %d gramas de maconha por R$%d, (Digite /aceitar maconha) para comprar.", sendername, needed, money);
					SendClientMessage(playa, COLOR_LIGHTBLUE, string);
					DrugOffer[playa] = playerid;
					DrugPrice[playa] = money;
					DrugGram[playa] = needed;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   O Jogador não está perto de você !");
				}
			}
			else if(strcmp(droga, "cocaina", true)==0)
			{
				if(needed > PlayerInfo[playerid][pDrogas2]) { SendClientMessage(playerid, COLOR_GREY, "Você não tem esta quantidade de cocaina com você !"); return true; }
				if (ProxDetectorS(8.0, playerid, playa))
				{
				    if(playa == playerid)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Você não pode vender maconha pra você mesmo!");
				        return true;
				    }
				    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
				    format(string, sizeof(string), "* Você ofereceu %s com %d carreirinhas por R$%d .", giveplayer, needed, money);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* O Traficante %s quer vender %d carreirinhas por R$%d, (Digite /aceitar cocaina) para comprar.", sendername, needed, money);
					SendClientMessage(playa, COLOR_LIGHTBLUE, string);
					DrugOffer[playa] = playerid;
					DrugPrice[playa] = money;
					DrugGram[playa] = needed;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   O Jogador não está perto de você !");
				}
			}
			else if(strcmp(droga, "crack", true)==0)
			{
				if(needed > PlayerInfo[playerid][pDrogas3]) { SendClientMessage(playerid, COLOR_GREY, "Você nao tem esta quantidade de crack com Você !"); return true; }
				if (ProxDetectorS(8.0, playerid, playa))
				{
				    if(playa == playerid)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Você não pode vender maconha pra você mesmo!");
				        return true;
				    }
				    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
				    format(string, sizeof(string), "* Você ofereceu %s com %d pedras por R$%d .", giveplayer, needed, money);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* O Traficante %s quer vender %d pedras por R$%d, (Digite /aceitar crack) para comprar.", sendername, needed, money);
					SendClientMessage(playa, COLOR_LIGHTBLUE, string);
					DrugOffer[playa] = playerid;
					DrugPrice[playa] = money;
					DrugGram[playa] = needed;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   O Jogador não está perto de você !");
				}
			}
			return true;
	}

    CMD:createbancosorg(playerid)
	{
	    if (PlayerInfo[playerid][pAdmin] >= 5000)
		{
			CreateBancoOrgs();
			SendClientMessage(playerid,COLOR_LIGHTRED,"* Você Criou os Cofre Orgs!");
			return 1;
		}
		return 1;
	}

	CMD:menucheater(playerid)
	{
	    if(PlayerInfo[playerid][pAdmin] < 1337)return SendClientMessage(playerid, 0xFF0000FF, "Você não pode usar este comando");

		new string[128];
		new gstring[100];
		format(string, sizeof string, "{00EAF6}AdmAviso: O admin %s entrou no menu ANTICHEAT {FFFFFF}(/menucheater)", NomePlayer(playerid));

		if(GetPVarInt(playerid, "NoMenuAC")==0)ABroadCast(-1, string, 1337);

		SetPVarInt(playerid, "NoMenuAC", 1);
        MEGAString[0] = EOS;
		format(gstring, 200, "%s Aibreak ou Teleport\n", CheaterOn(C_AirBreak));
		strcat(MEGAString,gstring);
		format(gstring, 200, "%s Speed Hack\n", CheaterOn(C_Speed));
		strcat(MEGAString,gstring);
		format(gstring, 200, "%s MoneyHack\n", CheaterOn(C_Money));
		strcat(MEGAString,gstring);
		format(gstring, 200, "%s State Hack\n", CheaterOn(C_StateHack));
		strcat(MEGAString,gstring);
		format(gstring, 200, "%s Fly\n", CheaterOn(C_Fly));
		strcat(MEGAString,gstring);
		format(gstring, 200, "%s Weapon Hack\n", CheaterOn(C_Weapon));
		strcat(MEGAString,gstring);
		format(gstring, 200, "%s Armour Hack\n", CheaterOn(C_Colete));
		strcat(MEGAString,gstring);
		format(gstring, 200, "%s Fake Kill\n", CheaterOn(C_FakeKill));
		strcat(MEGAString,gstring);
		format(gstring, 200, "%s Divulguer\n", CheaterOn(C_DV));
		strcat(MEGAString,gstring);
		format(gstring, 200, "%s JoyPad\n", CheaterOn(C_Joy));
		strcat(MEGAString,gstring);
		format(gstring, 200, "%s Armas Proibidas\n", CheaterOn(C_Armas));
		strcat(MEGAString,gstring);
		format(gstring, 200, "%s Puxar Carros\n", CheaterOn(C_PC));
		strcat(MEGAString,gstring);
		format(gstring, 200, "%s Tentativa Crash\n", CheaterOn(C_AntCrashing));
		strcat(MEGAString,gstring);

		ShowPlayerDialog(playerid, 3600, DIALOG_STYLE_TABLIST_HEADERS,"Cinfigurações do ANTICHEAT", MEGAString, "On/Off", "Cancelar");
		return true;
	}
	static stock CheaterOn(cheater)
	{
		new strch[80];

		if(cheaterligado[cheater] == true)strch = "{00DB00}(LIGADO){FFFFFF}";

		else strch = "{FF0000}(DESLIGADO){FFFFFF}";
		return strch;
	}

	CMD:curarme(playerid, params[])
	{
	        if (PlayerToPoint(3, playerid,1172.6522,-1327.9591,15.4025)||PlayerToPoint(3, playerid,2029.5945,-1404.6426,17.2512))
			{
	            if(PlayerInfo[playerid][pDoenca] > 0)
	            {
					PlayerInfo[playerid][pDoenca] = 0;
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você está infectado com uma DST, vá ate um hospital se tratar !");
					GiveDinheiro(playerid, -500);
					SendClientMessage(playerid, 0xA92BF6F6, "Dr.Bezerra de Menezes: Retiramos as suas doenças! Tenha um otimo dia!!");
					SendClientMessage(playerid, 0xA92BF6F6, "Hospital: Foram cobrados R$500 para ajudar o Hospital!!");
					SendClientMessage(playerid, 0xA92BF6F6, "Hospital: Procure um médico que eles cobram mais barato!!");
					SetPlayerDrunkLevel (playerid, 0);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Você não tem uma Doença para ser curada !");
				    return true;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Você não está em um Hospital !");
	        }
			return true;
	}
	CMD:ejetar(playerid, params[])
	{
	        new State;
	        if(IsPlayerInAnyVehicle(playerid))
	        {
         		State=GetPlayerState(playerid);
		        if(State!=PLAYER_STATE_DRIVER)
		        {
		        	SendClientMessage(playerid,COLOR_GREY,"Você não é o motorista do carro !");
		            return true;
		        }
		        new playa;
				if(sscanf(params, "u", playa))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /ejetar [ID do Player]");
					return true;
				}
				new test;
				test = GetPlayerVehicleID(playerid);
				if(IsPlayerConnected(playa))
				{
				    if(playa != INVALID_PLAYER_ID)
				    {
				        if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode se expulsar... Aperte Enter ¬¬!"); return true; }
				        if(IsPlayerInVehicle(playa,test))
				        {
                    	    new string[128];
							new PName[MAX_PLAYER_NAME];
							GetPlayerName(playerid,PName,sizeof(PName));
							GetPlayerName(playa, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "* Você expulsou o(a) %s para fora do carro!", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Você foi retirado do carro por %s !", PName);
							SendClientMessage(playa, COLOR_LIGHTBLUE, string);
							RemovePlayerFromVehicle(playa);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Este jogador não está em seu carro !");
						    return true;
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, " ID/Nick - Invalido!");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você precisa estar em um carro para usar este comando !");
			}
			return true;
	}
	CMD:transar(playerid, params[])
	{
	        if(PlayerInfo[playerid][pEmprego] == 3)
			{
			    if(!IsPlayerInAnyVehicle(playerid))
			    {
					SendClientMessage(playerid, COLOR_GREY, "Você só pode transar em um carro !");
					return true;
			    }
			    if(PlayerInfo[playerid][pJailed] != 0)return SendClientMessage(playerid,COLOR_YELLOW,"Você não pode usar esse comando na cadeia!");
			    new Car = GetPlayerVehicleID(playerid), money;
				if(sscanf(params, "ud", giveplayerid, money))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USE: /transar [ID do Player] [price]");
					return true;
				}
				if(money < 1 || money > 20000) { SendClientMessage(playerid, COLOR_GREY, "   Preço da transa não pode ser menor que R$1, ou maior que R$20000!"); return true; }
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(PlayerInfo[giveplayerid][pAge] < 18)
						    {
						        SendClientMessage(playerid, COLOR_WHITE, "Você não pode transar com um de menor!");
						        return true;
						    }
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode ter relação sexual com você mesma, mais pode bater uma siririca!"); return true; }
						    if(IsPlayerInAnyVehicle(playerid) && IsPlayerInVehicle(giveplayerid, Car))
						    {
                        	    new string[128];
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Você ofereceu ao %s para dar uma *Foda* com você por R$%d.", giveplayer, money);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Profissional do sexo %s Perguntou se você aceita dar uma *Foda*, por R$%d (Digite /aceitar transa) Para Aceitar.", sendername, money);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					            SexOffer[giveplayerid] = playerid;
					            SexPrice[giveplayerid] = money;
				            }
				            else
				            {
				                SendClientMessage(playerid, COLOR_GREY, "Você e o seu cliente devem estar juntos em um carro !");
				                return true;
				            }
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "   Este jogador não está perto de você !");
							return true;
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   O Jogador está offline !");
					return true;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não é Profissional do sexo !");
			}
			return true;
	}

 	CMD:bafometro(playerid, params[])
    {
   			if(!IsACop(playerid))
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não é um policial !");
			    return true;
			}
			if(OnDuty[playerid] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não Bateu o cartão !");
			    return true;
			}
			if(PlayerInfo[playerid][pJailed] == 9)
		    {
				SendClientMessage(playerid,COLOR_GRAD1,"Você não pode usar este comando nas Celas da Administração!");
		      	return true;
		    }
			if(sscanf(params, "u", giveplayerid))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USE: /bafometro [ID do Player]");
				return true;
			}
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
			    	if (ProxDetectorS(8.0,playerid,giveplayerid))
					{
                	    new string[128];
				    	GetPlayerName(giveplayerid,giveplayer,sizeof(giveplayer));
						GetPlayerName(playerid,sendername,sizeof(sendername));
				    	new bebado[32], bebado2[32];
					    if(PlayerDrunk[giveplayerid] > 0) { bebado = "Bêbado."; } else { bebado = "| Sóbrio "; }
				    	if(PlayerInfo[giveplayerid][pMats] > 0) { bebado2 = "Drogado."; } else { bebado2 = "| Sóbrio "; }
				    	format(string,sizeof(string),"|__________[ %s ]__________|",giveplayer);
			        	SendClientMessage(playerid,COLOR_WHITE,string);
			        	format(string,sizeof(string),"%s.",bebado);
						SendClientMessage(playerid,COLOR_GREY,string);
						format(string,sizeof(string),"%s.",bebado2);
						format(string,sizeof(string),"* %s faz o teste do Bafomêtro em %s.",sendername ,giveplayer);
						SendClientMessageInRange(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
				    	SendClientMessage(playerid,COLOR_GREY,"O jogador não está perto de você !");
				    	return true;
    				}
				}
			}
        	else
       		{
            	SendClientMessage(playerid,COLOR_GREY,"Esse jogador está off-line !");
            	return true;
       		}
			return true;
	}

 	CMD:revistar(playerid, params[])
    {
  			if(!IsACop(playerid))
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não é um policial!");
			    return true;
			}
			if(OnDuty[playerid] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não Bateu o cartão!");
			    return true;
			}
			if(PlayerInfo[playerid][pJailed] == 9)
		    {
				SendClientMessage(playerid,COLOR_GRAD1,"Você não pode usar este comando nas Celas da Administração!");
		      	return true;
		    }
			if(sscanf(params, "u", giveplayerid))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USE: /revistar [ID do Player]");
				return true;
			}
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
			    	if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
                	    new string[128];
				    	if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode se Revistar!"); return true; }
				    	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
				    	new text1[50], text4[20], text6[20], text7[20];
				    	if(PlayerInfo[giveplayerid][pDrogas] < 1 || PlayerInfo[giveplayerid][pDrogas2] < 1 || PlayerInfo[giveplayerid][pDrogas3] < 1)
				  			{
							  	text1 = "| Vazio";
		 					}
         				if(PlayerInfo[giveplayerid][pDrogas] > 0 && PlayerInfo[giveplayerid][pDrogas] < 520 ||
					 	   PlayerInfo[giveplayerid][pDrogas2] > 0 && PlayerInfo[giveplayerid][pDrogas2] < 520 ||
						   PlayerInfo[giveplayerid][pDrogas3] > 0 && PlayerInfo[giveplayerid][pDrogas3] < 520)
				  			{
							  	text1 = "| Drogas(Porte Usuário)";
		 					}

 						if(PlayerInfo[giveplayerid][pDrogas] >= 520 || PlayerInfo[giveplayerid][pDrogas2] >= 520 || PlayerInfo[giveplayerid][pDrogas3] >= 520)
				  		{
						  	text1 = "| Drogas(Porte Tráfico)";
		 				}
				    	if(PlayerInfo[giveplayerid][pMats] > 0) { text4 = "| Materiais."; } else { text4 = "| Vazio."; }
				    	if(PlayerInfo[giveplayerid][pPhoneBook] > 0) { text6 = "| Lista Telefonica."; } else { text6 = "| Vazio."; }
				    	if(PlayerInfo[giveplayerid][pCDPlayer] > 0) { text7 = "| CDPlayer."; } else { text7 = "| Vazio."; }
				    	format(string, sizeof(string), "|__________ Itens %s __________|", giveplayer);
			        	SendClientMessage(playerid, COLOR_WHITE, string);
			        	format(string, sizeof(string), "%s", text1);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s [Quantidade: %d].", text4, PlayerInfo[giveplayerid][pMats]);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text6);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text7);
						SendClientMessage(playerid, COLOR_GREY, string);
						SendClientMessage(playerid, COLOR_YELLOW, "| Para ver se possui alguma arma use /revistararmas.");
						format(string, sizeof(string), "* %s revistou %s para ver se tem qualquer item ilegal.", sendername ,giveplayer);
						SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de Você !");
					    return true;
					}
				}
			}
     	   	else
      	  	{
            	SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
            	return true;
        	}
    		return true;
 	}
    CMD:revistararmas(playerid, params[])
	{
			if(sscanf(params, "u", giveplayerid))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USE: /revistararmas [id do player]");
				return true;
			}
			if(!IsACop(playerid))
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não é um policial!");
			    return true;
			}
			if(OnDuty[playerid] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não Bateu o cartão!");
			    return true;
			}
    	    new string[128];
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    new weapons[13][2];
					    new playerck[MAX_PLAYER_NAME];
					    GetPlayerName(giveplayerid, playerck, sizeof(playerck));
	   					format(string, sizeof(string), "EXIBINDO AS INFORMAÇÕES DAS ARMAS DE: %s",playerck);
	   					SendClientMessage(playerid, TEAM_BALLAS_COLOR, string);
	                    GetPlayerWeaponData(giveplayerid, 2, weapons[2][0], weapons[2][1]);
					    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[2][0]], weapons[2][1]);
	   					SendClientMessage(playerid, COLOR_WHITE, string);
					    GetPlayerWeaponData(giveplayerid, 3, weapons[3][0], weapons[3][1]);
					    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[3][0]], weapons[3][1]);
	   					SendClientMessage(playerid, COLOR_WHITE, string);
					    GetPlayerWeaponData(giveplayerid, 4, weapons[4][0], weapons[4][1]);
					    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[4][0]], weapons[4][1]);
	   					SendClientMessage(playerid, COLOR_WHITE, string);
	   					GetPlayerWeaponData(giveplayerid, 5, weapons[5][0], weapons[5][1]);
					    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[5][0]], weapons[5][1]);
	   					SendClientMessage(playerid, COLOR_WHITE, string);
	   					GetPlayerWeaponData(giveplayerid, 6, weapons[6][0], weapons[6][1]);
					    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[6][0]], weapons[6][1]);
	   					SendClientMessage(playerid, COLOR_WHITE, string);
	   					GetPlayerWeaponData(giveplayerid, 7, weapons[7][0], weapons[7][1]);
					    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[7][0]], weapons[7][1]);
	   					SendClientMessage(playerid, COLOR_WHITE, string);
	   					GetPlayerWeaponData(giveplayerid, 8, weapons[8][0], weapons[8][1]);
					    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[8][0]], weapons[8][1]);
	   					SendClientMessage(playerid, COLOR_WHITE, string);
	   					GetPlayerWeaponData(giveplayerid, 9, weapons[9][0], weapons[9][1]);
					    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[9][0]], weapons[9][1]);
	   					SendClientMessage(playerid, COLOR_WHITE, string);
	   					GetPlayerWeaponData(giveplayerid, 11, weapons[11][0], weapons[11][1]);
					    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[11][0]], weapons[11][1]);
	  					SendClientMessage(playerid, COLOR_WHITE, string);
	  					format(string, sizeof(string), "* %s revistou %s para verificar se ele possui alguma arma.", sendername ,giveplayer);
						SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    }
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de Você !");
					    return true;
					}
		    	}
			}
        	else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Este jogador está off-line !");
	            return true;
	        }
	    	return true;
	}
	CMD:procurados(playerid, params[])
	{
			if(IsACop(playerid))
			{
			    MEGAString[0] = EOS;
        	    new string[128];
			    foreach(Player, i)
				{
				    if(GetPlayerWantedLevelEx(i) > 0)
				    {
						GetPlayerName(i, giveplayer, sizeof(giveplayer));
						format(string, sizeof string, "%s [ID:%d] [ORG: %s] Nível: %d\n", giveplayer,i,AbrevORG(i),WantedPoints[i]);
                        strcat(MEGAString,string);
    					ShowPlayerDialog(playerid, 9937, DIALOG_STYLE_LIST, "Suspeitos Atuais",MEGAString,"Ok","Sair");
    				}
    			}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não e um oficial!");
			}
			return 1;
	}


	CMD:sairdoemprego(playerid, params[])
	{
	    if(PlayerInfo[playerid][pJailed] == 9)
    	{
			SendClientMessage(playerid,COLOR_GRAD1,"Você não pode usar este comando nas Celas da Administração!");
			return true;
 		}
 		if (PlayerInfo[playerid][pVIP] >= 1)
		{
		    if(PlayerInfo[playerid][pEmprego] > 0)
	    	{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você cumpriu seu contrato e saiu do emprego.");
				if(PlayerInfo[playerid][pSex] == 1) { PlayerInfo[playerid][pSkin] = 23; } else { PlayerInfo[playerid][pSkin] = 150; }
			 	PlayerInfo[playerid][pEmprego] = 0;
			 	PlayerInfo[playerid][pContractTime] = 0;
			 	return true;
			}
		}
 		if(PlayerInfo[playerid][pEmprego] > 0)
	    {
	        if(PlayerInfo[playerid][pContractTime] >= 5)
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você cumpriu seu contrato e saiu do emprego.");
			    PlayerInfo[playerid][pEmprego] = 0;
			    PlayerInfo[playerid][pContractTime] = 0;
			    if(PlayerInfo[playerid][pSex] == 1) { PlayerInfo[playerid][pSkin] = 23; } else { PlayerInfo[playerid][pSkin] = 150; }
			}
			else
			{
			    new string[128];
			    format(string, sizeof(string), "* Você tem %d Horas de Emprego,Precisa completar 5 pra pegar outro.", PlayerInfo[playerid][pContractTime]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Você não possui um emprego!");
		}
		return true;
	}
    CMD:limpar(playerid, params[])return ForT:limparficha(playerid, params);
	CMD:limparficha(playerid, params[])
	{
 			if(IsACop(playerid))
			{
		        new result[64];
				if(OnDuty[playerid] != 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Você não Bateu o cartão!");
				    return true;
				}
	    	    new string[128];
				if (!PlayerToPoint(3.0, playerid, 253.9280,69.6094,1003.6406) && !PlayerToPoint(3.0, playerid, 259.2474,120.3977,1003.2188) && !PlayerToPoint(3.0, playerid, 198.9671,168.1982,1003.0234) && !PlayerToPoint(3.0, playerid, 234.8419,111.2194,1003.2257) && !PlayerToPoint(3.0, playerid, 699.6252,-553.2016,-3.5950))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você não está na recepção do Departamento de Policia !");
					return true;
				}
				if(sscanf(params, "us[68]", giveplayerid, result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "/limpar [ID do Player] [Motivo]");
					return 1;
				}
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
	                    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não limpar sua própria ficha!"); return true; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Você limpou a ficha de %s.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "*Oficial: %s limpou a ficha de: %s, motivo: %s",sendername,giveplayer, result);
						SendFamilyMessage(2, COLOR_DBLUE, string);
						SendFamilyMessage(1, COLOR_DBLUE, string);
						SendFamilyMessage(3, COLOR_DBLUE, string);
						SendFamilyMessage(16, COLOR_DBLUE, string);
						SendFamilyMessage(27, COLOR_DBLUE, string);
						SendFamilyMessage(31, COLOR_DBLUE, string);
						SendFamilyMessage(7, COLOR_DBLUE, string);
						SendFamilyMessage(11, COLOR_DBLUE, string);
						SendFamilyMessage(4, COLOR_DBLUE, string);
						SendFamilyMessage(33, COLOR_DBLUE, string);
						SendFamilyMessage(20, COLOR_DBLUE, string);
						format(string, sizeof(string), "* Oficial %s Limpou a sua ficha.", PlayerName(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						WantedPoints[giveplayerid] = 0;
	      				SetPlayerWantedLevelEx(giveplayerid, 0);
						ClearCrime(giveplayerid);
						return 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Invalido ID/NICK!");
				}
   			}
   			new member = PlayerInfo[playerid][pMembro];
			new lider = PlayerInfo[playerid][pLider];
			new rank = PlayerInfo[playerid][pCargo];
			if(member == 12 || member == 13 || lider == 12 || lider == 13)
			{
			    if(sscanf(params, "u", giveplayerid))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USE: /limpar [id]");
					return 1;
				}
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode limpar-se!"); return 1; }
					    if(rank < 4) { SendClientMessage(playerid, COLOR_GREY, "   Apenas Cargo 4+ Podem Limpar Ficha !"); return 1; }
					    if(PlayerInfo[giveplayerid][pLimparb] > 0)
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Este Jogador ja tentou Limpar sua Ficha neste Payday !");
					     	SendClientMessage(giveplayerid, COLOR_GREY, "Você só pode tentar novamente Limpar no Próximo Payday !");
							return 1;
					    }
					    if(GetPlayerMoney(playerid) < 5000) { SendClientMessage(playerid, COLOR_GREY, "Você precisa de R$5000 para limpar a ficha !"); return 1; }
					    if(member > 0)
					    {
					        new randomFicha;
	    					randomFicha = random(2);
		    				switch(randomFicha)
		    				{
		         				case 0:
			     				{
			     				    new string [100];
									format(string, sizeof(string), "* Você limpou a ficha do(a) %s por R$5000.", NomePlayer(giveplayerid));
									SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
									format(string, sizeof(string), "* Membro %s cargo %d, limpou sua ficha.", NomePlayer(playerid), rank);
									SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
									SetPlayerCriminal(playerid,255, "Invasao de Sistema Fichas");
									WantedPoints[giveplayerid] = 0;
									PlayerInfo[giveplayerid][pLimparb] = 1;
			      					SetPlayerWantedLevelEx(giveplayerid, 0);
									ClearCrime(giveplayerid);
									GiveDinheiro(giveplayerid, - 5000);
									GiveDinheiro(playerid, 5000);
								}
								case 1:
								{
								    new string [100];
								    format(string, sizeof(string), "* Você tentou limpar a ficha do(a) %s mas nao conseguiu.", NomePlayer(giveplayerid));
									SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
									format(string, sizeof(string), "* Membro %s, tentou limpar sua ficha mas nao conseguiu.", NomePlayer(playerid));
									SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
									PlayerInfo[giveplayerid][pLimparb] = 1;
									SetPlayerCriminal(playerid,255, "Invasao de Sistema Fichas");
									GiveDinheiro(giveplayerid, - 5000);
									GiveDinheiro(playerid, 5000);
								}
							}
						}
						else if(lider > 0)
						{
                            new randomFicha;
	    					randomFicha = random(2);
		    				switch(randomFicha)
		    				{
		         				case 0:
			     				{
			     				    new string[100];
								    format(string, sizeof(string), "* Você limpou a ficha do(a) %s por R$5000.", NomePlayer(giveplayerid));
									SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
									format(string, sizeof(string), "* Lider %s, limpou sua ficha.", NomePlayer(playerid));
									SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
									SetPlayerCriminal(playerid,255, "Invasao de Sistema Fichas");
									WantedPoints[giveplayerid] = 0;
									PlayerInfo[giveplayerid][pLimparb] = 1;
			      					SetPlayerWantedLevelEx(giveplayerid, 0);
									ClearCrime(giveplayerid);
									GiveDinheiro(giveplayerid, - 5000);
									GiveDinheiro(playerid, 5000);
								}
								case 1:
								{
								    new string[100];
								    format(string, sizeof(string), "* Você tentou limpar a ficha do(a) %s mas nao conseguiu.", NomePlayer(giveplayerid));
									SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
									format(string, sizeof(string), "* Lider %s, tentou limpar sua ficha mas nao conseguiu.", NomePlayer(playerid));
									SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
									SetPlayerCriminal(playerid,255, "Invasao de Sistema Fichas");
									PlayerInfo[giveplayerid][pLimparb] = 1;
									GiveDinheiro(giveplayerid, - 5000);
									GiveDinheiro(playerid, 5000);
								}
							}
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   ID/Nick! Invalido");
				}
			}
			return true;
	}
	CMD:lfichaadm(playerid, params[])
	{
        if (PlayerInfo[playerid][pAdmin] >= 1337)
		{
			    if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 3000)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo Admin USE: /trabalhar");
					return true;
				}
				if(sscanf(params, "u", giveplayerid))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USE: /lfichaadm [id]");
					return 1;
				}
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        new string[100];
						format(string, sizeof(string), "* Você limpou a ficha de %s.", NomePlayer(giveplayerid));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof string, "AdmCmd: O admin %s limpou a ficha de Procura de %s.", NomePlayer(playerid), NomePlayer(giveplayerid));
						ABroadCast(0xff6347FF, string, 1);
						format(string, sizeof(string), "* Admin %s Limpou sua Ficha.", NomePlayer(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						WantedPoints[giveplayerid] = 0;
      					SetPlayerWantedLevelEx(giveplayerid, 0);
						ClearCrime(giveplayerid);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Invalido ID/NICK!");
				}
		}
		return 1;
	}
	CMD:rconeadm(playerid, params[])
	{
	    if (PlayerInfo[playerid][pAdmin] >= 1337)
		{
			    if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 3000)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo Admin USE: /trabalhar");
					return true;
				}
				new pc,cid;
				if(sscanf(params, "dd", pc, cid))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USE: /rconeadm [id OldPCone] [id Cone]");
					return 1;
				}
				if(IsPlayerConnected(playerid))
				{
				    for(new i; i < MAX_BARREIRAS; i++)
					{
					    switch(cid)
					    {
					        case 5:
							    if(ConeInfo[i][ConeCreated5] && ConeInfo[i][ConeID5] == pc)
								{
								    new string[128];
									SendClientMessage(playerid, COLOR_GREY, "Você retirou o Cone 5 [4/5]!");
					                ConeInfo[i][ConeID5]=999;
					                ConeInfo[i][ConeCreated5]=0;
					                DestroyDynamicObject(ConeInfo[i][ConeObject5]);
					                Delete3DTextLabel(ConeInfo[i][ConeText5]);
					    			format(string, sizeof(string), "AdmCmd: %s removeu o Cone 5. [4/5]",PlayerName(playerid));
									foreach(Player, p)
									{
										if(IsACop(p))
										{
											SendClientMessage(p, TEAM_BLUE_COLOR, string);
										}
									}
									return true;
								}
							case 4:
								if(ConeInfo[i][ConeCreated4] && ConeInfo[i][ConeID4] == pc)
								{
								    new string[128];
									SendClientMessage(playerid, COLOR_GREY, "Você retirou o Cone 4 [3/5]!");
					                ConeInfo[i][ConeID4]=999;
					                ConeInfo[i][ConeCreated4]=0;
					                DestroyDynamicObject(ConeInfo[i][ConeObject4]);
					                Delete3DTextLabel(ConeInfo[i][ConeText4]);
					    			format(string, sizeof(string), "AdmCmd: %s removeu o Cone 4. [3/5]",PlayerName(playerid));
									foreach(Player, p)
									{
										if(IsACop(p))
										{
											SendClientMessage(p, TEAM_BLUE_COLOR, string);
										}
									}
									return true;
								}
							case 3:
								if(ConeInfo[i][ConeCreated3] && ConeInfo[i][ConeID3] == pc)
								{
								    new string[128];
									SendClientMessage(playerid, COLOR_GREY, "Você retirou o Cone 3 [2/5]!");
					                ConeInfo[i][ConeID3]=999;
					                ConeInfo[i][ConeCreated3]=0;
					                DestroyDynamicObject(ConeInfo[i][ConeObject3]);
					                Delete3DTextLabel(ConeInfo[i][ConeText3]);
					    			format(string, sizeof(string), "AdmCmd: %s removeu o Cone 3. [2/5]",PlayerName(playerid));
									foreach(Player, p)
									{
										if(IsACop(p))
										{
											SendClientMessage(p, TEAM_BLUE_COLOR, string);
										}
									}
									return true;
								}
							case 2:
								if(ConeInfo[i][ConeCreated2] && ConeInfo[i][ConeID2] == pc)
								{
								    new string[128];
									SendClientMessage(playerid, COLOR_GREY, "Você retirou o Cone 2 [1/5]!");
					                ConeInfo[i][ConeID2]=999;
					                ConeInfo[i][ConeCreated2]=0;
					                DestroyDynamicObject(ConeInfo[i][ConeObject2]);
					                Delete3DTextLabel(ConeInfo[i][ConeText2]);
					    			format(string, sizeof(string), "AdmCmd: %s removeu o Cone 2. [1/5]",PlayerName(playerid));
									foreach(Player, p)
									{
										if(IsACop(p))
										{
											SendClientMessage(p, TEAM_BLUE_COLOR, string);
										}
									}
									return true;
								}
							case 1:
								if(ConeInfo[i][ConeCreated1] && ConeInfo[i][ConeID1] == pc)
								{
								    new string[128];
									SendClientMessage(playerid, COLOR_GREY, "Você retirou o Cone 1 [0/5]!");
					                ConeInfo[i][ConeID1]=999;
					                ConeInfo[i][ConeCreated1]=0;
					                DestroyDynamicObject(ConeInfo[i][ConeObject1]);
					                Delete3DTextLabel(ConeInfo[i][ConeText1]);
					    			format(string, sizeof(string), "AdmCmd: %s removeu o Cone 1. [0/5]",PlayerName(playerid));
									foreach(Player, p)
									{
										if(IsACop(p))
										{
											SendClientMessage(p, TEAM_BLUE_COLOR, string);
										}
									}
									return true;
								}
							default: SendClientMessage(playerid, COLOR_GREY, "Cones de 1 a 5.");
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Invalido ID/NICK!");
				}
		}
		return 1;
	}
	CMD:bloqueio(playerid)return ForT:bq(playerid);
 	CMD:bq(playerid)
	{
		if(PlayerInfo[playerid][pJailed] != 0)return SendClientMessage(playerid,COLOR_YELLOW,"Você não pode usar esse comando na cadeia!");
		new org = GetPlayerOrg(playerid);
		if (org!=5&&org!=6&&org!=12&&org!=13&&org!=14&&org!=17&&org!=18&&org!=19&&org!=21&&org!=24&&org!=25&&org!=26)
			return SendClientMessage(playerid, COLOR_GREY, "Você não pode colocar um bloqueio");

		if(GetPlayerInterior(playerid) > 0 || IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, AMARELO_COR, "Você não pode colocar um bloqueio dentro de um veiculo ou em algum interior!");

		if(GetPlayerSpeedEx(playerid) > 2)
			return SendClientMessage(playerid, AMARELO_COR, "Você precisa estar parado para colocar o bloqueio.");


		new prid = 999;
		new string[128];
		for(new i; i < 100; i++){
		    if(BloqueioInfo[i][bqCreated]){
				if (BloqueioInfo[i][bqID] == playerid) return SendClientMessage(playerid, COLOR_GREY, "Você só pode colocar 1 bloqueio, /rbq para remover o seu.");
			}
		}

		for(new i; i < 100; i++){
		    if(!BloqueioInfo[i][bqCreated]){
				prid = i;
				break;
			}
		}

		if (prid == 999) return SendClientMessage(playerid, COLOR_GREY, " Há muitos bloqueios no servidor!");
		new Float:X, Float:Y, Float:Z, Float:A;

		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, A);
		BloqueioInfo[prid][bqID]=playerid;
		BloqueioInfo[prid][bqCreated]=1;
        BloqueioInfo[prid][bqObject] = CreateDynamicObject(1358, X, Y, Z, 0.0, 0.0, A);
		GameTextForPlayer(playerid, "~w~Bloqueio ~r~Plantado", 5000, 5);
		SendClientMessage(playerid, COLOR_GREEN, "Bloqueio Plantado... Use /rbq para remover e poder criar mais!.");

		SetPlayerPos(playerid, X, Y, Z+3.0);
		format(string, sizeof string, "*** BLOQUEIO *** \n Organização: %s \n Criado por: %s[ID: %d]",GetOrgName(org), NomePlayer(playerid), playerid);
		BloqueioInfo[prid][bqText] = Create3DTextLabel(string,0xFF363600,X, Y, Z ,7.0, 0);
        format(string, sizeof(string), "*** %s - %s[%d] colocou um bloqueio (/bq) ***",GetOrgName(org), PlayerName(playerid), playerid);
		SendClientMessageToAll(GetPlayerColor(playerid), string);
		return true;
	}

 	CMD:rbq(playerid)
	{
		for(new i; i < 100; i++)
		{
		    if(BloqueioInfo[i][bqCreated] && BloqueioInfo[i][bqID] == playerid)
			{
			    new string[128];
				SendClientMessage(playerid, COLOR_GREY, "Você retirou seu bloqueio!");
                BloqueioInfo[i][bqID]=999;
                BloqueioInfo[i][bqCreated]=0;
                DestroyDynamicObject(BloqueioInfo[i][bqObject]);
                Delete3DTextLabel(BloqueioInfo[i][bqText]);
        		format(string, sizeof(string), "*** %s - %s[%d] removeu um bloqueio (/rbq) ***",GetOrgName(GetPlayerOrg(playerid)), PlayerName(playerid), playerid);
	         	SendClientMessageToAll(GetPlayerColor(playerid), string);
				return true;
			}
		}
		SendClientMessage(playerid, COLOR_GRAD1, "Você não colocou nenhum bloqueio!");
		return true;
	}

 	CMD:rbqall(playerid)
	{
		if (!PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Você não é um admin.");
		new tpt = 0;
		for(new i; i < 100; i++)
		{
		    if(BloqueioInfo[i][bqCreated])
			{
                BloqueioInfo[i][bqID]=999;
                BloqueioInfo[i][bqCreated]=0;
                DestroyDynamicObject(BloqueioInfo[i][bqObject]);
                Delete3DTextLabel(BloqueioInfo[i][bqText]);
                tpt = 1;
			}
		}
		if(tpt == 0)return SendClientMessage(playerid, COLOR_GRAD1, "Nenhum bloqueio foi plantado.");
		new string[128];
		format(string, sizeof(string), "AdmCmd: O admin %s removeu todos os bloqueios do servidor.", PlayerName(playerid));
		SendClientMessageToAll(0xff6347FF, string);
		return true;
	}


	CMD:barreira(playerid)return ForT:br(playerid);
 	CMD:br(playerid)
	{
		if(PlayerInfo[playerid][pJailed] != 0)return SendClientMessage(playerid,COLOR_YELLOW,"Você não pode usar esse comando na cadeia!");
		if (!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Você não é COP!");
		if(GetPlayerInterior(playerid) > 0 || IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, AMARELO_COR, "Você não pode colocar uma barreira dentro de um veiculo ou em algum interior!");
		new prid = 999;
		new string[128];
		for(new i; i < MAX_BARREIRAS; i++){
		    if(BarreiraInfo[i][brCreated]){
				if (BarreiraInfo[i][brID] == playerid) return SendClientMessage(playerid, COLOR_GREY, "Você só pode implantar 1 barreira por vez, /rbr - para remover a sua.");
			}
		}

		for(new i; i < MAX_BARREIRAS; i++){
		    if(!BarreiraInfo[i][brCreated]){
				prid = i;
				break;
			}
		}

		if (prid == 999) return SendClientMessage(playerid, COLOR_GREY, " Há muitas barreiras plantados no servidor!");
		new Float:X, Float:Y, Float:Z, Float:A;

		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, A);
		BarreiraInfo[prid][brID]=playerid;
		BarreiraInfo[prid][brCreated]=1;
        BarreiraInfo[prid][brObject] = CreateDynamicObject(981, X, Y, Z, 0.0, 0.0, A+180);
		GameTextForPlayer(playerid, "~w~Barreira ~r~Plantada", 5000, 5);
		SetPlayerPos(playerid, X, Y, Z+3);

		format(string, sizeof string, "[Barreira]\nCriada por: %s[ID: %d]", NomePlayer(playerid), playerid);
		BarreiraInfo[prid][brText] = Create3DTextLabel(string,0x77BBFFFF,X, Y, Z ,10.0, 0);

		format(string, sizeof(string), "[%s] %s plantou uma barreira e fez um bloqueio.", NomeORG(playerid),PlayerName(playerid));
		foreach(Player, i)
		{
			if(IsACop(i))
			{
				SendClientMessage(i, TEAM_BLUE_COLOR, string);
			}
		}
		return true;
	}

    CMD:cone(playerid)
	{
		if(PlayerInfo[playerid][pJailed] != 0)return SendClientMessage(playerid,COLOR_YELLOW,"Você não pode usar esse comando na cadeia!");
		if (!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Você não é COP!");
		if(gettime() < GetPVarInt(playerid, #VarFlood4))
	    return SendClientMessage(playerid, COLOR_GRAD1, #Você não pode usar este comando com tanta frequencia);
		SetPVarInt(playerid, #VarFlood4, gettime()+2);
		if(GetPlayerInterior(playerid) > 0 || IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, AMARELO_COR, "Você não pode colocar um cone dentro de um veiculo ou em algum interior!");
		new prid = 999;
		new string[128];
		for(new i; i < MAX_PLAYERS; i++){
		    if(ConeInfo[i][ConeCreated5])
			{
				if (ConeInfo[i][ConeID5] == playerid) return SendClientMessage(playerid, COLOR_GREY, "Você só pode implantar 5 Cones por vez, /rcone - para remover os seus.");
			}
		}

		for(new i; i < MAX_PLAYERS; i++){
		    if(!ConeInfo[i][ConeCreated5]){
				prid = i;
				break;
			}
		}
		if (prid == 999) return SendClientMessage(playerid, COLOR_GREY, " Há muitos cones plantados no servidor!");
		if(ConeInfo[prid][ConeCreated1] != 1)
		{
			new Float:X, Float:Y, Float:Z, Float:A;

			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, A);
			ConeInfo[prid][ConeID1]=playerid;
			ConeInfo[prid][ConeCreated1]=1;
	        ConeInfo[prid][ConeObject1] = CreateDynamicObject(1237, X, Y, Z-1, 0.0, 0.0, A+180);
			GameTextForPlayer(playerid, "~w~Cone ~r~Colocado", 5000, 5);
			SetPlayerPos(playerid, X, Y, Z+2);

			format(string, sizeof string, "[cone 1]\nCriado por: %s[ID: %d]", NomePlayer(playerid), playerid);
			ConeInfo[prid][ConeText1] = Create3DTextLabel(string,0x77BBFFFF,X, Y, Z ,10.0, 0);

			format(string, sizeof(string), "[%s] %s plantou um Cone e fez um Desvio. [1/5]", NomeORG(playerid),PlayerName(playerid));
			foreach(Player, i)
			{
				if(IsACop(i))
				{
					SendClientMessage(i, TEAM_BLUE_COLOR, string);
				}
			}
			return 1;
		}
		if(ConeInfo[prid][ConeCreated2] != 1)
		{
			new Float:X, Float:Y, Float:Z, Float:A;

			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, A);
			ConeInfo[prid][ConeID2]=playerid;
			ConeInfo[prid][ConeCreated2]=1;
	        ConeInfo[prid][ConeObject2] = CreateDynamicObject(1237, X, Y, Z-1, 0.0, 0.0, A+180);
			GameTextForPlayer(playerid, "~w~Cone ~r~Colocado", 5000, 5);
			SetPlayerPos(playerid, X, Y, Z+2);

			format(string, sizeof string, "[cone 2]\nCriado por: %s[ID: %d]", NomePlayer(playerid), playerid);
			ConeInfo[prid][ConeText2] = Create3DTextLabel(string,0x77BBFFFF,X, Y, Z ,10.0, 0);

			format(string, sizeof(string), "[%s] %s plantou um Cone e fez um Desvio. [2/5]", NomeORG(playerid),PlayerName(playerid));
			foreach(Player, i)
			{
				if(IsACop(i))
				{
					SendClientMessage(i, TEAM_BLUE_COLOR, string);
				}
			}
			return 1;
		}
		if(ConeInfo[prid][ConeCreated3] != 1)
		{
			new Float:X, Float:Y, Float:Z, Float:A;

			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, A);
			ConeInfo[prid][ConeID3]=playerid;
			ConeInfo[prid][ConeCreated3]=1;
	        ConeInfo[prid][ConeObject3] = CreateDynamicObject(1237, X, Y, Z-1, 0.0, 0.0, A+180);
			GameTextForPlayer(playerid, "~w~Cone ~r~Colocado", 5000, 5);
			SetPlayerPos(playerid, X, Y, Z+2);

			format(string, sizeof string, "[cone 3]\nCriado por: %s[ID: %d]", NomePlayer(playerid), playerid);
			ConeInfo[prid][ConeText3] = Create3DTextLabel(string,0x77BBFFFF,X, Y, Z ,10.0, 0);

			format(string, sizeof(string), "[%s] %s plantou um Cone e fez um Desvio. [3/5]", NomeORG(playerid),PlayerName(playerid));
			foreach(Player, i)
			{
				if(IsACop(i))
				{
					SendClientMessage(i, TEAM_BLUE_COLOR, string);
				}
			}
			return 1;
		}
		if(ConeInfo[prid][ConeCreated4] != 1)
		{
			new Float:X, Float:Y, Float:Z, Float:A;

			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, A);
			ConeInfo[prid][ConeID4]=playerid;
			ConeInfo[prid][ConeCreated4]=1;
	        ConeInfo[prid][ConeObject4] = CreateDynamicObject(1237, X, Y, Z-1, 0.0, 0.0, A+180);
			GameTextForPlayer(playerid, "~w~Cone ~r~Colocado", 5000, 5);
			SetPlayerPos(playerid, X, Y, Z+2);

			format(string, sizeof string, "[cone 4]\nCriado por: %s[ID: %d]", NomePlayer(playerid), playerid);
			ConeInfo[prid][ConeText4] = Create3DTextLabel(string,0x77BBFFFF,X, Y, Z ,10.0, 0);

			format(string, sizeof(string), "[%s] %s plantou um Cone e fez um Desvio. [4/5]", NomeORG(playerid),PlayerName(playerid));
			foreach(Player, i)
			{
				if(IsACop(i))
				{
					SendClientMessage(i, TEAM_BLUE_COLOR, string);
				}
			}
			return 1;
		}
		if(ConeInfo[prid][ConeCreated5] != 1)
		{
			new Float:X, Float:Y, Float:Z, Float:A;

			GetPlayerPos(playerid, X, Y, Z);
			GetPlayerFacingAngle(playerid, A);
			ConeInfo[prid][ConeID5]=playerid;
			ConeInfo[prid][ConeCreated5]=1;
	        ConeInfo[prid][ConeObject5] = CreateDynamicObject(1237, X, Y, Z-1, 0.0, 0.0, A+180);
			GameTextForPlayer(playerid, "~w~Cone ~r~Colocado", 5000, 5);
			SetPlayerPos(playerid, X, Y, Z+2);

			format(string, sizeof string, "[cone 5]\nCriado por: %s[ID: %d]", NomePlayer(playerid), playerid);
			ConeInfo[prid][ConeText5] = Create3DTextLabel(string,0x77BBFFFF,X, Y, Z ,10.0, 0);

			format(string, sizeof(string), "[%s] %s plantou um Cone e fez um Desvio. [5/5]", NomeORG(playerid),PlayerName(playerid));
			foreach(Player, i)
			{
				if(IsACop(i))
				{
					SendClientMessage(i, TEAM_BLUE_COLOR, string);
				}
			}
			return 1;
		}
		return true;
	}
	CMD:paredao(playerid)
	{
        if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 1340 && PlayerInfo[playerid][pAdmin] != 1342 && PlayerInfo[playerid][pAdmin] != 1341)
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
		    return 1;
		}
		if(PlayerInfo[playerid][pAdmin] < 1)
	    {
			SendClientMessage(playerid, COLOR_GRAD1, "Você não tem autorização para usar esse comando.");
			return 1;
	    }
	    if(IsPlayerInAnyVehicle(playerid))
		{
		   SendClientMessage(playerid, COLOR_GREY, "Não é possivel plantar bloqueios dentro de veiculos!");
		   return 1;
		}
	    if(PlayerInfo[playerid][pJailed] != 0)
    	{
		   SendClientMessage(playerid,COLOR_YELLOW," Você não pode plantar Paredao na cadeia!");
		   return 1;
	    }
	    if(GetTickCount() - AguardarA[playerid] < 5000)
    	{
		   SendClientMessage(playerid,COR_EXE,"Aguarde um pouco para poder plantar outro Paredao!");
		   return 1;
	    }
	    if(GetPlayerInterior(playerid) > 0)
    	{
		   SendClientMessage(playerid,COR_EXE,"Voce nao pode usar este comando em interiores!");
		   return 1;
	    }
		if(PlantouParedao[playerid] != 0)
		{
			SendClientMessage(playerid, COR_EXE, "Você ja tem um Paredao criado remova ele usando /rparedao para plantar outro!");
			return 1;
		}
		new Float:X, Float:Y, Float:Z, Float:A;
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, A);
		Paredao[playerid] = CreateObject(972, X, Y, Z-2, 0.0, 0.0, A+90);
		SetPlayerPos(playerid, X, Y, Z+4);
		new string[128];
		format(string, sizeof(string), "*ADMIN CMD:: %s Plantou um Paredao!.", PlayerName(playerid));
		SendClientMessageToAll(0xFE85E0AA, string);
		GameTextForPlayer(playerid, "~w~Paredao ~p~Criado", 5000, 5);
		SendClientMessage(playerid,0xDEBC00AA,"Paredao plantado use /rparedao para remove-lo!");
		AguardarA[playerid] = GetTickCount();
		PlantouParedao[playerid] = 1;
		return true;
	}
	CMD:rparedao(playerid)
	{
		if (!PlayerInfo[playerid][pAdmin])
		{
			SendClientMessage(playerid, 0xFE85E0AA, "Você não é um Admin!");
			return 1;
		}
		if (PlantouParedao[playerid] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "Você não criou nenhum Paredao!");
			return 1;
		}
		RemoveParedao(playerid);
		SendClientMessage(playerid, COLOR_GREEN, "Paredao removido com sucesso.");
		PlantouParedao[playerid] = 0;
		return true;
    }

 	CMD:rbr(playerid)
	{
		if (!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Você não é um Policial!");
		for(new i; i < MAX_BARREIRAS; i++)
		{
		    if(BarreiraInfo[i][brCreated] && BarreiraInfo[i][brID] == playerid)
			{
			    new string[128];
				SendClientMessage(playerid, COLOR_GREY, "Você retirou sua barreira!");
                BarreiraInfo[i][brID]=999;
                BarreiraInfo[i][brCreated]=0;
                DestroyDynamicObject(BarreiraInfo[i][brObject]);
                Delete3DTextLabel(BarreiraInfo[i][brText]);
    			format(string, sizeof(string), "[%s] %s removeu sua barreira.", NomeORG(playerid),PlayerName(playerid));
				foreach(Player, p)
				{
					if(IsACop(p))
					{
						SendClientMessage(p, TEAM_BLUE_COLOR, string);
					}
				}
				return true;
			}
		}
		SendClientMessage(playerid, COLOR_GRAD1, "Você não plantou nenhuma barreira!");
		return true;
	}
	CMD:rcone(playerid)
	{
		if (!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Você não é um Policial!");
		for(new i; i < MAX_CONES; i++)
		{
		    if(ConeInfo[i][ConeCreated5] && ConeInfo[i][ConeID5] == playerid)
			{
			    new string[128];
				SendClientMessage(playerid, COLOR_GREY, "Você retirou seu Cone 5 [4/5]!");
                ConeInfo[i][ConeID5]=999;
                ConeInfo[i][ConeCreated5]=0;
                DestroyDynamicObject(ConeInfo[i][ConeObject5]);
                Delete3DTextLabel(ConeInfo[i][ConeText5]);
    			format(string, sizeof(string), "[%s] %s removeu seu Cone 5. [4/5]", NomeORG(playerid),PlayerName(playerid));
				foreach(Player, p)
				{
					if(IsACop(p))
					{
						SendClientMessage(p, TEAM_BLUE_COLOR, string);
					}
				}
				return true;
			}
			else if(ConeInfo[i][ConeCreated4] && ConeInfo[i][ConeID4] == playerid)
			{
			    new string[128];
				SendClientMessage(playerid, COLOR_GREY, "Você retirou seu Cone 4 [3/5]!");
                ConeInfo[i][ConeID4]=999;
                ConeInfo[i][ConeCreated4]=0;
                DestroyDynamicObject(ConeInfo[i][ConeObject4]);
                Delete3DTextLabel(ConeInfo[i][ConeText4]);
    			format(string, sizeof(string), "[%s] %s removeu seu Cone 4. [3/5]", NomeORG(playerid),PlayerName(playerid));
				foreach(Player, p)
				{
					if(IsACop(p))
					{
						SendClientMessage(p, TEAM_BLUE_COLOR, string);
					}
				}
				return true;
			}
			else if(ConeInfo[i][ConeCreated3] && ConeInfo[i][ConeID3] == playerid)
			{
			    new string[128];
				SendClientMessage(playerid, COLOR_GREY, "Você retirou seu Cone 3 [2/5]!");
                ConeInfo[i][ConeID3]=999;
                ConeInfo[i][ConeCreated3]=0;
                DestroyDynamicObject(ConeInfo[i][ConeObject3]);
                Delete3DTextLabel(ConeInfo[i][ConeText3]);
    			format(string, sizeof(string), "[%s] %s removeu seu Cone 3. [2/5]", NomeORG(playerid),PlayerName(playerid));
				foreach(Player, p)
				{
					if(IsACop(p))
					{
						SendClientMessage(p, TEAM_BLUE_COLOR, string);
					}
				}
				return true;
			}
			else if(ConeInfo[i][ConeCreated2] && ConeInfo[i][ConeID2] == playerid)
			{
			    new string[128];
				SendClientMessage(playerid, COLOR_GREY, "Você retirou seu Cone 2 [1/5]!");
                ConeInfo[i][ConeID2]=999;
                ConeInfo[i][ConeCreated2]=0;
                DestroyDynamicObject(ConeInfo[i][ConeObject2]);
                Delete3DTextLabel(ConeInfo[i][ConeText2]);
    			format(string, sizeof(string), "[%s] %s removeu seu Cone 2. [1/5]", NomeORG(playerid),PlayerName(playerid));
				foreach(Player, p)
				{
					if(IsACop(p))
					{
						SendClientMessage(p, TEAM_BLUE_COLOR, string);
					}
				}
				return true;
			}
			else if(ConeInfo[i][ConeCreated1] && ConeInfo[i][ConeID1] == playerid)
			{
			    new string[128];
				SendClientMessage(playerid, COLOR_GREY, "Você retirou seu Cone 1 [0/5]!");
                ConeInfo[i][ConeID1]=999;
                ConeInfo[i][ConeCreated1]=0;
                DestroyDynamicObject(ConeInfo[i][ConeObject1]);
                Delete3DTextLabel(ConeInfo[i][ConeText1]);
    			format(string, sizeof(string), "[%s] %s removeu seu Cone 1. [0/5]", NomeORG(playerid),PlayerName(playerid));
				foreach(Player, p)
				{
					if(IsACop(p))
					{
						SendClientMessage(p, TEAM_BLUE_COLOR, string);
					}
				}
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não plantou nenhum Cone!");
				return true;
			}
		}
		return true;
	}
	CMD:dcones(playerid)
	{
	    if(PlayerInfo[playerid][pJailed] != 0)return SendClientMessage(playerid,COLOR_YELLOW,"Você não pode usar esse comando na cadeia!");
		if ((!IsACop(playerid) || PlayerInfo[playerid][pCargo] < 5) && !PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Você não é um Policial ou nao tem cargo maior que 5.");
		//new tpt = 0;
  		foreach(Player, i)
		{
		    if(GetPlayerOrg(playerid) == GetPlayerOrg(i))
		    {
		    	if(ConeInfo[i][ConeCreated5] > 0 && ConeInfo[i][ConeID5] == i)
				{
                	RemoveConeblock5(i);
                	//tpt = 1;
				}
				if(ConeInfo[i][ConeCreated4] > 0 && ConeInfo[i][ConeID4] == i)
				{
                	RemoveConeblock4(i);
                	//tpt = 1;
				}
				if(ConeInfo[i][ConeCreated3] > 0 && ConeInfo[i][ConeID3] == i)
				{
                	RemoveConeblock3(i);
                	//tpt = 1;
				}
				if(ConeInfo[i][ConeCreated2] > 0 && ConeInfo[i][ConeID2] == i)
				{
                	RemoveConeblock2(i);
                	//tpt = 1;
				}
				if(ConeInfo[i][ConeCreated1] > 0 && ConeInfo[i][ConeID1] == i)
				{
                	RemoveConeblock1(i);
                	//tpt = 1;
				}
   			}
		}
		//if(tpt == 0)return SendClientMessage(playerid, COLOR_GRAD1, "Nenhuma barreira foi plantada.");
		new string[128];
		format(string, sizeof(string), "[%s] %s removeu todos os Cones de sua organização.", NomeORG(playerid),PlayerName(playerid));
		foreach(Player, p)
		{
			if(IsACop(p))
			{
				SendClientMessage(p, TEAM_BLUE_COLOR, string);
			}
		}
		return true;
	}
 	CMD:dbr(playerid)
	{
	    if(PlayerInfo[playerid][pJailed] != 0)return SendClientMessage(playerid,COLOR_YELLOW,"Você não pode usar esse comando na cadeia!");
		if ((!IsACop(playerid) ||PlayerInfo[playerid][pCargo] < 5) && !PlayerInfo[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_GREY, "Você não é um Policial e ter cargo maior que 5.");
		//new tpt = 0;
		ForPlayers(i)
		{
		    if(GetPlayerOrg(playerid) == GetPlayerOrg(i))
		    {
		    	if(BarreiraInfo[i][brCreated])
				{
                	RemoveRoadblock(i);
                	//tpt = 1;
				}
   			}
		}
		//if(tpt == 0)return SendClientMessage(playerid, COLOR_GRAD1, "Nenhuma barreira foi plantada.");
		new string[128];
		format(string, sizeof(string), "[%s] %s removeu todas as barreiras de sua organização.", NomeORG(playerid),PlayerName(playerid));
		foreach(Player, p)
		{
			if(IsACop(p))
			{
				SendClientMessage(p, TEAM_BLUE_COLOR, string);
			}
		}
		return true;
	}
	CMD:dance(playerid, params[])
	{
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid,0xF78181AA," Proibido anims em veiculos.");
		new dancing;
		if(sscanf(params, "d", dancing))
		{
			SendClientMessage(playerid,COLOR_GRAD1,"USE: /dance [1-15]");
			return true;
		}
		if(dancing < 1 || dancing > 15) return SendClientMessage(playerid, COLOR_GRAD1, "USE: /dance [1-15]");
		switch(dancing)
		{
			case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
			case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
			case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
			case 4: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
   		    case 5:ApplyAnimation(playerid, "DANCING","dance_loop", 4.0, 1, 1, 1, 1, 0, 1);
		    case 6:ApplyAnimation(playerid, "DANCING","DAN_Down_A", 4.0, 1, 1, 1, 1, 0, 1);
		    case 7:ApplyAnimation(playerid, "DANCING","DAN_Left_A", 4.0, 1, 1, 1, 1, 0, 1);
		    case 8:ApplyAnimation(playerid, "DANCING","DAN_Loop_A", 4.0, 1, 1, 1, 1, 0, 1);
		    case 9:ApplyAnimation(playerid, "DANCING","DAN_Right_A", 4.0, 1, 1, 1, 1, 0, 1);
		    case 10:ApplyAnimation(playerid, "DANCING","DAN_Up_A", 4.0, 1, 1, 1, 1, 0, 1);
		    case 11:ApplyAnimation(playerid, "DANCING","dnce_M_a", 4.0, 1, 1, 1, 1, 0, 1);
		    case 12:ApplyAnimation(playerid, "DANCING","dnce_M_b", 4.0, 1, 1, 1, 1, 0, 1);
		    case 13:ApplyAnimation(playerid, "DANCING","dnce_M_c", 4.0, 1, 1, 1, 1, 0, 1);
		    case 14:ApplyAnimation(playerid, "DANCING","dnce_M_d", 4.0, 1, 1, 1, 1, 0, 1);
		    case 15:ApplyAnimation(playerid, "DANCING","dnce_M_ e", 4.0, 1, 1, 1, 1, 0, 1);
		}
		return true;
	}

	CMD:prender(playerid, params[])
	{
			if(IsACop(playerid))
			{
				if(OnDuty[playerid] != 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Você não Bateu o cartão!");
				    return true;
				}
				if(sscanf(params, "u", giveplayerid))
				{
                	SendClientMessage(playerid, COLOR_GRAD2, "USE: /prender [ID do Player]");
					return true;
				}
				if(PlayerInfo[playerid][pJailed] != 0)return SendClientMessage(playerid,COLOR_YELLOW,"Você não pode usar esse comando na cadeia!");
				new suspect = giveplayerid;

				if(IsPlayerConnected(suspect))
				{
					if(GetDistanceBetweenPlayers(playerid,suspect) < 15)
					{
						if(WantedPoints[suspect] < 1)
						{
						    SendClientMessage(playerid, COLOR_GREY, "   O Jogador deve ter no mínimo 1 nível de procurado!");
						    return true;
						}
						if(playerid == suspect)
						{
						    SendClientMessage(playerid, COLOR_GREY, "Você não pode se prender!");
						    return true;
						}
                	    new string[128];
						if(PlayerToPoint(12.0, playerid, 1545.3387,-1607.8325,13.3828) || PlayerToPoint(5.0, playerid, 1527.4589,-1672.1427,6.2188))
		        		{
							GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Você Prendeu %s !", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Preso por %s", PlayerName(playerid));
							GameTextForPlayer(suspect, string, 5000, 5);
							VozDePrisao[suspect] = 0;
							ResetPlayerWeapons(suspect);
							format(string, sizeof(string), "<< Oficial %s prendeu o suspeito %s >>", sendername, giveplayer);
							OOCNews(COLOR_LIGHTRED, string);
							PlayerInfo[suspect][pJailTime] = (WantedPoints[suspect])*(80);
							format(string, sizeof(string), "Você foi preso por %d Segundos.   Fiança: Desativada", PlayerInfo[suspect][pJailTime]);
							SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
							PlayerInfo[suspect][pJailed] = 1;
							SetPlayerFree(suspect,playerid, "Foi Preso");
							format(string, sizeof(string), "SMS: Olá %s, Você foi preso na Delegacia de Policia Militar de Los Santos, enviou: Agência Telefônica (555)", giveplayer);
							SendClientMessage(suspect, COLOR_YELLOW, string);
							SetPlayerSpawn(suspect);
							WantedPoints[suspect] = 0;
							SetPlayerWantedLevelEx(suspect, 0);
							PlayerInfo[suspect][pMuted] = 0;
							Controle(suspect, 1);
							PlayerCuffed[suspect] = 0;
							PlayerInfo[suspect][pAjustado] = false;
							return true;
						}
						if(PlayerToPoint(5.0, playerid, 268.3136,77.5149,1001.0391))
		        		{
							GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Você Prendeu %s !", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							if(storeexit[playerid] == 67)
							{
							    PlayerInfo[suspect][pJailed] = 27;
							   	format(string, sizeof(string), "SMS: Olá %s, Você foi preso na Delegacia de Policia Militar de San Fierro, enviou: Agência Telefônica (555)", giveplayer);
								SendClientMessage(suspect, COLOR_YELLOW, string);
							}
							if(storeexit[playerid] == 66)
							{
							    PlayerInfo[suspect][pJailed] = 1;
							    format(string, sizeof(string), "SMS: Olá %s, Você foi preso na Delegacia de Policia Militar de Los Santos, enviou: Agência Telefônica (555)", giveplayer);
								SendClientMessage(suspect, COLOR_YELLOW, string);
							}
							//GiveDinheiro(suspect, -moneys);
							format(string, sizeof(string), "Preso por %s", PlayerName(playerid));
							GameTextForPlayer(suspect, string, 5000, 5);
							VozDePrisao[suspect] = 0;
							ResetPlayerWeapons(suspect);
							format(string, sizeof(string), "<< Oficial %s prendeu o suspeito %s >>", sendername, giveplayer);
							OOCNews(COLOR_LIGHTRED, string);
							PlayerInfo[suspect][pJailTime] = (WantedPoints[suspect])*(80);
							format(string, sizeof(string), "Você foi preso por %d Segundos.   Fiança: Desativada", PlayerInfo[suspect][pJailTime]);
							SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
							SetPlayerFree(suspect,playerid, "Foi Preso");
							WantedPoints[suspect] = 0;
							SetPlayerSpawn(suspect);
							SetPlayerWantedLevelEx(suspect, 0);
							PlayerInfo[suspect][pMuted] = 0;
							Controle(suspect, 1);
							SetPlayerInterior(playerid, 1);
							PlayerCuffed[suspect] = 0;
							PlayerInfo[suspect][pAjustado] = false;
							return true;
						}
						if(PlayerToPoint(5.0, playerid, 346.9458,-1494.8809,36.0391))
		        		{
							GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Você Prendeu %s !", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Preso por %s", PlayerName(playerid));
							GameTextForPlayer(suspect, string, 5000, 5);
							VozDePrisao[suspect] = 0;
							ResetPlayerWeapons(suspect);
							format(string, sizeof(string), "<< Oficial %s prendeu o suspeito %s >>", sendername, giveplayer);
							OOCNews(COLOR_LIGHTRED, string);
							PlayerInfo[suspect][pJailTime] = (WantedPoints[suspect])*(80);
							format(string, sizeof(string), "Você foi preso por %d Segundos.   Fiança: Desativada", PlayerInfo[suspect][pJailTime]);
							SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
							PlayerInfo[suspect][pJailed] = 2;
							SetPlayerFree(suspect,playerid, "Foi Preso");
							format(string, sizeof(string), "SMS: Olá %s, Você foi preso na Delegacia de Polícia da BOPE de Los Santos, enviou: Agência Telefônica (555)", giveplayer);
							SendClientMessage(suspect, COLOR_YELLOW, string);
							SetPlayerSpawn(suspect);
							WantedPoints[suspect] = 0;
							SetPlayerWantedLevelEx(suspect, 0);
							PlayerInfo[suspect][pMuted] = 0;
							Controle(suspect, 1);
							SetPlayerInterior(playerid, 1);
							PlayerCuffed[suspect] = 0;
							PlayerInfo[suspect][pAjustado] = false;
							return true;
						}

						if(PlayerToPoint(5.0, playerid, 1798.3773,-1587.9568,13.5092) || PlayerToPoint(40.0, playerid, 1770.6652,-1574.2830,1734.9430))
		        		{
							GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Você Prendeu %s !", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Preso por %s", PlayerName(playerid));
							GameTextForPlayer(suspect, string, 5000, 5);
							VozDePrisao[suspect] = 0;
							ResetPlayerWeapons(suspect);
							format(string, sizeof(string), "<< Oficial %s prendeu o suspeito %s >>", sendername, giveplayer);
							OOCNews(COLOR_LIGHTRED, string);
							PlayerInfo[suspect][pJailTime] = (WantedPoints[suspect])*(80);
							format(string, sizeof(string), "Você foi preso por %d Segundos.   Fiança: Desativada", PlayerInfo[suspect][pJailTime]);
							SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
							PlayerInfo[suspect][pJailed] = 24;
							SetPlayerFree(suspect,playerid, "Foi Preso");
							format(string, sizeof(string), "SMS: Olá %s, Você foi preso na Penitenciária, enviou: Agência Telefônica (555)", giveplayer);
							SendClientMessage(suspect, COLOR_YELLOW, string);
							SetPlayerSpawn(suspect);
							WantedPoints[suspect] = 0;
							SetPlayerWantedLevelEx(suspect, 0);
							PlayerInfo[suspect][pMuted] = 0;
							Controle(suspect, 1);
							SetPlayerInterior(playerid, 1);
							PlayerCuffed[suspect] = 0;
							PlayerInfo[suspect][pAjustado] = false;
							return true;
						}
						if(PlayerToPoint(5.0, playerid, 1279.4833,-1321.5306,13.3645))
		        		{
							GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Você Prendeu %s !", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Preso por %s", PlayerName(playerid));
							GameTextForPlayer(suspect, string, 5000, 5);
							VozDePrisao[suspect] = 0;
							ResetPlayerWeapons(suspect);
							format(string, sizeof(string), "<< Oficial %s prendeu o suspeito %s >>", sendername, giveplayer);
							OOCNews(COLOR_LIGHTRED, string);
							PlayerInfo[suspect][pJailTime] = (WantedPoints[suspect])*(80);
							format(string, sizeof(string), "Você foi preso por %d Segundos.   Fiança: Desativada", PlayerInfo[suspect][pJailTime]);
							SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
							PlayerInfo[suspect][pJailed] = 25;
							SetPlayerFree(suspect,playerid, "Foi Preso");
							format(string, sizeof(string), "SMS: Olá %s, Você foi preso na Penitenciária, enviou: Agência Telefônica (555)", giveplayer);
							SendClientMessage(suspect, COLOR_YELLOW, string);
							SetPlayerSpawn(suspect);
							WantedPoints[suspect] = 0;
							SetPlayerWantedLevelEx(suspect, 0);
							PlayerInfo[suspect][pMuted] = 0;
							Controle(suspect, 1);
							SetPlayerInterior(playerid, 1);
							PlayerCuffed[suspect] = 0;
							PlayerInfo[suspect][pAjustado] = false;
							return true;
						}
						if(PlayerToPoint(5.0, playerid, 1781.3588,-1757.7235,13.5460))
		        		{
							GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Você Prendeu %s !", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Preso por %s", PlayerName(playerid));
							GameTextForPlayer(suspect, string, 5000, 5);
							VozDePrisao[suspect] = 0;
							ResetPlayerWeapons(suspect);
							format(string, sizeof(string), "<< Oficial %s prendeu o suspeito %s >>", sendername, giveplayer);
							OOCNews(COLOR_LIGHTRED, string);
							PlayerInfo[suspect][pJailTime] = (WantedPoints[suspect])*(80);
							format(string, sizeof(string), "Você foi preso por %d Segundos.   Fiança: Desativada", PlayerInfo[suspect][pJailTime]);
							SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
							PlayerInfo[suspect][pJailed] = 16;
							SetPlayerFree(suspect,playerid, "Foi Preso");
							format(string, sizeof(string), "SMS: Olá %s, Você foi preso na Delegacia de Polícia da ROTA, enviou: Agência Telefônica (555)", giveplayer);
							SendClientMessage(suspect, COLOR_YELLOW, string);
							SetPlayerSpawn(suspect);
							WantedPoints[suspect] = 0;
							SetPlayerWantedLevelEx(suspect, 0);
							PlayerInfo[suspect][pMuted] = 0;
							Controle(suspect, 1);
							SetPlayerInterior(playerid, 1);
							PlayerCuffed[suspect] = 0;
							PlayerInfo[suspect][pAjustado] = false;
							return true;
						}

						if(PlayerToPoint(5.0, playerid, 198.9020,179.3194,1003.0319))
		        		{
							GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Você Prendeu %s !", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Preso por %s", PlayerName(playerid));
							GameTextForPlayer(suspect, string, 5000, 5);
							VozDePrisao[suspect] = 0;
							if(storeexit[playerid] == 2)
							{
							    PlayerInfo[suspect][pJailed] = 2;
							    format(string, sizeof(string), "SMS: Olá %s, Você foi preso na Delegacia de Polícia da BOPE de Los Santos, enviou: Agência Telefônica (555)", giveplayer);
								SendClientMessage(suspect, COLOR_YELLOW, string);
							}
							if(storeexit[playerid] == 11)
							{
							    PlayerInfo[suspect][pJailed] = 11;
							    format(string, sizeof(string), "SMS: Olá %s, Você foi preso na Delegacia da Polícia Federal, enviou: Agência Telefônica (555)", giveplayer);
								SendClientMessage(suspect, COLOR_YELLOW, string);
							}
      						if(storeexit[playerid] == 16)
							{
							    PlayerInfo[suspect][pJailed] = 16;
							    format(string, sizeof(string), "SMS: Olá %s, Você foi preso na Delegacia de Polícia da ROTA, enviou: Agência Telefônica (555)", giveplayer);
								SendClientMessage(suspect, COLOR_YELLOW, string);
							}
							ResetPlayerWeapons(suspect);
							format(string, sizeof(string), "<< Oficial %s prendeu o suspeito %s >>", sendername, giveplayer);
							OOCNews(COLOR_LIGHTRED, string);
							PlayerInfo[suspect][pJailTime] = (WantedPoints[suspect])*(80);
							format(string, sizeof(string), "Você foi preso por %d Segundos.   Fiança: Desativada", PlayerInfo[suspect][pJailTime]);
							SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
							SetPlayerFree(suspect,playerid, "Foi Preso");
							SetPlayerSpawn(suspect);
							WantedPoints[suspect] = 0;
							SetPlayerWantedLevelEx(suspect, 0);
							PlayerInfo[suspect][pMuted] = 0;
							Controle(suspect, 1);
							SetPlayerInterior(playerid, 1);
							PlayerCuffed[suspect] = 0;
							PlayerInfo[suspect][pAjustado] = false;
							return true;
						}
						if(PlayerToPoint(5.0, playerid, 926.0767,-996.4899,38.2101))
		        		{
							GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Você Prendeu %s !", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Preso por %s", PlayerName(playerid));
							GameTextForPlayer(suspect, string, 5000, 5);
							VozDePrisao[suspect] = 0;
							ResetPlayerWeapons(suspect);
							format(string, sizeof(string), "<< Oficial %s prendeu o suspeito %s >>", sendername, giveplayer);
							OOCNews(COLOR_LIGHTRED, string);
							PlayerInfo[suspect][pJailTime] = (WantedPoints[suspect])*(80);
							format(string, sizeof(string), "Você foi preso por %d Segundos.   Fiança: Desativada", PlayerInfo[suspect][pJailTime]);
							SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
							PlayerInfo[suspect][pJailed] = 11;
							format(string, sizeof(string), "SMS: Olá %s, Você foi preso na Delegacia da Polícia Federal, enviou: Agência Telefônica (555)", giveplayer);
							SendClientMessage(suspect, COLOR_YELLOW, string);
							SetPlayerFree(suspect,playerid, "Foi Preso");
							SetPlayerSpawn(suspect);
							WantedPoints[suspect] = 0;
							SetPlayerWantedLevelEx(suspect, 0);
							PlayerInfo[suspect][pMuted] = 0;
							Controle(suspect, 1);
							SetPlayerInterior(playerid, 1);
							PlayerCuffed[suspect] = 0;
							PlayerInfo[suspect][pAjustado] = false;
							return true;
						}
						if(PlayerToPoint(5.0, playerid, 223.4805,113.9830,999.0156) || IsPlayerInRangeOfPoint(playerid, 5.0, 919.7474,-1201.7177,16.9832))
		        		{
							GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Você Prendeu %s !", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "Preso por %s", PlayerName(playerid));
							GameTextForPlayer(suspect, string, 5000, 5);
							VozDePrisao[suspect] = 0;
							ResetPlayerWeapons(suspect);
							format(string, sizeof(string), "<< Oficial %s prendeu o suspeito %s >>", sendername, giveplayer);
							OOCNews(COLOR_LIGHTRED, string);
							PlayerInfo[suspect][pJailTime] = (WantedPoints[suspect])*(80);
							format(string, sizeof(string), "Você foi preso por %d Segundos.   Fiança: Desativada", PlayerInfo[suspect][pJailTime]);
							SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
							PlayerInfo[suspect][pJailed] = 33;
							SetPlayerFree(suspect,playerid, "Foi Preso");
							format(string, sizeof(string), "SMS: Olá %s, Você foi preso na Delegacia da Polícia Civil, enviou: Agência Telefônica (555)", giveplayer);
							SendClientMessage(suspect, COLOR_YELLOW, string);
							SetPlayerSpawn(suspect);
							WantedPoints[suspect] = 0;
							SetPlayerWantedLevelEx(suspect, 0);
							PlayerInfo[suspect][pMuted] = 0;
							Controle(suspect, 1);
							SetPlayerInterior(playerid, 1);
							PlayerCuffed[suspect] = 0;
							PlayerInfo[suspect][pAjustado] = false;
							return true;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Esse não é um jogador ativo.");
				    return true;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não é um Oficial !");
			    return true;
			}
	    	return true;
	}

	CMD:contrato(playerid, params[])
    {
            if(PlayerInfo[playerid][pJailed] != 0)return SendClientMessage(playerid,COLOR_YELLOW,"Você não pode usar esse comando na cadeia!");
            new id, quantia, org[20];
            if(sscanf(params, "uds[20]", id, quantia, org))
            {
                SendClientMessage(playerid, COLOR_GRAD1, "USE: /contrato [ID/Nome] [Quantia] [Organização]");
                SendClientMessage(playerid, -1, "Organizações: | Hitman | Triad |");
				return 1;
            }
            if(quantia < 18000)
			{
				SendClientMessage(playerid, COLOR_GREY, "   Contrato Minimo R$18000.");
				return true;
			}
			if(PlayerInfo[playerid][pConnectTime] < 2)
			{
				SendClientMessage(playerid,0xFFFFFFAA,"Info: Você poderá colocar contratos após {FFA54F}2{FFFFFF} horas jogadas.");
				return true;
			}
			if(GetPlayerMoney(playerid) < quantia)
            {
                SendClientMessage(playerid, COLOR_GRAD1, "Você não tem esta grana toda.");
                return 1;
            }
            giveplayerid = id;
   	    	new string[128];
            if (IsPlayerConnected(giveplayerid))
            {

                if(GetPlayerOrg(giveplayerid) == GetPlayerOrg(playerid) && GetPlayerOrg(giveplayerid) != 0)return SendClientMessage(playerid, COLOR_GREY, "   Não pode colocar contrato em membros de sua organização!");

				else if(GetPlayerOrg(giveplayerid) == 8 || GetPlayerOrg(giveplayerid) == 22)
					return SendClientMessage(playerid, COLOR_GREY, "   Não pode colocar contrato em assasinos!");

				else if(GetPlayerOrg(playerid) == 8 || GetPlayerOrg(playerid) == 22)
					return SendClientMessage(playerid, COLOR_GREY, "   Assassinos não podem colocar contratos!");

				else if(admtrampando[giveplayerid] == 1 || helpertrampando[giveplayerid] == 1)
                    return SendClientMessage(playerid, COLOR_GREY, "Você não pode colocar contratos em Admins / Helpers em modo de trabalho!");

				if(IsACop(giveplayerid) && quantia < 100000)return SendClientMessage(playerid, COLOR_GREY, "   Preco Minimo de $100000 em oficiais!");

				if(giveplayerid == playerid)return SendClientMessage(playerid, COLOR_GREY, "Nao pode colocar contrato em si mesmo!");

                GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                GetPlayerName(playerid, sendername, sizeof(sendername));
                playermoney = GetPlayerMoney(playerid);
                if (quantia > 0 && playermoney >= quantia)
                {
                    if(strcmp(org,"Hitman",true) == 0)
                    {
                        GiveDinheiro(playerid, -quantia);
                        PlayerInfo[giveplayerid][pHeadValue]+=quantia;
                        format(string, sizeof(string), "HITMANS: Há um novo Contrato em %s, por $%d.",giveplayer, quantia);
                        SendFamilyMessage(8, COLOR_YELLOW, string);
                        format(string, sizeof(string), "*HITMANS: Você colocou um contrato em %s, por $%d.",giveplayer, quantia);
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        return true;
                    }
                    else if(strcmp(org,"triad",true) == 0)
                    {
                        GiveDinheiro(playerid, -quantia);
                        PlayerInfo[giveplayerid][pHeadValueT]+=quantia;
                        format(string, sizeof(string), "TRIADS: Há um novo Contrato em %s, por $%d.", giveplayer, quantia);
                        SendFamilyMessage(22, COLOR_YELLOW, string);
                        format(string, sizeof(string), "*TRIADS: Você colocou um contrato em %s, por $%d.",giveplayer, quantia);
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        return true;
                 	}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "USE: /contrato [ID do Player] [Quantia] [Organização]");
						return SendClientMessage(playerid, -1, "Organizações: | Hitman | Triad |");
					}
				}
				format(string, sizeof(string), "Você não tem R$%d em mãos!", quantia);
				SendClientMessage(playerid, COLOR_WHITE, string);
				return true;
			}
			else
			{
				format(string, sizeof(string), "   %d não é um jogador ativo.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		    return true;
	}

 	CMD:iremp(playerid, params[])
	{
	        if(PlayerInfo[playerid][pAdmin] < 1337)
			{
	            SendClientMessage(playerid, COLOR_GREY, "Você não tem autorização para usar esse comando!");
	            return true;
	        }
         	if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 3000)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo Admin USE: /trabalhar");
				return true;
			}
			new Emp;
			if(sscanf(params, "d", Emp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: (/iremp)resa [id]");
				return true;
			}
			SetPlayerPos(playerid,BizzInfo[Emp][bEntranceX],BizzInfo[Emp][bEntranceY],BizzInfo[Emp][bEntranceZ]);
			return true;
	}
	CMD:irsemp(playerid, params[])
	{
	        if(PlayerInfo[playerid][pAdmin] < 1337)
			{
	            SendClientMessage(playerid, COLOR_GREY, "Você não tem autorização para usar esse comando!");
	            return true;
	        }
         	if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 3000)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo Admin USE: /trabalhar");
				return true;
			}
			new Emp;
			if(sscanf(params, "d", Emp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: (/irsemp)resa [id]");
				return true;
			}
			SetPlayerPos(playerid,SBizzInfo[Emp][sbEntranceX],SBizzInfo[Emp][sbEntranceY],SBizzInfo[Emp][sbEntranceZ]);
			return true;
	}
	CMD:irfazenda(playerid, params[])
	return ForT:irfaz(playerid,params);
	CMD:irfaz(playerid, params[])
	{
	        if(PlayerInfo[playerid][pAdmin] < 1337)
			{
	            SendClientMessage(playerid, COLOR_GREY, "Você não tem autorização para usar esse comando!");
	            return true;
	        }
         	if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 3000)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo Admin USE: /trabalhar");
				return true;
			}
			new Emp;
			if(sscanf(params, "d", Emp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: (/irfaz)enda [id]");
				return true;
			}
			SetPlayerPos(playerid,FBizzInfo[Emp][fbEntranceX],FBizzInfo[Emp][fbEntranceY],FBizzInfo[Emp][fbEntranceZ]);
			return true;
	}
	BPF::OnPlayerCommandReceived(playerid, cmdtext[]){

	if(PlayerInfo[playerid][pJailed] == 9 && !PlayerInfo[playerid][pAdmin]){

	    SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}[AVISO]: {FFFFFF}Você está proibido de usar comandos pois está preso por admin!");
        SendClientMessage(playerid, 0xFFFF00FF, "___________________________________________________________________________________");

		return 0;
	}
	return 1;
}
public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(success)
	{
	    cmdlog(playerid,cmdtext);
	}
	else
	{
	  new strcmd[MAX_STRING];
  	format(strcmd, sizeof(strcmd), "[!] {FFFFFF}O comando ({00CCFF}%s{FFFFFF}) que você digitou não existe no servidor, use: {FFAA00}/ajuda", cmdtext);
   	SendClientMessage(playerid,0xFF0000AA ,strcmd);

	}
	return 1;
}

stock SendClientMessageInRange(Float:_r, playerid, _s[],c1,c2,c3,c4,c5)
{
	new Float:_x, Float:_y, Float:_z;
	GetPlayerPos(playerid, _x, _y, _z);
	foreach(Player, i)
	{
		if(!BigEar[i])
		{
		    if(GetPlayerVirtualWorld(i) != GetPlayerVirtualWorld(playerid))continue;
			if(GetPlayerDistanceFromPoint(i,_x,_y,_z) < _r/16)
				SendClientMessage(i, c1, _s);
			else if(GetPlayerDistanceFromPoint(i,_x,_y,_z) < _r/8)
				SendClientMessage(i, c2, _s);
			else if(GetPlayerDistanceFromPoint(i,_x,_y,_z) < _r/4)
				SendClientMessage(i, c3, _s);
			else if(GetPlayerDistanceFromPoint(i,_x,_y,_z) < _r/2)
				SendClientMessage(i, c4, _s);
			else if(GetPlayerDistanceFromPoint(i,_x,_y,_z) < _r)
				SendClientMessage(i, c5, _s);
		}
		else
		{
			SendClientMessage(i, c1, _s);
		}
	}
	return true;
}

BPF::CrimInRange(Float:radi, playerid,copid)
{
	if(IsPlayerConnected(copid))
	{
		new Float:posx, Float:posy, Float:posz;
		GetPlayerPos(copid, posx, posy, posz);
		if (IsPlayerInRangeOfPoint(playerid, radi, posx, posy, posz))
		{
			return true;
		}
	}
	return 0;
}
static stock ProxDetectorS(Float:radi, playerid, targetid)
{
    if(IsPlayerConnected(targetid))
	{
		new Float:posx, Float:posy, Float:posz;
		GetPlayerPos(targetid, posx, posy, posz);
		if (IsPlayerInRangeOfPoint(playerid, radi, posx, posy, posz))
		{
			return true;
		}
	}
	return 0;
}
static stock ProxDetectorV(Float:radi, playerid, carroid)
{
    if(IsPlayerConnected(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		GetVehiclePos(carroid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}
forward RandomServerNames();

new NomeServer[][] = {
"Brasil Paradise City ® | Criando sua diversão!",
"Brasil Paradise City ® | ",
"Brasil Paradise City ® | #update(05/05/2020)",
"Brasil Paradise City ® | "
};
new Cores[] =
{
    0xA0A0A0FF,
	0x9900ffFF,
	0xBCD2EEFF,
	0xf4005bFF,
	0xffff00FF,
    0x00C2ECFF
};
new Mensagenscima[][] =
{
    "INFO: Está com alguma dúvida ou precisa de ajuda? use: /relatorio ou /duvida.",
    "INFO: Em caso de precisar ir em algum local use: /gps para encontrar!",
    "INFO: Está começando a ficar cansado? Que tal realizar umas /conquistas",
    "INFO: Está sem nada para fazer ? Tédio ? use: /misterios ache o seu e garanta seu cash !",
	"INFO: Conheca a origem de nosso servidor usando o comando: /creditos",
	"INFO: Fique por dentro de tudo que acontece em nosso servidor pelo Discord! use: /dc",
	"INFO: Sempre deem sugestões em nosso fórum para que o servidor possa crescer cada vez mais!",
	"INFO: Tornando-se um VIP você ajuda o servidor a crescer e é beneficiado ainda!",
	"INFO: Pagando VIP você irá ajudar o servidor a crescer e ganhará varios benefícios!",
	"INFO: Achou algum erro ou bug no servidor? por favor use: /bug",
	"INFO: Procure já nossas reliquias e ganhe já Cash's, digite /misterios.",
	"INFO: Ajude a manter nosso servidor online comprando cash, use /lojavip !",
	"INFO: Confira o nosso Discord use /dc e participe do nosso bate-papo!",
	"INFO: Confira os hórarios do respawn nos carros automatico, use: /inforespawn",
	"INFO: Use o comando /relatorio para entrar na fila de atendimento.",
	"INFO: Ajude a manter nosso servidor online comprando Cash, use /lojavip !",
	"INFO: Adicione nosso ip em seus favoritos, IP: bpchost.ddns.net:7777",
	"INFO: Deseja deixar o sistema de fome/sede on ou off ? digite /configuracoes",
	"INFO: Deseja ocultar alguma mensagem global ? digite /configuracoes",
	"INFO: Conheça nossa concessionária e adquirá já seu veiculo próprio!",
	"INFO: Não cometa dm ou db, você poderá ser punido de acordo com as Regras!",
	"INFO: Sempre se atualize em nosso Discord: https://discord.gg/aW67hZu"
};
BPF::SendMensagens()
{
	new random1 = random(sizeof(Mensagenscima));
	new random2 = random(sizeof(Cores));
	//new random2 = random(sizeof(RandomCores));/RandomCores[random2]
	SendClientMessageToAll(Cores[random2],Mensagenscima[random1]);
	foreach(Player, i)
	{
	    if(!gPlayerLogged[i])continue;
 		OnPlayerSave(i);
 		SaveObjects(i);
	    if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
   	    {
			new vehicle = GetPlayerVehicleID(i);
		    new VehicleModel = GetVehicleModel(vehicle);
	   		if(VehicleModel == 487 || VehicleModel == 520 || VehicleModel == 462 || VehicleModel == 497 || VehicleModel == 425 || VehicleModel == 592 || VehicleModel == 519 || VehicleModel == 593 || VehicleModel == 452)
	   		{
	   		    continue;
	   		}
	   		if(Gas[vehicle] < 5)
	       		Gas[vehicle]++;
		}
	}
	return true;
}
BPF::Armasbloqueadas()
{
	foreach(Player, i)
 	{
	    if(!gPlayerLogged[i])continue;
        		if(PlayerInfo[i][pConnectTime] < 2 && gPlayerLogged[i] == 1 && GetPlayerWeapon(i) > 1 && GetPlayerOrg(i) == 0)
				{
		  			ResetPlayerWeapons(i);
					SendClientMessage(i,COLOR_LIGHTRED,"* Você só poderá usar armas após 2 horas jogadas no servidor.");
				}
				AtualizarTextDraws(i);
				if (PlayerInfo[i][pArmasb] > 0 && gPlayerLogged[i] == 1 && GetPlayerWeapon(i) > 1)
			    {
			    new string[128];
			    ResetPlayerWeapons(i);
				format(string, sizeof(string), "Você está proibido de usar armas por %s minutos.", ConvertTime(PlayerInfo[i][pArmasb]));
			    SendClientMessage(i, COLOR_LIGHTRED, string);
			    }
			    new lolbagui;
			    lolbagui = PlayerInfo[i][pExp];
			    new nxtlevel = PlayerInfo[i][pLevel]+1;
			    new gstring[128];
			    new costlevel = nxtlevel*levelcost;//10k for testing purposes
			    new expquantidade = nxtlevel*levelexp;
			    if(lolbagui >= nxtlevel*levelexp)
			    {
						PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
						PlayerPlayMusic(i);
						GiveDinheiro(i, (costlevel));
						PlayerInfo[i][pLevel]++;
						ScoreLevel(i);
						PlayerInfo[i][pExp] -= expquantidade;
						PlayerInfo[i][gPupgrade] = PlayerInfo[i][gPupgrade]+2;
						SendClientMessage(i, 0xFFFFFFFF, "| ****************** {00AA00}NÍVEL ADQUIRIDO {FFFFFF}******************");
						format(gstring, 128, "| Você agora é nível: {00AA00} %d", nxtlevel);
						SendClientMessage(i, 0xFFFFFFFF, gstring);
						SendClientMessage(i, 0xFFFFFFFF, "| Pontos de melhoria ganho: {00AAFF}+2");
						format(gstring, 128, "| Seus pontos de melhoria: {00AAFF}%d",PlayerInfo[i][gPupgrade]);
						SendClientMessage(i, 0xFFFFFFFF, gstring);
						format(gstring, 128, "| Dinheiro que você ganhou: {00AA00}%s", ConvertMoney(costlevel));
						SendClientMessage(i, 0xFFFFFFFF, gstring);
						SendClientMessage(i, 0xFFFFFFFF, "| ****************** {00AA00}NÍVEL ADQUIRIDO {FFFFFF}******************");
			    }
	}
	return true;
}
BPF::CustomPickups()
{
	foreach(Player, i)
 	{
	    if(!gPlayerLogged[i])continue;

		CheckSoundProx(i);
		CheckCarSoundProx(i);
		if(Tocando[i] != 1)
  		{
			new counter = 0;
			new result;
			new plyName[MAX_PLAYER_NAME];
			GetPlayerName(i, plyName, MAX_PLAYER_NAME);
			for(new c; c != MAX_VEHICLES; c++)
			{
				new dist = ChecarveiculoBPF(5, i, c);
				if(dist)
				{
					result = c;
					counter++;
				}
			}
			switch(counter)
			{
				case 0:
				{
					//SendClientMessage(playerid, COLOR_GREY, "   Não há nenhum carro nesse raio!");
				}
				case 1:
				{
					ProxCarSound(result);
					Tocando[i] = 1;
				}
	        }
	 	}
		if (PlayerToPoint(3, i,1964.0280,-369.0365,1093.7289))
		{
		    GameTextForPlayer(i, "~y~Casamento ~n~~r~Digite ~w~/casar", 5000, 3);
		}
		else if (PlayerToPoint(3, i,1959.3009,-373.1479,1093.7289))
		{
		    GameTextForPlayer(i, "~b~Divorcio ~n~~r~Digite ~w~/divorcio", 5000, 3);
		}
		//-- /prender COPs
		else if (PlayerToPoint(3, i,1545.3387,-1607.8325,13.3828)
		|| PlayerToPoint(3, i,1527.4589,-1672.1427,6.2188)
		|| PlayerToPoint(3, i,346.9458,-1494.8809,36.0391)
		|| PlayerToPoint(3, i,926.0767,-996.4899,38.2101)
		|| PlayerToPoint(3, i,1781.3588,-1757.7235,13.5460)
		|| PlayerToPoint(3, i,1798.3773,-1587.9568,13.5092)
		|| PlayerToPoint(3, i,919.7474,-1201.7177,16.9832))
		{
		    SendPlayerTextMessage(i, "	~b~~h~Delegacia Policial~n~~w~	use /prender para prender um suspeito", 5000);
		}
			else if (PlayerToPoint(1.0, i, 2396.6250,2771.0850,17.3643))
			{//porta arrombar dc
				GameTextForPlayer(i, "~w~Digite /abrirportao3 para arrombar o portao.", 5000, 5);
			}
			else if (PlayerToPoint(1.0, i, 2417.5193,2794.5239,17.3643))
			{//porta arrombar dc
				GameTextForPlayer(i, "~w~Digite /explodir para explodir a saida do Deposito.", 5000, 5);
            }
				else if (PlayerToPoint(1.0, i,248.4554,302.8275,999.1484))
			{//porta arrombar dc
				GameTextForPlayer(i, "~w~Digite /pegargrana para tracas as fichas por dinheiro", 5000, 5);
			}
		else if (PlayerToPoint(3, i,SBizzInfo[25][sbEntranceX], SBizzInfo[25][sbEntranceY], SBizzInfo[25][sbEntranceZ]))
		{
			GameTextForPlayer(i, "~b~Voce esta na empresa de eventos~n~digite ~w~/entrarevento ~b~para participar", 5000, 3);
		}
		else if (IsPlayerInPedagio(i))
		{
		    if(IsPlayerInAnyVehicle(i) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
		    {
		        new Float:Velocity[3];
				GetVehicleVelocity(GetPlayerVehicleID(i), Velocity[0], Velocity[1], Velocity[2]);
				if(Velocity[0] == 0 && Velocity[1] == 0 && Velocity[2] == 0)
				{
				    new string[128];
					format(string, sizeof string, "~>~ ~b~~h~~h~Pedagio ~w~%d pago:~n~ ~g~R$50", pedagio[i]);
			    	showBalao(i, string, 5000);
			    	GiveDinheiro(i, -50);
			    	PRE += 25;
				    PDU += 25;
				    SacarOrgGrana(7,25);
				    if(pedagio[i] == 1) // ida ls/sf
				    {
				    	MoveDynamicObject(barp01, 46.81650, -1525.97400, 4.85410,1,0.00000, 0.00000, 82.00000);
				    	SetTimer(#mbarp01, 3000, 0);
					}
					else if(pedagio[i] == 2) //idem
				    {
				    	MoveDynamicObject(barp02, 53.33270, -1537.40442, 4.87410,1,0.00000, 0.00000, 262.00000);
				    	SetTimer(#mbarp02, 3000, 0);
					}
					else if(pedagio[i] == 5) //tunel ls/sf
				    {
				    	MoveDynamicObject(barp05,768.73651, -912.60010, 43.12160,1,0.00000, 0.00000, 60.00000);
				    	SetTimer(#mbarp05, 3000, 0);
					}
					else if(pedagio[i] == 6) //idem
				    {
				    	MoveDynamicObject(barp06,769.08740, -896.87817, 42.82160,1,0.00000, 0.00000, 240.50000);
				    	SetTimer(#mbarp06, 3000, 0);
					}
					else if(pedagio[i] == 3) //encima tunel ls/sf
				    {
				    	MoveDynamicObject(barp03,78.41940, -1257.75256, 14.06590,1,0.00000, 0.00000, 305.00000);
				    	SetTimer(#mbarp03, 3000, 0);
					}
					else if(pedagio[i] == 4) //idem
				    {
				    	MoveDynamicObject(barp04,99.78246, -1274.84094, 14.06590,1,0.00000, 0.00000, 305.00000);
				    	SetTimer(#mbarp04, 3000, 0);
					}
					else if(pedagio[i] == 7) //hq hit
				    {
				    	MoveDynamicObject(barp07,1188.22852, -682.40656, 61.64760,1,0.00000, 0.00000, 155.00000);
				    	SetTimer(#mbarp07, 3000, 0);
					}
					else if(pedagio[i] == 8) //hidem
				    {
				    	MoveDynamicObject(barp08,1172.00244, -684.12329, 61.82760,1,0.00000, 0.00000, 335.00000);
				    	SetTimer(#mbarp08, 3000, 0);
					}
					else if(pedagio[i] == 9) //pedagio ls/lv
				    {
				    	MoveDynamicObject(barp10,1646.75671, -20.79756, 36.32630,1,0.00000, 0.00000, 25.00000);
				    	SetTimer(#mbarp10, 3000, 0);
					}
					else if(pedagio[i] == 10) //idem
				    {
				    	MoveDynamicObject(barp09,1639.75220, -31.47680, 36.32630,1,0.00000, 0.00000, 205.00000);
				    	SetTimer(#mbarp09, 3000, 0);
					}
				}
			}
		}


		else if(PlayerToPoint(2.0, i,2281.1196,-2364.9805,13.5469) && GetPlayerOrg(i) == 8
		|| PlayerToPoint(2.0,i,2770.5706,-1628.1260,12.1775) && GetPlayerOrg(i) == 22)
		{
		    if(OrderReady[i] > 0)
		    {
		      	switch (OrderReady[i])
		     	{
		         	case 1:
   	    			{
   	    			    ResetPlayerWeapons(i);
   	    			    TempDropArmasBody[i] = 0;
			            GivePlayerWeapon(i, 24, 120);
						GivePlayerWeapon(i, 25, 80);
						GivePlayerWeapon(i, 29, 300);
						GivePlayerWeapon(i, 31, 50);
						GivePlayerWeapon(i, 4, 1);
			            SetPlayerHealth(i, 100.0);
			            SendClientMessage(i, COLOR_LIGHTBLUE, "* Você pegou o seu pacote.");
			        }
			        case 2:
			        {
			            ResetPlayerWeapons(i);
			            TempDropArmasBody[i] = 0;
			            GivePlayerWeapon(i, 24, 160);
						GivePlayerWeapon(i, 25, 100);
						GivePlayerWeapon(i, 29, 100);
						GivePlayerWeapon(i, 31, 100);
						GivePlayerWeapon(i, 4, 1);
			            SetPlayerHealth(i, 100.0);
			            SendClientMessage(i, COLOR_LIGHTBLUE, "* Você pegou o seu pacote.");
			        }
			        case 3:
			        {
			            ResetPlayerWeapons(i);
			            TempDropArmasBody[i] = 0;
			            GivePlayerWeapon(i, 24, 200);
						GivePlayerWeapon(i, 29, 150);
						GivePlayerWeapon(i, 25, 200);
						GivePlayerWeapon(i, 31, 200);
						GivePlayerWeapon(i, 4, 1);
			            SetPlayerHealth(i, 100.0);
			            SendClientMessage(i, COLOR_LIGHTBLUE, "* Você pegou o seu pacote.");
      				}
			        case 4:
			        {
			            ResetPlayerWeapons(i);
			            TempDropArmasBody[i] = 0;
			            GivePlayerWeapon(i, 24, 250);
						GivePlayerWeapon(i, 25, 200);
						GivePlayerWeapon(i, 34, 20);
						GivePlayerWeapon(i, 31, 300);
						GivePlayerWeapon(i, 4, 1);
						SetPlayerArmour(i, 100);
			            SetPlayerHealth(i, 100.0);
			            SendClientMessage(i, COLOR_LIGHTBLUE, "* Você pegou o seu pacote.");
			        }
			        case 5:
			        {
			            ResetPlayerWeapons(i);
			            TempDropArmasBody[i] = 0;
			            GivePlayerWeapon(i, 24, 300);
						GivePlayerWeapon(i, 29, 400);
						GivePlayerWeapon(i, 25, 200);
						GivePlayerWeapon(i, 31, 400);
						GivePlayerWeapon(i, 4, 1);
						GivePlayerWeapon(i, 34, 40);
						SetPlayerArmour(i, 100);
			            SetPlayerHealth(i, 100.0);
			            SendClientMessage(i, COLOR_LIGHTBLUE, "* Você pegou o seu pacote.");
			        }
			        case 6:
			        {
			            ResetPlayerWeapons(i);
			            TempDropArmasBody[i] = 0;
			            GivePlayerWeapon(i, 24, 300);
						GivePlayerWeapon(i, 29, 700);
						GivePlayerWeapon(i, 34, 50);
						GivePlayerWeapon(i, 25, 300);
						GivePlayerWeapon(i, 31, 500);
						GivePlayerWeapon(i, 4, 1);
						SetPlayerArmour(i, 100);
						SetPlayerHealth(i, 100);
						SendClientMessage(i, COLOR_LIGHTBLUE, "* Você pegou o seu pacote.");
			        }
			        case 7:
			        {
			            ResetPlayerWeapons(i);
			            TempDropArmasBody[i] = 0;
			            GivePlayerWeapon(i, 24, 300);
						GivePlayerWeapon(i, 29, 500);
						GivePlayerWeapon(i, 34, 60);
						GivePlayerWeapon(i, 25, 400);
						GivePlayerWeapon(i, 31, 600);
						GivePlayerWeapon(i, 4, 1);
						SetPlayerArmour(i, 100);
			            SetPlayerHealth(i, 100);
			            SendClientMessage(i, COLOR_LIGHTBLUE, "* Você pegou o seu pacote.");
			        }
			        case 8:
			        {
			            ResetPlayerWeapons(i);
			            TempDropArmasBody[i] = 0;
			            GivePlayerWeapon(i, 24, 999);
						GivePlayerWeapon(i, 29, 999);
						GivePlayerWeapon(i, 34, 70);
						GivePlayerWeapon(i, 25, 999);
						GivePlayerWeapon(i, 31, 999);
						GivePlayerWeapon(i, 4, 1);
						SetPlayerArmour(i, 100);
			            SetPlayerHealth(i, 100);
			            SendClientMessage(i, COLOR_LIGHTBLUE, "* Você pegou o seu pacote.");
			        }
			    }
			    OrderReady[i] = 0;
			}
		}
	}
	return true;
}
public OnPlayerText(playerid, text[])
{
    new tmp_text[256];
    new string[MAX_STRING];
   	new TCount;
   	TCount = GetPVarInt(playerid, "TextSpamCount");
    SetTimerEx("ResetCount", 750, false, "n", playerid);
    if(TCount > 7)
    {
    	SetPVarInt(playerid, "TextSpamCount", 0);
     	format(string, sizeof(string), "*** %s saiu do servidor por flood excessivo.", NomePlayer(playerid));
      	SendClientMessageInRange(20.0, playerid, string, COLOR_YELLOW2,COLOR_YELLOW2,COLOR_YELLOW2,COLOR_YELLOW2,COLOR_YELLOW2);
		Kick(playerid);
    }
    else
	{
	    TCount++;
		SetPVarInt(playerid, "TextSpamCount", TCount);
 	}
	if(NaCamera[playerid] == 5 || NaCamera[playerid] == 6)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "Você não pode falar agora!");
		return 0;
	}
	if(PlayerInfo[playerid][pMuted] == 1)
	{
		SendClientMessage(playerid, 0xA92BF6F6, "Você não pode falar, você foi calado");
		return 0;
	}
	if(SelectChar[playerid] == 255)
	{
	    new idx;
	    tmp_text = strtok(text, idx);
	    if ((strcmp("Proximo", tmp_text, true, strlen(tmp_text)) == 0) && (strlen(tmp_text) == strlen("Proximo")))
		{
		    switch (SelectCharID[playerid])
			{
				case 1: //Policia Militar
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 284); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 284; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 280); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 280; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 281); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 281; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 71); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 71; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 282); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = 282; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, 288); SelectCharPlace[playerid] = 7; ChosenSkin[playerid] = 288; }
				    else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, 283); SelectCharPlace[playerid] = 8; ChosenSkin[playerid] = 283; }
				    else if(SelectCharPlace[playerid] == 8) { SetPlayerSkin(playerid, 306); SelectCharPlace[playerid] = 9; ChosenSkin[playerid] = 306; }
				    else if(SelectCharPlace[playerid] == 9) { SetPlayerSkin(playerid, 307); SelectCharPlace[playerid] = 10; ChosenSkin[playerid] = 307; }
				    else if(SelectCharPlace[playerid] == 10) { SetPlayerSkin(playerid, 310); SelectCharPlace[playerid] = 11; ChosenSkin[playerid] = 310; }
				    else if(SelectCharPlace[playerid] == 11) { SetPlayerSkin(playerid, 311); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 311; }
				}
				case 2: //BOPE
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 285); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 285; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 298); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 298; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 285); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 285; }
    			}
				case 3: //Exercito
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 287); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 287; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 191); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 191; }
				}
				case 4: //Medicos
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 91); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 91; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 276); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 276; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 275); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 275; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 274); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 274; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 70); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = 70; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, 308); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 308; }

				}
				case 5: //Varrios Los Aztecas
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 116); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 116; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 115); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 115; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 114); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 114; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 41); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 41; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 148); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 148; }
				}
				case 7: //Prefeito
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 164); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 164; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 163); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 163; }
					else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 17); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 17; }
					else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 141); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 141; }
				}
				case 8: //Hitman
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 166); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 166; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 165); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 165; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 127); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 127; }
				}
				case 9: //Reporteres
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 188); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 188; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 187); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 187; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 148); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 148; }
				}
				case 10: //Taxistas
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 255); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 255; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 219); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 219; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 253); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 253; }
				}
				case 11: //Policia federal
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 224); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 224; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 286); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 286; }
				}
				case 12: //Mayans
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 17); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 17; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 43); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 43; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 46); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 46; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 98); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 98; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 111); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = 111; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, 223); SelectCharPlace[playerid] = 7; ChosenSkin[playerid] = 223; }
				    else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, 126); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 126; }
				}
				case 13: //Yakuza
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 203); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 203; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 204); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 204; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 117); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 117; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 118); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 118; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 169); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 169; }
				}
				case 14: //Groove
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 105); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 105; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 106); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 106; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 107); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 107; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 271); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 271; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 195); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = 195; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, 269); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 269; }
				}
				case 15: //Estado Islâmico
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 30); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 30; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 47); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 47; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 48); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 48; }
					else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 122); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 122; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 192); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 192; }
				}
				case 16: //ROTA
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 286); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 286; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 284); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 284; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 150); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 150; }
				}
				case 17: //Ballas
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 102); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 102; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 103); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 103; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 104); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 104; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 40); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 40; }
				}
				case 18: //Vagos
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 108); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 108; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 109); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 109; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 110); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 110; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 91); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 91; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 85); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 85; }
				}
				case 19: //Comando Vermelho
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 19); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 19; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 170); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 170; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 40); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 180; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 193); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 193; }
    			}
				case 20: //Bombeiros
				{
					if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 277); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 277; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 278); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 278; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 279); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 279; }
				}
				case 21: //PCC
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 101); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 101; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 293); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 293; }
				}
				case 22: //TRIADS
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 117); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 117; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 118); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 118; }
				}
    			case 23: //As FARC
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 111); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 111; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 112); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 112; }
				}
				case 24: //Mayans
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 247); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 247; }
                    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 248); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 248; }
					else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 254); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 254; }
				}
				case 25: //Sons
				{
				     if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 247); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 247; }
                    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 248); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 248; }
					else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 254); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 254; }
				}
				case 27: //destroyers
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 3); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 3; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 4); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 4; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 5); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 5; }
				}
				case 28: //Hells
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 248); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 248; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 247); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 247; }
				}
				case 29: //FE
				{
				    SetPlayerSkin(playerid, 287);
					ChosenSkin[playerid] = 287;
				}
				case 30: //Taxistas
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 255); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 255; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 219); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 219; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 253); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 253; }
				}
				case 31: //Medicos
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 91); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 91; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 279); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 279; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 277); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 277; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 276); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 276; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 275); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = 275; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, 279); SelectCharPlace[playerid] = 7; ChosenSkin[playerid] = 279; }
				    else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, 274); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 274; }
				}
				case 32: //Reporteres
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 188); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 188; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 187); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 187; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 148); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 148; }
				}
  				case 33: //PR
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 284); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 284; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 141); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 141; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 281); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 281; }
				}
   				case 34: //Detran
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 50); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 50; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 15); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 15; }
				}
			}
		    return 0;
		}
		else if ((strcmp("Confirma", tmp_text, true, strlen(tmp_text)) == 0) && (strlen(tmp_text) == strlen("Confirma")))
		{
		    if(IsAtClothShop(playerid))
		    {
		        PlayerInfo[playerid][pSkin] = ChosenSkin[playerid];
		        SelectCharPlace[playerid] = 0;
		    	SelectCharID[playerid] = 0;
		    	SelectChar[playerid] = 0;
		        return 0;
		    }
		    if(ChangePos2[playerid][1] == 1)
		    {
			    PlayerInfo[playerid][pSkin] = ChosenSkin[playerid];
		        SetPlayerInterior(playerid, ChangePos2[playerid][0]);
		        SetPlayerPos(playerid, ChangePos[playerid][0],ChangePos[playerid][1],ChangePos[playerid][2]);
		        ChangePos2[playerid][1] = 0;
		        return 0;
		    }
		    PlayerInfo[playerid][pSkin] = ChosenSkin[playerid];
			SetPlayerToTeamColor(playerid);
			MedicBill[playerid] = 0;
			SpawnPlayer(playerid);
		    SelectCharPlace[playerid] = 0;
		    SelectCharID[playerid] = 0;
		    SelectChar[playerid] = 0;
		    return 0;
		}
		else
		{
		    SendClientMessage(playerid, TEAM_VAGOS_COLOR, "* Use 'Proximo', ou 'Confirma'.");
		    return 0;
		}
	}
	if(MarriageCeremoney[playerid] > 0)
	{
	    new idx;
	    tmp_text = strtok(text, idx);
	    if ((strcmp("sim", tmp_text, true, strlen(tmp_text)) == 0) && (strlen(tmp_text) == strlen("sim")))
		{
		    if(GotProposedBy[playerid] < 999)
		    {
			    if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(GotProposedBy[playerid], giveplayer, sizeof(giveplayer));
				    format(string, sizeof(string), "Padre: %s Você aceita %s como sua amada esposa? (Digite 'sim', qualquer outra coisa cancela o casamento).", giveplayer,PlayerName(playerid));
					SendClientMessage(GotProposedBy[playerid], COLOR_WHITE, string);
					MarriageCeremoney[GotProposedBy[playerid]] = 1;
					MarriageCeremoney[playerid] = 0;
					GotProposedBy[playerid] = 999;
				    return true;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        GotProposedBy[playerid] = 999;
			        return 0;
			    }
			}
			else if(ProposedTo[playerid] < 999)
			{
			    if(IsPlayerConnected(ProposedTo[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(ProposedTo[playerid], giveplayer, sizeof(giveplayer));
					if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[ProposedTo[playerid]][pSex] == 2)
					{
						format(string, sizeof(string), "Padre: %s e %s eu vos declaro Marido e Mulher, Pode Beijar a Noiva.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Padre: %s e %s eu vos declaro Marido e Mulher, Pode Beijar o Noivo.", giveplayer, PlayerName(playerid));
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Noticia de Casamento: Temos um novo Casamento, %s e %s se casaram.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					else if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[ProposedTo[playerid]][pSex] == 1)
					{
					    format(string, sizeof(string), "Padre: %s e %s eu os declaro Marido e Marido, Pode Beijar o Noivo.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Padre: %s e %s eu os declaro Marido e Marido, Pode Beijar o Noivo.", giveplayer, PlayerName(playerid));
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Noticia de Casamento: Temos um novo Casamento Gay, %s e %s se casaram.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					else if(PlayerInfo[playerid][pSex] == 2 && PlayerInfo[ProposedTo[playerid]][pSex] == 2)
					{
					    format(string, sizeof(string), "Padre: %s e %s eu os declaro Esposa e Esposa, Pode Beijar a Noiva.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Padre: %s e %s eu os declaro Esposa e Esposa, Pode Beijar a Noiva", giveplayer, PlayerName(playerid));
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Noticia de Casamento: Temos um novo Casamento Lesbico, %s e %s se casaram.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					//MarriageCeremoney[ProposedTo[playerid]] = 1;
					MarriageCeremoney[ProposedTo[playerid]] = 0;
					MarriageCeremoney[playerid] = 0;
					format(string, sizeof(string), "%s", PlayerName(playerid));
					strmid(PlayerInfo[ProposedTo[playerid]][pMarriedTo], string, 0, strlen(string), 255);
					format(string, sizeof(string), "%s", giveplayer);
					strmid(PlayerInfo[playerid][pMarriedTo], string, 0, strlen(string), 255);
					GiveDinheiro(playerid, - 100);
					PlayerInfo[playerid][pMarried] = 1;
					PlayerInfo[ProposedTo[playerid]][pMarried] = 1;
					PlayerInfo[ProposedTo[playerid]][pPHousekey] = PlayerInfo[playerid][pPHousekey];
					PlayerInfo[ProposedTo[playerid]][pPbiskey] = PlayerInfo[playerid][pPbiskey];
					PlayerInfo[ProposedTo[playerid]][pPFazkey] = PlayerInfo[playerid][pPFazkey];
					ProposedTo[playerid] = 999;
					MarriageCeremoney[playerid] = 0;
				    return true;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        ProposedTo[playerid] = 999;
			        return 0;
			    }
			}
		}
		else
		{
		    if(GotProposedBy[playerid] < 999)
		    {
				if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(GotProposedBy[playerid], giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* Você deseja se casar com %s, Se Quizer Digite 'sim'.",giveplayer);
				    SendClientMessage(playerid, COLOR_YELLOW, string);
				    format(string, sizeof(string), "* %s quer casar com Você, um 'sim' foi dito.",PlayerName(playerid));
				    SendClientMessage(GotProposedBy[playerid], COLOR_YELLOW, string);
				    return 0;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        GotProposedBy[playerid] = 999;
			        return 0;
			    }
		    }
		    else if(ProposedTo[playerid] < 999)
			{
			    if(IsPlayerConnected(ProposedTo[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(ProposedTo[playerid], giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* Você deseja se casar com %s, Se Quizer Digite 'sim'.",giveplayer);
				    SendClientMessage(playerid, COLOR_YELLOW, string);
				    format(string, sizeof(string), "* %s quer casar com Você, um 'sim' foi dito.",PlayerName(playerid));
				    SendClientMessage(ProposedTo[playerid], COLOR_YELLOW, string);
				    return 0;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        ProposedTo[playerid] = 999;
			        return 0;
			    }
			}
		}
	    return 0;
	}
	if(ConnectedToPC[playerid] == 255)
	{
		new idx;
	    tmp_text = strtok(text, idx);
	    if ((strcmp("Contratos", tmp_text, true, strlen(tmp_text)) == 0) && (strlen(tmp_text) == strlen("Contratos")))
		{
			if(GetPlayerOrg(playerid) == 8)
			{
				SearchingHit(playerid);
			}
			if(GetPlayerOrg(playerid) == 22)
			{
				SearchingTri(playerid);
			}
			return 0;
		}
		else if ((strcmp("membros", tmp_text, true, strlen(tmp_text)) == 0) && (strlen(tmp_text) == strlen("membros")))
		{
			SendClientMessage(playerid, COLOR_WHITE, "|__________________ Membros da Agencia __________________|");
		    foreach(Player, i)
			{
		  		if(GetPlayerOrg(playerid) == 8 || GetPlayerOrg(playerid) == 22)
			    {
			    	if(GetPlayerOrg(i) == GetPlayerOrg(playerid))
			    	{
						GetPlayerName(i, giveplayer, sizeof(giveplayer));
				       	format(string, sizeof(string), "* %s: Cargo %d", giveplayer,PlayerInfo[i][pCargo]);
						SendClientMessage(playerid, COLOR_GREY, string);
					}
				}
			}
			return 0;
		}
		else if ((strcmp("infocontratos", tmp_text, true, strlen(tmp_text)) == 0) && (strlen(tmp_text) == strlen("infocontratos")))
		{
			format(string, sizeof string,
			"|_____ Contratos cumpridos pelas agências _____|\n\n\
			» Agência Hitman: %d\n\
			» Agência Triad: %d\n\n\
			____________________________________", HitmanMatou, TriadMatou);
			ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "Contratos Cumpridos", string, "Informado", "");
			return 0;
		}
	    else if ((strcmp("pegarcontrato", tmp_text, true, strlen(tmp_text)) == 0) && (strlen(tmp_text) == strlen("pegarcontrato")))
		{
		    if(GetPlayerOrg(playerid) == 8)
		    {
			 	if(hitfound == 0)
		   		{
				   	SendClientMessage(playerid, COLOR_GREY, "   Não ha contratos na agência dos Hitmans, USE contratos em seu laptop primeiro!");
				   	return 0;
				}
			 	if(GoChase[playerid] < 999)
			    {
			      	SendClientMessage(playerid, COLOR_GREY, "Você ja possui um contrato!");
					return 0;
				}
			   	if(IsPlayerConnected(hitmanid))
			 	{
				   	format(string, sizeof(string), "* Assasino %s, pegou um contrato para matar: %s(ID:%d), por R$%d.", NomePlayer(playerid), NomePlayer(hitmanid), hitmanid, PlayerInfo[hitmanid][pHeadValue]);
				   	SendFamilyMessage(GetPlayerOrg(playerid), COLOR_YELLOW, string);
				   	GoChase[playerid] = hitmanid;
				   	GetChased[hitmanid] = playerid;
				   	GotHit[hitmanid] = 1;
				   	hitmanid = 999;
				   	hitfound = 0;
				  	return 0;
			  	}
			    else
			 	{
			    	SendClientMessage(playerid, COLOR_GREY, "  Não ha contratos na agência dos Hitmans, USE contratos em seu laptop!");
				}
			}
			else if(GetPlayerOrg(playerid) == 22)
			{
				if(trifound == 0)
		   		{
				   	SendClientMessage(playerid, COLOR_GREY, "   Não ha contratos na agência dos Triad, USE contratos em seu laptop primeiro!");
				   	return 0;
				}
			 	if(GoChase[playerid] < 999)
			  	{
				 	SendClientMessage(playerid, COLOR_GREY, "Você ja possui um contrato!");
					return 0;
				}
			 	if(IsPlayerConnected(triid))
			  	{
			   		format(string, sizeof(string), "* Assasino %s, pegou um contrato para matar: %s(ID:%d), por R$%d.", PlayerName(playerid), PlayerName(triid), triid, PlayerInfo[triid][pHeadValueT]);
			  		SendFamilyMessage(22, COLOR_YELLOW, string);
			 		GoChase[playerid] = triid;
			 		GetChased[triid] = playerid;
			 		GotTri[triid] = 1;
					triid = 999;
			 		trifound = 0;
			    	return 0;
			  	}
			   	else
			  	{
				    SendClientMessage(playerid, COLOR_GREY, "   Não ha contratos na agência dos Triad, USE contratos em seu laptop primeiro!");
				}
			}
			return 0;
		}
		else if ((strcmp("pedido", tmp_text, true, strlen(tmp_text)) == 0) && (strlen(tmp_text) == strlen("pedido")))
		{
		    if(OrderReady[playerid] > 0)
		    {
		        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Seu pacote foi entregue a sua HQ, verifique na Caixa de Pacotes!");
		        return 0;
		    }
		    tmp_text = strtok(text, idx);
		    if ((strcmp("1", tmp_text, true, strlen(tmp_text)) == 0) && (strlen(tmp_text) == strlen("1")))
			{
			    if(PlayerInfo[playerid][pCargo] < 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você não tem cargo suficiente para pegar esse pacote!");
					return 0;
				}
			    if(GetPlayerMoney(playerid) > 1)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Seu pacote foi entregue a sua HQ, verifique na Caixa de Pacotes!");
			        OrderReady[playerid] = 1;
					if(GetPlayerOrg(playerid)==8)SetPlayerCheckpoint(playerid, 2281.1196,-2364.9805,13.5469, 5.0), CP[playerid]=0;//Hitman
					else if(GetPlayerOrg(playerid)==22) SetPlayerCheckpoint(playerid, 2770.5706,-1628.1260,12.1775, 5.0), CP[playerid]=0;//Triad
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"Você não possui essa grana!");
			        return 0;
			    }
			}
			else if ((strcmp("2", tmp_text, true, strlen(tmp_text)) == 0) && (strlen(tmp_text) == strlen("2")))
			{
			    if(PlayerInfo[playerid][pCargo] < 1) { SendClientMessage(playerid, COLOR_GREY, "Você não tem cargo suficiente para pegar esse pacote!"); return 0; }
			    if(GetPlayerMoney(playerid) > 1)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Seu pacote foi entregue a sua HQ, verifique na Caixa de Pacotes ou na porta da HQ!");
			        OrderReady[playerid] = 2;
					if(GetPlayerOrg(playerid)==8)SetPlayerCheckpoint(playerid, 2281.1196,-2364.9805,13.5469, 5.0), CP[playerid]=0;//Hitman
					else if(GetPlayerOrg(playerid)==22) SetPlayerCheckpoint(playerid, 2770.5706,-1628.1260,12.1775, 5.0), CP[playerid]=0;//Triad
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"Você não possui essa grana!");
			        return 0;
			    }
			}
			else if ((strcmp("3", tmp_text, true, strlen(tmp_text)) == 0) && (strlen(tmp_text) == strlen("3")))
			{
			    if(PlayerInfo[playerid][pCargo] < 1) { SendClientMessage(playerid, COLOR_GREY, "Você não tem cargo suficiente para pegar esse pacote!"); return 0; }
			    if(GetPlayerMoney(playerid) > 1)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Seu pacote foi entregue a sua HQ, verifique na Caixa de Pacotes!");
			        OrderReady[playerid] = 3;
					if(GetPlayerOrg(playerid)==8)SetPlayerCheckpoint(playerid, 2281.1196,-2364.9805,13.5469, 5.0), CP[playerid]=0;//Hitman
					else if(GetPlayerOrg(playerid)==22) SetPlayerCheckpoint(playerid, 2770.5706,-1628.1260,12.1775, 5.0), CP[playerid]=0;//Triad
					return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"Você não possui essa grana!");
			        return 0;
			    }
			}
			else if ((strcmp("4", tmp_text, true, strlen(tmp_text)) == 0) && (strlen(tmp_text) == strlen("4")))
			{
			    if(PlayerInfo[playerid][pCargo] < 2) { SendClientMessage(playerid, COLOR_GREY, "Você não tem cargo suficiente para pegar esse pacote!"); return 0; }
			    if(GetPlayerMoney(playerid) > 1)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Seu pacote foi entregue a sua HQ, verifique na Caixa de Pacotes!");
			        OrderReady[playerid] = 4;
					if(GetPlayerOrg(playerid)==8)SetPlayerCheckpoint(playerid, 2281.1196,-2364.9805,13.5469, 5.0), CP[playerid]=0;//Hitman
					else if(GetPlayerOrg(playerid)==22) SetPlayerCheckpoint(playerid, 2770.5706,-1628.1260,12.1775, 5.0), CP[playerid]=0;//Triad
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"Você não possui essa grana!");
			        return 0;
			    }
			}
			else if ((strcmp("5", tmp_text, true, strlen(tmp_text)) == 0) && (strlen(tmp_text) == strlen("5")))
			{
			    if(PlayerInfo[playerid][pCargo] < 2) { SendClientMessage(playerid, COLOR_GREY, "Você não tem cargo suficiente para pegar esse pacote!"); return 0; }
			    if(GetPlayerMoney(playerid) > 1)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Seu pacote foi entregue a sua HQ, verifique na Caixa de Pacotes!");
			        OrderReady[playerid] = 5;
					if(GetPlayerOrg(playerid)==8)SetPlayerCheckpoint(playerid, 2281.1196,-2364.9805,13.5469, 5.0), CP[playerid]=0;//Hitman
					else if(GetPlayerOrg(playerid)==22) SetPlayerCheckpoint(playerid, 2770.5706,-1628.1260,12.1775, 5.0), CP[playerid]=0;//Triad
					return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"Você não possui essa grana!");
			        return 0;
			    }
			}
			else if ((strcmp("6", tmp_text, true, strlen(tmp_text)) == 0) && (strlen(tmp_text) == strlen("6")))
			{
			    if(PlayerInfo[playerid][pCargo] < 3) { SendClientMessage(playerid, COLOR_GREY, "Você não tem cargo suficiente para pegar esse pacote!"); return 0; }
			    if(GetPlayerMoney(playerid) > 1)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Seu pacote foi entregue a sua HQ, verifique na Caixa de Pacotes!");
			        OrderReady[playerid] = 6;
					if(GetPlayerOrg(playerid)==8)SetPlayerCheckpoint(playerid, 2281.1196,-2364.9805,13.5469, 5.0), CP[playerid]=0;//Hitman
					else if(GetPlayerOrg(playerid)==22) SetPlayerCheckpoint(playerid, 2770.5706,-1628.1260,12.1775, 5.0), CP[playerid]=0;//Triad
					return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"Você não possui essa grana!");
			        return 0;
			    }
			}
			else if ((strcmp("7", tmp_text, true, strlen(tmp_text)) == 0) && (strlen(tmp_text) == strlen("7")))
			{
			    if(PlayerInfo[playerid][pCargo] < 3) { SendClientMessage(playerid, COLOR_GREY, "Você não tem cargo suficiente para pegar esse pacote!"); return 0; }
			    if(GetPlayerMoney(playerid) > 1)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Seu pacote foi entregue a sua HQ, verifique na Caixa de Pacotes!");
			        OrderReady[playerid] = 7;
					if(GetPlayerOrg(playerid)==8)SetPlayerCheckpoint(playerid, 2281.1196,-2364.9805,13.5469, 5.0), CP[playerid]=0;//Hitman
					else if(GetPlayerOrg(playerid)==22) SetPlayerCheckpoint(playerid, 2770.5706,-1628.1260,12.1775, 5.0), CP[playerid]=0;//Triad
					return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"Você não possui essa grana!");
			        return 0;
			    }
			}
 			else if ((strcmp("8", tmp_text, true, strlen(tmp_text)) == 0) && (strlen(tmp_text) == strlen("8")))
			{
			    if(OrgVencedora != GetPlayerOrg(playerid))
			    {
			        SendClientMessage(playerid, COLOR_LIGHTRED, " Sua organização não é a vencedora deste payday.");
			        return 0;
			    }
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Seu pacote foi entregue a sua HQ, verifique na Caixa de Pacotes!");
	      		OrderReady[playerid] = 8;
				if(GetPlayerOrg(playerid)==8)SetPlayerCheckpoint(playerid, 2281.1196,-2364.9805,13.5469, 5.0), CP[playerid]=0;//Hitman
				else if(GetPlayerOrg(playerid)==22) SetPlayerCheckpoint(playerid, 2770.5706,-1628.1260,12.1775, 5.0), CP[playerid]=0;//Triad
				return 0;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "|__________________[ Pedidos Disponiveis ]__________________|");
			    if(PlayerInfo[playerid][pCargo] >= 1) { SendClientMessage(playerid, COLOR_GREY, "|(1) Cargo 1 - 6: Knife, Eagle, MP5, Shotgun"); }
			    if(PlayerInfo[playerid][pCargo] >= 2) { SendClientMessage(playerid, COLOR_GREY, "|(2) Cargo 2 - 6: Knife, Eagle, M4, MP5, Shotgun"); }
			    if(PlayerInfo[playerid][pCargo] >= 2) { SendClientMessage(playerid, COLOR_GREY, "|(3) Cargo 2 - 6: Knife, Eagle, M4, MP5, Shotgun, Colete"); }
			    if(PlayerInfo[playerid][pCargo] >= 3) { SendClientMessage(playerid, COLOR_GREY, "|(4) Cargo 3 - 6: Knife, Eagle, M4, MP5, Shotgun, Sniper, Colete"); }
			    if(PlayerInfo[playerid][pCargo] >= 3) { SendClientMessage(playerid, COLOR_GREY, "|(5) Cargo 3 - 6: Knife, Eagle, M4, MP5, Shotgun, Sniper, Colete"); }
			    if(PlayerInfo[playerid][pCargo] >= 4) { SendClientMessage(playerid, COLOR_GREY, "|(6) Cargo 4 - 6: Knife, Eagle, M4, MP5, Shotgun, Sniper, Colete"); }
			    if(PlayerInfo[playerid][pCargo] >= 4) { SendClientMessage(playerid, COLOR_GREY, "|(7) Cargo 4 - 6: Knife, Eagle, M4, MP5, Shotgun, Sniper, Colete"); }
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "|BÔNUS|(8) Knife, Eagle, M4, MP5, Shotgun, Sniper, Colete");
				return 0;
			}
		}
		else if ((strcmp("sair", tmp_text, true, strlen(tmp_text)) == 0) && (strlen(tmp_text) == strlen("sair")))
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você desligou seu laptop e se desconectou de sua agencia.");
      		ConnectedToPC[playerid] = 0;
		    return 0;
		}
		else
		{
			    SendClientMessage(playerid, COLOR_WHITE, "|___ *Agencia dos Assasinos* ___|");
			    SendClientMessage(playerid, COLOR_YELLOW2, "|");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| * Contratos");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| * pegarcontrato");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| * Pedido");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| * Membros");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| * Infocontratos");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| * Sair");
				SendClientMessage(playerid, COLOR_WHITE, "|______________|00:00|");
			    return 0;
		}
	}
	if(TalkingLive[playerid] != 255)
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(PlayerInfo[playerid][pMembro] == 9 || PlayerInfo[playerid][pLider] == 9)
		{
		    format(string, sizeof(string), "Repórter %s: %s", sendername, text);
			OOCNews(0x9acd32FF, string);
 			SetPlayerChatBubble(playerid, text, 0x00AAEEFF, 20.0, 10000);
		}
		else
		{
		    format(string, sizeof(string), "Entrevistado %s: %s", sendername, text);
			OOCNews(0x9acd32FF, string);
			SetPlayerChatBubble(playerid, text, 0x00AAEEFF, 20.0, 10000);
		}
		return 0;
	}
	if(Mobile[playerid] != 255)
	{
		new idx;
		tmp_text = strtok(text, idx);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "%s diz (Celular): %s", sendername, text);
		SetPlayerChatBubble(playerid, string, 0x00AAEEFF, 20.0, 10000);
		SendClientMessageInRange(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		if(Mobile[playerid] == 913)
		{
			if(!strlen(tmp_text))
			{
				SendClientMessage(playerid, 0xA92BF6F6, "Denuncia: Desculpe, Nao Entendi");
				return 0;
			}
			if ((strcmp("nao", tmp_text, true, strlen(tmp_text)) == 0) && (strlen(tmp_text) == strlen("nao")))
			{
				new turner[MAX_PLAYER_NAME];
				new wanted[128];
				GetPlayerName(playerid, turner, sizeof(turner));
				SendClientMessage(playerid, 0xA92BF6F6, "Denuncia: Temos alertado todas as unidades na área.");
				SendClientMessage(playerid, 0xA92BF6F6, "Obrigado por Relatar o Ocorrido");
				SendClientMessage(playerid, 0xA92BF6F6, "Se sua Denuncia for um Trote Voce poderá ser Preso!");
				format(wanted, sizeof(wanted), "Denuncia: Todas Unidades IA: Vitima: %s",turner);
				SendFamilyMessage(1, 0xA92BF6F6, wanted);
				format(wanted, sizeof(wanted), "Nome do Criminoso: Desconhecido");
				SendFamilyMessage(1, 0xA92BF6F6, wanted);
				format(wanted, sizeof(wanted), "O que Aconteceu Contado pela Vitima: %s",PlayerCrime[playerid][pAccusing]);
				SendFamilyMessage(1, 0xA92BF6F6, wanted);
				SendClientMessage(playerid, COLOR_GRAD2, "   Ligação Finalizada...");
				Mobile[playerid] = 255;
				return 0;
			}
			new turner[MAX_PLAYER_NAME];
			new wanted[128];
			GetPlayerName(playerid, turner, sizeof(turner));
			SendClientMessage(playerid, 0xA92BF6F6, "Denuncia: Temos alertado todas as unidades na área.");
			SendClientMessage(playerid, 0xA92BF6F6, "Obrigado por Relatar o Ocorrido");
			SendClientMessage(playerid, 0xA92BF6F6, "Se sua Denuncia for um Trote Voce poderá ser Preso!");
			format(wanted, sizeof(wanted), "Denuncia: Todas Unidades IA: Vitima: %s",turner);
			SendFamilyMessage(1, 0xA92BF6F6, wanted);
			format(wanted, sizeof(wanted), "Nome do Criminoso: %s",text);
			SendFamilyMessage(1, 0xA92BF6F6, wanted);
			format(wanted, sizeof(wanted), "O que Aconteceu Contado pela Vitima: %s",PlayerCrime[playerid][pAccusing]);
			SendFamilyMessage(1, 0xA92BF6F6, wanted);
			SendClientMessage(playerid, COLOR_GRAD2, "   Ligação Finalizada...");
			Mobile[playerid] = 255;
			return 0;
		}
		if(Mobile[playerid] == 915)
			{
			if(!strlen(tmp_text))
			{
				SendClientMessage(playerid, 0xA92BF6F6, "Denuncia: Desculpe, Nao Entendi");
				return 0;
			}
			new turner[MAX_PLAYER_NAME];
			new wanted[128];
			GetPlayerName(playerid, turner, sizeof(turner));
			SendClientMessage(playerid, 0xA92BF6F6, "Denuncia: Temos alertado todas as unidades na área.");
			SendClientMessage(playerid, 0xA92BF6F6, "Obrigado por Relatar o Ocorrido");
			format(wanted, sizeof(wanted), "Denuncia: Todas Unidades Emergência: Chamador: %s",turner);
			SendFamilyMessage(4, 0xA92BF6F6, wanted);
			//format(wanted, sizeof(wanted), "Problema: %s",text2);
			format(wanted, sizeof(wanted), "Local: %s",text);
			SendFamilyMessage(4, 0xA92BF6F6, wanted);
			SendClientMessage(playerid, COLOR_GRAD2, "   Ninguem na linha...");
			Mobile[playerid] = 255;
			return 0;
			}
			else if(Mobile[playerid] == 914)
			{
			if(!strlen(tmp_text))
			{
				SendClientMessage(playerid, 0xF78181AA, "Linha De Emergência: Desculpe, nao entendi.");
				return 0;
			}
			strmid(PlayerCrime[playerid][pAccusing], text, 0, strlen(text), 255);
			SendClientMessage(playerid, 0xA92BF6F6, "SAMU: Se você souber o nome do local ou de parte dele onde está, me fale, ou simplesmente diga não");
			Mobile[playerid] = 915;
			return 0;
		}
		if(Mobile[playerid] == 913)
		{
			if(!strlen(tmp_text))
			{
				SendClientMessage(playerid, 0xF78181AA, "EMERGÊNCIA: Desculpe eu não entendo");
				return 0;
			}
			if ((strcmp("nao", tmp_text, true, strlen(tmp_text)) == 0) && (strlen(tmp_text) == strlen("nao")))
			{
				new turner[MAX_PLAYER_NAME];
				new wanted[128];
				GetPlayerName(playerid, turner, sizeof(turner));
				SendClientMessage(playerid, COLOR_DBLUE, "COP: Alertamos todos as unidades perto do local.");
				SendClientMessage(playerid, COLOR_DBLUE, "Obrigado por ter relatado o Ocorrido");
				format(wanted, sizeof(wanted), "HQ: Todas as unidades: Denunciante: %s",turner);
				SendFamilyMessage(1, COLOR_DBLUE, wanted);
				format(wanted, sizeof(wanted), "HQ: Crime: %s, Suspeito: Desconhecido",PlayerCrime[playerid][pAccusing]);
				SendFamilyMessage(1, COLOR_DBLUE, wanted);
				SendClientMessage(playerid, COLOR_GRAD2, "   Ninguém na linha.....");
				Mobile[playerid] = 255;
				return 0;
			}
			new badguy;
			//badguy = strval(tmp_text);
			badguy = ReturnUser(tmp_text);
			if (IsPlayerConnected(badguy))
			{
			    if(badguy != INVALID_PLAYER_ID)
			    {
					if (IsACop(badguy))
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Polícia HQ: Você terá que entrar em contato com os assuntos internos. Esta é uma linha de emergência");
						SendClientMessage(playerid, COLOR_GRAD2, "   Ninghem na linha...");
						Mobile[playerid] = 255;
						return 0;
					}
					if (WantedPoints[badguy] > 0)
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Polícia HQ: Unidades já estão atribuídos a esse caso.");
						SendClientMessage(playerid, COLOR_DBLUE, "Obrigado por denunciar este crime");
						SendClientMessage(playerid, COLOR_GRAD2, "   Ninguémm na linha...");
						Mobile[playerid] = 255;
						return 0;
					}
					if (badguy == playerid)
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Polícia HQ: Esta linha e de emergencia.");
						SendClientMessage(playerid, COLOR_GRAD2, "   Ninguémm na linha...");
						Mobile[playerid] = 255;
						return 0;
					}
					SendClientMessage(playerid, COLOR_DBLUE, "Polícia HQ: Temos alertado todas as unidades na área.");
					SendClientMessage(playerid, COLOR_DBLUE, "Obrigado por denunciar este crime");
					SetPlayerCriminal(badguy,playerid, PlayerCrime[playerid][pAccusing]);
					if(WantedPoints[badguy] > 0) { } else
					{
						WantedPoints[badguy] += 1;
      					SetPlayerWantedLevel(badguy, WantedPoints[badguy]);
				  	}
					SendClientMessage(playerid, COLOR_GRAD2, "   Ninguémm na linha...");
					Mobile[playerid] = 255;
					return 0;
				}//invalid id
				return 0;
			}//not connected
			else
			{
				format(string, sizeof(string), "Police HQ: Nenhuma informação sobre %s, o nome citado esta correto?",tmp_text);
				SendClientMessage(playerid, COLOR_DBLUE, string);
				return 0;
			}
		}
		else if(Mobile[playerid] == 912)
		{
			if(!strlen(tmp_text))
			{
				SendClientMessage(playerid, 0xF78181AA, "Linha De Emergência: Desculpe, nao entendi.");
				return 0;
			}
			strmid(PlayerCrime[playerid][pAccusing], text, 0, strlen(text), 255);
			SendClientMessage(playerid, COLOR_DBLUE, "Polícia HQ: Se você souber o nome do assaltante ou de parte dele, me fale, ou simplesmente dizer não");
			Mobile[playerid] = 913;
			return 0;
		}
		else if(Mobile[playerid] == 190)
		{
			if(!strlen(tmp_text))
			{
				SendClientMessage(playerid, 0xF78181AA, "Linha De Emergência: Desculpe não entendo... Policia ou SAMU?");
				return 0;
			}
			else if ((strcmp("policia", tmp_text, true, strlen(tmp_text)) == 0) && (strlen(tmp_text) == strlen("policia")))
			{
				SendClientMessage(playerid, 0xF78181AA, "Linha De Emergência: Você optou por Policia, Espere.");
				Mobile[playerid] = 912;
				SendClientMessage(playerid, COLOR_DBLUE, "Polícia HQ: Por favor me dê uma breve descrição do crime.");
				return 0;
			}
			else if ((strcmp("SAMU", tmp_text, true, strlen(tmp_text)) == 0) && (strlen(tmp_text) == strlen("SAMU")))
			{
				SendClientMessage(playerid, 0xF78181AA, "Linha De Emergência: Você optou por SAMU, Espere.");
				Mobile[playerid] = 914;
				SendClientMessage(playerid, 0xA92BF6F6, "Denuncia: Por favor me dê uma breve descrição do Incidente.");
				return 0;
			}
			else
			{
				SendClientMessage(playerid, 0xF78181AA, "Linha De Emergência: Desculpe não entendo... Policia ou SAMU?");
				return 0;
			}
		}
		if(IsPlayerConnected(Mobile[playerid]))
		{
		    if(Mobile[Mobile[playerid]] == playerid)
		    {
				SendClientMessage(Mobile[playerid], COLOR_YELLOW,string);

				format(string, sizeof string, "CELULAR: %s(ID: %d) para %s(ID: %d): %s", NomePlayer(playerid),playerid, NomePlayer(Mobile[playerid]),Mobile[playerid], text);
  				SendGrampoMessage(playerid, string);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_YELLOW,"Ninguém lá...");
		}
		return 0;
	}
	if(text[0] == '@'){

		if(PlayerInfo[playerid][pFamiliaID] == 1){

			format(string, sizeof(string), "@ %s [%s]: %s", FamiliaInfo[PlayerInfo[playerid][pFamiliaID]][fName], PlayerName(playerid), text[1]);
			foreach(Player, i){

			    if(PlayerInfo[i][pFamiliaID] == PlayerInfo[playerid][pFamiliaID]){

			        SendClientMessage(i, 0xEEA2ADFF, string);
			    }
			}
			return 0;
		}
	}
	if(ChatAtendimento[playerid] == 1)
	{
 		format(string, sizeof(string), "{FFCCCC}[Atendimento][{FFFFFF}Jogador{FFCCCC}]%s: %s", PlayerName(playerid),text);
        AChatAtendimento(0xE6E6E6E6,string,NumeroChatAtendimento[playerid]);
		return 0;
	}
	else if(ChatAtendimento[playerid] == 2)
	{
        if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
      	{
	   	format(string, sizeof(string), "{FFCCCC}[Atendimento][{ff3399}Admin{FFCCCC}]%s: %s", PlayerName(playerid),text);
		AChatAtendimento(0xE6E6E6E6,string,NumeroChatAtendimento[playerid]);
		}
		else if(PlayerInfo[playerid][pHelper] >= 1)
      	{
	   	format(string, sizeof(string), "{FFCCCC}[Atendimento][{55F6AC}Helper{FFCCCC}]%s: %s", PlayerName(playerid),text);
		AChatAtendimento(0xE6E6E6E6,string,NumeroChatAtendimento[playerid]);
		}
		return 0;
	}
	if(GetPVarInt(playerid, "inArena") == 1)
	{
		new aString[256];
		format(aString, sizeof aString, "{00DB1D}[{FFFFFF}Arena Chat{00DB1D}] %s(%d):{FFFFFF} %s", NomePlayer(playerid), playerid, text);
		SendArenaMessage(-1, aString);
		return 0;
	}
	if(realchat)
	{
   		TCount = GetPVarInt(playerid, "TextSpamCount");
	    SetTimerEx("ResetCount", 750, false, "n", playerid);
	    if(TCount > 7)
    	{
	    	SetPVarInt(playerid, "TextSpamCount", 0);
	     	format(string, sizeof(string), "*** %s saiu do servidor por flood excessivo.", NomePlayer(playerid));
	      	SendClientMessageInRange(20.0, playerid, string, COLOR_YELLOW2,COLOR_YELLOW2,COLOR_YELLOW2,COLOR_YELLOW2,COLOR_YELLOW2);
			Kick(playerid);
	    }
	    else
		{
		    TCount++;
			SetPVarInt(playerid, "TextSpamCount", TCount);
	 	}
	    if(gPlayerLogged[playerid] == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "[!] {FFFFFF}Você não está logado. USE: /logar.");
	        return 0;
      	}
      	if(admtrampando[playerid] > 0)
      	{
	   		format(string, sizeof(string), "%s(%d) diz: %s", NomePlayer(playerid),playerid , text);
	   		SendClientMessageInRange(35.0, playerid, string,0xFFCCCCAA,0xFFCCCCAA,0xFFCCCCAA,0xFFCCCCAA,0xFFCCCCAA);
	   		SetPlayerChatBubble(playerid, text, 0xFFCCCCAA, 35.0, 10000);
		}
		else if(helpertrampando[playerid] > 0)
      	{
	   		format(string, sizeof(string), "%s(%d) diz: %s", NomePlayer(playerid),playerid , text);
	   		SendClientMessageInRange(35.0, playerid, string,0x55F6ACFF,0x55F6ACFF,0x55F6ACFF,0x55F6ACFF,0x55F6ACFF);
	   		SetPlayerChatBubble(playerid, text, 0x55F6ACFF, 35.0, 10000);
		}
		else if(PlayerInfo[playerid][pVIP] > 0)
      	{
	   		format(string, sizeof(string), "%s(%d) diz: %s", NomePlayer(playerid),playerid , text);
	   		SendClientMessageInRange(35.0, playerid, string,0xa3ffffAA,0xa3ffffAA,0xa3ffffAA,0xa3ffffAA,0xa3ffffAA);
	   		SetPlayerChatBubble(playerid, text, 0xa3ffffAA, 35.0, 10000);
		}
		else
		{
		    format(string, sizeof(string), "%s(%d) diz: %s", NomePlayer(playerid),playerid , text);
		    SendClientMessageInRange(35.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	   		SetPlayerChatBubble(playerid, text, 0xFFFFFFAA, 35.0, 10000);
		}

	   	////format(string, sizeof(string), "- %s {FFFFFF}(%s)", text, NomePlayer(playerid));

		//format(string, sizeof(string), "- %s {%s}(%s)", text, GetPlayerColorEx(playerid), NomePlayer(playerid));
     	//SendClientMessageInRange(35.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
	   	//SetPlayerChatBubble(playerid, text, COLOR_WHITE, 35.0, 10000);

	   	if(VendoNick[playerid] == false)
		{
	        VendoNick[playerid] = true;
	        SendClientMessage(playerid, COLOR_GRAD1, "(( Você agora não está mais em modo secreto ))");
		    foreach(Player, i)
			{
				ShowPlayerNameTagForPlayer(i, playerid, true);
			}
		}
		return 0;
  	}
	return 0;
}

BPF::timeranimation(playerid)
{
	return ApplyAnimation(playerid,"PED","facgum",3.1,0,1,1,1,1);
}

BPF::SetCamBack(playerid)
{
		new Float:plocx,Float:plocy,Float:plocz;
		GetPlayerPos(playerid, plocx, plocy, plocz);
		SetPlayerPos(playerid, -1863.15, -21.6598, 1060.15); // Warp the player
		SetPlayerInterior(playerid,14);
}
BPF::Fixhour(hora)
{
	hora = timeshift+hora;
	if (hora < 0)
	{
		hora = hora+24;
	}
	else if (hora > 23)
	{
		hora = hora-24;
	}
	shifthour = hora;
	return true;
}

BPF::IsAPoliciaCivil(playerid)
{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==16 || member==16)
		{
		    return true;
		}
		else if(lider==16 || lider==16)
		{
		    return true;
		}
		return 0;
}

BPF::IsASonsofAnarchy(playerid)
{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==20 || member==20)
		{
		    return true;
		}
		else if(lider==20 || lider==20)
		{
		    return true;
		}
		return 0;
}
BPF::IsAComandoVermelhoSF(carid)
{
	if((carid >= CarrosCV[0]) && (carid <= CarrosCV[9]))
	{
		return true;
	}
	return 0;
}
BPF::IsATriad(playerid)
{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==22 || member==22)
		{
		    return true;
		}
		else if(lider==22 || lider==22)
		{
		    return true;
		}
		return 0;
}
BPF::IsATriadCar(carid)
{
	if((carid >= CarrosTriad[0]) && (carid <= CarrosTriad[sizeof(CarrosTriad)-1]))
	{
		return true;
	}
	return 0;
}
BPF::IsAYa(playerid)
{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==13|| member==13)
		{
		    return true;
		}
		else if(lider==13 || lider==13)
		{
		    return true;
		}
		return 0;
}

BPF::IsAPFCar(carid)
{
	if((carid >= CarrosPF[0]) && (carid <= CarrosPF[sizeof(CarrosPF)-1]))
	{
		return true;
	}
	return 0;
}


BPF::IsAMayam(playerid)
{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==12 || member==12)
		{
		    return true;
		}
		else if(lider==12 || lider==12)
		{
		    return true;
		}
		return 0;
}
BPF::IsAGOV(playerid)
{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==7 || lider==7)
		{
		    return true;
		}
		return 0;
}


BPF::IsAGOVCar(carid)//Carros Governo
{
	if((carid >= CarrosPrefeitura[0]) && (carid <= CarrosPrefeitura[sizeof(CarrosPrefeitura)-1]))
	{
		return true;
	}
	return 0;
}


BPF::IsAAl(playerid)
{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==15 || member==15)
		{
		    return true;
		}
		else if(lider==15 || lider==15)
		{
		    return true;
		}
		return 0;
}
BPF::IsAAlCar(carid)
{
	if((carid >= CarrosAlQaeda[0]) && (carid <= CarrosAlQaeda[sizeof(CarrosAlQaeda)-1]))
	{
		return true;
	}
	return 0;
}
BPF::IsAGI(playerid)
{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==23 || member==23)
		{
		    return true;
		}
		else if(lider==23 || lider==23)
		{
		    return true;
		}
		return 0;
}
BPF::IsAGICar(carid)
{
	if((carid >= CarrosGI[0]) && (carid <= CarrosGI[sizeof(CarrosGI)-1]))
	{
		return true;
	}
	return 0;
}
BPF::IsAOni(playerid)
{
	    new emprego = PlayerInfo[playerid][pEmprego];
	    if(emprego==9)
		{
		    return true;
		}
		return 0;
}
BPF::IsAOniCar(carid)
{
	if((carid >= CarrosOnibus[0]) && (carid <= CarrosOnibus[sizeof(CarrosOnibus)-1]))
	{
		return true;
	}
	return 0;
}
BPF::IsATaxistaCar(carid)
{
	if((carid >= CarrosTaxista[0]) && (carid <= CarrosTaxista[sizeof(CarrosTaxista)-1]))
	{
		return true;
	}
	return 0;
}
BPF::IsATaxista(playerid)
{
		new emprego = PlayerInfo[playerid][pEmprego];
		if(emprego==13)
		{
			return true;
		}
		return 0;
}
BPF::IsAJornal(playerid)
{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==9 || member==9)
		{
		    return true;
		}
		else if(lider==9 || lider==9)
		{
		    return true;
		}
		return 0;
}


BPF::IsAJornalCar(carid)
{
	if((carid >= CarrosReporter[0]) && (carid <= CarrosReporter[sizeof(CarrosReporter)-1]))
	{
		return true;
	}
	return 0;
}
BPF::IsAGroove(playerid)
{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==14 || member==14)
		{
		    return true;
		}
		else if(lider==14 || lider==14)
		{
		    return true;
		}
		return 0;
}
BPF::IsAGang(playerid)
{
	switch(GetPlayerOrg(playerid))
	{
		case 5, 6, 1, 2, 14, 17, 18, 19, 21, 26:
			return 1;
	}
	return 0;
}
stock carregarObjetos(playerid)
{
    if(PlayerInfo[playerid][pAcP] == 1)
	{
	    PlayerInfo[playerid][pAcP] = 0;
	}
	new
        file[54],
        ObjetosCriados
    ;
    for(new i = 0; i < MAX_OBJETOS; i++)
    {
        format(file, 54, Pasta_Objetos, i);
        if(!DOF2_FileExists(file)) continue;
        ObjInfo[i][PosX] = DOF2_GetFloat(file, "PosX");
        ObjInfo[i][PosY] = DOF2_GetFloat(file, "PosY");
        ObjInfo[i][PosZ] = DOF2_GetFloat(file, "PosZ");
        ObjInfo[i][RotX] = DOF2_GetFloat(file, "PosRX");
        ObjInfo[i][RotY] = DOF2_GetFloat(file, "PosRY");
        ObjInfo[i][RotZ] = DOF2_GetFloat(file, "PosRZ");
        ObjInfo[i][world] = DOF2_GetInt(file, "World");
        ObjInfo[i][ObjectModel] = DOF2_GetInt(file, "Model");

        ObjInfo[i][TextoInfo] = CreateDynamic3DTextLabel("Fix",-1,0.0, 0.0, 0.0 ,0.1, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 0.1);
        DestroyDynamic3DTextLabel(ObjInfo[i][TextoInfo]); //Fix

        ObjInfo[i][ObjetoID] = CreateDynamicObject(
                                DOF2_GetInt(file, "Model"), //fix streamer
                                ObjInfo[i][PosX],
                                ObjInfo[i][PosY],
                                ObjInfo[i][PosZ],
                                ObjInfo[i][RotX],
                                ObjInfo[i][RotY],
                                ObjInfo[i][RotZ],
                                ObjInfo[i][world]
                               );

        ObjetosCriados++;
    }
    SendClientMessage(playerid, 0xff6347FF, "SERVER: Objetos no Corpo Carregados Com Sucesso.");
}
stock SalvarObjetos()
{
    new file[54];
    for(new save = 0; save < MAX_OBJETOS; save++)
    {
        if(ObjInfo[save][ObjectModel] == 0) continue;
        format(file, 54, Pasta_Objetos, save);
        if(!DOF2_FileExists(file)) DOF2_CreateFile(file);
        DOF2_SetInt(file, "Model", ObjInfo[save][ObjectModel]);
        DOF2_SetFloat(file, "PosX", ObjInfo[save][PosX]);
        DOF2_SetFloat(file, "PosY", ObjInfo[save][PosY]);
        DOF2_SetFloat(file, "PosZ", ObjInfo[save][PosZ]);
        DOF2_SetFloat(file, "PosRX", ObjInfo[save][RotX]);
        DOF2_SetFloat(file, "PosRY", ObjInfo[save][RotY]);
        DOF2_SetFloat(file, "PosRZ", ObjInfo[save][RotZ]);
        DOF2_SetInt(file, "World", ObjInfo[save][world]);
    }
    DOF2_SaveFile();
}
stock SlotdoItem(playerid,slotid)
{
	new gstring[128];
	switch(ItemSlotP[playerid][slotid])
	{
		case 0:gstring = "ArmaPesada";
		case 1:gstring = "Escopeta";
		case 2:gstring = "Cacetete";
		case 3:gstring = "Desert Eagle";
		case 4:gstring = "Extintor";
		case 5:gstring = "Sniper";
		case 6:gstring = "Bolsa de Dinheiro";
		case 7:gstring = "Pizza";
		case 8:gstring = "Maconha";
		case 9:gstring = "Pa";
		case 10:gstring = "Radio";
		case 11:gstring = "Celular";
		case 12:gstring = "Oculos";
		case 13:gstring = "Bone";
		case 14:gstring = "Especial";
		case 15:gstring = "Movel";
		case 16:gstring = "Escudo";
		case 17:gstring = "Capacete";
		case 18:gstring = "Planta";
		case 19:gstring = "Bandana";
		case 20:gstring = "Aureola1";
		case 21:gstring = "Aureola2";
		case 22:gstring = "Algema";
		case 23:gstring = "Item raro";
		case 24:gstring = "Especial";
		default:gstring ="Desconhecido";
	}
	return gstring;
}
stock showInventarioBox(playerid, boxid){
	PlayerTextDrawDestroy(playerid,invBox[playerid][0]);
 	PlayerTextDrawDestroy(playerid,invBox[playerid][1]);
 	PlayerTextDrawDestroy(playerid,invBox[playerid][2]);
    PlayerTextDrawDestroy(playerid,invBox[playerid][3]);
	PlayerTextDrawDestroy(playerid,invBox[playerid][4]);
    PlayerTextDrawDestroy(playerid,invBox[playerid][5]);
    PlayerTextDrawDestroy(playerid,invBox[playerid][6]);
    PlayerTextDrawDestroy(playerid,invBox[playerid][7]);
    PlayerTextDrawDestroy(playerid,invBox[playerid][8]);
	if(boxid == 0 || boxid == 15 || boxid == 30 || boxid == 45 || boxid == 60){

		invBox[playerid][0] = CreatePlayerTextDraw(playerid,47.000000, 175.000000, "_");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][0], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][0], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][0], 0.193378, 12.805830);
		PlayerTextDrawColor(playerid,invBox[playerid][0], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][0], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][0], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][0], 0x00000099);
		PlayerTextDrawTextSize(playerid,invBox[playerid][0], 143.000000, 0.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][0], 0);

		invBox[playerid][1] = CreatePlayerTextDraw(playerid,48.000000, 175.000000, "Escolha uma opcao");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][1], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][1], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][1], 0.193378, 0.905830);
		PlayerTextDrawColor(playerid,invBox[playerid][1], -2139062169);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][1], 0);

		invBox[playerid][2] = CreatePlayerTextDraw(playerid,126.000000, 174.000000, "~r~X");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][2], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][2], 0.356041, 1.098331);
		PlayerTextDrawColor(playerid,invBox[playerid][2], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][2], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][2], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][2], 0);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawTextSize(playerid,invBox[playerid][2], 580.507568, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][2], 1);

		invBox[playerid][3] = CreatePlayerTextDraw(playerid,54.000000, 190.000000, "usar_item");//y + 15
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][3], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][3], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][3], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][3], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][3], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][3], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][3], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][3], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][3], 137.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][3], 1);

		invBox[playerid][4] = CreatePlayerTextDraw(playerid,54.000000, 206.000000, "combinar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][4], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][4], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][4], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][4], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][4], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][4], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][4], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][4], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][4], 137.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][4], 1);

		invBox[playerid][5] = CreatePlayerTextDraw(playerid,54.000000, 223.000000, "mover");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][5], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][5], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][5], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][5], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][5], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][5], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][5], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][5], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][5], 137.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][5], 1);

		invBox[playerid][6] = CreatePlayerTextDraw(playerid,54.000000, 239.000000, "vender_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][6], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][6], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][6], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][6], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][6], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][6], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][6], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][6], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][6], 137.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][6], 1);

		invBox[playerid][7] = CreatePlayerTextDraw(playerid,54.000000, 255.000000, "descartar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][7], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][7], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][7], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][7], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][7], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][7], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][7], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][7], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][7], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][7], 137.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][7], 1);

		invBox[playerid][8] = CreatePlayerTextDraw(playerid,54.000000, 271.000000, "separar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][8], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][8], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][8], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][8], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][8], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][8], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][8], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][8], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][8], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][8], 137.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][8], 1);

	}
	if(boxid == 1 || boxid == 16 || boxid == 31 || boxid == 46 || boxid == 61){


		invBox[playerid][0] = CreatePlayerTextDraw(playerid,143.000000, 175.000000, "_");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][0], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][0], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][0], 0.193378, 12.805830);
		PlayerTextDrawColor(playerid,invBox[playerid][0], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][0], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][0], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][0], 0x00000099);
		PlayerTextDrawTextSize(playerid,invBox[playerid][0], 239.000000, 0.000000); //143+96
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][0], 0);

		invBox[playerid][1] = CreatePlayerTextDraw(playerid,144.000000, 175.000000, "Escolha uma opcao"); //4+96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][1], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][1], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][1], 0.193378, 0.905830);
		PlayerTextDrawColor(playerid,invBox[playerid][1], -2139062169);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][1], 0);

        invBox[playerid][2] = CreatePlayerTextDraw(playerid,222.000000, 174.000000, "~r~X"); //126 + 96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][2], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][2], 0.356041, 1.098331);
		PlayerTextDrawColor(playerid,invBox[playerid][2], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][2], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][2], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][2], 0);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawTextSize(playerid,invBox[playerid][2], 580.507568, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][2], 1);

        invBox[playerid][3] = CreatePlayerTextDraw(playerid,54+96.000000, 190.000000, "usar_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][3], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][3], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][3], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][3], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][3], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][3], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][3], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][3], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][3], 137+96.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][3], 1);

		invBox[playerid][4] = CreatePlayerTextDraw(playerid,54+96.000000, 206.000000, "combinar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][4], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][4], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][4], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][4], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][4], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][4], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][4], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][4], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][4], 137+96.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][4], 1);

		invBox[playerid][5] = CreatePlayerTextDraw(playerid,54+96.000000, 223.000000, "mover");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][5], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][5], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][5], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][5], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][5], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][5], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][5], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][5], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][5], 137+96.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][5], 1);

		invBox[playerid][6] = CreatePlayerTextDraw(playerid,54+96.000000, 239.000000, "vender_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][6], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][6], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][6], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][6], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][6], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][6], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][6], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][6], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][6], 137+96.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][6], 1);

		invBox[playerid][7] = CreatePlayerTextDraw(playerid,54+96.000000, 255.000000, "descartar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][7], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][7], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][7], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][7], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][7], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][7], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][7], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][7], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][7], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][7], 137+96.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][7], 1);

		invBox[playerid][8] = CreatePlayerTextDraw(playerid,54+96.000000, 271.000000, "separar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][8], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][8], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][8], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][8], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][8], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][8], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][8], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][8], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][8], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][8], 137+96.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][8], 1);
	}
	if(boxid == 2 || boxid == 17 || boxid == 32 || boxid == 47 || boxid == 62){

		invBox[playerid][0] = CreatePlayerTextDraw(playerid,239.000000, 175.000000, "_");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][0], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][0], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][0], 0.193378, 12.805830);
		PlayerTextDrawColor(playerid,invBox[playerid][0], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][0], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][0], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][0], 0x00000099);
		PlayerTextDrawTextSize(playerid,invBox[playerid][0], 335.000000, 0.000000); //143+96
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][0], 0);

		invBox[playerid][1] = CreatePlayerTextDraw(playerid,240.000000, 175.000000, "Escolha uma opcao"); //4+96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][1], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][1], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][1], 0.193378, 0.905830);
		PlayerTextDrawColor(playerid,invBox[playerid][1], -2139062169);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][1], 0);

        invBox[playerid][2] = CreatePlayerTextDraw(playerid,318.000000, 174.000000, "~r~X"); //126 + 96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][2], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][2], 0.356041, 1.098331);
		PlayerTextDrawColor(playerid,invBox[playerid][2], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][2], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][2], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][2], 0);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawTextSize(playerid,invBox[playerid][2], 580.507568, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][2], 1);

        invBox[playerid][3] = CreatePlayerTextDraw(playerid,246.000000, 190.000000, "usar_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][3], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][3], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][3], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][3], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][3], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][3], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][3], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][3], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][3], 329.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][3], 1);

		invBox[playerid][4] = CreatePlayerTextDraw(playerid,246.000000, 206.000000, "combinar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][4], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][4], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][4], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][4], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][4], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][4], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][4], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][4], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][4], 329.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][4], 1);

		invBox[playerid][5] = CreatePlayerTextDraw(playerid,246.000000, 223.000000, "mover");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][5], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][5], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][5], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][5], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][5], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][5], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][5], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][5], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][5], 329.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][5], 1);

		invBox[playerid][6] = CreatePlayerTextDraw(playerid,246.000000, 239.000000, "vender_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][6], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][6], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][6], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][6], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][6], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][6], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][6], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][6], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][6], 329.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][6], 1);

		invBox[playerid][7] = CreatePlayerTextDraw(playerid,246.000000, 255.000000, "descartar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][7], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][7], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][7], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][7], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][7], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][7], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][7], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][7], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][7], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][7], 329.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][7], 1);

		invBox[playerid][8] = CreatePlayerTextDraw(playerid,246.000000, 271.000000, "separar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][8], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][8], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][8], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][8], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][8], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][8], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][8], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][8], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][8], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][8], 329.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][8], 1);

	}
	if(boxid == 3 || boxid == 18 || boxid == 33 || boxid == 48 || boxid == 63){

		invBox[playerid][0] = CreatePlayerTextDraw(playerid,335.000000, 175.000000, "_");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][0], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][0], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][0], 0.193378, 12.805830);
		PlayerTextDrawColor(playerid,invBox[playerid][0], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][0], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][0], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][0], 0x00000099);
		PlayerTextDrawTextSize(playerid,invBox[playerid][0], 431.000000, 0.000000); //143+96
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][0], 0);

		invBox[playerid][1] = CreatePlayerTextDraw(playerid,336.000000, 175.000000, "Escolha uma opcao"); //4+96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][1], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][1], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][1], 0.193378, 0.905830);
		PlayerTextDrawColor(playerid,invBox[playerid][1], -2139062169);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][1], 0);

        invBox[playerid][2] = CreatePlayerTextDraw(playerid,414.000000, 174.000000, "~r~X"); //126 + 96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][2], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][2], 0.356041, 1.098331);
		PlayerTextDrawColor(playerid,invBox[playerid][2], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][2], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][2], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][2], 0);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawTextSize(playerid,invBox[playerid][2], 580.507568, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][2], 1);

        invBox[playerid][3] = CreatePlayerTextDraw(playerid,342.000000, 190.000000, "usar_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][3], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][3], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][3], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][3], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][3], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][3], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][3], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][3], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][3], 425.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][3], 1);

		invBox[playerid][4] = CreatePlayerTextDraw(playerid,342.000000, 206.000000, "combinar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][4], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][4], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][4], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][4], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][4], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][4], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][4], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][4], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][4], 425.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][4], 1);

		invBox[playerid][5] = CreatePlayerTextDraw(playerid,342.000000, 223.000000, "mover");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][5], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][5], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][5], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][5], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][5], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][5], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][5], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][5], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][5], 425.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][5], 1);

		invBox[playerid][6] = CreatePlayerTextDraw(playerid,342.000000, 239.000000, "vender_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][6], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][6], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][6], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][6], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][6], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][6], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][6], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][6], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][6], 425.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][6], 1);

		invBox[playerid][7] = CreatePlayerTextDraw(playerid,342.000000, 255.000000, "descartar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][7], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][7], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][7], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][7], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][7], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][7], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][7], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][7], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][7], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][7], 425.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][7], 1);

		invBox[playerid][8] = CreatePlayerTextDraw(playerid,342.000000, 271.000000, "separar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][8], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][8], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][8], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][8], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][8], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][8], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][8], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][8], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][8], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][8], 425.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][8], 1);
	}

	if(boxid == 4 || boxid == 19 || boxid == 34 || boxid == 49 || boxid == 64){

		invBox[playerid][0] = CreatePlayerTextDraw(playerid,431.000000, 175.000000, "_");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][0], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][0], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][0], 0.193378, 12.805830);
		PlayerTextDrawColor(playerid,invBox[playerid][0], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][0], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][0], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][0], 0x00000099);
		PlayerTextDrawTextSize(playerid,invBox[playerid][0], 527.000000, 0.000000); //143+96
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][0], 0);

		invBox[playerid][1] = CreatePlayerTextDraw(playerid,432.000000, 175.000000, "Escolha uma opcao"); //4+96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][1], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][1], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][1], 0.193378, 0.905830);
		PlayerTextDrawColor(playerid,invBox[playerid][1], -2139062169);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][1], 0);

        invBox[playerid][2] = CreatePlayerTextDraw(playerid,510.000000, 174.000000, "~r~X"); //126 + 96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][2], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][2], 0.356041, 1.098331);
		PlayerTextDrawColor(playerid,invBox[playerid][2], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][2], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][2], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][2], 0);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawTextSize(playerid,invBox[playerid][2], 580.507568, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][2], 1);

        invBox[playerid][3] = CreatePlayerTextDraw(playerid,438.000000, 190.000000, "usar_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][3], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][3], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][3], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][3], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][3], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][3], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][3], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][3], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][3], 521.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][3], 1);

		invBox[playerid][4] = CreatePlayerTextDraw(playerid,438.000000, 206.000000, "combinar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][4], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][4], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][4], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][4], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][4], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][4], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][4], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][4], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][4], 521.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][4], 1);

		invBox[playerid][5] = CreatePlayerTextDraw(playerid,438.000000, 223.000000, "mover");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][5], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][5], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][5], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][5], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][5], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][5], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][5], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][5], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][5], 521.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][5], 1);

		invBox[playerid][6] = CreatePlayerTextDraw(playerid,438.000000, 239.000000, "vender_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][6], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][6], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][6], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][6], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][6], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][6], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][6], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][6], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][6], 521.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][6], 1);

		invBox[playerid][7] = CreatePlayerTextDraw(playerid,438.000000, 255.000000, "descartar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][7], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][7], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][7], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][7], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][7], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][7], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][7], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][7], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][7], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][7], 521.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][7], 1);

		invBox[playerid][8] = CreatePlayerTextDraw(playerid,438.000000, 271.000000, "separar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][8], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][8], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][8], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][8], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][8], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][8], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][8], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][8], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][8], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][8], 521.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][8], 1);
	}
	if(boxid == 5 || boxid == 20 || boxid == 35 || boxid == 50 || boxid == 65){

	    invBox[playerid][0] = CreatePlayerTextDraw(playerid,47.000000, 258.000000, "_");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][0], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][0], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][0], 0.193378, 12.805830);
		PlayerTextDrawColor(playerid,invBox[playerid][0], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][0], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][0], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][0], 0x00000099);
		PlayerTextDrawTextSize(playerid,invBox[playerid][0], 143.000000, 0.000000); //143+96
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][0], 0);

		invBox[playerid][1] = CreatePlayerTextDraw(playerid,48.000000, 258.000000, "Escolha uma opcao"); //4+96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][1], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][1], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][1], 0.193378, 0.905830);
		PlayerTextDrawColor(playerid,invBox[playerid][1], -2139062169);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][1], 0);

        invBox[playerid][2] = CreatePlayerTextDraw(playerid,126.000000, 257.000000, "~r~X"); //126 + 96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][2], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][2], 0.356041, 1.098331);
		PlayerTextDrawColor(playerid,invBox[playerid][2], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][2], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][2], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][2], 0);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawTextSize(playerid,invBox[playerid][2], 580.507568, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][2], 1);

        invBox[playerid][3] = CreatePlayerTextDraw(playerid,54.000000, 190+83.000000, "usar_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][3], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][3], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][3], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][3], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][3], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][3], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][3], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][3], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][3], 137.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][3], 1);

		invBox[playerid][4] = CreatePlayerTextDraw(playerid,54.000000, 289.000000, "combinar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][4], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][4], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][4], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][4], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][4], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][4], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][4], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][4], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][4], 137.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][4], 1);

		invBox[playerid][5] = CreatePlayerTextDraw(playerid,54.000000, 306.000000, "mover");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][5], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][5], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][5], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][5], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][5], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][5], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][5], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][5], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][5], 137.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][5], 1);

		invBox[playerid][6] = CreatePlayerTextDraw(playerid,54.000000, 322.000000, "vender_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][6], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][6], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][6], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][6], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][6], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][6], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][6], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][6], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][6], 137.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][6], 1);

		invBox[playerid][7] = CreatePlayerTextDraw(playerid,54.000000, 338.000000, "descartar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][7], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][7], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][7], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][7], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][7], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][7], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][7], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][7], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][7], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][7], 137.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][7], 1);

		invBox[playerid][8] = CreatePlayerTextDraw(playerid,54.000000, 354.000000, "separar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][8], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][8], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][8], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][8], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][8], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][8], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][8], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][8], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][8], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][8], 137.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][8], 1);
	}
	if(boxid == 6 || boxid == 21 || boxid == 36 || boxid == 51 || boxid == 66){

		invBox[playerid][0] = CreatePlayerTextDraw(playerid,143.000000, 258.000000, "_");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][0], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][0], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][0], 0.193378, 12.805830);
		PlayerTextDrawColor(playerid,invBox[playerid][0], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][0], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][0], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][0], 0x00000099);
		PlayerTextDrawTextSize(playerid,invBox[playerid][0], 239.000000, 0.000000); //143+96
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][0], 0);

		invBox[playerid][1] = CreatePlayerTextDraw(playerid,144.000000, 258.000000, "Escolha uma opcao"); //4+96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][1], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][1], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][1], 0.193378, 0.905830);
		PlayerTextDrawColor(playerid,invBox[playerid][1], -2139062169);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][1], 0);

        invBox[playerid][2] = CreatePlayerTextDraw(playerid,222.000000, 257.000000, "~r~X"); //126 + 96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][2], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][2], 0.356041, 1.098331);
		PlayerTextDrawColor(playerid,invBox[playerid][2], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][2], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][2], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][2], 0);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawTextSize(playerid,invBox[playerid][2], 580.507568, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][2], 1);

        invBox[playerid][3] = CreatePlayerTextDraw(playerid,150.000000, 190+83.000000, "usar_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][3], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][3], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][3], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][3], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][3], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][3], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][3], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][3], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][3], 233.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][3], 1);

		invBox[playerid][4] = CreatePlayerTextDraw(playerid,150.000000, 289.000000, "combinar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][4], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][4], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][4], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][4], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][4], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][4], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][4], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][4], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][4], 233.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][4], 1);

		invBox[playerid][5] = CreatePlayerTextDraw(playerid,150.000000, 306.000000, "mover");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][5], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][5], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][5], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][5], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][5], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][5], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][5], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][5], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][5], 233.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][5], 1);

		invBox[playerid][6] = CreatePlayerTextDraw(playerid,150.000000, 322.000000, "vender_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][6], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][6], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][6], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][6], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][6], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][6], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][6], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][6], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][6], 233.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][6], 1);

		invBox[playerid][7] = CreatePlayerTextDraw(playerid,150.000000, 338.000000, "descartar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][7], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][7], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][7], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][7], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][7], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][7], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][7], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][7], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][7], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][7], 233.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][7], 1);

		invBox[playerid][8] = CreatePlayerTextDraw(playerid,150.000000, 354.000000, "separar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][8], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][8], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][8], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][8], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][8], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][8], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][8], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][8], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][8], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][8], 233.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][8], 1);
	}
	if(boxid == 7 || boxid == 22 || boxid == 37 || boxid == 52 || boxid == 67){

	    invBox[playerid][0] = CreatePlayerTextDraw(playerid,239.000000, 258.000000, "_");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][0], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][0], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][0], 0.193378, 12.805830);
		PlayerTextDrawColor(playerid,invBox[playerid][0], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][0], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][0], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][0], 0x00000099);
		PlayerTextDrawTextSize(playerid,invBox[playerid][0], 335.000000, 0.000000); //143+96
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][0], 0);

		invBox[playerid][1] = CreatePlayerTextDraw(playerid,240.000000, 258.000000, "Escolha uma opcao"); //4+96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][1], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][1], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][1], 0.193378, 0.905830);
		PlayerTextDrawColor(playerid,invBox[playerid][1], -2139062169);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][1], 0);

        invBox[playerid][2] = CreatePlayerTextDraw(playerid,318.000000, 257.000000, "~r~X"); //126 + 96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][2], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][2], 0.356041, 1.098331);
		PlayerTextDrawColor(playerid,invBox[playerid][2], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][2], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][2], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][2], 0);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawTextSize(playerid,invBox[playerid][2], 580.507568, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][2], 1);

        invBox[playerid][3] = CreatePlayerTextDraw(playerid,246.000000, 190+83.000000, "usar_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][3], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][3], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][3], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][3], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][3], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][3], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][3], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][3], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][3], 329.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][3], 1);

		invBox[playerid][4] = CreatePlayerTextDraw(playerid,246.000000, 289.000000, "combinar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][4], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][4], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][4], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][4], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][4], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][4], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][4], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][4], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][4], 329.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][4], 1);

		invBox[playerid][5] = CreatePlayerTextDraw(playerid,246.000000, 306.000000, "mover");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][5], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][5], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][5], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][5], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][5], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][5], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][5], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][5], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][5], 329.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][5], 1);

		invBox[playerid][6] = CreatePlayerTextDraw(playerid,246.000000, 322.000000, "vender_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][6], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][6], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][6], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][6], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][6], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][6], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][6], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][6], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][6], 329.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][6], 1);

		invBox[playerid][7] = CreatePlayerTextDraw(playerid,246.000000, 338.000000, "descartar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][7], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][7], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][7], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][7], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][7], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][7], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][7], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][7], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][7], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][7], 329.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][7], 1);

		invBox[playerid][8] = CreatePlayerTextDraw(playerid,246.000000, 354.000000, "separar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][8], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][8], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][8], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][8], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][8], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][8], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][8], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][8], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][8], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][8], 329.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][8], 1);
   	}

	if(boxid == 8 || boxid == 23 || boxid == 38 || boxid == 53 || boxid == 68){

		invBox[playerid][0] = CreatePlayerTextDraw(playerid,335.000000, 258.000000, "_");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][0], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][0], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][0], 0.193378, 12.805830);
		PlayerTextDrawColor(playerid,invBox[playerid][0], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][0], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][0], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][0], 0x00000099);
		PlayerTextDrawTextSize(playerid,invBox[playerid][0], 431.000000, 0.000000); //143+96
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][0], 0);

		invBox[playerid][1] = CreatePlayerTextDraw(playerid,336.000000, 258.000000, "Escolha uma opcao"); //4+96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][1], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][1], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][1], 0.193378, 0.905830);
		PlayerTextDrawColor(playerid,invBox[playerid][1], -2139062169);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][1], 0);

        invBox[playerid][2] = CreatePlayerTextDraw(playerid,414.000000, 257.000000, "~r~X"); //126 + 96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][2], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][2], 0.356041, 1.098331);
		PlayerTextDrawColor(playerid,invBox[playerid][2], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][2], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][2], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][2], 0);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawTextSize(playerid,invBox[playerid][2], 580.507568, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][2], 1);

        invBox[playerid][3] = CreatePlayerTextDraw(playerid,342.000000, 190+83.000000, "usar_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][3], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][3], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][3], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][3], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][3], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][3], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][3], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][3], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][3], 425.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][3], 1);

		invBox[playerid][4] = CreatePlayerTextDraw(playerid,342.000000, 289.000000, "combinar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][4], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][4], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][4], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][4], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][4], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][4], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][4], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][4], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][4], 425.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][4], 1);

		invBox[playerid][5] = CreatePlayerTextDraw(playerid,342.000000, 306.000000, "mover");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][5], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][5], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][5], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][5], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][5], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][5], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][5], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][5], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][5], 425.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][5], 1);

		invBox[playerid][6] = CreatePlayerTextDraw(playerid,342.000000, 322.000000, "vender_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][6], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][6], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][6], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][6], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][6], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][6], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][6], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][6], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][6], 425.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][6], 1);

		invBox[playerid][7] = CreatePlayerTextDraw(playerid,342.000000, 338.000000, "descartar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][7], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][7], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][7], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][7], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][7], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][7], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][7], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][7], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][7], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][7], 425.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][7], 1);

		invBox[playerid][8] = CreatePlayerTextDraw(playerid,342.000000, 354.000000, "separar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][8], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][8], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][8], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][8], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][8], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][8], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][8], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][8], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][8], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][8], 425.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][8], 1);
	}

	if(boxid == 9 || boxid == 24 || boxid == 39 || boxid == 54 || boxid == 69){

	    invBox[playerid][0] = CreatePlayerTextDraw(playerid,431.000000, 258.000000, "_");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][0], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][0], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][0], 0.193378, 12.805830);
		PlayerTextDrawColor(playerid,invBox[playerid][0], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][0], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][0], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][0], 0x00000099);
		PlayerTextDrawTextSize(playerid,invBox[playerid][0], 527.000000, 0.000000); //143+96
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][0], 0);

		invBox[playerid][1] = CreatePlayerTextDraw(playerid,432.000000, 258.000000, "Escolha uma opcao"); //4+96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][1], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][1], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][1], 0.193378, 0.905830);
		PlayerTextDrawColor(playerid,invBox[playerid][1], -2139062169);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][1], 0);

        invBox[playerid][2] = CreatePlayerTextDraw(playerid,510.000000, 257.000000, "~r~X"); //126 + 96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][2], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][2], 0.356041, 1.098331);
		PlayerTextDrawColor(playerid,invBox[playerid][2], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][2], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][2], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][2], 0);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawTextSize(playerid,invBox[playerid][2], 580.507568, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][2], 1);

        invBox[playerid][3] = CreatePlayerTextDraw(playerid,438.000000, 190+83.000000, "usar_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][3], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][3], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][3], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][3], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][3], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][3], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][3], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][3], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][3], 521.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][3], 1);

		invBox[playerid][4] = CreatePlayerTextDraw(playerid,438.000000, 289.000000, "combinar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][4], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][4], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][4], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][4], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][4], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][4], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][4], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][4], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][4], 521.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][4], 1);

		invBox[playerid][5] = CreatePlayerTextDraw(playerid,438.000000, 306.000000, "mover");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][5], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][5], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][5], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][5], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][5], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][5], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][5], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][5], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][5], 521.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][5], 1);

		invBox[playerid][6] = CreatePlayerTextDraw(playerid,438.000000, 322.000000, "vender_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][6], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][6], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][6], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][6], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][6], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][6], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][6], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][6], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][6], 521.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][6], 1);

		invBox[playerid][7] = CreatePlayerTextDraw(playerid,438.000000, 338.000000, "descartar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][7], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][7], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][7], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][7], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][7], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][7], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][7], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][7], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][7], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][7], 521.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][7], 1);

		invBox[playerid][8] = CreatePlayerTextDraw(playerid,438.000000, 354.000000, "separar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][8], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][8], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][8], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][8], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][8], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][8], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][8], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][8], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][8], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][8], 521.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][8], 1);
	}
	if(boxid == 10 || boxid == 25 || boxid == 40 || boxid == 55 || boxid == 70){

		invBox[playerid][0] = CreatePlayerTextDraw(playerid,47.000000, 258+83.000000, "_");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][0], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][0], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][0], 0.193378, 12.805830);
		PlayerTextDrawColor(playerid,invBox[playerid][0], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][0], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][0], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][0], 0x00000099);
		PlayerTextDrawTextSize(playerid,invBox[playerid][0], 143.000000, 0.000000); //143+96
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][0], 0);

		invBox[playerid][1] = CreatePlayerTextDraw(playerid,48.000000, 258+83.000000, "Escolha uma opcao"); //4+96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][1], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][1], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][1], 0.193378, 0.905830);
		PlayerTextDrawColor(playerid,invBox[playerid][1], -2139062169);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][1], 0);

        invBox[playerid][2] = CreatePlayerTextDraw(playerid,126.000000, 257+83.000000, "~r~X"); //126 + 96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][2], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][2], 0.356041, 1.098331);
		PlayerTextDrawColor(playerid,invBox[playerid][2], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][2], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][2], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][2], 0);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawTextSize(playerid,invBox[playerid][2], 580.507568, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][2], 1);

        invBox[playerid][3] = CreatePlayerTextDraw(playerid,54.000000, 273+83.000000, "usar_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][3], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][3], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][3], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][3], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][3], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][3], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][3], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][3], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][3], 137.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][3], 1);

		invBox[playerid][4] = CreatePlayerTextDraw(playerid,54.000000, 289+83.000000, "combinar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][4], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][4], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][4], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][4], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][4], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][4], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][4], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][4], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][4], 137.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][4], 1);

		invBox[playerid][5] = CreatePlayerTextDraw(playerid,54.000000, 306+83.000000, "mover");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][5], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][5], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][5], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][5], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][5], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][5], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][5], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][5], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][5], 137.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][5], 1);

		invBox[playerid][6] = CreatePlayerTextDraw(playerid,54.000000, 322+83.000000, "vender_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][6], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][6], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][6], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][6], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][6], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][6], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][6], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][6], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][6], 137.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][6], 1);

		invBox[playerid][7] = CreatePlayerTextDraw(playerid,54.000000, 338+83.000000, "descartar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][7], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][7], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][7], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][7], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][7], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][7], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][7], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][7], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][7], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][7], 137.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][7], 1);

		invBox[playerid][8] = CreatePlayerTextDraw(playerid,54.000000, 354+83.000000, "separar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][8], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][8], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][8], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][8], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][8], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][8], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][8], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][8], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][8], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][8], 137.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][8], 1);
	}

	if(boxid == 11 || boxid == 26 || boxid == 41 || boxid == 56 || boxid == 71){


		invBox[playerid][0] = CreatePlayerTextDraw(playerid,47+96.000000, 258+83.000000, "_");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][0], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][0], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][0], 0.193378, 12.805830);
		PlayerTextDrawColor(playerid,invBox[playerid][0], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][0], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][0], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][0], 0x00000099);
		PlayerTextDrawTextSize(playerid,invBox[playerid][0], 239.000000, 0.000000); //143+96
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][0], 0);

		invBox[playerid][1] = CreatePlayerTextDraw(playerid,144.000000, 258+83.000000, "Escolha uma opcao"); //4+96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][1], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][1], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][1], 0.193378, 0.905830);
		PlayerTextDrawColor(playerid,invBox[playerid][1], -2139062169);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][1], 0);

        invBox[playerid][2] = CreatePlayerTextDraw(playerid,222.000000, 257+83.000000, "~r~X"); //126 + 96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][2], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][2], 0.356041, 1.098331);
		PlayerTextDrawColor(playerid,invBox[playerid][2], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][2], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][2], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][2], 0);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawTextSize(playerid,invBox[playerid][2], 580.507568, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][2], 1);

        invBox[playerid][3] = CreatePlayerTextDraw(playerid,150.000000, 273+83.000000, "usar_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][3], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][3], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][3], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][3], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][3], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][3], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][3], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][3], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][3], 233.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][3], 1);

		invBox[playerid][4] = CreatePlayerTextDraw(playerid,150.000000, 289+83.000000, "combinar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][4], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][4], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][4], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][4], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][4], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][4], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][4], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][4], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][4], 233.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][4], 1);

		invBox[playerid][5] = CreatePlayerTextDraw(playerid,150.000000, 306+83.000000, "mover");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][5], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][5], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][5], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][5], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][5], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][5], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][5], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][5], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][5], 233.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][5], 1);

		invBox[playerid][6] = CreatePlayerTextDraw(playerid,150.000000, 322+83.000000, "vender_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][6], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][6], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][6], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][6], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][6], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][6], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][6], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][6], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][6], 233.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][6], 1);

		invBox[playerid][7] = CreatePlayerTextDraw(playerid,150.000000, 338+83.000000, "descartar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][7], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][7], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][7], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][7], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][7], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][7], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][7], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][7], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][7], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][7], 233.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][7], 1);

		invBox[playerid][8] = CreatePlayerTextDraw(playerid,150.000000, 354+83.000000, "separar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][8], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][8], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][8], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][8], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][8], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][8], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][8], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][8], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][8], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][8], 233.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][8], 1);
	}
	if(boxid == 12 || boxid == 27 || boxid == 42 || boxid == 57 || boxid == 72){

	    invBox[playerid][0] = CreatePlayerTextDraw(playerid,239.000000, 258+83.000000, "_");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][0], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][0], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][0], 0.193378, 12.805830);
		PlayerTextDrawColor(playerid,invBox[playerid][0], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][0], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][0], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][0], 0x00000099);
		PlayerTextDrawTextSize(playerid,invBox[playerid][0], 335.000000, 0.000000); //143+96
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][0], 0);

		invBox[playerid][1] = CreatePlayerTextDraw(playerid,240.000000, 258+83.000000, "Escolha uma opcao"); //4+96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][1], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][1], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][1], 0.193378, 0.905830);
		PlayerTextDrawColor(playerid,invBox[playerid][1], -2139062169);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][1], 0);

        invBox[playerid][2] = CreatePlayerTextDraw(playerid,318.000000, 257+83.000000, "~r~X"); //126 + 96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][2], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][2], 0.356041, 1.098331);
		PlayerTextDrawColor(playerid,invBox[playerid][2], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][2], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][2], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][2], 0);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawTextSize(playerid,invBox[playerid][2], 580.507568, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][2], 1);

        invBox[playerid][3] = CreatePlayerTextDraw(playerid,246.000000, 273+83.000000, "usar_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][3], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][3], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][3], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][3], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][3], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][3], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][3], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][3], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][3], 329.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][3], 1);

		invBox[playerid][4] = CreatePlayerTextDraw(playerid,246.000000, 289+83.000000, "combinar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][4], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][4], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][4], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][4], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][4], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][4], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][4], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][4], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][4], 329.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][4], 1);

		invBox[playerid][5] = CreatePlayerTextDraw(playerid,246.000000, 306+83.000000, "mover");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][5], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][5], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][5], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][5], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][5], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][5], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][5], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][5], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][5], 329.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][5], 1);

		invBox[playerid][6] = CreatePlayerTextDraw(playerid,246.000000, 322+83.000000, "vender_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][6], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][6], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][6], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][6], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][6], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][6], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][6], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][6], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][6], 329.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][6], 1);

		invBox[playerid][7] = CreatePlayerTextDraw(playerid,246.000000, 338+83.000000, "descartar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][7], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][7], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][7], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][7], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][7], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][7], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][7], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][7], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][7], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][7], 329.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][7], 1);

		invBox[playerid][8] = CreatePlayerTextDraw(playerid,246.000000, 354+83.000000, "separar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][8], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][8], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][8], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][8], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][8], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][8], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][8], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][8], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][8], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][8], 329.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][8], 1);
	}
	if(boxid == 13 || boxid == 28 || boxid == 43 || boxid == 58 || boxid == 73){

	    invBox[playerid][0] = CreatePlayerTextDraw(playerid,335.000000, 258+83.000000, "_");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][0], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][0], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][0], 0.193378, 12.805830);
		PlayerTextDrawColor(playerid,invBox[playerid][0], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][0], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][0], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][0], 0x00000099);
		PlayerTextDrawTextSize(playerid,invBox[playerid][0], 431.000000, 0.000000); //143+96
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][0], 0);

		invBox[playerid][1] = CreatePlayerTextDraw(playerid,336.000000, 258+83.000000, "Escolha uma opcao"); //4+96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][1], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][1], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][1], 0.193378, 0.905830);
		PlayerTextDrawColor(playerid,invBox[playerid][1], -2139062169);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][1], 0);

        invBox[playerid][2] = CreatePlayerTextDraw(playerid,414.000000, 257+83.000000, "~r~X"); //126 + 96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][2], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][2], 0.356041, 1.098331);
		PlayerTextDrawColor(playerid,invBox[playerid][2], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][2], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][2], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][2], 0);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawTextSize(playerid,invBox[playerid][2], 580.507568, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][2], 1);

        invBox[playerid][3] = CreatePlayerTextDraw(playerid,342.000000, 273+83.000000, "usar_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][3], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][3], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][3], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][3], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][3], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][3], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][3], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][3], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][3], 425.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][3], 1);

		invBox[playerid][4] = CreatePlayerTextDraw(playerid,342.000000, 289+83.000000, "combinar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][4], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][4], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][4], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][4], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][4], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][4], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][4], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][4], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][4], 425.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][4], 1);

		invBox[playerid][5] = CreatePlayerTextDraw(playerid,342.000000, 306+83.000000, "mover");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][5], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][5], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][5], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][5], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][5], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][5], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][5], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][5], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][5], 425.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][5], 1);

		invBox[playerid][6] = CreatePlayerTextDraw(playerid,342.000000, 322+83.000000, "vender_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][6], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][6], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][6], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][6], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][6], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][6], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][6], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][6], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][6], 425.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][6], 1);

		invBox[playerid][7] = CreatePlayerTextDraw(playerid,342.000000, 338+83.000000, "descartar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][7], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][7], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][7], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][7], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][7], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][7], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][7], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][7], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][7], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][7], 425.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][7], 1);

		invBox[playerid][8] = CreatePlayerTextDraw(playerid,342.000000, 354+83.000000, "separar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][8], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][8], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][8], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][8], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][8], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][8], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][8], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][8], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][8], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][8], 425.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][8], 1);
	}

	if(boxid == 14 || boxid == 29 || boxid == 44 || boxid == 59 || boxid == 74){

	    invBox[playerid][0] = CreatePlayerTextDraw(playerid,431.000000, 258+83.000000, "_");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][0], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][0], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][0], 0.193378, 12.805830);
		PlayerTextDrawColor(playerid,invBox[playerid][0], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][0], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][0], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][0], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][0], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][0], 0x00000099);
		PlayerTextDrawTextSize(playerid,invBox[playerid][0], 527.000000, 0.000000); //143+96
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][0], 0);

		invBox[playerid][1] = CreatePlayerTextDraw(playerid,432.000000, 258+83.000000, "Escolha uma opcao"); //4+96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][1], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][1], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][1], 0.193378, 0.905830);
		PlayerTextDrawColor(playerid,invBox[playerid][1], -2139062169);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][1], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][1], 0);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][1], 0);

	    invBox[playerid][2] = CreatePlayerTextDraw(playerid,510.000000, 257+83.000000, "~r~X"); //126 + 96
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][2], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][2], 0.356041, 1.098331);
		PlayerTextDrawColor(playerid,invBox[playerid][2], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][2], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][2], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][2], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][2], 0);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][2], 255);
		PlayerTextDrawTextSize(playerid,invBox[playerid][2], 580.507568, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][2], 1);

        invBox[playerid][3] = CreatePlayerTextDraw(playerid,438.000000, 273+83.000000, "usar_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][3], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][3], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][3], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][3], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][3], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][3], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][3], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][3], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][3], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][3], 521.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][3], 1);

		invBox[playerid][4] = CreatePlayerTextDraw(playerid,438.000000, 289+83.000000, "combinar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][4], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][4], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][4], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][4], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][4], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][4], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][4], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][4], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][4], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][4], 521.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][4], 1);

		invBox[playerid][5] = CreatePlayerTextDraw(playerid,438.000000, 306+83.000000, "mover");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][5], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][5], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][5], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][5], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][5], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][5], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][5], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][5], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][5], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][5], 521.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][5], 1);

		invBox[playerid][6] = CreatePlayerTextDraw(playerid,438.000000, 322+83.000000, "vender_item");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][6], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][6], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][6], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][6], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][6], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][6], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][6], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][6], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][6], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][6], 521.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][6], 1);

		invBox[playerid][7] = CreatePlayerTextDraw(playerid,438.000000, 338+83.000000, "descartar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][7], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][7], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][7], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][7], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][7], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][7], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][7], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][7], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][7], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][7], 521.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][7], 1);

		invBox[playerid][8] = CreatePlayerTextDraw(playerid,438.000000, 354+83.000000, "separar");
		PlayerTextDrawBackgroundColor(playerid,invBox[playerid][8], 255);
		PlayerTextDrawFont(playerid,invBox[playerid][8], 1);
		PlayerTextDrawLetterSize(playerid,invBox[playerid][8], 0.292708, 1.004999);
		PlayerTextDrawColor(playerid,invBox[playerid][8], -1);
		PlayerTextDrawSetOutline(playerid,invBox[playerid][8], 0);
		PlayerTextDrawSetProportional(playerid,invBox[playerid][8], 1);
		PlayerTextDrawSetShadow(playerid,invBox[playerid][8], 0);
		PlayerTextDrawUseBox(playerid,invBox[playerid][8], 1);
		PlayerTextDrawBoxColor(playerid,invBox[playerid][8], 0x1c1c1bFF);
		PlayerTextDrawTextSize(playerid,invBox[playerid][8], 521.000000, 10.000000);
		PlayerTextDrawSetSelectable(playerid,invBox[playerid][8], 1);
	}
	PlayerTextDrawShow(playerid,invBox[playerid][0]);
 	PlayerTextDrawShow(playerid,invBox[playerid][1]);
 	PlayerTextDrawShow(playerid,invBox[playerid][2]);
    PlayerTextDrawShow(playerid,invBox[playerid][3]);
	PlayerTextDrawShow(playerid,invBox[playerid][4]);
    PlayerTextDrawShow(playerid,invBox[playerid][5]);
    PlayerTextDrawShow(playerid,invBox[playerid][6]);
    PlayerTextDrawShow(playerid,invBox[playerid][7]);
    PlayerTextDrawShow(playerid,invBox[playerid][8]);
    PlayerTextDrawShow(playerid,invText[playerid][0]);
}
BPF::IsAArma(playerid,x)
{
	switch(ArmasGuardadas[playerid][x])
	{
		case 1..46:
		return 1;
	}
	return 0;
}
BPF::IsAGrooveCar(carid)
{
	if((carid >= CarrosGroove[0]) && (carid <= CarrosGroove[sizeof(CarrosGroove)-1]))
	{
		return true;
	}
	return 0;
}
BPF::IsASons(playerid)
{
    	new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==25 || member==25)
		{
		    return true;
		}
		else if(lider==25 || lider==25)
		{
		    return true;
		}
	return 0;
}
BPF::IsASonssCar(carid)
{
	if((carid >= CarrosSons[0]) && (carid <= CarrosSons[sizeof(CarrosSons)-1]))
	{
		return true;
	}
	return 0;
}

BPF::IsAVagos(playerid)
{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==18 || member==18)
		{
		    return true;
		}
		else if(lider==18 || lider==18)
		{
		    return true;
		}
		return 0;
}
BPF::IsAVagosCar(carid)
{
	if((carid >= CarrosVagos[0]) && (carid <= CarrosVagos[sizeof(CarrosVagos)-1]))
	{
		return true;
	}
	return 0;
}
BPF::IsAGATCar(carid)
{
	if((carid >= CarrosGAT[0]) && (carid <= CarrosGAT[sizeof(CarrosGAT)-1]))
	{
		return true;
	}
	return 0;
}
BPF::IsABombeirosCar(carid)
{
	if((carid >= CarrosBombeiros[0]) && (carid <= CarrosBombeiros[sizeof(CarrosBombeiros)-1]))
	{
		return true;
	}
	return 0;
}
BPF::IsABallas(playerid)
{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==17 || member==17)
		{
		    return true;
		}
		else if(lider==17 || lider==17)
		{
		    return true;
		}
		return 0;
}

BPF::IsABallasCar(carid)
{
	if((carid >= CarrosBallas[0]) && (carid <= CarrosBallas[sizeof(CarrosBallas)-1]))
	{
		return true;
	}
	return 0;
}

BPF::IsATaxistaSF(playerid)
{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==30 || member==30)
		{
		    return true;
		}
		else if(lider==30 || lider==30)
		{
		    return true;
		}
		return 0;
}
BPF::IsATaxistaSFCar(carid)
{
	if((carid >= 594) && (carid <= 607))
	{
		return true;
	}
	return 0;
}


BPF::IsAMedicosSF(playerid)
{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==31 || member==31)
		{
		    return true;
		}
		else if(lider==31 || lider==31)
		{
		    return true;
		}
		return 0;
}
BPF::IsAMedicosSFCar(carid)
{
	if((carid >= 608) && (carid <= 617))
	{
		return true;
	}
	return 0;
}

BPF::Kickado(playerid)
{
	new string2[64];
	format(string2, sizeof(string2), Pasta_Contas, PlayerName(playerid));
	if(fexist(string2))
	{
		fremove(string2);
	}
	Kick(playerid);
	return true;
}
BPF::IsAJornalSF(playerid)
{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==32 || member==32)
		{
		    return true;
		}
		else if(lider==32 || lider==32)
		{
		    return true;
		}
		return 0;
}


BPF::IsAMecanic(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==34 || member==34)
		{
		    return true;
		}
		else if(lider==34 || lider==34)
		{
		    return true;
		}
	}
	return 0;
}

BPF::IsAMecanicCar(carid)
{
	if((carid >= CarrosMecan[0]) && (carid <= CarrosMecan[sizeof(CarrosMecan)-1]))
	{
		return true;
	}
	return 0;
}
BPF::IsAPM(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==1 || member==1)
		{
		    return true;
		}
		else if(lider==1 || lider==1)
		{
		    return true;
		}
	}
	return 0;
}

BPF::IsAComandoVermelho(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==19 || member==19)
		{
		    return true;
		}
		else if(lider==19 || lider==19)
		{
		    return true;
		}
	}
	return 0;
}

BPF::IsAAzteca(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==5 || member==5)
		{
		    return true;
		}
		else if(lider==5 || lider==5)
		{
		    return true;
		}
	}
	return 0;
}

BPF::IsAAztecaCar(carid)
{
	if(carid >= CarrosAztecas[0] && carid <= CarrosAztecas[sizeof(CarrosAztecas)-1])
	{
		return true;
	}
	return 0;
}
BPF::IsAAGRCar(carid)
{
	if(carid >= CarrosAGR[0] && carid <= CarrosAGR[sizeof(CarrosAGR)-1])
	{
		return true;
	}
	return 0;
}

BPF::IsAYakuzaCar(carid)
{
	if((carid >= CarrosYakuza[0]) && carid <= CarrosYakuza[sizeof(CarrosYakuza)-1])
	{
		return true;
	}
	return 0;
}


BPF::IsARUSSACar(carid)
{
	if((carid >= CarrosRussa[0]) && carid <= CarrosRussa[sizeof(CarrosRussa)-1])
	{
		return true;
	}
	return 0;
}
BPF::IsAMayan(playerid)
{
    	new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==24)
		{
		    return true;
		}
		else if(lider==24)
		{
		    return true;
		}
	return 0;
}
BPF::IsAMayansCar(carid)
{
	if((carid >= CarrosMayans[0]) && (carid <= CarrosMayans[sizeof(CarrosMayans)-1]))
	{
		return true;
	}
	return 0;
}
BPF::IsAPRCar(carid)
{
	if((carid >= CarrosPR[0]) && (carid <= CarrosPR[sizeof(CarrosPR)-1]))
	{
		return true;
	}
	return 0;
}
BPF::CarrosCivis(carid)
{
	if((carid >= VRC[0]) && (carid <= VRC[sizeof(VRC)-1]))
	{
		return true;
	}
	return 0;
}
BPF::IsAROTACar(carid)
{
	if((carid >= CarrosROTA[0]) && (carid <= CarrosROTA[sizeof(CarrosROTA)-1]))
	{
		return true;
	}
	return 0;
}

//==teste==
BPF::IsAPCCSF(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==24 || member==24)
		{
		    return true;
		}
		else if(lider==24 || lider==24)
		{
		    return true;
		}
	}
	return 0;
}

BPF::IsAPR(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==33 || member==33)
		{
		    return true;
		}
		else if(lider==33 || lider==33)
		{
		    return true;
		}
	}
	return 0;
}


BPF::IsAHelperCar(carid)
{
	if((carid >= CarrosHelpers[0]) && (carid <= CarrosHelpers[sizeof(CarrosHelpers)-1]))
	{
		return true;
	}
	return 0;
}
BPF::IsAPizzaCar(carid)
{
	if((carid >= CarrosPizza[0]) && (carid <= CarrosPizza[sizeof(CarrosPizza)-1]))
	{
		return true;
	}
	return 0;
}
BPF::IsAAlugHeli(carid)
{
	if((carid >= AviaoAlugado[0]) && (carid <= AviaoAlugado[sizeof(AviaoAlugado)-1]))
	{
		return true;
	}
	return 0;
}

//=======================================================
BPF::IsAPCCSFCar(carid)
{
	if((carid >= 508) && (carid <= 518))
	{
		return true;
	}
	return 0;
}
BPF::IsAPCC(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==21 || member==21)
		{
		    return true;
		}
		else if(lider==21 || lider==21)
		{
		    return true;
		}
	}
	return 0;
}
BPF::IsAPCCCar(carid)
{
	if((carid >= CarrosPCC[0]) && (carid <= CarrosPCC[sizeof(CarrosPCC)-1]))
	{
		return true;
	}
	return 0;
}
BPF::IsAMec(playerid)
{
    	new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==34 || member==34)
		{
		    return true;
		}
		else if(lider==34 || lider==34)
		{
		    return true;
		}
		else if(PlayerInfo[playerid][pEmprego] == 5)
		{
			return true;
		}
	return 0;
}
BPF::IsAMecCar(carid)
{
	if((carid >= CarrosDetran[0] && carid <= CarrosDetran[sizeof(CarrosDetran)-1]))
	{
		return true;
	}
	return 0;
}
BPF::IsAROTAs(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==2 || member==2)
		{
		    return true;
		}
		else if(lider==2 || lider==2)
		{
		    return true;
		}
	}
	return 0;
}
BPF::IsAROTAsCar(carid)
{
	if((carid >= CarrosBOPE[0]) && (carid <= CarrosBOPE[sizeof(CarrosBOPE)-1]))
	{
		return true;
	}
	return 0;
}
BPF::IsAEx(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==3 || member==3)
		{
		    return true;
		}
		else if(lider==3 || lider==3)
		{
		    return true;
		}
	}
	return 0;
}

BPF::IsAExCar(carid)
{
	if((carid >= CarrosGN[0]) && (carid <= CarrosGN[sizeof(CarrosGN)-1]))
	{
		return true;
	}
	return 0;
}
BPF::IsARespCar(carid)
{
	if((carid >= VRC[0]) && (carid <= VRC[sizeof(VRC)-1]))
	{
		return true;
	}
	return 0;
}
BPF::IsAHit(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==8 || member==8)
		{
		    return true;
		}
		else if(lider==8 || lider==8)
		{
		    return true;
		}
	}
	return 0;
}


BPF::IsAHitCar(carid)
{
	if((carid >= CarrosHitman[0]) && (carid <= CarrosHitman[sizeof(CarrosHitman)-1]))
	{
		return true;
	}
	return 0;
}
BPF::IsABikeCar(carid)
{
    new lolololol = GetVehicleModel(carid);
	if(lolololol == 462 || lolololol == 510)
	{
		return 1;
	}
	return 0;
}
//----------MISSEIS
stock CreateMissleLauncher ( Float: X , Float: Y , Float: Z )
{
    MisslePositions [ MAX_MISSLES ] [ 0 ] = X;
    MisslePositions [ MAX_MISSLES ] [ 1 ] = Y;
    MisslePositions [ MAX_MISSLES ] [ 2 ] = Z;

    new missleid = MAX_MISSLES;

	MAX_MISSLES = MAX_MISSLES += 1;

	return missleid;
}

//==============================================================================

stock Float: GetDistanceBetweenTwoPoints ( Float: X , Float: Y , Float: Z , Float: X2 , Float: Y2 , Float: Z2 )
{
    return floatsqroot ( floatpower ( floatabs ( floatsub ( X , X2 ) ) , 2 ) + floatpower ( floatabs ( floatsub ( Y , Y2 ) ) , 2 ) + floatpower ( floatabs ( floatsub ( Z , Z2 ) ) , 2 ) );
}

//==============================================================================

stock GetDistanceToPoint ( playerid , Float: X ,Float: Y , Float: Z )
{
	new Float: X2 , Float: Y2 , Float: Z2;

	GetPlayerPos ( playerid , X2 , Y2 , Z2 );

	return floatround ( GetDistanceBetweenTwoPoints ( X , Y , Z , X2 , Y2 , Z2 ) );
}

//==============================================================================

BPF::MissleFly ( )
{
	for ( new missleid = 0; missleid < MAX_MISSLES; missleid ++ )
	{
        if ( IsValidObject ( Missle [ missleid ] ) )
		{
            new Float: X, Float: Y, Float: Z;

			GetVehiclePos ( gLastCar[MissleChase [ missleid ]] , X , Y , Z );
            if(GetPlayerVirtualWorld(MissleChase [ missleid ]) == 15)
			{
				TextDrawHideForPlayer ( MissleChase [ missleid ] , RocketWarning );
				PlayerTextDrawHide ( MissleChase [ missleid ] , RocketMsgWarning[MissleChase [ missleid ]] );
				TextDrawShowForPlayer ( MissleChase [ missleid ] , RocketWarning );
				PlayerTextDrawShow ( MissleChase [ missleid ] , RocketMsgWarning[MissleChase [ missleid ]] );
			}
			else{
	   			continue;
			}

			GetXYInFrontOfPlayer ( gLastCar[MissleChase [ missleid ]] , X , Y , 5 );

			TargetPos [ missleid ] [ 0 ] = floatround ( X );
			TargetPos [ missleid ] [ 1 ] = floatround ( Y );
			TargetPos [ missleid ] [ 2 ] = floatround ( Z + 3 );

			MoveDynamicObject ( Missle [ missleid ] , X , Y , Z , 90 );

            GetObjectPos ( Missle [ missleid ] , X , Y , Z );

            RemovePlayerMapIcon ( Missle [ missleid ] , MissleIcons [ Missle [ missleid ] ] );

            SetPlayerMapIcon( MissleChase [ missleid ] , MissleIcons [ Missle [ missleid ] ] , X , Y , Z , 0 , 0xFF0000AA );

            new Float: health;

            GetPlayerHealth ( MissleChase [ missleid ] , health );

		    if ( GetDistanceBetweenTwoPoints ( X , Y , Z , TargetPos [ missleid ] [ 0 ] , TargetPos [ missleid ] [ 1 ] , TargetPos [ missleid ] [ 2 ] ) < 6 || health < 1 )
		    {
                DestroyMissle ( Missle [ missleid ] );
            }
		}
	}
}

//==============================================================================

stock DestroyMissle ( missleid )
{
    new Float: X, Float: Y, Float: Z;

    GetObjectPos ( missleid , X , Y , Z );

    DestroyObject ( missleid );

    CreateExplosion ( X , Y , Z , 6 , 10 );

    RemovePlayerMapIcon ( MissleChase [ MissleIcons [ missleid ] ] , MissleIcons [ missleid ] );

    TextDrawHideForPlayer ( MissleChase [ missleid ] , RocketWarning );
    PlayerTextDrawHide ( MissleChase [ missleid ] , RocketMsgWarning[MissleChase [ missleid ]] );
}

//==============================================================================

BPF::MissleLaunch ( )
{
  	for ( new playerid = 0; playerid < MAX_PLAYERS; playerid ++ )
	{
		new totallaunched;

	    for ( new missleid = 0; missleid < MAX_MISSLES; missleid ++ )
	    {
	        if ( GetDistanceToPoint ( playerid , MisslePositions [ missleid ] [ 0 ] , MisslePositions [ missleid ] [ 1 ] , MisslePositions [ missleid ] [ 2 ] ) < 300 )
	        {
				if ( IsPlayerInAnyVehicle ( playerid ) && IsAircraft ( GetPlayerVehicleID ( playerid ) ) )
				{
					if (PlayerInfo[playerid][pAdmin] >= 1)
					{
						if ( LaunchAt == 1 )
						{
                            totallaunched = 1;
						}
					}
                    if(GetPlayerVirtualWorld(playerid) != 15)
					{
						if ( LaunchAt == 1 )
						{
                            totallaunched = 1;
						}
					}
					if ( !IsValidObject ( Missle [ missleid ] ) && totallaunched == 0 )
					{
						new Float: X, Float: Y, Float: Z;

						GetVehiclePos ( gLastCar[playerid] , X , Y , Z );

						TargetPos [ missleid ] [ 0 ] = floatround ( X );
						TargetPos [ missleid ] [ 1 ] = floatround ( Y );
						TargetPos [ missleid ] [ 2 ] = floatround ( Z );

                        MissleChase [ missleid ] = playerid;

						totallaunched = totallaunched = 1;

						Missle [ missleid ] = CreateObject ( 354 , MisslePositions [ missleid ] [ 0 ] , MisslePositions [ missleid ] [ 1 ] , MisslePositions [ missleid ] [ 2 ] , 0 , 0 , 0 );

						MoveObject ( Missle [ missleid ] , X , Y , Z , 15 );

						MissleIcons [ Missle [ missleid ] ] = missleid;
    				}
				}
	        }
	    }
	}
}

//==============================================================================

stock IsAircraft ( vehicleid )
{
	switch ( GetVehicleModel ( vehicleid ) )
	{
        case
		    465,425,417,497,563,592,
            548,577,511,512,501,447,
		    460,513,520,469,487,488,
            553,464,476,519,593,539
        :
        {
			return 1;
        }
	}
	return 0;
}

BPF::IsAVIP(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new vip = PlayerInfo[playerid][pVIP];
	    if(vip >= 1)
		{
		    return true;
		}
	}
	return 0;
}
BPF::GaragemDpClosed2()
{
	MoveDynamicObject(PDDOORb,250.774871 , 60.822799 , 1003.640625, 2);//
	return true;
}
BPF::gasolina(playerid)
{
	new string[128];
    new vehicle = GetPlayerVehicleID(playerid);
    new Nick[MAX_PLAYER_NAME];
    GetPlayerName(playerid, Nick, sizeof(Nick));
	new Wanted = WantedPoints[playerid];
    SendClientMessage(playerid, COLOR_YELLOW2, "| Computador De Bordo |");
    format(string, sizeof(string), "  Motorista: %s", Nick);
    SendClientMessage(playerid, COLOR_WHITE, string);
    format(string, sizeof(string), "  Veiculo: %s", NomeCarro[vehicle]);
    SendClientMessage(playerid, COLOR_WHITE, string);
    format(string, sizeof(string), "  Combustivel: %d", Gas[vehicle]);
    SendClientMessage(playerid, COLOR_WHITE, string);
    format(string, sizeof(string), "  Nível De Procura: %d", Wanted);
    SendClientMessage(playerid, COLOR_WHITE, string);
    format(string, sizeof(string), "  Horas: %d", hour);
    SendClientMessage(playerid, COLOR_WHITE, string);
    Gas[vehicle]--;
    return true;
}
BPF::GaragemDpClosed()
{
	MoveDynamicObject(PDDOORa,247.005905 , 72.448440 , 1003.640625, 2);//GaragemClosed
	return true;
}
BPF::fecharbanco()
{
	MoveDynamicObject(portabanco, 2144.2, 1627.1, 994.29999,2);
}
BPF::fecharnavio()
{
	MoveObject(portanavio, -1422, 494.5, 4.8,3);
}
BPF::fecharnavio2()
{
	MoveObject(portanavio2, -1383, 1494.1, 2,3);
}
BPF::PCClosed()
{
    MoveDynamicObject(PDDOORb,248.142105 , 78.125961 , 1003.640625, 2);//CelaClosed
	return true;
}
BPF::pd1()
{
	MoveDynamicObject(PDDOORc,248.142105 , 78.125961 , 1003.640625, 2);//GaragemClosed
	return true;
}
BPF::pd2()
{
    foreach(Player, playerid)
	{
	    if(ObjectMovePlayer[playerid] == 0)
	    {
			PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
		}
	}
	MoveDynamicObject(PDPMLS,1546.8681640625, -1627.3585205078, 15.156204223633, 2);//PlatformClosed
	return true;
}
BPF::pd3()
{
    foreach(Player, playerid)
	{
	    if(ObjectMovePlayer[playerid] == 0)
	    {
			PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
		}
	}
	MoveDynamicObject(PDGARAGE,1588.195,-1637.969,15.193, 2);//PlatformClosed
	return true;
}
BPF::pdppe()
{
    foreach(Player, playerid)
	{
	    if(ObjectMovePlayer[playerid] == 0)
	    {
			PlayerPlaySound(playerid, 6000, 0.0, 0.0, 0.0);
		}
	}
	MoveDynamicObject(PDPE,-1456.71191, 501.31519, 16.94300, 2);//GaragemClosed
	return true;
}
BPF::pdppe2()
{
    foreach(Player, playerid)
	{
	    if(ObjectMovePlayer[playerid] == 0)
	    {
			PlayerPlaySound(playerid, 6000, 0.0, 0.0, 0.0);
		}
	}
	MoveDynamicObject(PDPE2,-1414.45007, 516.45117, 16.67820, 2);//GaragemClosed
	return true;
}
BPF::pdppe3()
{
    foreach(Player, playerid)
	{
	    if(ObjectMovePlayer[playerid] == 0)
	    {
			PlayerPlaySound(playerid, 6000, 0.0, 0.0, 0.0);
		}
	}
	MoveDynamicObject(PDPE3,-1465.86194, 501.18259, 1.30320, 2);//GaragemClosed
	return true;
}
BPF::pd4()
{
	MoveDynamicObject(PDELEVATOR,1549.049804 , -1697.787109 , 12.5514954, 2);//GaragemClosed
	return true;
}
BPF::pdpe()
{
	MoveDynamicObject(PDPMLS,1546.8681640625, -1627.3585205078, 15.156204223633, 2);//GaragemClosed
	return true;
}
BPF::PDEx2()
{
    foreach(Player, playerid)
	{
	    if(ObjectMovePlayer[playerid] == 0)
	    {
			PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
		}
	}
	MoveDynamicObject(PDEx,-1531.3978271484, 482.25979614258, 8.9530792236328, 2);//GATEClosed
	return true;
}
public IsAtBlackBusStop(playerid)
{
    if(IsPlayerConnected(playerid))
	{
    	if(IsPlayerInRangeOfPoint(playerid,2.0,1567.0966,-1725.4755,13.6260) || IsPlayerInRangeOfPoint(playerid,2.0,1544.9990,-1739.0458,13.6260) || IsPlayerInRangeOfPoint(playerid,2.0,1503.9716,-1027.7617,23.7701)
    	   || IsPlayerInRangeOfPoint(playerid,2.0,1440.3242,-1040.7060,23.9073) || IsPlayerInRangeOfPoint(playerid,2.0,1188.8359,-1354.6279,13.6483) || IsPlayerInRangeOfPoint(playerid,2.0,1212.8427,-1327.8398,13.6470)
    	   || IsPlayerInRangeOfPoint(playerid,2.0,861.7125,-1313.3009,13.6260) || IsPlayerInRangeOfPoint(playerid,2.0,850.6757,-1333.9707,13.6153) || IsPlayerInRangeOfPoint(playerid,2.0,393.6944,-1766.2702,5.6197)
    	   || IsPlayerInRangeOfPoint(playerid,2.0,1705.5898,-1805.8476,13.5300))
		{
			return 1;
		}
	}
	return 0;
}

public ResetView(playerid)
{
	TogglePlayerSpectating(playerid, 0);
    SetPlayerInterior(playerid, 1);
    SetPlayerPos(playerid, Playerx[playerid], Playery[playerid], Playerz[playerid]);
    SetPlayerFacingAngle(playerid, Playera[playerid]);
    SetPlayerSkin(playerid, PlayerSkin[playerid]);
    SetCameraBehindPlayer(playerid);
    if(PlayerSitting[playerid] == 1)
    {
        ApplyAnimation(playerid,"PED","SEAT_idle",30.0,1,0,0,0,0);
    }
    if(BusID[playerid] == 1)
    {
        SetPlayerVirtualWorld(playerid, 2);
    }
    else
    {
        SetPlayerVirtualWorld(playerid, 3);
    }
    Playerx[playerid] = 0;
}

public CPOff(playerid)
{
	DisablePlayerCheckpoint(playerid);
}

BPF::gt3GATE2()
{
    foreach(Player, playerid)
	{
	    if(ObjectMovePlayer[playerid] == 0)
	    {
			PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
		}
	}
	MoveDynamicObject(gt3GATE,283.095062, -1542.899170, 25.510294, 2);//GATEClosed
	MoveDynamicObject(gt3GATE3,321.832672, -1488.615112, 25.527353, 2);//GATEClosed
	return true;
}

BPF::PoliciaFederalClosed()
{
    foreach(Player, playerid)
	{
	    if(ObjectMovePlayer[playerid] == 0)
	    {
			PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
		}
	}
	MoveDynamicObject(PortaoPF1,938.79999, -1027.27185, 33.66320,3);
	return 1;
}
BPF::ROTAAAAAClosed()
{
    foreach(Player, playerid)
	{
	    if(ObjectMovePlayer[playerid] == 0)
	    {
			PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
		}
	}
	MoveDynamicObject(PortaoPRO1,1810.06274, -1750.33496, 15.31620,3);
	return 1;
}
BPF::PTPMSF()
{
	MoveDynamicObject(PortaoPMSF,-1571.8000488281,661.09997558594,6.6999998092651, 2);//GATEClosed
	return true;
}
BPF::PortaoReporter2() {
	foreach(Player, playerid)
	{
	    if(ObjectMovePlayer[playerid] == 0)
	    {
			PlayerPlaySound(playerid, 1035, 0.0, 0.0, 0.0);
		}
	}
	MoveDynamicObject(PortaoReporter,777.80017089844, -1330.2664794922, 14.200000762939, 2);//Portao Reporter Closed
	return true;
}
BPF::PortaoRally2() {
	MoveDynamicObject(PortaoRally,-2368.4670410156, -2192.6381835938, 36.037666320801, 2);//Portao Rally Closed
	return true;
}
public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
    // Check if it moved far
    if(GetVehicleDistanceFromPoint(vehicleid, new_x, new_y, new_z) > 50)
    {
        // Reject the update
        return 0;
    }
	if(GetVehicleVelocity(vehicleid, vel_x, vel_y, vel_z) > 290)
	{
        // Reject the update
        return 0;
    }
    return 1;
}
public Contagem1(playerid)
{
	if(desafiou[playerid] == 1)
	{
	     SetPlayerPos(playerid, 329.4488,-64.4878,1001.5156);
	}
	else if(desafiado[playerid] == 1)
	{
	     SetPlayerPos(playerid, 304.9204,-63.9410,1001.5156);
	}
	TogglePlayerControllable(playerid, 0);
	PlayAudioStreamForPlayer(playerid, "http://198.50.237.87/sons/2.mp3");
	SetTimerEx("Contagem2", 1500, 0, "i", playerid);
}
public Contagem2(playerid)
{
	if(desafiou[playerid] == 1)
	{
	     SetPlayerPos(playerid, 329.4488,-64.4878,1001.5156);
	}
	else if(desafiado[playerid] == 1)
	{
	     SetPlayerPos(playerid, 304.9204,-63.9410,1001.5156);
	}
	TogglePlayerControllable(playerid, 0);
	PlayAudioStreamForPlayer(playerid, "http://198.50.237.87/sons/3.mp3");
	SetTimerEx("Contagem3", 1500, 0, "i", playerid);
}
public Contagem3(playerid)
{
	if(desafiou[playerid] == 1)
	{
	     SetPlayerPos(playerid, 329.4488,-64.4878,1001.5156);
	}
	else if(desafiado[playerid] == 1)
	{
	     SetPlayerPos(playerid, 304.9204,-63.9410,1001.5156);
	}
	TogglePlayerControllable(playerid, 0);
	PlayAudioStreamForPlayer(playerid, "http://198.50.237.87/sons/4.mp3");
	SetTimerEx("Contagem4", 1500, 0, "i", playerid);
}
public Contagem4(playerid)
{
	if(desafiou[playerid] == 1)
	{
	     SetPlayerPos(playerid, 329.4488,-64.4878,1001.5156);
	}
	else if(desafiado[playerid] == 1)
	{
	     SetPlayerPos(playerid, 304.9204,-63.9410,1001.5156);
	}
	TogglePlayerControllable(playerid, 0);
	PlayAudioStreamForPlayer(playerid, "http://198.50.237.87/sons/5.mp3");
	SetTimerEx("Contagem5", 1500, 0, "i", playerid);
}
public Contagem5(playerid)
{
	PlayAudioStreamForPlayer(playerid, "http://198.50.237.87/sons/go.mp3");
	TogglePlayerControllable(playerid, 1);
	SendClientMessage(playerid, COLOR_GRAD1, "O Duelo foi iniciado, boa sorte!");
}
public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	if( InTeste[playerid])
	{
	    SendClientMessage(playerid, AMARELO_COR, "[Auto Escola]: Você bateu o veiculo, dirija com cuidado.");
	    SetPVarInt(playerid, "WarnningDamage", GetPVarInt(playerid, "WarnningDamage")+1);
		return 1;
	}

	if(!IsAPlane(vehicleid)){

		new Float:health;
			GetVehicleHealth(GetPlayerVehicleID(playerid),health);
		if(health < 250 && health > 1){

			new mot, lu, alar, por, cap, porma, ob;
			GetVehicleParamsEx(vehicleid, mot, lu, alar, por, cap, porma, ob);
            SetVehicleHealth(GetPlayerVehicleID(playerid), 301);
			SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, lu, alar, por, cap, porma, ob);
			SendClientMessage(playerid, COLOR_LIGHTRED, "* O motor do seu veiculo quebrou, chame um mecânico (/servico mecanico) !");
			GameTextForPlayer(playerid, "Motor Quebrou!", 5000, 1);
		}
	}
    if(Blindagem[vehicleid] <= 2)
	{
	    Blindagem[vehicleid] = 0;
	    Cblindado[vehicleid] = 0;
	}
	if(Cblindado[vehicleid] >= 1)
	{
		new perda = random(5);
  		Blindagem[vehicleid] -= perda;
 		return RepairVehicleWithBomber(vehicleid);
	}
 CheckCarHealth(playerid);
	return true;
}


stock RepairVehicleWithBomber(vehicleid)
{
	PegouF[vehicleid] = 0;
	DestroyObject(Fogando[vehicleid]);
	Fogando[vehicleid] = 0;
	return RepairVehicle(vehicleid);
}

static stock IsPlayerAiming(playerid, aimid)
{
	new Float:X1, Float:Y1, Float:Z1, Float:X2, Float:Y2, Float:Z2;
	GetPlayerPos(playerid, X1, Y1, Z1);
	GetPlayerPos(aimid, X2, Y2, Z2);
	new Float:Distance = floatsqroot(floatpower(floatabs(X1-X2), 2) + floatpower(floatabs(Y1-Y2), 2));
	if(Distance < 350)
	{
		new Float:A;
		GetPlayerFacingAngle(playerid, A);
		X1 += (Distance * floatsin(-A, degrees));
		Y1 += (Distance * floatcos(-A, degrees));
		Distance = floatsqroot(floatpower(floatabs(X1-X2), 2) + floatpower(floatabs(Y1-Y2), 2));
		if(Distance < SENSETIVE)
		{
			return true;
		}
	}
	return false;
}

//------------------------------------------------------------------------------------------------------

static stock IsPlayerAimingNew(playerid, aimid)
{
	new Float:X1, Float:Y1, Float:Z1, Float:X2, Float:Y2, Float:Z2;
	GetPlayerPos(playerid, X1, Y1, Z1);
	GetPlayerPos(aimid, X2, Y2, Z2);
	new Float:Distance = floatsqroot(floatpower(floatabs(X1-X2), 2) + floatpower(floatabs(Y1-Y2), 2));
	if(Distance < 350 && GetPlayerWeapon(aimid) != 0)
	{
		new Float:A;
		GetPlayerFacingAngle(playerid, A);
		X1 += (Distance * floatsin(-A, degrees));
		Y1 += (Distance * floatcos(-A, degrees));
		Distance = floatsqroot(floatpower(floatabs(X1-X2), 2) + floatpower(floatabs(Y1-Y2), 2));
		if(Distance < SENSETIVE)
		{
			format(string,32,"Yes");
			return string;
		}
	}
	format(string,32,"No");
	return string;
}
static stock IsPlayerAimingNew2(playerid, aimid)
{
	new Float:X1, Float:Y1, Float:Z1, Float:X2, Float:Y2, Float:Z2;
	GetPlayerPos(playerid, X1, Y1, Z1);
	GetPlayerPos(aimid, X2, Y2, Z2);
	new Float:Distance = floatsqroot(floatpower(floatabs(X1-X2), 2) + floatpower(floatabs(Y1-Y2), 2));
	if(Distance < 350)
	{
		new Float:A;
		GetPlayerFacingAngle(playerid, A);
		X1 += (Distance * floatsin(-A, degrees));
		Y1 += (Distance * floatcos(-A, degrees));
		Distance = floatsqroot(floatpower(floatabs(X1-X2), 2) + floatpower(floatabs(Y1-Y2), 2));
		if(Distance < 1.5)
		{
			return true;
		}
	}
	return false;
}



static stock GetName(playerid)
{
	new Name[24];
	GetPlayerName(playerid,Name,MAX_PLAYER_NAME);
	return Name;
}
static stock BadSymbols(striing[])
{
	new result[24];
	for (new i; i < strlen(striing); i++)
	{
		switch(striing[i])
		{
			case '[':result[i] = '(';
			case ']':result[i] = ')';
			default:result[i]=striing[i];
		}
	}
	return result;
}
static stock ReturnWeaponName(weaponid)
{
	new weaponname[32];
	GetWeaponName(weaponid,weaponname,32);
	return weaponname;
}
CMD:ajustar(playerid)
{
	if(!IsPlayerInRangeOfPoint(playerid, 1.0, 1153.661376,-1324.407592,-44.283576))
		return SendClientMessage(playerid, COLOR_GRAD1, "Você não esta na area de ajuste dos pacientes.");

	if(GetPlayerOrg(playerid) == 4)
	{
	    new string[128];
	    new In_Hosp = 0;
	    MEGAString[0] = EOS;
	    foreach(Character, i)
	    {
	        if(PlayerInfo[i][pHospital])
	        {
	            Hosp_Dialog[playerid][In_Hosp] = i;
	            format(string, sizeof string, "Hospitalizado: %s [%d segundos]\n", NomePlayer(i), PlayerInfo[i][pTempoHospital]);
				strcat(MEGAString, string);
				In_Hosp ++;
			}
	    }
	    if(In_Hosp == 0)return SendClientMessage(playerid, COLOR_GRAD1, "Ninguém esta hospitalizado neste hospital.");
	    ShowPlayerDialog(playerid, 5587, DIALOG_STYLE_LIST, "Hospitalizados neste hospital", MEGAString, "Ajustar", "Sair");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, " Apenas médicos podem acessar esta area.");
	return true;
}
stock ShowAdvogado(playerid, delegacia)
{
	if(PlayerInfo[playerid][pEmprego] == 2 && !PlayerInfo[playerid][pJailed])
	{
	    new string[128];
	    new In_Preso = 0;
	    MEGAString[0] = EOS;
	    foreach(Character, i)
	    {
	        if(PlayerInfo[i][pJailed] == delegacia)
	        {
	            Preso_Dialog[playerid][In_Preso] = i;
	            format(string, sizeof string, "Preso: %s [%d segundos]\n", NomePlayer(i), PlayerInfo[i][pJailTime]);
				strcat(MEGAString, string);
				In_Preso ++;
			}
	    }
	    if(In_Preso == 0)return SendClientMessage(playerid, COLOR_GRAD1, "Ninguém esta preso nessa delegacia.");
	    ShowPlayerDialog(playerid, 4587, DIALOG_STYLE_LIST, "Presos nessa delegacia", MEGAString, "Ajustar", "Sair");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Você nao é um advogado.");
	return true;
}

CMD:showul(playerid)
{
	new org = GetPlayerOrg(playerid);
	if(org < 1)return true;
	MEGAString[0] = EOS;

	new string[MAX_STRING];
	strcat(MEGAString, "{FF0000}|_____________[ Líderes ]_____________|\n");
//--------------- Lideres -----------------
	if(!strcmp(InfoOrg[org][Lider], "Ninguém", true)) strcat(MEGAString, "Líder: Ninguém - Login: Nunca\n");
	else format(string, 128, "Líder: %s - Login: %s\n", InfoOrg[org][Lider], InfoOrg[org][UL_Lider]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][SubLider], "Ninguém", true)) strcat(MEGAString, "1° Sub-Líder: Ninguém - Login: Nunca\n");
	else format(string, 128, "1° Sub-Líder: %s - Login: %s\n", InfoOrg[org][SubLider], InfoOrg[org][UL_SubLider]),strcat(MEGAString, string);

//--------------- Membros ------------------
	strcat(MEGAString, "{FF0000}|_____________[ Membros ]_____________|\n");
	if(!strcmp(InfoOrg[org][Membro1], "Ninguém", true)) strcat(MEGAString, "Membro 1: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 1: %s - Login: %s\n", InfoOrg[org][Membro1], InfoOrg[org][UL_Membro1]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro2], "Ninguém", true)) strcat(MEGAString, "Membro 2: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 2: %s - Login: %s\n", InfoOrg[org][Membro2], InfoOrg[org][UL_Membro2]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro3], "Ninguém", true)) strcat(MEGAString, "Membro 3: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 3: %s - Login: %s\n", InfoOrg[org][Membro3], InfoOrg[org][UL_Membro3]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro4], "Ninguém", true)) strcat(MEGAString, "Membro 4: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 4: %s - Login: %s\n", InfoOrg[org][Membro4], InfoOrg[org][UL_Membro4]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro5], "Ninguém", true)) strcat(MEGAString, "Membro 5: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 5: %s - Login: %s\n", InfoOrg[org][Membro5], InfoOrg[org][UL_Membro5]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro6], "Ninguém", true)) strcat(MEGAString, "Membro 6: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 6: %s - Login: %s\n", InfoOrg[org][Membro6], InfoOrg[org][UL_Membro6]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro7], "Ninguém", true)) strcat(MEGAString, "Membro 7: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 7: %s - Login: %s\n", InfoOrg[org][Membro7], InfoOrg[org][UL_Membro7]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro8], "Ninguém", true)) strcat(MEGAString, "Membro 8: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 8: %s - Login: %s\n", InfoOrg[org][Membro8], InfoOrg[org][UL_Membro8]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro9], "Ninguém", true)) strcat(MEGAString, "Membro 9: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 9: %s - Login: %s\n", InfoOrg[org][Membro9], InfoOrg[org][UL_Membro9]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro10], "Ninguém", true)) strcat(MEGAString, "Membro 10: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 10: %s - Login: %s\n", InfoOrg[org][Membro10], InfoOrg[org][UL_Membro10]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro11], "Ninguém", true)) strcat(MEGAString, "Membro 11: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 11: %s - Login: %s\n", InfoOrg[org][Membro11], InfoOrg[org][UL_Membro11]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro12], "Ninguém", true)) strcat(MEGAString, "Membro 12: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 12: %s - Login: %s\n", InfoOrg[org][Membro12], InfoOrg[org][UL_Membro12]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro13], "Ninguém", true)) strcat(MEGAString, "Membro 13: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 13: %s - Login: %s\n", InfoOrg[org][Membro13], InfoOrg[org][UL_Membro13]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro14], "Ninguém", true)) strcat(MEGAString, "Membro 14: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 14: %s - Login: %s\n", InfoOrg[org][Membro14], InfoOrg[org][UL_Membro14]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro15], "Ninguém", true)) strcat(MEGAString, "Membro 15: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 15: %s - Login: %s\n", InfoOrg[org][Membro15], InfoOrg[org][UL_Membro15]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro16], "Ninguém", true)) strcat(MEGAString, "Membro 16: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 16: %s - Login: %s\n", InfoOrg[org][Membro16], InfoOrg[org][UL_Membro16]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro17], "Ninguém", true)) strcat(MEGAString, "Membro 17: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 17: %s - Login: %s\n", InfoOrg[org][Membro17], InfoOrg[org][UL_Membro17]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro18], "Ninguém", true)) strcat(MEGAString, "Membro 18: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 18: %s - Login: %s\n", InfoOrg[org][Membro18], InfoOrg[org][UL_Membro18]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro19], "Ninguém", true)) strcat(MEGAString, "Membro 19: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 19: %s - Login: %s\n", InfoOrg[org][Membro19], InfoOrg[org][UL_Membro19]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro20], "Ninguém", true)) strcat(MEGAString, "Membro 20: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 20: %s - Login: %s\n", InfoOrg[org][Membro20], InfoOrg[org][UL_Membro20]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro21], "Ninguém", true)) strcat(MEGAString, "Membro 21: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 21: %s - Login: %s\n", InfoOrg[org][Membro21], InfoOrg[org][UL_Membro21]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro22], "Ninguém", true)) strcat(MEGAString, "Membro 22: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 22: %s - Login: %s\n", InfoOrg[org][Membro22], InfoOrg[org][UL_Membro22]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro23], "Ninguém", true)) strcat(MEGAString, "Membro 23: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 23: %s - Login: %s\n", InfoOrg[org][Membro23], InfoOrg[org][UL_Membro23]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro24], "Ninguém", true)) strcat(MEGAString, "Membro 24: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 24: %s - Login: %s\n", InfoOrg[org][Membro24], InfoOrg[org][UL_Membro24]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro25], "Ninguém", true)) strcat(MEGAString, "Membro 25: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 25: %s - Login: %s\n", InfoOrg[org][Membro25], InfoOrg[org][UL_Membro25]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro26], "Ninguém", true)) strcat(MEGAString, "Membro 26: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 26: %s - Login: %s\n", InfoOrg[org][Membro26], InfoOrg[org][UL_Membro26]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro27], "Ninguém", true)) strcat(MEGAString, "Membro 27: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 27: %s - Login: %s\n", InfoOrg[org][Membro27], InfoOrg[org][UL_Membro27]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro28], "Ninguém", true)) strcat(MEGAString, "Membro 28: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 28: %s - Login: %s\n", InfoOrg[org][Membro28], InfoOrg[org][UL_Membro28]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro29], "Ninguém", true)) strcat(MEGAString, "Membro 29: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 29: %s - Login: %s\n", InfoOrg[org][Membro29], InfoOrg[org][UL_Membro29]),strcat(MEGAString, string);
	if(!strcmp(InfoOrg[org][Membro30], "Ninguém", true)) strcat(MEGAString, "Membro 30: Ninguém - Login: Nunca\n");
	else format(string, 128, "Membro 30: %s - Login: %s\n", InfoOrg[org][Membro30], InfoOrg[org][UL_Membro30]),strcat(MEGAString, string);
	ShowPlayerDialog(playerid, 4502, DIALOG_STYLE_MSGBOX, "Último Login dos Membros", MEGAString, #Voltar, #Voltar);
	//printf("%d", strlen(MEGAString));
	return true;
}


CALLBACK:: eContinuar(playerid)
{
	new Float: Vel[3];

	GetPlayerVelocity(playerid, Vel[0], Vel[1], Vel[2]);
	SetPlayerVelocity(playerid, Vel[0], Vel[1], Vel[2] + 120.0);

    ApplyAnimation(playerid, "FOOD","FF_Sit_Loop", 4.0, 1, 1, 1, 0, 0);

	return 1;
}

stock IsPlaneInAir(planeid)
{
	new Float: pos[4];
	GetVehiclePos(planeid, pos[0], pos[1], pos[2]);

 MapAndreas_FindZ_For2DCoord(pos[0], pos[1], pos[3]);

	if(floatsub(pos[2], pos[3]) > 20) return 1;

	return 0;
}

CALLBACK:: eTerminar(playerid, vehicleid, explode)
{
	KillTimer(eEjet[playerid]);
	ClearAnimations(playerid);

	RemovePlayerAttachedObjectEx(playerid, Vaga_Ejetar);
	RemovePlayerAttachedObjectEx(playerid, Vaga_Ejetar2);

	if(!VeiculoOcupado(vehicleid)) SetVehicleHealth(vehicleid, 0.0);

	return 1;
}
new Float:Progress[MAX_PLAYERS];
BPF::UpdateEquiparTimer(playerid){

	if(GetPVarInt(playerid, "Equipando")){

		new string[256];
		PlayerTextDrawTextSize(playerid, textEquipar[playerid][1], 239+ (10 * ++Progress[playerid]), 1.0);
		PlayerTextDrawShow(playerid, textEquipar[playerid][1]);
		if(Progress[playerid] == 20.0){

            dialogEquipar(playerid);
            format(string, sizeof(string), "* %s equipou-se na caixa de equipamentos", NomePlayer(playerid));
			SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você pegou alguns equipamentos da caixa!");
			Atualizar3Dtexts();
			PlayerTextDrawTextSize(playerid, textEquipar[playerid][1], 239, 1.0);
   Progress[playerid] = 0.0;
		}
		if(Progress[playerid] < 100.0) SetTimerEx("UpdateEquiparTimer", 130, false, "i", playerid);
		return 1;
	}
	return 1;
}
public OnPlayerKeyStateChange(playerid,newkeys,oldkeys)
{
   if(InfoSkate[playerid][sActive] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
		static bool:act;
		SetPlayerArmedWeapon(playerid,0);
		if(newkeys & KEY_HANDBRAKE)
        {
			#if MODE_SKATE == 0
			// medium speed
			ApplyAnimation(playerid, "SKATE","skate_run",4.1,1,1,1,1,1,1);
			#else
			// fast speed
            ApplyAnimation(playerid,"SKATE","skate_idle",4.1,0,1,1,1,1);
		//	ApplyAnimation(playerid, "SKATE","skate_sprint",4.1,1,1,1,1,1,1);
			#endif
			if(!act)
            {
			act = true;
			RemovePlayerAttachedObject(playerid,INDEX_SKATE);
			DestroyObject(InfoSkate[playerid][sSkate]);
			InfoSkate[playerid][sSkate] = CreateObject(19878,0,0,0,0,0,0);
			AttachObjectToPlayer(InfoSkate[playerid][sSkate],playerid, -0.2,0,-0.9,0,0,90);
		}
	}
	if(oldkeys & KEY_HANDBRAKE){
			ApplyAnimation(playerid, "CARRY","crry_prtial",4.0,0,0,0,0,0);
			if(act){
				act = false;
				DestroyObject(InfoSkate[playerid][sSkate]);
				RemovePlayerAttachedObject(playerid,INDEX_SKATE);
				#if TYPE_SKATE == 0
				// the skate is placed on the right arm
				SetPlayerAttachedObject(playerid,INDEX_SKATE,19878,6,-0.055999,0.013000,0.000000,-84.099983,0.000000,-106.099998,1.000000,1.000000,1.000000);
				#else
				// the skate is placed in the back
				SetPlayerAttachedObject(playerid,INDEX_SKATE,19878,1,0.055999,-0.173999,-0.007000,-95.999893,-1.600010,24.099992,1.000000,1.000000,1.000000);
				#endif
			}
		}
	}
	new string[128];
	if(HOLDING(4))
    {
        if (PlayerInfo[playerid][pEmprego] == 14)//Extintor Segurado
		{
		    if(GetPlayerWeapon(playerid) == 42)
            {
		        if(EmpregoDuty[playerid] == 1)
		        {
			        SetTimerEx("CheckFogoBomb", 750, false, "i", playerid);
			        Apagando[playerid] = 1;
		        }
		        else
		        {
		            //SendClientMessage(playerid, COLOR_GREY, "Entre em serviço primeiro! (/batercartao)");
		        }
	        }
        if(takingselfie[playerid] == 1)
	{
		if(PRESSED(KEY_ANALOG_RIGHT))
		{
			GetPlayerPos(playerid,lX[playerid],lY[playerid],lZ[playerid]);
			static Float: n1X, Float: n1Y;
		    if(Degree[playerid] >= 360) Degree[playerid] = 0;
		    Degree[playerid] += Speed;
		    n1X = lX[playerid] + Radius * floatcos(Degree[playerid], degrees);
		    n1Y = lY[playerid] + Radius * floatsin(Degree[playerid], degrees);
		    SetPlayerCameraPos(playerid, n1X, n1Y, lZ[playerid] + Heigh);
		    SetPlayerCameraLookAt(playerid, lX[playerid], lY[playerid], lZ[playerid]+1);
		    SetPlayerFacingAngle(playerid, Degree[playerid] - 90.0);
		}
		if(PRESSED(KEY_ANALOG_LEFT))
		{
		    GetPlayerPos(playerid,lX[playerid],lY[playerid],lZ[playerid]);
			static Float: n1X, Float: n1Y;
		    if(Degree[playerid] >= 360) Degree[playerid] = 0;
		    Degree[playerid] -= Speed;
		    n1X = lX[playerid] + Radius * floatcos(Degree[playerid], degrees);
		    n1Y = lY[playerid] + Radius * floatsin(Degree[playerid], degrees);
		    SetPlayerCameraPos(playerid, n1X, n1Y, lZ[playerid] + Heigh);
		    SetPlayerCameraLookAt(playerid, lX[playerid], lY[playerid], lZ[playerid]+1);
		    SetPlayerFacingAngle(playerid, Degree[playerid] - 90.0);
		}
	}
         if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 407)
            {
		        if(EmpregoDuty[playerid] == 1)
		        {
			        SetTimerEx("CheckFogoBomb", 750, false, "i", playerid);
			        Apagando[playerid] = 1;
		        }
		        else
		        {
		            //SendClientMessage(playerid, COLOR_GREY, "Entre em serviço primeiro! (/batercartao)");
		        }
	        }
		}
    }
    if(RELEASED(4))//Extintor solto
    {
        Apagando[playerid] = 0;
        TextDrawHideForPlayer(playerid, TextdrawBomb[playerid]);
    }
    if(newkeys == KEY_SUBMISSION || newkeys == KEY_FIRE)
    {
        if (!gPlayerLogged[playerid])
		{
        	SelectTextDraw(playerid, 0xAAAAAAFF);
		}
    }
    if(newkeys & KEY_FIRE)
	{
		if(InTaser[playerid] == true)
		{
 			ApplyAnimation(playerid,"KNIFE","knife_3",4.1,0,1,1,0,0,1);
      		SetTimerEx("TimerClear",2000,false,"d",playerid);
		    new damagedid = GetClosestPlayer(playerid);
			if(IsPlayerConnected(damagedid))
	     	{
	        	if(GetDistanceBetweenPlayers(playerid,damagedid) < 2)
	            {
	            	new Float:health;
	                GetPlayerHealth(damagedid, health);
	                if(health > 5.0) SetPlayerHealth(damagedid, health - 5.0);
					format(string, sizeof(string), "INFO: %s(ID: %d) levou um choque de taser de %s(ID: %d).", NomePlayer(damagedid),damagedid,NomePlayer(playerid),playerid);
					SendClientMessageInRange(30.0, damagedid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SendClientMessage(damagedid, COLOR_YELLOW, "Você levou um choque de taser, está inconsciente!");
					GameTextForPlayer(damagedid, "~r~Inconsciente", 2500, 3);
					Controle(damagedid, 0);
					ApplyAnimation(damagedid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
					PlayerCuffed[damagedid] = 1;
					antihands[damagedid] = 1;
					PlayerCuffedTime[damagedid] = 20;
					SetPlayerDrunkLevel(damagedid, GetPlayerDrunkLevel(damagedid) + 10000);
					RemovePlayerAttachedObjectEx(playerid,Vaga_Taser);
            		InTaser[playerid] = false;
            		RemoveArmament(playerid);
	                return 1;
	             }
	         }
         }
	}
		if((newkeys == KEY_WALK)){
	}
	for(new i; i < MAX_CAIXASEQUIPAMENTOS; ++i){

        if(CaixaEquipamentos[i][caCreated] && IsPlayerInRangeOfPoint(playerid, 2, CaixaEquipamentos[i][caX], CaixaEquipamentos[i][caY], CaixaEquipamentos[i][caZ])){

        	if(PRESSED(KEY_YES)){

                SetPVarInt(playerid, "Equipando", 1);
        		SetTimerEx("UpdateEquiparTimer", 130, false, "i", playerid);
				PlayerTextDrawShow(playerid, textEquipar[playerid][0]);
				PlayerTextDrawShow(playerid, textEquipar[playerid][1]);
			}
			else{

                SetPVarInt(playerid, "Equipando", 0);
                PlayerTextDrawHide(playerid, textEquipar[playerid][0]);
				PlayerTextDrawHide(playerid, textEquipar[playerid][1]);
				PlayerTextDrawTextSize(playerid, textEquipar[playerid][1], 239, 1.0);
				Progress[playerid] = 0.0;
			}
		}
	}
   	if((newkeys == KEY_SECONDARY_ATTACK))
    {
        if(IsPlayerInAnyVehicle(playerid))
        {
            if (PlayerToPoint(30.0, playerid,616.7890,-74.8150,997.8872))
            {
                return 1;
            }
            if (PlayerToPoint(30.0, playerid,617.5709,-1.9912,1000.6075))
            {
                return 1;
            }
            if (PlayerToPoint(30.0, playerid,615.2846,-124.2390,997.6894))
            {
                return 1;
            }
            if (PlayerToPoint(30.0, playerid,617.6002,-1.9676,1000.6074))
            {
                return 1;
            }
            if (PlayerToPoint(30.0, playerid,617.6149,-1.9330,1000.6208))
            {
                return 1;
            }
            if (PlayerToPoint(50.0, playerid,1776.9175,-1715.3833,-63.5029))
            {
                return 1;
            }
            if (PlayerToPoint(50.0, playerid,1788.9662,-1703.8810,-63.5040))
            {
                return 1;
            }
            if (PlayerToPoint(50.0, playerid,1797.9019,-1703.8895,-62.3884))
            {
                return 1;
            }
        }
        for(new i; i<1000; i++)
	    {
		    if(IsValidDynamicObject(SistemaCaixa[i][CaixaObj]))
		    {
				if(IsPlayerInRangeOfPoint(playerid, 2, SistemaCaixa[i][CaixaX],SistemaCaixa[i][CaixaY],SistemaCaixa[i][CaixaZ]))
				{
				    new cuu;
				    if(!strcmp(NomePlayer(playerid), SistemaCaixa[i][CaixaDono])) cuu = 1;
				    if(cuu == 0) return SendClientMessage(playerid,-1,"Você não é o dono desta Caixa de Itens !");
					new Float:p[3];
					GetPlayerPos(playerid, p[0],p[1],p[2]);
					SetPlayerPos(playerid, p[0],p[1],p[2]);

					new str1[300];
					format(str1,300,"{ffffff}Caixa de %s	Itens: {00ff00}%d/50",NomePlayer(playerid),ItemsCaixa(i));
					SetPVarInt(playerid,"idcaixa",i);
					ShowPlayerDialog(playerid, 14741, 2, str1, "Guardar Item\nPegar Item\nEditar Caixa\nDesmontar Caixa", "Ok", "Fechar");

		        	return 1;
		     	}
			}
		}
		if(PlayerToPoint(1.0,playerid,247.8818,71.5204,1003.6406))
		{
            ApplyAnimation(playerid, "HEIST9","USE:_SwipeCard", 4.0, 0, 0, 0, 0, 0);
      		SetTimerEx("LimparAnim", 2000, false, "i", playerid);
            ForT:pp(playerid, #);
		}
		if(PlayerToPoint(1.0,playerid,245.3457,73.8463,1003.6406))
		{
            ApplyAnimation(playerid, "HEIST9","USE:_SwipeCard", 4.0, 0, 0, 0, 0, 0);
      		SetTimerEx("LimparAnim", 2000, false, "i", playerid);
            ForT:pp7(playerid, #);
		}
		if(PlayerToPoint(1.0,playerid,249.0358,74.6236,1003.6406) || PlayerToPoint(1.0,playerid,247.4305,77.2490,1003.6406))
		{
      		ApplyAnimation(playerid, "HEIST9","USE:_SwipeCard", 4.0, 0, 0, 0, 0, 0);
      		SetTimerEx("LimparAnim", 2000, false, "i", playerid);
            ForT:pv(playerid, #);
		}
		if(PlayerToPoint(1.0,playerid,249.9555,64.5031,1003.6406) || PlayerToPoint(1.0,playerid,251.3744,64.5719,1003.6406))
		{
      		ApplyAnimation(playerid, "HEIST9","USE:_SwipeCard", 4.0, 0, 0, 0, 0, 0);
      		SetTimerEx("LimparAnim", 2000, false, "i", playerid);
            ForT:pr(playerid, #);
		}
		if(PlayerToPoint(1.0,playerid,2008.6317,-1449.6309,13.5822))
		{
      		ApplyAnimation(playerid,"CASINO","Slot_lose_out", 4.0, 0, 0, 0, 0, 0);
			SetPlayerPos(playerid, 2008.6317,-1449.6309,13.5822);
			SetPlayerFacingAngle(playerid, 183.4328);
			ApplyAnimation(playerid, "HEIST9","USE:_SwipeCard", 4.0, 0, 0, 0, 0, 0);
			ApplyAnimation(playerid, "HEIST9","USE:_SwipeCard", 4.0, 0, 0, 0, 0, 0);
      		SetTimerEx("LimparAnim", 2000, false, "i", playerid);
			SetTimerEx("AnimSS", 200, false, "i", playerid);
		}
		if(NaCamera[playerid] > 3) ForT:cameras(playerid, #);
	}

	if(newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED)
	{
 		ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff", 4.1, 0, 1, 1, 0, 0);
	}
	if(newkeys & KEY_JUMP)
	{
	    timejump[playerid] = GetTickCount()+450;
	}
	if(newkeys == KEY_FIRE && GetPVarInt(playerid,"SeFudeu") == 1)
    {
    	GetPlayerPos(playerid, Ax, Bx, Cx);
	    for(new i; i < MAX_PLAYERS; i++)
    	{
			if(IsPlayerInRangeOfPoint(i,8.0,Ax,Bx,Cx))
			{
				SetPlayerHealth(i,0);
			}
		}
		new Nick[MAX_PLAYER_NAME];
		GetPlayerName(playerid, Nick, sizeof(Nick));
    	CreateExplosion(Ax, Bx, Cx, 6, 50.0);
    	StopPlayerHoldingObject(playerid);
	    SetPVarInt(playerid, "Explodir", 0);
	    SetPVarInt(playerid, "SeFudeu", 0);
	    printf("[Terrorista] Usou Homem Bomba");
	    format(string, sizeof(string), "Terrorista: %s se explodiu !", Nick);
 		SendClientMessageToAll(GetPlayerColor(playerid), string);
    }
    if(newkeys == 16 && Inenforcer[playerid])
	{
	    if(PlayerCuffed[playerid] == 2)
	    {
	        return 1;
	    }
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		Watching[playerid] = 1;
		PutPlayerInVehicle(playerid, Inenforcer[playerid], 3);
		RemovePlayerFromVehicle(playerid);
		Inenforcer[playerid] = 0;
	}
	if(newkeys & KEY_YES)
	{
	    if(IsPlayerInAnyVehicle(playerid)){
	    	ForT:motor(playerid);
		}
		if(SendoAbordado[playerid] == 1){

			format(string, 128, "*%s aceitou sua abordagem!", PlayerName(playerid));
			SendClientMessage(SendoAbordadoPor[playerid], COLOR_LIGHTBLUE, string);

			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você aceitou a ordem de abordagem do oficial, aguarde o mesmo liberar você!");
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);

			format(string, 128, "Voce esta abordando %s, reviste o mesmo e escolha~n~uma opcao abaixo", PlayerName(playerid));
			PlayerTextDrawSetString(SendoAbordadoPor[playerid], textAbordagem[playerid][2], string);
			PlayerTextDrawSetString(SendoAbordadoPor[playerid], textAbordagem[playerid][4], #Y = Para liberar o meliante~n~N = Para dar voz de prisao);

			PolicialAbordagem[SendoAbordadoPor[playerid]] = 1;
			Abordando[SendoAbordadoPor[playerid]] = playerid;

			Controle(playerid, 0);

		    for(new i; i < sizeof(textAbordagem); ++i){

				PlayerTextDrawHide(playerid, textAbordagem[playerid][i]);
				PlayerTextDrawShow(SendoAbordadoPor[playerid], textAbordagem[playerid][i]);
			}
		}
		if(PolicialAbordagem[playerid] == 1){

		    SendClientMessage(Abordando[playerid], COLOR_LIGHTBLUE, "* Você foi liberado pelo oficial !");
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você liberou o cidadão da abordagem !");
			format(string, sizeof(string), "*O oficial %s liberou %s.", PlayerName(playerid), PlayerName(Abordando[playerid]));
			SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

			Controle(Abordando[playerid], 1);

			SendoAbordado[Abordando[playerid]] = 0;
			SendoAbordadoPor[Abordando[playerid]] = 999;
			PolicialAbordagem[playerid] = 999;
			Abordando[playerid] = 999;

            for(new i; i < sizeof(textAbordagem); ++i)
			PlayerTextDrawHide(playerid, textAbordagem[playerid][i]);
		}
		return 1;
	}
	if(newkeys & KEY_NO)
	{
	   if(SendoAbordado[playerid] == 0){

		  cmd_inventario(playerid);
		  ForT:dinv(playerid);
	  	}

	  	if(SendoAbordado[playerid] == 1){

	  	    format(string, 128, "*%s não aceitou sua abordagem!", PlayerName(playerid));
			SendClientMessage(SendoAbordadoPor[playerid], COLOR_LIGHTBLUE, string);

			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você não aceitou a ordem de abordagem do oficial!");

			SetPlayerCriminal(playerid, SendoAbordadoPor[playerid], "Desobediencia a ordem policial");
	  	}
	}
	if(Pixando[playerid] == false && IsAGang(playerid) && GetPlayerWeapon(playerid) == 41 && (newkeys & KEY_FIRE ) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
			    for(new i = 0; i < MAX_PIX; i ++)
				{
			 		if(PlayerToPoint(3.0, playerid,Pixacao[i][PixX],Pixacao[i][PixY],Pixacao[i][PixZ]))
			 		{
					    Pixando[playerid] = true;
					    new wep,ammo;
					    GetPlayerWeaponData(playerid, 9, wep, ammo);
					    SetTimerEx("GetAmmo",3500,false, "iiiii", playerid,9,wep,ammo,i);
				    }
			    }
	}
	if(Pixando[playerid] == false && IsACop(playerid) && GetPlayerWeapon(playerid) == 41 && (newkeys & KEY_FIRE ) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
 	    for(new i = 0; i < MAX_PIX; i ++)
		{
			if(PlayerToPoint(3.0, playerid,Pixacao[i][PixX],Pixacao[i][PixY],Pixacao[i][PixZ]))
			{
				Pixando[playerid] = true;
				new wep,ammo;
				GetPlayerWeaponData(playerid, 9, wep, ammo);
				SetTimerEx("GetAmmo2",3500,false, "iiiii", playerid,9,wep,ammo,i);
			}
		}
	}
	if((newkeys & KEY_SPRINT) && IsPlayerInAnyLanchonete(playerid) && GetPlayerCameraMode(playerid) == 15){

	    if(GetTickCount() >  GetPVarInt(playerid, "varLanchonete")){

	        FomeChange(playerid, 20.0);

	        SetPVarInt(playerid, "varLanchonete", GetTickCount()+1500);
	    }
	}
    if(newkeys & 16 && !IsPlayerInAnyVehicle(playerid))
    {
        ForT:enterexit(playerid, #);
		ForT:parma(playerid);
		ForT:pitem(playerid);
		for(new i; i < MAX_FAMILIAS; i++){

		    if(FamiliaInfo[i][fVIP] == 1 && IsPlayerInRangeOfPoint(playerid, 5.0, FamiliaInfo[i][fSpawnX], FamiliaInfo[i][fSpawnY], FamiliaInfo[i][fSpawnZ])){

				ShowPlayerDialog(playerid, 2509, DIALOG_STYLE_LIST, "Família VIP", "Equipar", "Selecionar", "Cancelar");
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 1479.0106,-1656.6260,14.0469)){

			ShowPlayerDialog(playerid, DIALOG_ID_ANUNCIO, DIALOG_STYLE_LIST, "Anuncio cash", "Ver anuncios\nAnunciar cash\nRemover meu anuncio", "Selecionar", "Cancelar");
		}

        if(HouseEntered[playerid] != 500){

	        ForT:furtarmovel(playerid);
	    }
	    showDialogMovel(playerid);

		for(new x; x != MAX_SOUNDS; x++){

		    if(SomInfo[x][somCreated] && IsPlayerInRangeOfPoint(playerid, 1.8, SomInfo[x][somX], SomInfo[x][somY], SomInfo[x][somZ]) && SomInfo[x][somID] == playerid){

		        destroyPlayerSound(playerid);

				format(string, sizeof(string), "* %s desligou seu rádio portátil.", NomePlayer(playerid));
				SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

    			PlayerInfo[playerid][pComRadio] = true;
                new id = CountAttachedObjects(playerid);
    			SetPlayerAttachedObject(playerid,id,2226,5,0.394999,0.045000,0.027000,-25.299999,-101.699974);
                SetPlayerAttachedObjectEx(2226,Vaga_Radio,playerid,id);
				ApplyAnimation(playerid,"BOMBER","BOM_Plant_2Idle",4.1,0,1,1,0,0);

				break;
			}
		}
		if(IsPlayerInSprunk(playerid))
		{

			if(gettime() < GetPVarInt(playerid, #VarFloodsprunk))
			{
			    Controle(playerid, 1);
			    SendClientMessage(playerid, COLOR_GRAD1, #Você não pode comprar um sprunk com tanta frequencia);
			}
			else
			{
		        SetPVarInt(playerid, #VarFloodsprunk, gettime()+5);
			    new Float:lif;
			    GetPlayerHealth(playerid, lif);
			    SetPlayerHealth(playerid, lif+20);

			    GiveDinheiro(playerid, -50);
			    GameTextForPlayer(playerid, "~r~Sprunk: -R$50", 5000, 1);

				format(string, sizeof(string), "* %s comprou um sprunk.", NomePlayer(playerid));
				SendClientMessageInRange(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

                ApplyAnimation(playerid,"VENDING","VEND_Use",4.1,0,1,1,0,0);
			}
		}

		if(PlayerToPoint(1.0, playerid,-26.8017,-89.5741,1003.5469) || PlayerToPoint(1.0, playerid,3.1651,-29.0123,1003.5494) || PlayerToPoint(1.0, playerid,-22.2540,-55.6456,1003.5469) || PlayerToPoint(1.0, playerid,-22.3265,-138.4765,1003.5469) || PlayerToPoint(1.0, playerid,-30.3140,-28.3121,1003.5573))
		{
            ForT:kingh350(playerid);
		}
		if(PlayerToPoint(2.0, playerid,203.7803,-43.2660,1001.8047))
		{
            ForT:kingh360(playerid);
		}
		if(PlayerToPoint(3.0, playerid,1672.4163,-1120.3656,24.2059))
		{
            ForT:comprarvei(playerid);
		}
		if(PlayerToPoint(2.0, playerid,941.9509,2176.7710,1011.0234))
		{
            ForT:mercnegrinho(playerid, #);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 383.2118,-2039.1803,7.8359))
		{
		    if(GetPlayerOrg(playerid) != 12 && GetPlayerOrg(playerid) != 13 && GetPlayerOrg(playerid) != 11)return SendClientMessage(playerid, COLOR_GRAD1, "Você não é um mafioso ou PF.");
		    if(donomafia == GetPlayerOrg(playerid)){
		        if(GetPlayerOrg(playerid) == 11) {
		        	ShowPlayerDialog(playerid, 4708, DIALOG_STYLE_LIST, "Menu Policia Federal",
			    	"Equipar", "Selecionar", "Cancelar");
					Controle(playerid, 1);
				}
				else {
		        	ShowPlayerDialog(playerid, 4708, DIALOG_STYLE_LIST, "Menu Mafia",
			    	"Equipar\nPegar Materiais", "Selecionar", "Cancelar");
					Controle(playerid, 1);
				}
		    }
		    else {
			    ShowPlayerDialog(playerid, 4709, DIALOG_STYLE_LIST, "Menu Mafia",
			    "Dominar este territorio", "Selecionar", "Cancelar");
				Controle(playerid, 1);
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1918.7303,173.7474,37.2722))
		{
  			if(PlayerInfo[playerid][pEmprego] == 21)
			{
			    if(!GetPVarInt(playerid, "AGRTrampando")){

					SendClientMessage(playerid, COLOR_YELLOW, "* Voce agora esta trabalhando de agricultor.");
				    if(PlayerInfo[playerid][pSex] == 1)SetPlayerSkin(playerid, 78);
				    else SetPlayerSkin(playerid, 77);
				    SetPVarInt(playerid, "AGRTrampando", 1);
				    new id = CountAttachedObjects(playerid);
				    SetPlayerAttachedObject(playerid,id,337,6,0.097999,0.076999,0.011000,172.699859,-4.799996,89.199981,1.000000,0.629000,0.678000);
                    SetPlayerAttachedObjectEx(337,Vaga_Pa,playerid,id);
				}
				else{

				    SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]);
                    SetPVarInt(playerid, "AGRTrampando", 0);
                    SendClientMessage(playerid, COLOR_YELLOW, "* Voce agora não esta mais trabalhando de agricultor.");
					DisablePlayerCheckpoint(playerid);
					CP[playerid]=0;
					RemovePlayerAttachedObjectEx(playerid, Vaga_Pa);
				}
			}
			else
			    SendClientMessage(playerid, COLOR_GRAD1, "Você nao é um agricultor.");
		}

        else if(PlayerToPoint(2,playerid,2776.4653,-1601.4407,10.9219) || PlayerToPoint(2,playerid, 2269.6248,-2353.0330,13.5469))
        {
			TogglePlayerControllable(playerid, 1);
        	ForT:disfarceex2014(playerid);
        }

        else if(PlayerToPoint(2,playerid,-103.9931,-22.0508,1000.7188))
        {
        	ForT:sexshop(playerid, #);
        }
        else if(PlayerToPoint(2,playerid,1496.7891,-1661.0364,14.0469))
        {
        	ForT:lojavip(playerid, #);
        }
        else if(PlayerToPoint(2,playerid,1209.4342,-1752.2078,13.5936))
        {
        	ForT:arenax1(playerid);
        }
        else if(PlayerToPoint(2,playerid,1166.1776,-1323.0372,-44.2836))
        {
        	ForT:conthosp(playerid, #);
        }
        else if(PlayerToPoint(2,playerid,266.2977,1770.7728,9998.9424))
        {
        	ForT:rmdiofarmacia60(playerid, #);
        }
      	else if(PlayerToPoint(2,playerid,224.2144,120.6683,999.1013) || PlayerToPoint(2,playerid,2266.5122,-135.1880,26.4619))
        {
        	ForT:cameras(playerid, #);
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2.0, 268.4154,77.2977,1001.0391))
        {
            ShowAdvogado(playerid, 1);
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2.0, 198.2904,179.1829,1003.0306) && storeexit[playerid] == 2)
        {
            ShowAdvogado(playerid, 2);
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2.0, 198.2904,179.1829,1003.0306) && storeexit[playerid] == 11)
        {
            ShowAdvogado(playerid, 11);
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2.0, 198.2904,179.1829,1003.0306) && storeexit[playerid] == 16)
        {
            ShowAdvogado(playerid, 16);
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2.0, 219.8365,115.7170,999.0156))
        {
            ShowAdvogado(playerid, 33);
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2262.2190,1942.6266,39.3827))
        {
            ShowAdvogado(playerid, 24);
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1409.6361,-20.7472,1000.9229))
        {
            ShowAdvogado(playerid, 25);
        }
        else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1153.661376,-1324.407592,-44.283576))
        {
            ForT:ajustar(playerid);
        }
        if(PlayerToPoint(2.0,playerid,goldx,goldy,goldz) && Eventogold[playerid] == 1)
        {
              if(admtrampando[playerid] > 0)
              {
		            SendClientMessage(playerid, COLOR_GRAD1, "Administradores não podem participar do evento gold escondido !");
		            return 1;
		      }
              new location[MAX_ZONE_NAME];
              GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
              PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
              DestroyPickup(gold);
              for(new i = 0; i < MAX_PLAYERS; i++)
              {
                   GameTextForPlayer(i, "~r~Surpresa encontrada", 5000, 3);
                   Eventogold[i] = 0;
                   DestroyPickup(gold);
              }
              SendClientMessage(playerid, 0x1E90FFFF, "Você encontrou a Caixa Reveillon, para abri-lá use: /inventario !");
              format(string, sizeof(string), "[{FFFFFF}Spawn Surpresa{1E90FF}]: %s pegou uma {2E37F3}Caixa Surpresa Reveillon{1E90FF} em %s.",PlayerName(playerid),location);
              SendClientMessageToAll(0x1E90FFFF,string);
                            for(new i = 0; i<75; i++)
                {
 	               if(InventarioInfo[playerid][i][iSlot] == 19382)
	              {
		  		   InventarioInfo[playerid][i][iSlot] = 19059;
		  	       InventarioInfo[playerid][i][iUnidades] = 1;
		  	       return 1;
		  		  	   }
		  		      }
        }
        if(PlayerToPoint(2.0,playerid,bpfx,bpfy,bpfz) && Eventobpf[playerid] == 1)
        {
              if(admtrampando[playerid] > 0)
              {
		            SendClientMessage(playerid, COLOR_GRAD1, "Administradores não podem participar do evento bpf escondido !");
		            return 1;
		      }
              new location[MAX_ZONE_NAME];
              GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
              PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
              DestroyPickup(bpf);
              foreach(Player, i)
              {
                   GameTextForPlayer(i, "~r~Surpresa encontrada", 5000, 3);
                   Eventobpf[i] = 0;
                   DestroyPickup(bpf);
              }
              SendClientMessage(playerid, 0x1E90FFFF, "Você encontrou a Caixa Surpresa Gigante, para abri-lá use: /inventario !");
              format(string, sizeof(string), "[{FFFFFF}Spawn Surpresa{1E90FF}]: %s pegou uma {FFFFFF}Caixa Surpresa Gigante{1E90FF} em %s.",PlayerName(playerid),location);
              SendClientMessageToAll(0x1E90FFFF,string);
              for(new i = 0; i<75; i++)
                {
 	               if(InventarioInfo[playerid][i][iSlot] == 19382)
	              {
		  		   InventarioInfo[playerid][i][iSlot] = 19057;
		  	       InventarioInfo[playerid][i][iUnidades] = 1;
		  	       return 1;
		  		  	   }
		  		      }
        }
        if(PlayerToPoint(2.0,playerid,maletax,maletay,maletaz) && Eventomaleta[playerid] == 1)
        {
              if(admtrampando[playerid] > 0)
              {
		            SendClientMessage(playerid, COLOR_GRAD1, "Administradores não podem participar do evento Maleta !");
		            return 1;
		      }
              new location[MAX_ZONE_NAME];
              GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
              PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
              DestroyPickup(maleta);
              foreach(Player, i)
              {
                   GameTextForPlayer(i, "~r~Surpresa encontrada", 5000, 3);
                   Eventomaleta[i] = 0;
                   DestroyPickup(maleta);
              }
              SendClientMessage(playerid, 0x1E90FFFF, "Você encontrou a Maleta, para abri-lá use: /inventario !");
              format(string, sizeof(string), "[{FFFFFF}Spawn Surpresa{1E90FF}]: %s pegou uma {47EE0B}Maleta{1E90FF} em %s.",PlayerName(playerid),location);
              SendClientMessageToAll(0x1E90FFFF,string);
              for(new i = 0; i<75; i++)
                {
 	               if(InventarioInfo[playerid][i][iSlot] == 19382)
	              {
		  		   InventarioInfo[playerid][i][iSlot] = 1210;
		  	       InventarioInfo[playerid][i][iUnidades] = 1;
		  	       return 1;
		  		  	   }
		  		      }
        }
		else if(PlayerToPoint(2.0,playerid,1478.3126,-1641.1827,14.1484))
  		{
	    		    	if(Caixaon == false)
	    	{
	    	    SendClientMessage(playerid, COLOR_GRAD1, "Encomendas foram Desativada por um Adm.");
	            return true;
	    	}
	        if(PlayerInfo[playerid][pNatal] == char)
	        {
	            SendClientMessage(playerid,0xFFFFFFAA,"Info: Você poderá pegar outro presente após o próximo {FFA54F}PayDay{FFFFFF}.");
	            return true;
			}
			else
			{
				new ItemVIP = random(50);
		   		if(ItemVIP == 43 || ItemVIP == 22 || ItemVIP == 31 || ItemVIP == 32 || ItemVIP == 49 || ItemVIP == 23)
		    	{
		        format(string, sizeof(string), "[Caixa Surpresa]:{FFFFFF} %s(ID:%d) pegou uma | Caixa Supresa {FACC2E}Grande{FFFFFF}. (/infocaixas)",PlayerName(playerid),playerid);
			 	SendClientMessageToAll(0x00BFFFFF,string);
			 	PlayerInfo[playerid][pNatal] = char;
			 	for(new i = 0; i<75; i++)
                {
 	               if(InventarioInfo[playerid][i][iSlot] == 19382)
	              {
		  		   InventarioInfo[playerid][i][iSlot] = 19056;
		  	       InventarioInfo[playerid][i][iUnidades] = 1;
		  	       return 1;
		  		  	   }
		  		      }
                return 1;
		   		}
		   		if(ItemVIP == 14 || ItemVIP == 16 || ItemVIP == 40 ||  ItemVIP == 1 || ItemVIP == 38 || ItemVIP == 23 || ItemVIP == 25 || ItemVIP == 28)
		    	{
		    	format(string, sizeof(string), "[Caixa Surpresa]:{FFFFFF} %s(ID:%d) pegou uma | Caixa Supresa {5FB404}Média{FFFFFF}. (/infocaixas)",PlayerName(playerid),playerid);
			 	SendClientMessageToAll(0x00BFFFFF,string);
			 	PlayerInfo[playerid][pNatal] = char;
			 	SendClientMessage(playerid, 0x33CCFFFF, "*O Presente está em seu inventário, use /inventario para abri-lo !");
			 	for(new i = 0; i<75; i++)
                {
 	               if(InventarioInfo[playerid][i][iSlot] == 19382)
	              {
		  		   InventarioInfo[playerid][i][iSlot] = 19055;
		  	       InventarioInfo[playerid][i][iUnidades] = 1;
		  	       return 1;
		  		  	   }
		  		      }
                return 1;
		   		}
		   		if(ItemVIP == 15 || ItemVIP == 9 || ItemVIP == 18 || ItemVIP == 50)
		    	{
		    	format(string, sizeof(string), "[Caixa Surpresa]:{FFFFFF} %s(ID:%d) pegou uma | Caixa Supresa {FBED2D}Gigante{FFFFFF}. (/infocaixas)",PlayerName(playerid),playerid);
			 	SendClientMessageToAll(0x00BFFFFF,string);
			 	PlayerInfo[playerid][pNatal] = char;
			 	SendClientMessage(playerid, 0x33CCFFFF, "*O Presente está em seu inventário, use /inventario para abri-lo !");
			 	for(new i = 0; i<75; i++)
                {
 	               if(InventarioInfo[playerid][i][iSlot] == 19382)
	              {
		  		   InventarioInfo[playerid][i][iSlot] = 19058;
		  	       InventarioInfo[playerid][i][iUnidades] = 1;
		  	       return 1;
		  		  	   }
		  		      }
                return 1;
		   		}
		   		if(ItemVIP == 2)
		    	{
		    	format(string, sizeof(string), "[Caixa Surpresa]:{FFFFFF} %s(ID:%d) pegou uma | Caixa Supresa {2E37F3}Reveillon{FFFFFF}. (/infocaixas)",PlayerName(playerid),playerid);
			 	SendClientMessageToAll(0x00BFFFFF,string);
			 	PlayerInfo[playerid][pNatal] = char;
			 	SendClientMessage(playerid, 0x33CCFFFF, "*O Presente está em seu inventário, use /inventario para abri-lo !");
			 	for(new i = 0; i<75; i++)
                {
 	               if(InventarioInfo[playerid][i][iSlot] == 19382)
	              {
		  		   InventarioInfo[playerid][i][iSlot] = 19059;
		  	       InventarioInfo[playerid][i][iUnidades] = 1;
		  	       return 1;
		  		  	   }
		  		      }
                return 1;
		   		}
		   		if(ItemVIP == 3)
		    	{
		    	format(string, sizeof(string), "[Caixa Surpresa]:{FFFFFF} %s(ID:%d) pegou uma | Caixa Supresa {FF5A00}Extreme{FFFFFF}. (/infocaixas)",PlayerName(playerid),playerid);
			 	SendClientMessageToAll(0x00BFFFFF,string);
			 	PlayerInfo[playerid][pNatal] = char;
			 	SendClientMessage(playerid, 0x33CCFFFF, "*O Presente está em seu inventário, use /inventario para abri-lo !");
			 	for(new i = 0; i<75; i++)
                {
 	               if(InventarioInfo[playerid][i][iSlot] == 19382)
	              {
		  		   InventarioInfo[playerid][i][iSlot] = 19057;
		  	       InventarioInfo[playerid][i][iUnidades] = 1;
		  	       return 1;
		  		  	   }
		  		      }
                return 1;
		   		}
                format(string, sizeof(string), "[Caixa Surpresa]:{FFFFFF} %s(ID:%d) pegou uma | Caixa Supresa {F78181}Pequena{FFFFFF}. (/infocaixas)",PlayerName(playerid),playerid);
                SendClientMessageToAll(0x00BFFFFF,string);
                PlayerInfo[playerid][pNatal] = char;
                SendClientMessage(playerid, 0x33CCFFFF, "*O Presente está em seu inventário, use /inventario para abri-lo !");
                for(new i = 0; i<75; i++)
                {
 	               if(InventarioInfo[playerid][i][iSlot] == 19382)
	              {
		  		   InventarioInfo[playerid][i][iSlot] = 19054;
		  	       InventarioInfo[playerid][i][iUnidades] = 1;
		  	       return 1;
		  		  	   }
		  		      }
			 }
	}
        else if(PlayerToPoint(4.1,playerid,368.9714,-6.2486,1001.8516))
		{
				ShowPlayerDialog(playerid, 28, DIALOG_STYLE_LIST, "Cluckin' Bell", "Coração no Espeto R$2\nCarne de Vaca R$4\nCarne de Jacaré R$5\nCarne de Frango R$3\nAgua R$1\nSuco R$1", "Selecionar", "Cancelar");
				SetPlayerFacingAngle(playerid, 357.0132);
		}
		else if(PlayerToPoint(4.1,playerid,376.8571,-67.6620,1001.5151) || PlayerToPoint(1.5,playerid,683.9015,-456.7076,-25.6099))
		{
				ShowPlayerDialog(playerid, 29, DIALOG_STYLE_LIST, "Burger Shot", "X-Baycon R$2\nX-Tudo R$4\nX-Especial R$5\nX-Frango R$3\nAgua R$1\nSuco R$1", "Selecionar", "Cancelar");
				SetPlayerFacingAngle(playerid, 357.0132);
		}
		else if(PlayerToPoint(4.1,playerid,375.6895,-118.9683,1001.4995))
		{
				ShowPlayerDialog(playerid, 30, DIALOG_STYLE_LIST, "Well Stacked Pizza", "Presunto e Mussarela - Pequena R$2\nPresunto e Mussarela - Grande R$4\nFrango e Azeitona R$5\nBacon e Chocolate R$3\nAgua R$1\nSuco R$1", "Selecionar", "Cancelar");
				SetPlayerFacingAngle(playerid, 357.0132);
		}
		else if(PlayerToPoint(4.1,playerid,379.0611,-186.6032,1000.6328))
		{
				ShowPlayerDialog(playerid, 31, DIALOG_STYLE_LIST, "Jim's sticky ring", "Rosquinha Pequena R$2\nRosquinha Normal R$4\nRosquinha de Chefe R$5\nSuper Rosquinha R$4\nAgua R$1\nSuco R$1", "Selecionar", "Cancelar");
				SetPlayerFacingAngle(playerid, 280);
		}
        else if(GetPlayerCaixa(playerid) || PlayerToPoint(1.5, playerid,2310.5569,-7.8338,26.7422))
		{
		    ForT:banco(playerid, #);
		}
        if(PlayerToPoint(2,playerid,229.9627,165.1098,1003.0234) || PlayerToPoint(2,playerid,1712.3022,-1640.2500,20.2239)  || PlayerToPoint(2,playerid,255.1995,77.1081,1003.6406) || PlayerToPoint(2,playerid,-1348.3979,500.5638,11.2027)
		|| PlayerToPoint(2,playerid,927.2700,-1038.1577,31.8984) || PlayerToPoint(2,playerid,240.5192,112.7945,1003.2188) || PlayerToPoint(2,playerid,2266.5007,-137.6130,26.4619))
		{
			ForT:menucop(playerid);
    	}
            if(PlayerToPoint(1.0, playerid, 322.6003,-1835.9039,4.8702) // balao1
            || PlayerToPoint(1.0, playerid, 275.7439,-1835.2538,4.8221) // balao2
            || PlayerToPoint(1.0, playerid, 224.5532,-1831.7827,4.9421) // balao3
            || PlayerToPoint(1.0, playerid, 180.0775,-1827.4725,5.2500)) // balao4
            {
                GameTextForPlayer(playerid, "~w~Voar de Balao ~n~USE: ~r~/voarbalao", 5000, 3);
			}
   		else if(PlayerToPoint(2, playerid,1205.9120,-1757.2990,13.5834))
        {
             ForT:duelar(playerid);
		}
        else if (PlayerToPoint(2, playerid, 1490.2859,1305.7068,1093.2964))
    	{
			ForT:getemprego(playerid, #);
    	}
    	else if (PlayerToPoint(2.0,playerid,1213.1705,-1330.9635,13.5686) || PlayerToPoint(2.0,playerid,1554.8059,-1717.1746,13.5469) || PlayerToPoint(2.0,playerid,1706.2869,-1860.6364,13.5785))
    	{
			ForT:cardapiozin(playerid, #);
    	}
    	else if (PlayerToPoint(2.0,playerid,1303.0737,-1730.0581,20.9986))
    	{
			ForT:casaarvore(playerid, #);
    	}
    	else if (PlayerToPoint(2, playerid, 1490.6569,1307.7158,1093.2891))
    	{
			ForT:pcagencia(playerid);
    	}
    	else if (PlayerToPoint(2, playerid, -2033.4347,-117.4312,1035.1719))
    	{
			ForT:licencas(playerid, #);
    	}
    	else if (PlayerToPoint(2.0, playerid, 312.1259,-166.1339,999.6010) || PlayerToPoint(2.0, playerid, 295.7041,-80.3617,1001.5156) || PlayerToPoint(2.0, playerid, 296.3083,-38.1549,1001.5156) || PlayerToPoint(2.0, playerid, 313.8642,-133.8308,999.6016))
    	{
    	    ShowPlayerDialog(playerid, 6, DIALOG_STYLE_LIST,
			"Loja de Armas",
			"{FFFFFF}Eagle\n\
			MP5\n\
			Shotgun\n\
			Ak-47\n\
			M4\n\
			Rifle\n\
			{FFAA00}[KIT VIP]\n\
			", "Confirmar", "Cancelar");
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2.5, 242.8167,66.2434,1003.6406))
		{
		    if(!IsACop(playerid) && PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pAdminTemp] < 1 && !admtrampando[playerid])
			{
				    SendClientMessage(playerid, COLOR_GREY, "   Área restrita! Somente policiais podem entrar aqui!");
		    		return true;
			}
  			SetPlayerPos(playerid,236.6653,65.1392,1005.0391);
  			GameTextForPlayer(playerid, "~w~Sala de Espera Treino",5000,1);
    	}
    	else if(PlayerToPoint(1, playerid, 236.6653,65.1392,1005.0391))
		{
  			SetPlayerPos(playerid,242.8167,66.2434,1003.6406);
    	}
    	else if(PlayerToPoint(1, playerid, 227.7363,69.1287,1005.0391))
  {
  			SetPlayerPos(playerid,225.5395,69.6203,1005.0391);
  			GameTextForPlayer(playerid, "~w~Sala de Treinamento",5000,1);
    	}
    	else if(PlayerToPoint(2,playerid,326.6374,307.1123,999.1484) || PlayerToPoint(2,playerid,302.7936,-1529.9443,24.9219) || PlayerToPoint(2,playerid,1644.526489,-1842.716796,13.542884)
				|| PlayerToPoint(2,playerid,240.6516,112.8062,1003.2188) || PlayerToPoint(2,playerid,258.7990,75.3689,1003.6406) || PlayerToPoint(2,playerid,229.8059,164.7830,1003.0234)
			 	|| PlayerToPoint(2,playerid,-1346.256103,492.538299,11.202690) || PlayerToPoint(2,playerid,712.7550,-554.5677,-3.5950) || PlayerToPoint(2,playerid,-1588.4751,732.4855,-4.9063)
			  	|| PlayerToPoint(2,playerid,359.1856,211.4973,1008.3828))
		{
		    if(!IsACop(playerid)) return 1;
		    ForT:batercartao(playerid, #);
		}
    	else if(PlayerToPoint(1, playerid, 225.5395,69.6203,1005.0391))
		{
  			SetPlayerPos(playerid,227.7363,69.1287,1005.0391);
    	}
        else if(IsPlayerInRangeOfPoint(playerid, 2.0, 768.2192,-3.9873,1000.7203))
		{
			ShowPlayerDialog(playerid, DIALOG_LOGIN2, DIALOG_STYLE_LIST, "Estilos De Luta", "Cotoveladas\nBoxe\nRua\nKickBoxing\nKarate\nNormal", "confirma", "Cancela");
		}
		else if(PlayerToPoint(2.0, playerid, 2148.7146,-1010.8959,62.5722) || PlayerToPoint(2.0, playerid, 1967.0469,-1177.2267,20.0307) || PlayerToPoint(2.0, playerid, 1450.4479,-2287.0803,13.5469) || PlayerToPoint(2.0, playerid, 1919.1384,-1415.4775,13.5703) || PlayerToPoint(2.0, playerid, 1123.7664,-1506.4692,15.7869))
		{
		   	ShowPlayerDialog(playerid, 2572, DIALOG_STYLE_LIST, "Pegar Drogas", "Pegar Maconha\nPegar Cocaina\nPegar Crack\nEsconder Maconha\nEsconder Cocaina\nEsconder Crack\nPegar Safe Maconha\nPegar Safe Cocaina\nPegar Safe Crack", "Confirma", "Cancela");
		}
  		else if(PlayerToPoint(3.0,playerid,2026.2104,-1896.1097,13.5469) || PlayerToPoint(3.0,playerid,1240.5569,-2036.9919,59.9709))
		{
		    if (PlayerInfo[playerid][pEmprego] == 7)
			{
			    Controle(playerid, 1);
		    	ShowPlayerDialog(playerid, 1741, DIALOG_STYLE_INPUT, "Pegar Materiais", "Digite a quantidade de materiais/nque deseja pegar", "Pegar", "Cancelar");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não é um vendedor de armas");
			}
		}
		else if(PlayerToPoint(1, playerid, 503.2368,-75.3880,998.7651))
		{
    	        Controle(playerid, 1);
    			ShowPlayerDialog(playerid, 200, DIALOG_STYLE_LIST, "Bar", "Dominar\nEquipar\nPegar Grana", "Confirmar", "Cancelar");
    	}
    	else if(PlayerToPoint(1, playerid, 355.2333,169.3552,1025.7891))
    	{
     		Controle(playerid, 1);
 	     	if(PlayerInfo[playerid][pLider] != 7)
	        {
				SendClientMessage(playerid, COLOR_GREY, "Você não é o Prefeito !");
				return true;
	        }
		    new gstring[MAX_STRING];
		    new MEGAString10[2500];
            MEGAString10[0] = EOS;
			format(gstring, 128, "{FFFFFF}|__________ Investimentos __________|\n\n");
			strcat(MEGAString10,gstring);
			format(gstring, 128, "{FFFFFF}Saldo em Cofre: {FFFF00}R$%d\n", CofreOrg[7][Dinheiro]);
			strcat(MEGAString10,gstring);
			format(gstring, 128, "{FFFFFF}Lucros com Empresas: {21DD00}R$%d\n", PLE);
			strcat(MEGAString10,gstring);
			format(gstring, 128, "{FFFFFF}Lucros com Organizações: {21DD00}R$%d\n", PLO);
			strcat(MEGAString10,gstring);
			format(gstring, 128, "{FFFFFF}Lucros com Postos de Gasolina: {21DD00}R$%d\n\n", PLPG);
			strcat(MEGAString10,gstring);
			format(gstring, 128, "{FFFFFF}Multas Arquivadas: {F97804}%d {FFFFFF}Multas.\n", PMA);
			strcat(MEGAString10,gstring);
			format(gstring, 128, "{FFFFFF}Total de Crimes: {E60000}%d {FFFFFF}Crimes.\n\n", PTC);
			strcat(MEGAString10,gstring);
			format(gstring, 128, "{FFFFFF}Lucros Investidos: {21DD00}R$%d\n", PLV);
			strcat(MEGAString10,gstring);
			ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Prefeitura", MEGAString10, "OK","");
     		return true;
    	}
    	else if(PlayerToPoint(1, playerid, 354.3210,154.7097,1025.7963))
    	{
     		Controle(playerid, 1);
 	     	if(PlayerInfo[playerid][pLider] != 7)
	        {
				SendClientMessage(playerid, COLOR_GREY, "Você não é o Prefeito ou Vice !");
				return true;
	        }
		    new fstring[MAX_STRING];
		    new MEGAString11[2500];
            MEGAString11[0] = EOS;
			format(fstring, 128, "{FFFFFF}|__________ Cobranças __________|\n\n");
			strcat(MEGAString11,fstring);
			format(fstring, 128, "{FFFFFF}Manutenção de Carros: {E60000}R$%d\n", PMC);
			strcat(MEGAString11,fstring);
			format(fstring, 128, "{FFFFFF}Manutenção das Hidrelétricas: {E60000}R$%d\n", PMH);
			strcat(MEGAString11,fstring);
			format(fstring, 128, "{FFFFFF}Manutenções de Encanamentos: {E60000}R$%d\n", PME);
			strcat(MEGAString11,fstring);
			format(fstring, 128, "{FFFFFF}Reparo de Estradas: {E60000}R$%d\n", PRE);
			strcat(MEGAString11,fstring);
			format(fstring, 128, "{FFFFFF}Conserto de estragos: {E60000}R$%d\n\n", PCE);
			strcat(MEGAString11,fstring);
			format(fstring, 128, "{FFFFFF}Dinheiro Usado: {E60000}R$%d\n", PDU);
			strcat(MEGAString11,fstring);
			ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Prefeitura", MEGAString11, "OK","");
     		return true;
    	}
    	else if(PlayerToPoint(1, playerid, 1719.0585,-1874.0331,13.5656))
		{
    	        Controle(playerid, 1);
                ShowPlayerDialog(playerid, menuajuda, DIALOG_STYLE_TABLIST_HEADERS, "Menu Ajuda",
				"{00BFFF}Guia para iniciantes\n\
				{FFFFFF}Como Subir de Nivel?\n\
				{FFFFFF}Como arrumar um Emprego?\n\
				{FFFFFF}Como ter um carro?\n\
				{FFFFFF}Como entrar para uma Organização?\n\
				{FFFFFF}Como não ser Preso?\n\
				{FFFFFF}Como fazer Anuncios/Ligar\n\
				{FFFFFF}Como fabricar drogas?\n\
				Como Roubar Algo?\n\
				{00BFFF}Como comprar VIP/SÓCIO?", "Confirmar", "Cancelar");
				return true;
    	}
    	else if(PlayerToPoint(1, playerid, 361.9699,169.5079,1025.7890))
    	{
     		Controle(playerid, 1);
 	     	if(PlayerInfo[playerid][pLider] != 11)
	        {
				SendClientMessage(playerid, COLOR_GREY, "Você não é da Polícia Federal!");
				return true;
	        }
			ShowPlayerDialog(playerid, 8726, DIALOG_STYLE_MSGBOX, "Prefeitura - Documentacao", "Procure Provas Suficientes para Incriminar o Prefeito!", "Pesquisar","Cancelar");
     		return true;
    	}
		else if (PlayerToPoint(2.0, playerid, 1524.4977,-1677.9469,6.2188) ||PlayerToPoint(2.0, playerid, 1564.8790,-1667.0009,28.3956) || PlayerToPoint(2.0, playerid, 246.2975,87.4735,1003.6406))
		{
		    if(storeexit[playerid] == 67){ return true;}
		    if(!IsACop(playerid)){ return true;}
		    Controle(playerid, 1);
    		ShowPlayerDialog(playerid, 2585, DIALOG_STYLE_LIST, "Elevador Policial", "Garagem\nDepartamento\nCobertura", "Confirma", "Cancela");
 		}
		else if(PlayerToPoint(1, playerid, 228.7928,153.3014,1003.0234)&&
			GetPlayerVirtualWorld(playerid) == 11)
		{
		        OrgCofre[playerid] = 11;
    	        Controle(playerid, 1);
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Polícia Civil", "Membros\nInformações\nDefinições de Membros\nArea para vendedores\nOutras Definições\nCandidatos\nEquipar\n{FF0000}Pedir para entrar", "Confirmar", "Cancelar");
    	}
		else if(PlayerToPoint(1, playerid, -1341.0715,500.6142,11.1953))
		{
		        OrgCofre[playerid] = 3;
    	        Controle(playerid, 1);
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Exercito", "Membros\nInformações\nDefinições de Membros\nArea para vendedores\nOutras Definições\nCandidatos\nEquipar\n{FF0000}Pedir para entrar", "Confirmar", "Cancelar");
    	}
		else if(PlayerToPoint(1, playerid, 237.6666,108.1401,1003.2257))
		{
		        OrgCofre[playerid] = 2;
    	        Controle(playerid, 1);
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre BOPE", "Membros\nInformações\nDefinições de Membros\nArea para vendedores\nOutras Definições\nCandidatos\nEquipar\n{FF0000}Pedir para entrar", "Confirmar", "Cancelar");
    	}
		else if(PlayerToPoint(1, playerid, 1568.6442,-1689.9729,6.2188))
		{
		        OrgCofre[playerid] = 1;
    	        Controle(playerid, 1);
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Policia Militar", "Membros\nInformações\nDefinições de Membros\nArea para vendedores\nOutras Definições\nCandidatos\nEquipar\n{FF0000}Pedir para entrar", "Confirmar", "Cancelar");
    	}
		else if(PlayerToPoint(1, playerid, -307.9520,1538.4799,75.5625))
		{
		        OrgCofre[playerid] = 15;
    	        Controle(playerid, 1);
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Estado Islâmico", "Membros\nInformações\nDefinições de Membros\nArea para vendedores\nOutras Definições\nCandidatos\nEquipar\n{FF0000}Pedir para entrar", "Confirmar", "Cancelar");
    	}
     	else if(PlayerToPoint(1, playerid, -2237.1875,2353.9629,4.9807))
		{
		        OrgCofre[playerid] = 23;
    	        Controle(playerid, 1);
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre As FARC", "Membros\nInformações\nDefinições de Membros\nArea para vendedores\nOutras Definições\nCandidatos\nEquipar\n{FF0000}Pedir para entrar", "Confirmar", "Cancelar");
    	}
     	else if(PlayerToPoint(1, playerid, 479.5926,-1531.1252,19.8107)&&
			GetPlayerVirtualWorld(playerid) == 0)
		{
		        OrgCofre[playerid] = 24;
    	        Controle(playerid, 1);
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Mayans", "Membros\nInformações\nDefinições de Membros\nArea para vendedores\nOutras Definições\nCandidatos\nEquipar\n{FF0000}Pedir para entrar", "Confirmar", "Cancelar");
    	}
    	else if(PlayerToPoint(1, playerid, 687.2863,-472.8064,16.5363)&&
			GetPlayerVirtualWorld(playerid) == 0)
		{
		        OrgCofre[playerid] = 25;
    	        Controle(playerid, 1);
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Sons Of Anarchy", "Membros\nInformações\nDefinições de Membros\nArea para vendedores\nOutras Definições\nCandidatos\nEquipar\n{FF0000}Pedir para entrar", "Confirmar", "Cancelar");
    	}
     	else if(PlayerToPoint(1, playerid, 1511.06,-689.80,94.75))
		{
    	        Controle(playerid, 1);
    	        OrgCofre[playerid] = 12;
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Mafia Russa", "Membros\nInformações\nDefinições de Membros\nArea para vendedores\nOutras Definições\nCandidatos\nEquipar\n{FF0000}Pedir para entrar", "Confirmar", "Cancelar");
    	}
     	else if(PlayerToPoint(1, playerid, 671.9144,-1271.4734,13.6250))
		{
    	        Controle(playerid, 1);
    	        OrgCofre[playerid] = 13;
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Yakuza", "Membros\nInformações\nDefinições de Membros\nArea para vendedores\nOutras Definições\nCandidatos\nEquipar\n{FF0000}Pedir para entrar", "Confirmar", "Cancelar");
    	}
    	else if(PlayerToPoint(1, playerid, 1677.922851,-2107.585693,13.546875))
    	{
    	        Controle(playerid, 1);
    	        OrgCofre[playerid] = 5;
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Aztecas", "Membros\nInformações\nDefinições de Membros\nArea para vendedores\nOutras Definições\nCandidatos\nEquipar\n{FF0000}Pedir para entrar", "Confirmar", "Cancelar");
    	}
    	else if(PlayerToPoint(1, playerid, 2266.4836,-140.7227,26.4619))
    	{
    	        Controle(playerid, 1);
    	        OrgCofre[playerid] = 34;
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Detran", "Membros\nInformações\nDefinições de Membros\nArea para vendedores\nOutras Definições\nCandidatos\nEquipar\n{FF0000}Pedir para entrar", "Confirmar", "Cancelar");
    	}
    	else if(PlayerToPoint(1, playerid, 228.8563,153.4978,1003.0234)&&
			GetPlayerVirtualWorld(playerid) == 10)
    	{
    	        Controle(playerid, 1);
    	        OrgCofre[playerid] = 33;
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Polícia Civil", "Membros\nInformações\nDefinições de Membros\nArea para vendedores\nOutras Definições\nCandidatos\nEquipar\n{FF0000}Pedir para entrar", "Confirmar", "Cancelar");
    	}
		else if(PlayerToPoint(1, playerid, 2514.1301,-1691.2979,14.0460))
    	{
    	        Controle(playerid, 1);
    	        OrgCofre[playerid] = 14;
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Groove Street", "Membros\nInformações\nDefinições de Membros\nArea para vendedores\nOutras Definições\nCandidatos\nEquipar\n{FF0000}Pedir para entrar", "Confirmar", "Cancelar");
    	}
    	else if(PlayerToPoint(1, playerid, 1154.1490,-1185.1548,32.0275))
    	{
    	        Controle(playerid, 1);
    	        OrgCofre[playerid] = 17;
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Ballas", "Membros\nInformações\nDefinições de Membros\nArea para vendedores\nOutras Definições\nCandidatos\nEquipar\n{FF0000}Pedir para entrar", "Confirmar", "Cancelar");
    	}
    	else if(PlayerToPoint(1, playerid, 2825.3916,-1170.2870,25.2235))
    	{
    	        Controle(playerid, 1);
    	        OrgCofre[playerid] = 18;
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Vagos", "Membros\nInformações\nDefinições de Membros\nArea para vendedores\nOutras Definições\nCandidatos\nEquipar\n{FF0000}Pedir para entrar", "Confirmar", "Cancelar");
    	}

    	else if(PlayerToPoint(1, playerid, 1709.5895,-1642.5737,20.2188)&&
			GetPlayerVirtualWorld(playerid) == 12)
		{
    	        Controle(playerid, 1);
    	        OrgCofre[playerid] = 16;
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre ROTA", "Membros\nInformações\nDefinições de Membros\nArea para vendedores\nOutras Definições\nCandidatos\nEquipar\n{FF0000}Pedir para entrar", "Confirmar", "Cancelar");
    	}

    	else if(PlayerToPoint(1, playerid, 2152.888427,-1791.791503,13.511968))
    	{
		    	Controle(playerid, 1);
		    	OrgCofre[playerid] = 19;
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Comando Vermelho", "Membros\nInformações\nDefinições de Membros\nArea para vendedores\nOutras Definições\nCandidatos\nEquipar\n{FF0000}Pedir para entrar", "Confirmar", "Cancelar");
		}
		else if(PlayerToPoint(1, playerid, 2247.3445,-1458.7847,24.0243))
    	{
		    	Controle(playerid, 1);
		    	OrgCofre[playerid] = 21;
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre PCC", "Membros\nInformações\nDefinições de Membros\nArea para vendedores\nOutras Definições\nCandidatos\nEquipar\n{FF0000}Pedir para entrar", "Confirmar", "Cancelar");
		}
    	else if(PlayerToPoint(1, playerid, 1168.198486,-1326.190307,-44.283576))
    	{
    	        Controle(playerid, 1);
    	        OrgCofre[playerid] = 4;
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Medicos", "Membros\nInformações\nDefinições de Membros\nArea para vendedores\nOutras Definições\nCandidatos\nEquipar\n{FF0000}Pedir para entrar", "Confirmar", "Cancelar");
    	}
    	else if(PlayerToPoint(1, playerid, 2788.4338,-1627.9436,10.9272))
    	{
    	        Controle(playerid, 1);
    	        OrgCofre[playerid] = 22;
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Triads", "Membros\nInformações\nDefinições de Membros\nArea para vendedores\nOutras Definições\nCandidatos\nEquipar\n{FF0000}Pedir para entrar", "Confirmar", "Cancelar");
    	}
    	else if(PlayerToPoint(1, playerid, 345.330017,162.199996,1025.796386))
    	{
    	        Controle(playerid, 1);
    	        OrgCofre[playerid] = 7;
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Governo", "Membros\nInformações\nDefinições de Membros\nArea para vendedores\nOutras Definições\nCandidatos\nEquipar\n{FF0000}Pedir para entrar", "Confirmar", "Cancelar");
    	}
    	else if(PlayerToPoint(1, playerid, 2281.0676,-2368.6677,13.5469))
    	{
    	        Controle(playerid, 1);
    	        OrgCofre[playerid] = 8;
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Hitmans", "Membros\nInformações\nDefinições de Membros\nArea para vendedores\nOutras Definições\nCandidatos\nEquipar\n{FF0000}Pedir para entrar", "Confirmar", "Cancelar");
    	}
    	else if(PlayerToPoint(1, playerid, 752.1580,-1358.9927,13.5000))
    	{
    	        Controle(playerid, 1);
    	        OrgCofre[playerid] = 9;
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Repórteres", "Membros\nInformações\nDefinições de Membros\nArea para vendedores\nOutras Definições\nCandidatos\nEquipar\n{FF0000}Pedir para entrar", "Confirmar", "Cancelar");
    	}

    	//Elevador
	    new Float:pos[3];
	    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	    if(pos[1] < -1301.4 && pos[1] > -1303.2417 && pos[0] < 1786.2131 && pos[0] > 1784.1555)    // He is using the elevator button
	        ShowElevatorDialog(playerid);
		else    // Is he in a floor button?
		{
		    if(pos[1] > -1301.4 && pos[1] < -1299.1447 && pos[0] < 1785.6147 && pos[0] > 1781.9902)
		    {
		        // He is most likely using it, check floor:
				new i=20;
				while(pos[2] < GetDoorsZCoordForFloor(i) + 3.5 && i > 0)
				    i --;

				if(i == 0 && pos[2] < GetDoorsZCoordForFloor(0) + 2.0)
				    i = -1;

				if(i <= 19)
				{
					CallElevator(playerid, i + 1);
					GameTextForPlayer(playerid, "~r~Elevador chamado~n~~y~Aguarde...", 3500, 4);
				}
		    }
		}
	}
	if (newkeys == 16 && BusEntered[playerid] > 0)
		{
			new Float:X,Float:Y,Float:Z;
			GetVehiclePos(BusEntered[playerid], X, Y, Z);
			SetPlayerPos(playerid, X, Y, Z+2);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid,0);
			PutPlayerInVehicle(playerid, BusEntered[playerid], 2);
			BusEntered[playerid] = 0;
		}
    if((newkeys == 2) && (IsPlayerInAnyVehicle(playerid)))
	{
	    if(PlayerInfo[playerid][pEmprego] == 20)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 3.0, 2095.8210,-1797.4016,13.3828))
	        	ForT:pegarpizzas(playerid);
	        else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2095.6055,-1807.2230,13.5517))
	        	ForT:entregarpizzas(playerid);
		}
	    if(IsACop(playerid) || IsAGOV(playerid))
		{
			ForT:pg1(playerid, #);
  			ForT:pg2(playerid, #);
  			ForT:pgn(playerid, #);
  			ForT:ppc(playerid, #);
  			ForT:ppc2(playerid, #);
  			ForT:plate(playerid, #);
  			ForT:plate2(playerid, #);
  			ForT:pro(playerid, #);
  			ForT:ppf(playerid, #);
   		}
   		if(IsAtGasStation(playerid))
		{
			ForT:abastecer(playerid, #);
		}
		if(GetPlayerOrg(playerid) == 22)
		{
			ForT:entriad(playerid, #);
		    ForT:sentriad(playerid, #);
		}
		if(GetPlayerOrg(playerid) == 12)
   		{
   		    ForT:ptd(playerid);
   		}
   		if(GetPlayerOrg(playerid) == 24)
   		{
   		    ForT:pmayans(playerid);
   		}
   		if(GetPlayerOrg(playerid) == 13)
   		{
   		    ForT:pYakuza1(playerid);
   		    ForT:pYakuza2(playerid);
   		    ForT:pYakuza3(playerid);
   		}
   		if(GetPlayerOrg(playerid) == 34)
   		{
   		    ForT:pdetran(playerid);
   		}
        if(IsAJornal(playerid))
		{
			ForT:preporter(playerid, #);
		}
	}

	if(GetPlayerState(playerid)==1 && GK(playerid,KEY_WALK) && !patinss[playerid])
	{
	    UpdateAnim(playerid);
	}
    if(newkeys & 16)
	{
         if(carroinvCriado[playerid] == 1)
            {
                if(IsPlayerInVehicle(playerid,carroinvID[playerid]))
                {
                    ForT:dinv(playerid);
                }
            }
        if(PlayerInfo[playerid][pBrinquedo] >= 1 || PlayerInfo[playerid][prctiger] >= 1 || PlayerInfo[playerid][prcraider] >= 1 || PlayerInfo[playerid][prcbaron] >= 1)
    	{
            if(BrinCriado[playerid] == 1)
            {
                if(IsPlayerInVehicle(playerid,BrinquedoID[playerid]))
                {
                    ForT:drc(playerid);
                }
            }
		}
	}
	return true;
}

BPF::UpdateAnim(playerid)
{
   	if((GetPlayerState(playerid)==1&&GK(playerid,KEY_WALK))&&
	(GK(playerid,KEY_UP)||GK(playerid,KEY_DOWN)||GK(playerid,KEY_LEFT)||GK(playerid,KEY_RIGHT)))
	{
	    SetTimerEx("UpdateAnim", 200, 0, "i", playerid);
	    AplicarWalk(playerid);
	}
   	else if(GK(playerid,KEY_WALK) && GetPlayerState(playerid)==1)
		SetTimerEx("UpdateAnim", 500, 0, "i", playerid),
		ApplyAnimation(playerid,"PED","facgum",3.5,0,1,1,1,1);
	else ApplyAnimation(playerid,"PED","facgum",3.5,0,1,1,1,1);
	return 0;
}

stock AplicarWalk(playerid)
{
	switch(StyleWalk[playerid])
	{
    	case 1:ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
    	case 2:ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
    	case 3:ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
    	case 4:ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
    	case 5:ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1);
    	case 6:ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1);
    	case 7:ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
    	case 8:ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
    	case 9:ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
    	case 10:ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
    	case 11:ApplyAnimation(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1);
    	case 12:ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
    	case 13:ApplyAnimation(playerid,"PED","Player_Sneak",6.1,1,1,1,1,1);
    	case 14:ApplyAnimation(playerid,"PED","WOMAN_walkshop",4.1,1,1,1,1,1);
    	case 15:ApplyAnimation(playerid,"PED","JOG_femaleA",4.1,1,1,1,1,1);
    	case 16:ApplyAnimation(playerid,"PED","JOG_maleA",4.1,1,1,1,1,1);
    	case 17:ApplyAnimation(playerid,"PED","run_civi",4.1,1,1,1,1,1);
    	case 18:ApplyAnimation(playerid,"PED","run_fat",4.1,1,1,1,1,1);
    	case 19:ApplyAnimation(playerid,"PED","run_fatold",4.1,1,1,1,1,1);
    	case 20:ApplyAnimation(playerid,"PED","run_gang1",4.1,1,1,1,1,1);
    	case 21:ApplyAnimation(playerid,"PED","run_old",4.1,1,1,1,1,1);
    	case 22:ApplyAnimation(playerid,"PED","Run_Wuzi",4.1,1,1,1,1,1);
    	case 23:ApplyAnimation(playerid,"PED","swat_run",4.1,1,1,1,1,1);
    	case 24:ApplyAnimation(playerid,"PED","woman_run",4.1,1,1,1,1,1);
    	case 25:ApplyAnimation(playerid,"PED","WOMAN_runbusy",4.1,1,1,1,1,1);
    	case 26:ApplyAnimation(playerid,"PED","WOMAN_runsexy",4.1,1,1,1,1,1);
	}
	return 0xFFFF;
}
stock SetWalkStyle(playerid, style)
{
	if(style < 0 || style > 26)return true;

	StyleWalk[playerid] = style;

	return 0;
}
stock GetWalkStyle(playerid)return StyleWalk[playerid];
stock ResetWalkStyle(playerid)return StyleWalk[playerid] = 0;

stock GK(playerid, key)
{
	new keys, ud, lr;
	GetPlayerKeys(playerid, keys, ud, lr);
	if(keys & key || ud == key || lr == key)return true;
	return 0;
}

BPF::ScoreLevel(playerid)
{
	new LevScore;
	LevScore = PlayerInfo[playerid][pLevel];
	SetPlayerScore(playerid, LevScore);
}
stock EventoChamar(playerid)
{
	if(Evento == 1)
	{
    	PlayerTextDrawShow(playerid, Text1Evento[playerid]);
    	PlayerTextDrawShow(playerid, Text2Evento[playerid]);
    	PlayerTextDrawShow(playerid, Text3Evento[playerid]);
    	PlayerTextDrawShow(playerid, Text4Evento[playerid]);
    	PlayerTextDrawShow(playerid, Text5Evento[playerid]);
    	PlayerTextDrawShow(playerid, Text6Evento[playerid]);
	}
	return 0;
}
stock EventoFechar(playerid)
{
	PlayerTextDrawHide(playerid, Text1Evento[playerid]);
	PlayerTextDrawHide(playerid, Text2Evento[playerid]);
	PlayerTextDrawHide(playerid, Text3Evento[playerid]);
	PlayerTextDrawHide(playerid, Text4Evento[playerid]);
	PlayerTextDrawHide(playerid, Text5Evento[playerid]);
	PlayerTextDrawHide(playerid, Text6Evento[playerid]);
	return 0;
}
BPF::UpdatePlayerVelocimetro(playerid) {

        new playervehicle;
        new vehicle = GetPlayerVehicleID(playerid);
        new _v = GetPlayerVehicleID(playerid);
        new Float:_hp;

        if ( (playervehicle = GetPlayerVehicleID(playerid)) != INVALID_VEHICLE_ID) {

            new string_velo[15];

            format(string_velo, sizeof (string_velo), "%02d km/h", GetVehicleSpeed(playervehicle));
            PlayerTextDrawSetString(playerid, textPlayerVelocimetro[1][playerid], string_velo);

            GetVehicleHealth(_v, _hp);
            if(Cblindado[_v] >= 1)
  			{
  			    format(string_velo, sizeof(string_velo),"~r~%d%%BD",Blindagem[_v]);//com blind
				PlayerTextDrawSetString(playerid, textPlayerVelocimetro[3][playerid], string_velo);
			}
			if(Cblindado[_v] <= 0)
  			{
				format(string_velo, sizeof(string_velo),"%0.0f%%",_hp/10);
				PlayerTextDrawSetString(playerid, textPlayerVelocimetro[3][playerid], string_velo);
			}
                format(string_velo, sizeof(string_velo), "%d Litros", Gas[vehicle]);
				PlayerTextDrawSetString(playerid,textPlayerVelocimetro[2][playerid], string_velo);

				if(Gas[vehicle] <= 0)
					PlayerTextDrawSetString(playerid,textPlayerVelocimetro[2][playerid], "Sem Gasolina");
				else if(Gas[vehicle] <= 10)
					PlayerTextDrawSetString(playerid,textPlayerVelocimetro[2][playerid], "~y~Reserva");

        }
        return true;
}
stock UpdateGas(vehicleid)
{
    new _s[60];
	foreach(Player, playerid)
	{
     if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleID(playerid) == vehicleid)
	    {
                _s[0] = EOS;
                format(_s, sizeof(_s), "%d Litros", Gas[vehicleid]);
				PlayerTextDrawSetString(playerid,textPlayerVelocimetro[2][playerid], _s);

				if(Gas[vehicleid] <= 0)
					PlayerTextDrawSetString(playerid,textPlayerVelocimetro[2][playerid], "Sem Gasolina");
				else if(Gas[vehicleid] <= 10)
					PlayerTextDrawSetString(playerid,textPlayerVelocimetro[2][playerid], "~y~Reserva");
			}

		}

	return 0;
}
BPF::Velocimetro()
{
	foreach(Player, i)
	{

		if(!gPlayerLogged[i])continue;

	   	    //----- Sistema de Patins ----
			new keys, ud, lr;
			new time = GetTickCount();
		    if(patinss[i] && time > timejump[i])
		    {
		        GetPlayerKeys(i, keys, ud, lr);

		        if(ud & KEY_UP || ud & KEY_DOWN || lr & KEY_LEFT || lr & KEY_RIGHT)
		        {
		            if(keys & KEY_WALK)
		            	ApplyAnimation(i,"SKATE","skate_run",4.1,1,1,1,1,1);
					else
					    ApplyAnimation(i,"SKATE","skate_sprint",4.1,1,1,1,1,1);
		        }
		        else
		        {
		            ApplyAnimation(i,"SKATE","skate_idle",4.1,1,1,1,1,1);
			   }
	   	    //Sistema de Textdraw ARMAS NO CHÃO

			TextDrawHideForPlayer(i, DropTextdraw0);
			TextDrawHideForPlayer(i, DropTextdraw1);
			TextDrawHideForPlayer(i, DropTextdraw2);
			TextDrawHideForPlayer(i, DropTextdraw3);
			TextDrawHideForPlayer(i, DropTextdraw4);
			PlayerTextDrawHide(i, DropTextdraw5[i]);

			for(new f = 0; f < MAX_OBJ; f++)
			{
                if(IsPlayerInRangeOfPoint(i, 1.8, dItemData[f][ObjtPos][0], dItemData[f][ObjtPos][1], dItemData[f][ObjtPos][2]))
			    {
			        new Str[73];

			        format(Str, sizeof Str, "Item: %s, com %d unidade(s)", NomeArmaInventario(dItemData[f][ObjtData][0]), dItemData[f][ObjtData][1]);
			        PlayerTextDrawSetString(i, DropTextdraw5[i], Str);

					TextDrawShowForPlayer(i, DropTextdraw0);
					TextDrawShowForPlayer(i, DropTextdraw1);
					TextDrawShowForPlayer(i, DropTextdraw2);
					TextDrawShowForPlayer(i, DropTextdraw3);
					TextDrawShowForPlayer(i, DropTextdraw4);
					PlayerTextDrawShow(i, DropTextdraw5[i]);
			       	break;
			    }
			}

			for(new a = 0; a < MAX_OBJ; a++)
			{
			    if(IsPlayerInRangeOfPoint(i, 1.8, dGunData[a][ObjPos][0], dGunData[a][ObjPos][1], dGunData[a][ObjPos][2]) && dGunData[a][ObjPos][0] != 0)
			    {
			        new Str[73];

			        format(Str, sizeof Str, "Uma %s com %d balas", GunNames[dGunData[a][ObjData][0]], dGunData[a][ObjData][1]);
			        PlayerTextDrawSetString(i, DropTextdraw5[i], Str);

					TextDrawShowForPlayer(i, DropTextdraw0);
					TextDrawShowForPlayer(i, DropTextdraw1);
					TextDrawShowForPlayer(i, DropTextdraw2);
					TextDrawShowForPlayer(i, DropTextdraw3);
					TextDrawShowForPlayer(i, DropTextdraw4);
					PlayerTextDrawShow(i, DropTextdraw5[i]);
			       	break;
			    }
			}
		}

		AttachArmas(i);

	}
	return true;
}

BPF::ClearChatbox(playerid, lines)
{
		for(new i; i < lines; i++)
		{
			SendClientMessage(playerid, COLOR_GREY, " ");
		}
		return true;
}
BPF::BackupClear(playerid, calledbytimer)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsACop(playerid))
		{
			if (PlayerInfo[playerid][pRequestingBackup] == 1)
			{
				foreach(Player, i)
				{
                    if(IsACop(playerid))
					{
						SetPlayerMarkerForPlayer(i, playerid, 0xFFFFFF00);
					}
				}
				if (calledbytimer != 1)
				{
					SendClientMessage(playerid, TEAM_BLUE_COLOR, "Seu pedido de reforço foi cancelado.");
				}
				else
				{
					SendClientMessage(playerid, TEAM_BLUE_COLOR, "Seu pedido de reforço foi cancelado automaticamente.");
				}
				PlayerInfo[playerid][pRequestingBackup] = 0;
			}
			else
			{
				if (calledbytimer != 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você ainda não pediu reforço.");
				}
			}
		}
		else
		{
			if (calledbytimer != 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não é COP");
			}
		}
	}
	return true;
}
stock NomeArma(armaid)
{
	new nome[35];
	if(armaid == 0)nome = "Fist";
	if(armaid >= 1 || armaid <= 47) GetWeaponName(armaid, nome, sizeof nome);
	if(armaid == 18)nome = "Molotov";
	if(armaid == 44 || armaid == 45)nome = "Visao Noturna";
	//if(armaid == 47)nome = "Explosivo";
	else GetWeaponName(armaid, nome, sizeof nome);
	return nome;
}
stock getCargoAdmin(playerid){

	new Str[75];

	switch(PlayerInfo[playerid][pAdmin]){

	    case 1			:Str = "Estagiário";
	    case 2			:Str = "Moderador";
	    case 3			:Str = "Administrador";
	    case 4			:Str = "Administrador";
	    case 5			:Str = "Administrador";
	    case 1337       :Str = "Encarregado";
	    case 1338       :Str = "Encarregado";
	    case 1339		:Str = "Supervisor";
	    case 3000		:Str = "Gerente";
	    case 3001		:Str = "Diretor";
	    case 5000		:Str = "Dono";
	    default         :Str = "Admin Atendente";
	}

	return Str;
}
BPF::OnplayerAtualizador()
{
	new string[2000];
	if(PaintballPlayers >= 2 && PaintballRound != 1 && StartingPaintballRound != 1)
	{
		StartingPaintballRound = 1;
	   	SetTimer("PreparePaintball", 30000, 0);
	}
	if(KartingPlayers >= 1 && KartingRound != 1 && StartingKartRound != 1)
	{
	    StartingKartRound = 1;
	    SetTimer("PrepareKarting", 15000, 0);
	}
	if(AnuncioMandado > 0)
	{
	    AnuncioMandado --;
	}
	if(TimeGranaTR > 0)TimeGranaTR --;
	else
	{
	    for(new x; x != MAX_ORGS; x++)
	    {
	        new quant = GetOrgTrs(x);
	        if(quant && x > 0)
	        {
	            new mney = quant*(2000+random(999));
	            new mmat = quant*(1000+random(999));
	            format(string, sizeof string, "Info: {FFFFFF}Sua organização ganhou {00AA00}R$%d e {30E7F8}%d materiais por manter {00AAFF}[%02d/%02d] {FFFFFF}territórios sob controle.", mney, mmat, quant, CountTr());
	            SendFamilyMessage(x, COLOR_LIGHTBLUE, string);
	            DepositarGranaOrg(x, 	mney);
	            DepositarMaterialOrg(x, mmat);
	        }
	    }

	    TimeGranaTR = (10)*60;
	}
    foreach(Player, playerid)
	{
	    if(gettime() > GetPVarInt(playerid, #VarFloodLocalizar) && GetPVarInt(playerid, #VarFloodLocalizar) != 0) {
	        GangZoneHideForPlayer(playerid, GZLocalizar[playerid]);
	    	SetPVarInt(playerid, #VarFloodLocalizar, 0);
		}
		if(PlayerInfo[playerid][pTitulo]){

		    SetPlayerChatBubble(playerid, getPlayerTitulo(playerid), 0x999999FF, 20.0, 2000);
		}
//========================[Guerra]======================================
 		if(TendoGuerra >= 1)
 		{
 		    new org = GetPlayerOrg(playerid);
		   	if(org == 3 || org == 15 || org == 23)
		   	{
			   	if(IsPlayerInGuerra(playerid) && EmGuerra[playerid] == 0)
			   	{
				  	format(string, sizeof(string), "* %s entrou na Guerra!",PlayerName(playerid));
				  	SendFamilyMessage(3,GetPlayerColor(playerid), string);
				  	SendFamilyMessage(15,GetPlayerColor(playerid), string);
				  	SendFamilyMessage(23,GetPlayerColor(playerid), string);
				  	EmGuerra[playerid] = 1;
			  	}
			}
	 		if(!IsPlayerInGuerra(playerid) && EmGuerra[playerid] == 1)
		  	{
			  	format(string, sizeof(string), "* %s saiu da Guerra!",PlayerName(playerid));
			  	SendFamilyMessage(3,GetPlayerColor(playerid), string);
			  	SendFamilyMessage(15,GetPlayerColor(playerid), string);
			  	SendFamilyMessage(23,GetPlayerColor(playerid), string);
			  	EmGuerra[playerid] = 0;
			}
		}

		new Float: HP, Float:AP, newkeys, ud, lr;
		GetPlayerKeys(playerid, newkeys, ud, lr);
		if (HOLDING(128) && GetPlayerWeapon(playerid) == 34)
		{
		    PlayerTextDrawHide(playerid,__[playerid]);

			foreach(Player, i)
			{
				if(IsPlayerAiming(playerid,i) && i != playerid && s_tate[i] != PLAYER_STATE_SPECTATING)
				{
				    MEGAString[0] = EOS;
					GetPlayerHealth(i,HP);
					GetPlayerArmour(i,AP);
					format(MEGAString,256,"~r~~h~%s~n~\
										~p~Vida: ~w~%0.1f~n~\
										~p~Colete: ~w~%0.1f~n~\
										~p~Distancia: ~w~%dm~n~\
										~p~Ping: ~w~%d",
										NomePlayer(i),HP, AP, floatround(GetDistanceBetweenPlayers(i,playerid)),GetPlayerPing(i));
					PlayerTextDrawSetString(playerid, __[playerid],MEGAString);
					PlayerTextDrawShow(playerid,__[playerid]);
					break;
				}
			}
		}

		if(TempoEntrega[playerid] > 0)
		{
			TempoEntrega[playerid] --;
		}
		if(InTaser[playerid] && IsACop(playerid))
  		{
   			if(GetPlayerWeapon(playerid) != 0)
  		    	SetPlayerArmedWeapon(playerid, 0);
  		}
		if(PlayerInAreaNeutra(playerid))
		{
			new arma = GetPlayerWeapon(playerid);
   			if(arma != 0 && arma != 42)
		    {
				SetPlayerArmedWeapon(playerid, 0);
				SendPlayerTextMessage(playerid, "~b~voce nao pode usar armas em area neutras.", 4000);
			}
		}
		if(StartingPaintballRound == 1 && AnnouncedPaintballRound == 0)
		{
  			AnnouncedPaintballRound = 1;
		    if(PlayerPaintballing[playerid] != 0)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Paintball game será anunciado em 15 segundos (Para obter mais jogadores).");
		    }
		}
		if(StartingKartRound == 1 && AnnouncedKartRound == 0)
		{
		   	AnnouncedKartRound = 1;
		    if(PlayerKarting[playerid] != 0 && PlayerInKart[playerid] != 0)
		    {
		      	SendClientMessage(playerid, COLOR_YELLOW, "Corrida de Kart será anunciada em 15 segundos (Para obter mais Corredores de Kart).");
		    }
		}

		if(EndingKartRound == 1)
		{
		    if(PlayerKarting[playerid] != 0 && PlayerInKart[playerid] != 0)
		    {
		        DisablePlayerCheckpoint(playerid);
		        CP[playerid] = 0;
		    }
		}
		if(MecanicMission[playerid])
		{
		    TimeMission[playerid] --;
		    if(TimeMission[playerid] < 1)
		    {
                SendClientMessage(playerid, COLOR_LIGHTRED, "Missao de mecânico: O tempo acabou e você não completou sua atual missão, missao cancelada!");
				EndMission(playerid);
			}
		    else
		    {
		        if(IsPlayerInAnyVehicle(playerid) && GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
		        {
			        new Float:x, Float:y, Float:z;
			        GetVehiclePos(VehicleMission[playerid], x, y, z);
			        if(GetPlayerDistanceFromPoint(playerid, x, y, z) < 7.0 && !IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			        {
                        GameTextForPlayer(playerid, "~r~Use: /guinchar", 1500, 3);
					}
					else
					{
	            		if(IsAttached[playerid] && !IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			            {
			                GameTextForPlayer(playerid, "~r~O veiculo desprendeu~n~Pegue-o novamente!", 1500, 3);
               			}
					}
				}
		    }
		}
		if(!HOLDING(128))
		{
			PlayerTextDrawHide(playerid,__[playerid]);
		}
	    if(TempoAn[playerid] > 0){TempoAn[playerid] --;}

        checkEE(playerid);

		if(PlayerInfo[playerid][pHospital])
		{
		    if(GetPlayerInterior(playerid) != 10)
			{
		    	SetPlayerInterior(playerid, 10), SetPlayerVirtualWorld(playerid, 0);
			    new camasrandom = random(sizeof(CamasHospital));
			    SetPlayerPos(playerid, CamasHospital[camasrandom][0], CamasHospital[camasrandom][1], CamasHospital[camasrandom][2]);
				SetPlayerFacingAngle(playerid, CamasHospital[camasrandom][3]), camaid[playerid] = camasrandom;
			}
			new gstring[195];
		    new estado[45];
		    if(PlayerInfo[playerid][pTempoHospital] > TempoHospital/2)estado = "~r~EM COMA";
		    else if(PlayerInfo[playerid][pTempoHospital] > TempoHospital/3)estado = "~r~~h~DESACORDADO";
		    else if(PlayerInfo[playerid][pTempoHospital] > TempoHospital/4)estado = "~y~ACORDANDO";
		    else if(PlayerInfo[playerid][pTempoHospital] > TempoHospital/5)estado = "~p~CONFUSO";
		    else if(PlayerInfo[playerid][pTempoHospital] > TempoHospital/6)estado = "~g~~h~CONSCIENTE";
		   	else estado = "~r~~h~~h~em observacao";


			SetPlayerHealth(playerid, 99999);

			format(gstring, sizeof gstring, "~w~Receber alta em: ~g~~h~%ds~n~~w~Cama: ~r~~h~%04d~n~~w~Estado: %s",
		    PlayerInfo[playerid][pTempoHospital],camaid[playerid], estado);
		    PlayerTextDrawSetString(playerid, TextHospital[playerid], gstring);
		    PlayerTextDrawShow(playerid, TextHospital[playerid]);
			ApplyAnimation(playerid,"CRACK","crckidle2",4.1,0,1,1,1,0);

			if(PlayerInfo[playerid][pTempoHospital] > 0)PlayerInfo[playerid][pTempoHospital] --;
		    else if(PlayerInfo[playerid][pTempoHospital] <= 0)SairHospital(playerid);
		}
		if(PlayerInfo[playerid][pTempoFDrugs] > 0)
		{
			if(DrugMission[playerid] == 0)
			{
				DrugMission[playerid] = 2;
  			}
		}
		if(DrugMission[playerid] == 2)
		{
			new gstring[195];
		    if (IsPlayerInCheckpoint(playerid))
			{
			   	new estado[45];
			    if(PlayerInfo[playerid][pDrugType] == 1)estado = "~r~~h~Cocaina ~w~Pronta";
			    else if(PlayerInfo[playerid][pDrugType] == 2)estado = "~r~~h~Crack ~w~Pronto";
			    PlayerInfo[playerid][pTempoFDrugs] --;
			    format(gstring, sizeof gstring, "%s em: ~g~~h~%d segundos",
		   		estado, PlayerInfo[playerid][pTempoFDrugs]);
		   		PlayerTextDrawSetString(playerid, TextDrugs[playerid], gstring);
		   		PlayerTextDrawShow(playerid, TextDrugs[playerid]);
			}
			if (!IsPlayerInCheckpoint(playerid))
			{
   				PlayerTextDrawHide(playerid, TextDrugs[playerid]);
			}
			if(PlayerInfo[playerid][pTempoFDrugs] < 0)
			{
			    if(PlayerInfo[playerid][pDrugType] == 1)
			    {
			        new cocainardm = random(1000)+2000;
			        PlayerInfo[playerid][pDrogas2] += cocainardm;
				    format(string, sizeof string, " Cocaina Pronta,Voce Produziu %d Gramas!", cocainardm);
					SendClientMessage(playerid, COLOR_GRAD1, string);
			    }
			    if(PlayerInfo[playerid][pDrugType] == 2)
			    {
			        new crackrdm = random(1000)+1000;
			        PlayerInfo[playerid][pDrogas3] += crackrdm;
				    format(string, sizeof string, " Crack Pronto,Voce Produziu %d Pedras!", crackrdm);
					SendClientMessage(playerid, COLOR_GRAD1, string);
			    }
			    DisablePlayerCheckpoint(playerid);
				DrugMission[playerid] = 0;
				PlayerInfo[playerid][pDrugType] = 0;
				PlayerTextDrawHide(playerid, TextDrugs[playerid]);
			}
		}
	}
	return 1;
}
BPF::SairHospital(playerid)
{
	new string[128];
	new dia, mes, ano, hora, minuto, segundo;
	getdate(ano,mes,dia),gettime(hora,minuto,segundo);
	PlayerInfo[playerid][pHospital] = false;
	PlayerInfo[playerid][pTempoHospital] = 0;
	PlayerTextDrawHide(playerid, TextHospital[playerid]);
	SetPlayerHealth(playerid, 100);
	SendClientMessage(playerid, -1, "|______________ Contas do Hospital______________| ");
	format(string, sizeof string, "|* Paciente %s", NomePlayer(playerid));
	SendClientMessage(playerid, COLOR_GRAD1, string);
	format(string, sizeof string, "|* Você recebeu alta em: %02d/%02d/%d as %02d:%02d:%02d", dia,mes,ano,hora,minuto,segundo);
	SendClientMessage(playerid, COLOR_GRAD1, string);
	if(LocalSairHosp[playerid] == true)
	{
		format(string, sizeof string, "|* Custo Total: -R$%d", ValorSairHosp[playerid]);
		SendClientMessage(playerid, COLOR_GRAD1, string);
		GiveDinheiro(playerid, -ValorSairHosp[playerid]);
	}
	if(LocalSairHosp[playerid] == false)
	{
		format(string, sizeof string, "|* Custo Total: -R$%d", ValorSairHosp[playerid]);
		SendClientMessage(playerid, COLOR_GRAD1, string);
		GiveDinheiro(playerid, -ValorSairHosp[playerid]);
	}
	SendClientMessage(playerid, -1, "|______________________________________________|");
	SendClientMessage(playerid, COLOR_YELLOW, "Você saiu do hospital depois de um tempo internado.");
	if(PlayerInfo[playerid][pContratoHos] >= 1)
			{
                ShowPlayerDialog(playerid, DIALOG_HOSP, DIALOG_STYLE_MSGBOX, "Contrato Hospitalar", "{33AA33}MENSAGEM DO HOSPITAL:\n\n{FFFFFF}Você possui um {FF0000}Contrato Hospitalar{FFFFFF} e pode usá-lo!\n\n{FF0000}OBS:{FFFFFF} O contrato hospitalar consiste em levar você\npara o local de spawn pelos médicos, deseja usá-lo?", "Usar", "Cancelar");
			}
 	PlayerInfo[playerid][pHospital] = false;
	ValorSairHosp[playerid] = 0;
	Controle(playerid, 1);
	HospId[playerid] = 999;
	SetPVarInt(playerid, "VarMSG", 0);
	if(PlayerInfo[playerid][pJailed] >= 1)
	{
		SendClientMessage(playerid, COLOR_GREY, "[!] Você recebeu alta do hospital e foi para a prisão.");
		SpawnPlayer(playerid);
		return 1;
	}
	if(TendoGuerra >= 1)
	{
 		new org = GetPlayerOrg(playerid);
  		if(org == 3 || org == 15 || org == 23)
   		{
   		    SetPlayerSpawn(playerid);
   		}
	}
	if(LocalSairHosp[playerid] == true)
	{
	    SendClientMessage(playerid, COLOR_DBLUE, "Você saiu do hospital e Foi Levado Até sua HQ.");
	    LocalSairHosp[playerid] = false;
	    SetPlayerSpawn(playerid);
	}
	return true;
}


stock SendHospitalMessage(striing[], color)return ProxLocal(801.3326,724.9469,1014.1642, 75.0, striing, color);
stock ProxLocal(Float:fx, Float:fy, Float:fz, Float:range, striing[], color, playerid = INVALID_PLAYER_ID)
{
	if(playerid == INVALID_PLAYER_ID)
	{
	    foreach(Player, p)
	    {
	        if(gPlayerLogged[p] && IsPlayerInRangeOfPoint(p, range, fx, fy, fz))
	        {
				SendClientMessage(p, color, striing);
			}
		}
	}
	else
	{
	    if(gPlayerLogged[playerid] && IsPlayerInRangeOfPoint(playerid, range, fx, fy, fz))
	    {
	        SendClientMessage(playerid, color, striing);
		}
	}
	return true;
}
BPF::LokAT(playerid)
{
	if(!gPlayerLogged[playerid])
	{
		new rdd = random(sizeof(RandomCameras));
		SetPlayerCameraPos(playerid, RandomCameras[rdd][0],RandomCameras[rdd][1],RandomCameras[rdd][2]);
		SetPlayerCameraLookAt(playerid, RandomCameras[rdd][3], RandomCameras[rdd][4], RandomCameras[rdd][5]);
		SetPlayerVirtualWorld(playerid, playerid+MAX_PLAYERS);
		SetPlayerPos(playerid, RandomCameras[rdd][0],RandomCameras[rdd][1],RandomCameras[rdd][2]-10);
		Controle(playerid, 0);
		SetTimerEx("LokAT", 6000, 0, "i", playerid);
	}
	return true;
}
BPF::Guerrabar1(playerid)
{
	new string[128];
	if(GetPlayerOrg(playerid) == 24)
	{
	    if(Dominando[playerid] == 1)
		{
			if(barexit[playerid] == 1)
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
				foreach(Player, i)
			    {
				     if(PlayerInfo[i][pChatTerritorio] == 0)
				     {
	    	         format(string, sizeof(string), "%s e os Mayans Tomaram o Bar Jizzy's!",PlayerName(playerid));
				     SendClientMessage(i, 0x33FFFFAA, string);
				     }
				}
 				Dominando[playerid] = 0;
 				Guerrandobar1 = 0;
 				donobar = 1;
 				KillTimer(TempoGuerrabar1);
 				UpdateBarText(barexit[playerid]);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, BRANCO_COR, "Você não está no Bar Jizzy's.");
				Dominando[playerid] = 0;
				Guerrandobar1 = 0;
				donobar = 0;
				KillTimer(TempoGuerrabar1);
				UpdateBarText(barexit[playerid]);
				return 1;
			}
		}
		return 1;
	}
	if(GetPlayerOrg(playerid) == 25)
	{
	    if(Dominando[playerid] == 1)
		{
			if(barexit[playerid] == 1)
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
				foreach(Player, i)
			    {
				     if(PlayerInfo[i][pChatTerritorio] == 0)
				     {
	    	         format(string, sizeof(string), "%s e os Sons Of Anarchy Tomaram o Bar Jizzy's!",PlayerName(playerid));
				     SendClientMessage(i, 0x535d7165, string);
				     }
				}
 				Dominando[playerid] = 0;
 				Guerrandobar1 = 0;
 				donobar = 2;
 				KillTimer(TempoGuerrabar1);
 				UpdateBarText(barexit[playerid]);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, BRANCO_COR, "Você não está no Bar Jizzy's.");
				Dominando[playerid] = 0;
				Guerrandobar1 = 0;
				donobar = 0;
				KillTimer(TempoGuerrabar1);
				UpdateBarText(barexit[playerid]);
				return 1;
			}
		}
		return 1;
	}
	return true;
}
BPF::Guerrabar2(playerid)
{
	new string[128];
	if(GetPlayerOrg(playerid) == 24)
	{
	    if(Dominando[playerid] == 1)
		{
			if(barexit[playerid] == 2)
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
				foreach(Player, i)
			    {
				     if(PlayerInfo[i][pChatTerritorio] == 0)
				     {
	    	         format(string, sizeof(string), "%s e os Mayans Tomaram o Rock Bar!",PlayerName(playerid));
				     SendClientMessage(i, 0x33FFFFAA, string);
				     }
				}
 				Dominando[playerid] = 0;
 				Guerrandobar2 = 0;
 				donobar2 = 1;
 				KillTimer(TempoGuerrabar2);
 				UpdateBarText(barexit[playerid]);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, BRANCO_COR, "Você não está no Rock Bar.");
				Dominando[playerid] = 0;
				Guerrandobar2 = 0;
				donobar2 = 0;
				KillTimer(TempoGuerrabar2);
				UpdateBarText(barexit[playerid]);
				return 1;
			}
		}
		return 1;
	}
	if(GetPlayerOrg(playerid) == 25)
	{
	    if(Dominando[playerid] == 1)
		{
			if(barexit[playerid] == 2)
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
				foreach(Player, i)
			    {
				     if(PlayerInfo[i][pChatTerritorio] == 0)
				     {
                     format(string, sizeof(string), "%s e os Sons Of Anarchy Tomaram o Rock Bar!",PlayerName(playerid));
				     SendClientMessage(i, 0x535d7165, string);
				     }
				}
 				Dominando[playerid] = 0;
 				Guerrandobar2 = 0;
 				donobar2 = 2;
 				KillTimer(TempoGuerrabar2);
 				UpdateBarText(barexit[playerid]);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, BRANCO_COR, "Você não está no Rock Bar.");
				Dominando[playerid] = 0;
				Guerrandobar2 = 0;
				donobar2 = 0;
				KillTimer(TempoGuerrabar2);
				UpdateBarText(barexit[playerid]);
				return 1;
			}
		}
		return 1;
	}
	return true;
}
BPF::Guerrabar3(playerid)
{
	new string[128];
	if(GetPlayerOrg(playerid) == 24)
	{
	    if(Dominando[playerid] == 1)
		{
			if(barexit[playerid] == 3)
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
				foreach(Player, i)
			    {
				     if(PlayerInfo[i][pChatTerritorio] == 0)
				     {
                     format(string, sizeof(string), "%s e os Mayans Tomaram o Bar Conqui's!",PlayerName(playerid));
				     SendClientMessage(i, 0x33FFFFAA, string);
				     }
				}
 				Dominando[playerid] = 0;
 				Guerrandobar3 = 0;
 				donobar3 = 1;
 				KillTimer(TempoGuerrabar3);
 				UpdateBarText(barexit[playerid]);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, BRANCO_COR, "Você não está no Bar Conqui's.");
				Dominando[playerid] = 0;
				Guerrandobar3 = 0;
				donobar3 = 0;
				KillTimer(TempoGuerrabar3);
				UpdateBarText(barexit[playerid]);
				return 1;
			}
		}
		return 1;
	}
	if(GetPlayerOrg(playerid) == 25)
	{
	    if(Dominando[playerid] == 1)
		{
			if(barexit[playerid] == 3)
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
				foreach(Player, i)
			    {
				     if(PlayerInfo[i][pChatTerritorio] == 0)
				     {
                     format(string, sizeof(string), "%s e os Sons Of Anarchy Tomaram o Bar Conqui's!",PlayerName(playerid));
				     SendClientMessage(i, 0x535d7165, string);
				     }
				}
 				Dominando[playerid] = 0;
 				Guerrandobar3 = 0;
 				donobar3 = 2;
 				KillTimer(TempoGuerrabar3);
 				UpdateBarText(barexit[playerid]);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, BRANCO_COR, "Você não está no Bar Conqui's.");
				Dominando[playerid] = 0;
				Guerrandobar3 = 0;
				donobar3 = 0;
				KillTimer(TempoGuerrabar3);
				UpdateBarText(barexit[playerid]);
				return 1;
			}
		}
		return 1;
	}
	return true;
}
BPF::Guerrabar4(playerid)
{
	new string[128];
	if(GetPlayerOrg(playerid) == 24)
	{
	    if(Dominando[playerid] == 1)
		{
			if(barexit[playerid] == 4)
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
				foreach(Player, i)
			    {
				     if(PlayerInfo[i][pChatTerritorio] == 0)
				     {
                     format(string, sizeof(string), "%s e os Mayans Tomaram o Bar Fifth's!",PlayerName(playerid));
				     SendClientMessage(i, 0x33FFFFAA, string);
				     }
				}
 				Dominando[playerid] = 0;
 				Guerrandobar4 = 0;
 				donobar4 = 1;
 				KillTimer(TempoGuerrabar4);
 				UpdateBarText(barexit[playerid]);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, BRANCO_COR, "Você não está no Bar Fifth's.");
				Dominando[playerid] = 0;
				Guerrandobar4 = 0;
				donobar4 = 0;
				KillTimer(TempoGuerrabar4);
				UpdateBarText(barexit[playerid]);
				return 1;
			}
		}
		return 1;
	}
	if(GetPlayerOrg(playerid) == 25)
	{
	    if(Dominando[playerid] == 1)
		{
			if(barexit[playerid] == 4)
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
				foreach(Player, i)
			    {
				     if(PlayerInfo[i][pChatTerritorio] == 0)
				     {
                     format(string, sizeof(string), "%s e os Sons Of Anarchy Tomaram o Bar Fifth's!",PlayerName(playerid));
				     SendClientMessage(i, 0x535d7165, string);
				     }
				}
 				Dominando[playerid] = 0;
 				Guerrandobar4 = 0;
 				donobar4 = 2;
 				KillTimer(TempoGuerrabar4);
 				UpdateBarText(barexit[playerid]);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, BRANCO_COR, "Você não está no Bar Fifth's.");
				Dominando[playerid] = 0;
				Guerrandobar4 = 0;
				donobar4 = 0;
				KillTimer(TempoGuerrabar4);
				UpdateBarText(barexit[playerid]);
				return 1;
			}
		}
		return 1;
	}
	return true;
}
BPF::Guerrabar5(playerid)
{
	new string[128];
	if(GetPlayerOrg(playerid) == 24)
	{
	    if(Dominando[playerid] == 1)
		{
			if(barexit[playerid] == 5)
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
				foreach(Player, i)
			    {
				     if(PlayerInfo[i][pChatTerritorio] == 0)
				     {
                     format(string, sizeof(string), "%s e os Mayans Tomaram o Bar Lone's!",PlayerName(playerid));
				     SendClientMessage(i, 0x33FFFFAA, string);
				     }
				}
 				Dominando[playerid] = 0;
 				Guerrandobar5 = 0;
 				donobar5 = 1;
 				KillTimer(TempoGuerrabar5);
 				UpdateBarText(barexit[playerid]);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, BRANCO_COR, "Você não está no Bar Lone's.");
				Dominando[playerid] = 0;
				Guerrandobar5 = 0;
				donobar5 = 0;
				KillTimer(TempoGuerrabar5);
				UpdateBarText(barexit[playerid]);
				return 1;
			}
		}
		return 1;
	}
	if(GetPlayerOrg(playerid) == 25)
	{
	    if(Dominando[playerid] == 1)
		{
			if(barexit[playerid] == 5)
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
				foreach(Player, i)
			    {
				     if(PlayerInfo[i][pChatTerritorio] == 0)
				     {
                     format(string, sizeof(string), "%s e os Sons Of Anarchy Tomaram o Bar Lone's!",PlayerName(playerid));
				     SendClientMessage(i, 0x535d7165, string);
				     }
				}
 				Dominando[playerid] = 0;
 				Guerrandobar5 = 0;
 				donobar5 = 2;
 				KillTimer(TempoGuerrabar5);
 				UpdateBarText(barexit[playerid]);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, BRANCO_COR, "Você não está no Bar Lone's.");
				Dominando[playerid] = 0;
				Guerrandobar5 = 0;
				donobar5 = 0;
				KillTimer(TempoGuerrabar5);
				UpdateBarText(barexit[playerid]);
				return 1;
			}
		}
		return 1;
	}
	return true;
}
BPF::GuerraMafiaPorto(playerid)
{
	if(!IsPlayerConnected(playerid) || GetPlayerOrg(playerid) < 1)
	{
		return GangZoneStopFlashForAll(GZPorto);
	}
	new org = GetPlayerOrg(playerid);
	if(ProvocoMafiaPorto[playerid] == 1)
	{
	    new string[128];
		if(IsPlayerInPorto(playerid))
		{
		    if(donomafiaporto < 1)
		    {
    	  		if(IsACop(playerid)) {
			        format(string, sizeof string, "[Policial Federal]: %s retomou o controle do Porto", NomePlayer(playerid));
                    SendClientMessageToAll(0x91766296, string);
				}else {
		        	format(string, sizeof string, "[Mafioso]: %s e a %s tomaram o territorio do Porto", NomePlayer(playerid), GetOrgName(org));
					SendClientMessageToAll(0x00660CC8, string);
				}
			}
			else
			{
			    if(donomafiaporto != org)
			    {
     			    if(IsACop(playerid)) {
			        	format(string, sizeof string, "[Policial Federal]: %s retomou o controle do Porto de Los Santos", NomePlayer(playerid));
                    	SendClientMessageToAll(0x91766296, string);
					}else {
		        		format(string, sizeof string, "[Mafioso]: %s e a %s tomaram o territorio do Porto da %s", NomePlayer(playerid), GetOrgName(org), GetOrgName(donomafiaporto));
						SendClientMessageToAll(GetPlayerColor(playerid), string);
					}
					format(string, sizeof string, "%s e a %s tomaram o Porto de vocês, vão lá e retomem o local", NomePlayer(playerid), GetOrgName(org));
					SendFamilyMessage(donomafiaporto, GetPlayerColor(playerid), string);
				}
			}
			GangZoneStopFlashForAll(GZPorto);
			GangZoneShowForAll(GZPorto,GetPlayerGZColor(playerid));
			Dominando[playerid]= 0;
			ProvocoMafiaPorto[playerid] = 0;
			donomafiaporto = org;
			SendClientMessage(playerid, COLOR_GREY, "Esta area agora pertence a sua organização, voce ira ganhar dinheiro se manter o local sob seu controle");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Você não está no territorio do Porto.");
			Dominando[playerid]= 0;
			GangZoneStopFlashForAll(GZPorto);
			ProvocoMafiaPorto[playerid] = 0;
		}
	}
	return true;
}
BPF::GuerraMafia(playerid)
{
	if(!IsPlayerConnected(playerid) || GetPlayerOrg(playerid) < 1)
	{
		return GangZoneStopFlashForAll(GZMafia);
	}
	new org = GetPlayerOrg(playerid);
	if(ProvocoMafia[playerid] == 1)
	{
	    new string[128];
		if(IsPlayerInRoda(playerid))
		{
		    if(donomafia < 1)
		    {
    	  		if(IsACop(playerid)) {
			        format(string, sizeof string, "[Policial Federal]: %s retomou o controle da Roda Gigante", NomePlayer(playerid));
                    SendClientMessageToAll(0x91766296, string);
				}else {
		        	format(string, sizeof string, "[Mafioso]: %s e a %s tomaram o territorio da Roda Gigante", NomePlayer(playerid), GetOrgName(org));
					SendClientMessageToAll(0x00660CC8, string);
				}
			}
			else
			{
			    if(donomafia != org)
			    {
     			    if(IsACop(playerid)) {
			        	format(string, sizeof string, "[Policial Federal]: %s retomou o controle da Roda Gigante", NomePlayer(playerid));
                    	SendClientMessageToAll(0x91766296, string);
					}else {
		        		format(string, sizeof string, "[Mafioso]: %s e a %s tomaram o territorio da Roda Gigante da %s", NomePlayer(playerid), GetOrgName(org), GetOrgName(donomafia));
						SendClientMessageToAll(GetPlayerColor(playerid), string);
					}
					format(string, sizeof string, "%s e a %s tomaram a Roda Gigante de vocês, vão lá e retomem o local", NomePlayer(playerid), GetOrgName(org));
					SendFamilyMessage(donomafia, GetPlayerColor(playerid), string);
				}
			}
			GangZoneStopFlashForAll(GZMafia);
			GangZoneShowForAll(GZMafia,GetPlayerGZColor(playerid));
			Dominando[playerid]= 0;
			ProvocoMafia[playerid] = 0;
			donomafia = org;
			SendClientMessage(playerid, COLOR_GREY, "Esta area agora pertence a sua organização, voce ira ganhar dinheiro se manter o local sob seu controle");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Você não está no territorio da pista de skate.");
			Dominando[playerid]= 0;
			GangZoneStopFlashForAll(GZMafia);
			ProvocoMafia[playerid] = 0;
		}
	}
	return true;
}

BPF::SBan(playerid, striing[], string2[])
{
	new gstring[128];
	new arquivo[88],tmp2[20], stri[64], ip[16], tmp4[20];
	GetPlayerIp(playerid, ip, sizeof ip);
	format(arquivo, sizeof(arquivo), Pasta_Banidos,PlayerName(playerid));
	getdate(Ano, Mes, Dia);
	format(tmp4, 20, "%2d/%2d/%4d", Dia, Mes, Ano);
	gettime(Hora, Minuto, Segundo);
	format(tmp2, 20, "%2d:%2d:%2d", Hora, Minuto, Segundo);
	format(gstring, 128, "[%2d/%2d/%2d] [%2d:%2d:%2d] %s IP:%s foi banido pelo admin %s, motivo: %s", v[2], v[1], v[0], v[3], v[4], v[5], PlayerName(playerid),
	ip, string2, striing);
	BPFLogs("sban", gstring);
	if(DOF2_FileExists(arquivo))
	{
		Kick(playerid);
	}
	else
	{
		DOF2_CreateFile(arquivo);
		DOF2_SetString(arquivo,"Admin",string2);
		DOF2_SetString(arquivo,"Motivo",striing);
		DOF2_SetString(arquivo,"Data",tmp4);
		DOF2_SetString(arquivo,"Hora",tmp2);
		DOF2_SetString(arquivo,"IP",ip);
		DOF2_SaveFile();

		format(stri, sizeof(stri), Pasta_IPsBanidos,ip);
		DOF2_CreateFile(stri);
		DOF2_SetString(stri,"Admin",string2);
		DOF2_SetString(stri,"Motivo",striing);
		DOF2_SetString(stri,"Data",tmp4);
		DOF2_SetString(stri,"Hora",tmp2);
		DOF2_SetString(stri,"Nick",PlayerName(playerid));
		DOF2_SaveFile();
		Kick(playerid);
	}
	return true;
}
BPF::GranaTerritorios()
{
    new string[128];
    for(new i=0; i<MAX_PLAYERS; i++)
	{
        if(IsPlayerConnected(i))
        {
			if(PlayerInfo[i][pMembro] != 0 || PlayerInfo[i][pLider] != 0)
			{
				new RandInicio = 600;
				new RandPedreira = RandInicio + random(350);
				if(donoMata == GetPlayerOrg(i)) // GROOVE
	    		{
	                GivePlayerMoney(i, RandPedreira);
	                format(string, sizeof(string), "Agência %s: {FFFFFF}Você recebeu {00AA00}R$%d{FFFFFF}, Por manter a Mata Sobre Controle.",NomeORG(i),RandPedreira);
	                SendClientMessage(i, COLOR_LIGHTBLUE, string);
	    		}
                if(donopedreira == GetPlayerOrg(i)) // GROOVE
	    		{
	                GivePlayerMoney(i, RandPedreira);
	                format(string, sizeof(string), "Agência %s: {FFFFFF}Você recebeu {00AA00}R$%d{FFFFFF}, Por manter a Mata Sobre Controle.",NomeORG(i),RandPedreira);
	                SendClientMessage(i, COLOR_LIGHTBLUE, string);
	    		}
			}
 	    }
 	}
	return 1;
}
stock OrgPodeGuerriarPedreira(playerid,org)
{
    new porg;
	if(PlayerInfo[playerid][pMembro] > 0)
	{
		porg = PlayerInfo[playerid][pMembro];
	}
	if(PlayerInfo[playerid][pLider] > 0)
	{
		porg = PlayerInfo[playerid][pLider];
	}
	if(org == 3) { if(porg == org) { return 1; } }
	if(org == 6) { if(porg == org) { return 1; } }
	if(org == 15) { if(porg == org) { return 1; } }
	if(org == 33) { if(porg == org) { return 1; } }
	return 0;
}
forward RespawnCarPedreira();
public RespawnCarPedreira()
{
    new UsandoCar[MAX_VEHICLES];
 	for(new i=0; i<MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i) && IsPlayerInAnyVehicle(i))
        {
            UsandoCar[GetPlayerVehicleID(i)]= 1;
        }
    }
	for(new c = 0; c < MAX_VEHICLES; c++)
	{
		if(UsandoCar[c] != 1 && IsCarInPedreira(c))
        {
            SetVehicleToRespawn(c);
        }
	}
}
stock IsPlayerInPedreira(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if(x >= 452.9537 && y >= 652.5002 && x <= 828.2853 && y <= 1143.3212) return 1; // Pedreira
    else return 0;
}
stock PedreiraFlashForAll()
{
	{
    	GangZoneHideForAll(GZPedreira);
    	GangZoneShowForAll(GZPedreira,0xF6F6F6C8);
    	GangZoneFlashForAll(GZPedreira, 0xF60000C8);
	}
}
stock PedreiraFlashForPlayer(playerid)
{
	{
    	GangZoneHideForPlayer(playerid,GZPedreira);
    	GangZoneShowForPlayer(playerid,GZPedreira, 0xF6F6F6C8);
    	GangZoneFlashForPlayer(playerid,GZPedreira, 0xF60000C8);
	}
}
stock PedreiraShowForAll()
{
    DefinirCorPedreira();
	{
    	GangZoneHideForAll(GZPedreira);
    	GangZoneShowForAll(GZPedreira,Pedreira[Cor]);
	}
}
stock PedreiraShowForPlayer(playerid)
{
    DefinirCorPedreira();
	{
    	GangZoneHideForPlayer(playerid,GZPedreira);
    	GangZoneShowForPlayer(playerid,GZPedreira,Pedreira[Cor]);
	}
}
stock PedreiraHideForAll()
{
	{
    	GangZoneHideForAll(GZPedreira);
	}
}
stock PedreiraHideForPlayer(playerid)
{
	{
    	GangZoneHideForPlayer(playerid,GZPedreira);
	}
}

public DefinirCorPedreira()
{
    if(Pedreira[Dono] == 0)
	{
		Pedreira[Cor] = 0xFFFFFF96;
	}
	if(Pedreira[Dono] == 3)
	{
		Pedreira[Cor] = COR_EXE;
	}
	if(Pedreira[Dono] == 15)
	{
		Pedreira[Cor] = 0xCC0196FF;
	}
	if(Pedreira[Dono] == 23)
	{
		Pedreira[Cor] = 0xffcc99FF;
	}
	if(Pedreira[Dono] == 29)
	{
		Pedreira[Cor] = 0x6E6E6E96;
	}
}
public IniciarGuerraPedreira()
{
    KillTimer(IniciandoGuerraP);
    if(Pedreira[Guerra] >= 1)
	{
	    return 1;
	}
	for(new o=0; o<MAX_ORGS; o++)
	{
	    PedreiraPontos[o] = 0;
	}
	Pedreira[Guerra] = 1;
	Pedreira[Dono] = 0;
	PedreiraFlashForAll();
	SendClientMessageToAll(0xFFFFFFAA," ");
    SendClientMessageToAll(0xFFFFFFAA,"» Guerra da Pedreira para Exército vs Terroristas - {00FF00}INÍCIADA");
    SendClientMessageToAll(0xC6E2FFAA,"»            A Guerra da Pedreira acabará em 1 hora                «");
    SendClientMessageToAll(0xC6E2FFAA,"» ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ «");
	SendClientMessageToAll(0xFFFFFFAA," ");
    for(new i=0; i<MAX_PLAYERS; i++)
	{
	    	new Float:x,Float:y,Float:z;
	    	GetPlayerPos(i,x,y,z);
    		PlayerPlaySound(i, 1135, x, y, z);
    		PlayerPlaySound(i, 1135, x, y, z);
    		PlayerPlaySound(i, 1135, x, y, z);
    		if(OrgPodeGuerriarPedreira(i,GetPlayerOrg(i)))
    		{
                new gstring[128];
    		    format(gstring, sizeof(gstring), "** Agência %s: Sua Organização é Participante da Pedreira, Suba para Domina-lo.",NomeORG(i));
      			SendClientMessage(i, 0x77EEA1FF, gstring);
    		}
	}
	CheckPTempo = SetTimer("CheckPedreiraArea",5000,1);
	PedreirPtempo = SetTimer("PedreiraP",5000,1);
    RespawnPedreiraAuto = SetTimer("RespawnCarPedreira",300000,1);
	return 1;
}
public FinalizarGuerraPedreira()
{
    new vencedorpontospedreira = 0;
    KillTimer(CheckPTempo);
    KillTimer(PedreirPtempo);
    KillTimer(FinalizandoGuerraP);
    KillTimer(RespawnPedreiraAuto);
    if(Pedreira[Guerra] >= 1)
	{
        for(new o=0; o<MAX_ORGS; o++)
		{
      		if(PedreiraPontos[o] >= vencedorpontospedreira)
		    {
                vencedorpontospedreira = PedreiraPontos[o];
 		   }
		}
		for(new opt=0; opt<MAX_ORGS; opt++)
		{
      	if(PedreiraPontos[opt] == vencedorpontospedreira)
		    {
		        new NomeOrgPedreira[64];
                new GranaPedreira;
				OrgNome(opt, NomeOrgPedreira, 64);
				Pedreira[Dono] = opt;
				SendClientMessageToAll(0xFFFFFFAA," ");
                SendClientMessageToAll(0xFFFFFFAA,"» Guerra da Pedreira para Exército vs Terroristas - {FF0000}FINALIZADA {FFFFFF}«");
                format(strwzap, sizeof(strwzap),"»                      Organização Vencedora: %s               «", NomeOrgPedreira);
			    SendClientMessageToAll(0xFFFFFFAA,strwzap);
			    format(strwzap, sizeof(strwzap),"»                        {00FF00}%d {FFFFFF}Pontos no final                    «", vencedorpontospedreira);
			    SendClientMessageToAll(0xFFFFFFAA,strwzap);
                GranaPedreira = vencedorpontospedreira*427;
                if(Pedreira[Dono] == 0)
                {
                    SendClientMessageToAll(0x808080AA,"[GUERRA] Ninguem Ganhou a Guerra do Pedreira, Por tanto todos Pagarão pelas Drogas!");
                }
				if(Pedreira[Dono] == 3 && Pedreira[Dono] != 0)
                {
                    SendClientMessageToAll(0xFF8080AA,"[GUERRA] Os Policiais estão Controlando o Trafico no Pedreira, Não Haverá Drogas à Venda!");
					format(strwzap, sizeof(strwzap), "Paradise City:{FFFFFF} O Exército Venceu a Guerra, e Pelo Controle Receberá uma Bonificação de R$ %d no Cofre de todas as Org´s do Governo.", GranaPedreira);
					SendClientMessageToAll(0xFF9DFFFF, strwzap);
                    DepositarGranaOrg(3,GranaPedreira);
                    DepositarGranaOrg(32,GranaPedreira);
                    DepositarGranaOrg(7,GranaPedreira+10000);
                }
				if(Pedreira[Dono] != 15 || Pedreira[Dono] != 23 && Pedreira[Dono] != 29)
                {
                    SendClientMessageToAll(0xFF8000AA,"[GUERRA] Os Membros da Org Vencedora Terão Materiais Grátis!");
					format(strwzap, sizeof(strwzap), "Paradise City:{FFFFFF} A Org %s Venceu a Guerra, e Pelo Controle Receberá uma Bonificação de R$ %d no Cofre.",NomeOrgPedreira, GranaPedreira);
					SendClientMessageToAll(0xFF9DFFFF, strwzap);
                    DepositarGranaOrg(Pedreira[Dono],GranaPedreira);
                }
				SendClientMessageToAll(COLOR_GREEN," ");
				Pedreira[Guerra] = 0;
                PedreiraP();
				PedreiraShowForAll();
				for(new o=0; o<MAX_ORGS; o++)
				{
					PedreiraPontos[o] = 0;
				}
                for(new i=0; i<MAX_PLAYERS; i++)
				{
					new Float:x,Float:y,Float:z;
					GetPlayerPos(i,x,y,z);
					PlayerPlaySound(i, 1135, x, y, z);
					PlayerPlaySound(i, 1135, x, y, z);
					PlayerPlaySound(i, 1135, x, y, z);
					if(Pedreira[Dono] != 0)
					{
						if(GetPlayerOrg(i) == Pedreira[Dono])
			    		{
			    		    format(strwzap, sizeof(strwzap), "** Agência %s: Sua Organização Venceu a Guerra da Pedreira, Poderá pegar Materiais sempre que Quiser, Mesmo que não seja Vendedor.",NomeORG(i));
			      			SendClientMessage(i, 0x77EEA1FF, strwzap);
			    		}
					}
				}
				return 1;
		    }
		}
	}
	return 1;
}
stock OrgNome(orgid, Nome[], len)
{
    if(orgid == 3) return format(Nome, len, "Exército", 0);
	if(orgid == 15) return format(Nome, len, "Estado Islâmico", 0);
    if(orgid == 23) return format(Nome, len, "As FARC", 0);
	return format(Nome, len, "Ninguem", 0);
}
forward CheckPedreiraArea();
public CheckPedreiraArea()
{
    for(new i=0; i<MAX_PLAYERS; i++)
	{
    	if(IsPlayerConnected(i))
    	{
        	if(Pedreira[Guerra] >= 1)
        	{
        	    new org = GetPlayerOrg(i);
        	    if(OrgPodeGuerriarPedreira(i,org))
            	{
            	    if(IsPlayerInPedreira(i))
            	    {
           		       PedreiraPontos[org] += 1;
           		    }
           		}
    		}
    	}
    }
    return 1;
}
forward PedreiraP();
public PedreiraP()
{
	new GDPstring[128];
    for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(IsPlayerInPedreira(i) && Pedreira[Guerra] >= 1)
     		{
       			    format(GDPstring,sizeof(GDPstring),"~g~~h~Exercito ~w~- %d",PedreiraPontos[3]);
					TextDrawSetString(TextPedreira2, GDPstring);
       				format(GDPstring,sizeof(GDPstring),"E.Islamico ~w~- %d",PedreiraPontos[15]);
					TextDrawSetString(TextPedreira3, GDPstring);
					format(GDPstring,sizeof(GDPstring),"~p~As FARC ~w~- %d",PedreiraPontos[23]);
					TextDrawSetString(TextPedreira4, GDPstring);
					TextDrawShowForPlayer(i, TextPedreira0);
                    TextDrawShowForPlayer(i, TextPedreira1);
                    TextDrawShowForPlayer(i, TextPedreira2);
                    TextDrawShowForPlayer(i, TextPedreira3);
                    TextDrawShowForPlayer(i, TextPedreira4);
                    TextDrawShowForPlayer(i, TextPedreira5);
                    TextDrawShowForPlayer(i, TextPedreira6);
                    //pTextDrawFC[i] = 0;
		    }
			else
			{
		            TextDrawHideForPlayer(i, TextPedreira0);
                    TextDrawHideForPlayer(i, TextPedreira1);
                    TextDrawHideForPlayer(i, TextPedreira2);
                    TextDrawHideForPlayer(i, TextPedreira3);
                    TextDrawHideForPlayer(i, TextPedreira4);
                    TextDrawHideForPlayer(i, TextPedreira5);
                    TextDrawHideForPlayer(i, TextPedreira6);
                    //pTextDrawFC[i] = 1;
			}
        }
    }
    return 1;
}
stock IsCarInPedreira(carid)
{
    new Float:x,Float:y,Float:z;
    GetVehiclePos(carid, x, y, z);
    if(x >= 2202.403320 && y >= -1131.981933 && x <= 2322.403320 && y <= -1107.981933) return 1; // Pedreira
    else return 0;
}
BPF::BanTemp(playerid, striing[], string2[])
{
	new arquivo[88], tmp2[20], stri[64], ip[16], tmp4[20];
	new tMinuto[20], tSegundo[20], tHora[20], tDia[20], tMes[20], tAno[20], tData[20];
	GetPlayerIp(playerid, ip, sizeof ip);
	format(arquivo, sizeof(arquivo), Pasta_BanidosTemp,PlayerName(playerid));
	getdate(Ano, Mes, Dia);
	format(tmp4, 20, "%2d/%2d/%4d", Dia, Mes, Ano);
	gettime(Hora, Minuto, Segundo);
	format(tmp2, 20, "%2d:%2d:%2d", Hora, Minuto, Segundo);

	format(tHora, 20, "%02d", Hora);
	format(tMinuto, 20, "%02d", Minuto);
	format(tSegundo, 20, "%02d", Segundo);

	format(tDia, 20, "%02d", PlayerInfo[playerid][pDiaBanTemp]);
	format(tMes, 20, "%02d", PlayerInfo[playerid][pMesBanTemp]);
	format(tAno, 20, "%04d", PlayerInfo[playerid][pAnoBanTemp]);
	format(tData, 20, "%02d", PlayerInfo[playerid][pDataBanTemp]);

	// Conta----
	DOF2_CreateFile(arquivo);
	DOF2_SetString(arquivo,"IP",ip);
	DOF2_SetString(arquivo,"Admin",string2);
	DOF2_SetString(arquivo,"Motivo",striing);
	DOF2_SetString(arquivo,"Data",tmp4);
	DOF2_SetString(arquivo,"Hora",tmp2);
	DOF2_SetString(arquivo,"DiaBanTemp",tDia);
	DOF2_SetString(arquivo,"MesBanTemp",tMes);
	DOF2_SetString(arquivo,"AnoBanTemp",tAno);
	DOF2_SetString(arquivo,"DataBanTemp",tData);
	DOF2_SetString(arquivo,"HoraBanTemp",tHora);
	DOF2_SetString(arquivo,"MinutoBanTemp",tMinuto);
	DOF2_SetString(arquivo,"SegundoBanTemp",tSegundo);
	DOF2_SetInt(arquivo,"TimeData",gettime());
	DOF2_SaveFile();

	// IP----
	format(stri, sizeof(stri), Pasta_IPsBanidosTemp,ip);
	if(!DOF2_FileExists(stri))DOF2_CreateFile(stri);
	DOF2_SetString(stri,"Admin",string2);
	DOF2_SetString(stri,"Motivo",striing);
	DOF2_SetString(stri,"Data",tmp4);
	DOF2_SetString(stri,"Hora",tmp2);
	DOF2_SetString(stri,"Nick",PlayerName(playerid));

	DOF2_SetString(stri,"DiaBanTemp",tDia);
	DOF2_SetString(stri,"MesBanTemp",tMes);
	DOF2_SetString(stri,"AnoBanTemp",tAno);
	DOF2_SetString(stri,"DataBanTemp",tData);
	DOF2_SetString(stri,"HoraBanTemp",tHora);
	DOF2_SetString(stri,"MinutoBanTemp",tMinuto);
	DOF2_SetString(stri,"SegundoBanTemp",tSegundo);
	DOF2_SetInt(stri,"TimeData",gettime());
	DOF2_SaveFile();
	Kick(playerid);
	return true;
}


BPF::LoginAgora(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    SetPVarInt(playerid, "VarAC", 1);
		logouagora[playerid] = 0;
		CarregandoI[playerid] = 0;
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1 && PlayerInfo[playerid][pAdmin] <= 5000)
		{
			//ColocarAureola(playerid);
		}
	}
}
BPF::Corrida()
{
	if(pcorrida > 0)
	{
		pcorrida = 0;
	}
}
BPF::CorridaOni()
{
	if(pcorridaoni > 0)
	{
		pcorridaoni = 0;
	}
}

BPF::Sinc()
{
	if(psinc > 0)
	{
		psinc = 0;
	}
}

BPF::Sequestrar()
{
	if(psequestrar > 0)
	{
		psequestrar = 0;
	}
}

BPF::Amarrar()
{
	if(pamarrar > 0)
	{
		pamarrar = 0;
	}
}

BPF::CheckOwnerb(playerid)
{
 			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
	        	GetPlayerName(playerid,playername,sizeof(playername));
	        	if(strcmp(playername,BizzInfo[i][bOwner],true)==0)
	        	{
	        	    PlayerInfo[playerid][pPbiskey] = i;
	        	    return true;
	        	}
			}
			for(new i = 0; i < sizeof(SBizzInfo); i++)
			{
	        	GetPlayerName(playerid,playername,sizeof(playername));
	        	if(strcmp(playername,SBizzInfo[i][sbOwner],true)==0)
	        	{
	        	    PlayerInfo[playerid][pPbiskey] = i+100;
	        	    return true;
	        	}
			}
			PlayerInfo[playerid][pPbiskey] = 255;
			return true;
}

BPF::CheckOwnerf(playerid)
{
		for(new i = 0; i < sizeof(FBizzInfo); i++)
		{
	       	GetPlayerName(playerid,playername,sizeof(playername));
	       	if(strcmp(playername,FBizzInfo[i][fbOwner],true)==0)
	       	{
	       	    PlayerInfo[playerid][pPFazkey] = i;
	       	    return true;
	       	}
		}
		PlayerInfo[playerid][pPFazkey] = 255;
		return true;
}
BPF::CheckOwnerh(playerid)
{
		for(new h = 0; h < sizeof(HouseInfo); h++)
		{
        	GetPlayerName(playerid,playername,sizeof(playername));
        	if(strcmp(playername,HouseInfo[h][hOwner],true)==0 && HouseInfo[h][Created])
        	{
        	    PlayerInfo[playerid][pPHousekey] = h;
        	    SwitchKey[playerid] = 1;
        	    return true;
        	}
		}
		PlayerInfo[playerid][pPHousekey] = 500;
		return true;
}
static stock SalvarCarros()
{
	new strsave[64];
	for(new idx = 0; idx < sizeof(CarInfo); idx ++)
	{
	    format(strsave, sizeof strsave, Pasta_Carros, idx);
		DOF2_SetInt(strsave, "Modelo", CarInfo[idx][cModel]);
		DOF2_SetFloat(strsave, "CarroX", CarInfo[idx][cLocationx]);
		DOF2_SetFloat(strsave, "CarroY", CarInfo[idx][cLocationy]);
		DOF2_SetFloat(strsave, "CarroZ", CarInfo[idx][cLocationz]);
		DOF2_SetFloat(strsave, "CarroA", CarInfo[idx][cAngle]);
		DOF2_SetInt(strsave, "cor1", CarInfo[idx][cColorOne]);
		DOF2_SetInt(strsave, "cor2", CarInfo[idx][cColorTwo]);
		DOF2_SetString(strsave, "Dono", CarInfo[idx][cOwner]);
		DOF2_SetString(strsave, "Descricao", CarInfo[idx][cDescription]);
		DOF2_SetInt(strsave, "Valor", CarInfo[idx][cValue]);
		DOF2_SetInt(strsave, "Licence", CarInfo[idx][cLicense]);
		DOF2_SetInt(strsave, "TemDono", CarInfo[idx][cOwned]);
		DOF2_SetInt(strsave, "Trancado", CarInfo[idx][cLock]);
		DOF2_SetInt(strsave, "Grana", CarInfo[idx][cGrana]);
		DOF2_SetInt(strsave, "Entrada", CarInfo[idx][cEntrada]);
		DOF2_SetInt(strsave, "Date", CarInfo[idx][cDate]);

		DOF2_SetFloat(strsave, "OCarroX", CarInfo[idx][cOLocationx]);
		DOF2_SetFloat(strsave, "OCarroY", CarInfo[idx][cOLocationy]);
		DOF2_SetFloat(strsave, "OCarroZ", CarInfo[idx][cOLocationz]);
		DOF2_SetFloat(strsave, "OCarroA", CarInfo[idx][cOAngle]);

		DOF2_SaveFile();
	}
	return true;
}
static stock SalvarCarro(idx)
{
	new strsave[64];
   	format(strsave, sizeof strsave, Pasta_Carros, idx);
   	if(DOF2_FileExists(strsave))
   	{
		DOF2_SetInt(strsave, "Modelo", CarInfo[idx][cModel]);
		DOF2_SetFloat(strsave, "CarroX", CarInfo[idx][cLocationx]);
		DOF2_SetFloat(strsave, "CarroY", CarInfo[idx][cLocationy]);
		DOF2_SetFloat(strsave, "CarroZ", CarInfo[idx][cLocationz]);
		DOF2_SetFloat(strsave, "CarroA", CarInfo[idx][cAngle]);
		DOF2_SetInt(strsave, "cor1", CarInfo[idx][cColorOne]);
		DOF2_SetInt(strsave, "cor2", CarInfo[idx][cColorTwo]);
		DOF2_SetString(strsave, "Dono", CarInfo[idx][cOwner]);
		DOF2_SetString(strsave, "Descricao", CarInfo[idx][cDescription]);
		DOF2_SetInt(strsave, "Valor", CarInfo[idx][cValue]);
		DOF2_SetInt(strsave, "Licence", CarInfo[idx][cLicense]);
		DOF2_SetInt(strsave, "TemDono", CarInfo[idx][cOwned]);
		DOF2_SetInt(strsave, "Trancado", CarInfo[idx][cLock]);
		DOF2_SetInt(strsave, "Grana", CarInfo[idx][cGrana]);
		DOF2_SetInt(strsave, "Entrada", CarInfo[idx][cEntrada]);
		DOF2_SetInt(strsave, "Date", CarInfo[idx][cDate]);

		DOF2_SetFloat(strsave, "OCarroX", CarInfo[idx][cOLocationx]);
		DOF2_SetFloat(strsave, "OCarroY", CarInfo[idx][cOLocationy]);
		DOF2_SetFloat(strsave, "OCarroZ", CarInfo[idx][cOLocationz]);
		DOF2_SetFloat(strsave, "OCarroA", CarInfo[idx][cOAngle]);

		DOF2_SaveFile();
	}
	return true;
}

static stock CarregarCarros()
{
	new strsave[100];
 //new string[128];
	new idx = 0;
	while(idx < sizeof(CarInfo))
	{
	    format(strsave, sizeof strsave, Pasta_Carros, idx);
	    if(DOF2_FileExists(strsave))
	    {
			CarInfo[idx][cModel] = DOF2_GetInt(strsave, "Modelo");
			CarInfo[idx][cLocationx] = DOF2_GetFloat(strsave, "CarroX");
			CarInfo[idx][cLocationy] = DOF2_GetFloat(strsave, "CarroY");
			CarInfo[idx][cLocationz] = DOF2_GetFloat(strsave, "CarroZ");
			CarInfo[idx][cAngle] = DOF2_GetFloat(strsave, "CarroA");
			CarInfo[idx][cColorOne] = DOF2_GetInt(strsave, "cor1");
			CarInfo[idx][cOLocationx] = DOF2_GetFloat(strsave, "CarroX");
			CarInfo[idx][cOLocationy] = DOF2_GetFloat(strsave, "CarroY");
			CarInfo[idx][cOLocationz] = DOF2_GetFloat(strsave, "CarroZ");
			CarInfo[idx][cOAngle] = DOF2_GetFloat(strsave, "CarroA");
			CarInfo[idx][cColorTwo] = DOF2_GetInt(strsave, "cor2");
			strmid(CarInfo[idx][cOwner], DOF2_GetString(strsave, "Dono"), 0 , strlen(DOF2_GetString(strsave, "Dono")), 255);
			strmid(CarInfo[idx][cDescription], DOF2_GetString(strsave, "Descricao"), 0, strlen(DOF2_GetString(strsave, "Descricao")), 255);
			CarInfo[idx][cValue] = DOF2_GetInt(strsave, "Valor");
			CarInfo[idx][cLicense] = DOF2_GetInt(strsave, "Licence");
			CarInfo[idx][cOwned] = DOF2_GetInt(strsave, "TemDono");
			CarInfo[idx][cLock] = DOF2_GetInt(strsave, "Trancado");
			CarInfo[idx][cGrana] = DOF2_GetInt(strsave, "Grana");
			CarInfo[idx][cEntrada] = DOF2_GetInt(strsave, "Entrada");
			CarInfo[idx][cDate] = DOF2_GetInt(strsave, "Date");

			if(CarInfo[idx][cModel] == 0)
			{
			    CarInfo[idx][cModel] = 559;
			}
			if(CarInfo[idx][cValue] == 0)
			{
			    CarInfo[idx][cValue] = 10000;
			}
			if(CarInfo[idx][cEntrada] < 1000)
			{
			    CarInfo[idx][cEntrada] = 1000;
			}

			CarInfo[idx][ownedvehicle] = AddStaticVehicleEx(CarInfo[idx][cModel],
			CarInfo[idx][cLocationx],CarInfo[idx][cLocationy],CarInfo[idx][cLocationz],
			CarInfo[idx][cAngle],CarInfo[idx][cColorOne],CarInfo[idx][cColorTwo],-1);


			if(strlen(CarInfo[idx][cDescription]) < 2){
			    strmid(CarInfo[idx][cDescription], "Nenhuma", 0, strlen("Nenhuma"), 255);
			}
			if(strlen(CarInfo[idx][cOwner]) < 2){
			    strmid(CarInfo[idx][cOwner], "Ninguém", 0, strlen("Ninguém"), 255);
			}

			if(CarInfo[idx][cOwned])
			{
				//format(string, sizeof string, "{50AAFE}Dono: %s\n{FFFF00}Descrição\n{FFFFFF}»%s«", CarInfo[idx][cOwner], CarInfo[idx][cDescription]);
				//CarInfo[idx][cText] = Create3DTextLabel(string, 0xffffaa, 0.0, 0.0, 0.0, 10.0, 0);
				//Attach3DTextLabelToVehicle(CarInfo[idx][cText], CarInfo[idx][ownedvehicle], 0.0, 0.0, 0.0);
			}
			else
   			{
				//CarInfo[idx][cText] = Create3DTextLabel("{50AAFE}Dono: Ninguém\n{FFFF00}Descrição\n{FFFFFF}»Sem Dono«", 0xffffaa, 0.0, 0.0, 0.0, 15.0, 0);
                //Attach3DTextLabelToVehicle(CarInfo[idx][cText], CarInfo[idx][ownedvehicle], 0.0, 0.0, 0.0);
			}
		}
		idx++;
	}
	return idx;
}

BPF::Checkproop()
{
	new curdate = getdate();
 	new string[128];

 	for(new i = 1; i < sizeof(InfoOrg); i++)
	    if(curdate > CofreOrg[i][DiaLider])
	        if(strcmp(InfoOrg[i][Lider], "Ninguém", true) == 0)
			{
			    CofreOrg[i][DiaLider] = getdate()+300;
			}
	        else
	        {
		        format(string, sizeof string, "ATENÇÃO: A organização [%s] agora está sem lider.", GetNomeOrg(i));
		        SendClientMessageToAll(0xFFC06CFF, string);
		    	strmid(InfoOrg[i][Lider], "Ninguém", 0, strlen("Ninguém"), 255);
				format(string, sizeof(string), Pasta_MembrosOrg, i);
		       	DOF2_SetString(string,"Lider","Ninguém");
		       	CofreOrg[i][DiaLider] = getdate()+300;
		       	DOF2_SaveFile();

				format(InfoOrg[i][UL_Lider],128, "00/00/0000 as 00:00:00");
				SalvarLoginOrg(i);
			}
	for(new h = 0; h < sizeof(HouseInfo); h++)
		if(HouseInfo[h][hOwned] == 1)
			if(curdate >= HouseInfo[h][hDate]+9)
			{
				HouseInfo[h][hHel] = 0;
				HouseInfo[h][hArm] = 0;
				HouseInfo[h][hHealthx] = 0;
				HouseInfo[h][hHealthy] = 0;
				HouseInfo[h][hHealthz] = 0;
				HouseInfo[h][hArmorrx] = 0;
				HouseInfo[h][hArmorry] = 0;
				HouseInfo[h][hArmorrz] = 0;
				HouseInfo[h][hLock] = 1;
				HouseInfo[h][hOwned] = 0;
				HouseInfo[h][hVcol1] = -1;
				HouseInfo[h][hVcol2] = -1;
				strmid(HouseInfo[h][hOwner], "O Estado", 0, strlen("O Estado"), 255);
				format(string, sizeof(string), "CASAS: A casa ID: %d foi liberada por inatividade do dono.",h);
				BPFLogs("casas", string);
				ABroadCast(0xC2A2DAFF,string, 1337);

				DestroyDynamicMapIcon(HouseInfo[h][hMapIcon]);
				HouseInfo[h][hMapIcon] = CreateDynamicMapIcon(HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez], 31, 0xE6E6E6E6, -1, -1, -1, 180.0);
                SaveCasa(h);
                Atualizar3Dtexts();
			}
	//liberação Empresas Automático
	for(new b = 0; b < sizeof(BizzInfo); b++)
		if(BizzInfo[b][bOwned] == 1)
			if(curdate >= BizzInfo[b][bDate]+9)
			{
				BizzInfo[b][bLocked] = 0;
				BizzInfo[b][bOwned] = 0;
				strmid(BizzInfo[b][bOwner], "Ninguém", 0, strlen("Ninguém"), 255);
				strmid(BizzInfo[b][bExtortion], "Ninguém", 0, strlen("Ninguém"), 255);
				format(string, sizeof(string), "PROPRIEDADES: A empresa %d foi liberada por falta de produtos", b);
				SendClientMessageToAll(0xC2A2DAFF, string);
				BPFLogs("empresas", string);
				SalvarEmpresa(b);
				Atualizar3Dtexts();
			}
    //liberação SEmpresas Automático
	for(new b = 0; b < sizeof(SBizzInfo); b++)
		if(SBizzInfo[b][sbOwned] == 1)
			if(curdate >= SBizzInfo[b][sbDate]+9)
			{
				SBizzInfo[b][sbLocked] = 0;
				SBizzInfo[b][sbOwned] = 0;
				strmid(SBizzInfo[b][sbOwner], "Ninguém", 0, strlen("Ninguém"), 255);
				strmid(SBizzInfo[b][sbExtortion], "Ninguém", 0, strlen("Ninguém"), 255);
				format(string, sizeof(string), "[Mobiliária]: vendeu a s-empresa ID: %d", b);
				SendClientMessageToAll(0xC2A2DAFF, string);
				BPFLogs("empresas", string);
				SalvarSEmpresa(b);
				Atualizar3Dtexts();
			}
    //liberação Fazendas Automático
	for(new b = 0; b < sizeof(FBizzInfo); b++)
		if(FBizzInfo[b][fbOwned] == 1)
			if(curdate >= FBizzInfo[b][fbDate]+9)
			{
				FBizzInfo[b][fbLocked] = 0;
				FBizzInfo[b][fbOwned] = 0;
				strmid(FBizzInfo[b][fbOwner], "Ninguém", 0, strlen("Ninguém"), 255);
				strmid(FBizzInfo[b][fbExtortion], "Ninguém", 0, strlen("Ninguém"), 255);
				format(string, sizeof(string), "FAZENDA: A fazenda %d foi liberada por falta de produtos", b);
				SendClientMessageToAll(0xC2A2DAFF, string);
				BPFLogs("empresas", string);
				SalvarFEmpresa(b);
				Atualizar3Dtexts();
			}

	for(new idx; idx < sizeof(CarInfo); idx++)
	    if(CarInfo[idx][cOwned] && curdate > CarInfo[idx][cDate])
   		{
			CarInfo[idx][cLocationx] = CarInfo[idx][cOLocationx];
			CarInfo[idx][cLocationy] = CarInfo[idx][cOLocationy];
			CarInfo[idx][cLocationz] = CarInfo[idx][cOLocationz];
			CarInfo[idx][cAngle] = CarInfo[idx][cOAngle];

			CarInfo[idx][cModel] = 559;
			CarInfo[idx][cColorOne] = 1;
			CarInfo[idx][cColorTwo] = 1;

			strmid(CarInfo[idx][cOwner], "Ninguém", 0 , strlen("Ninguém"), 255);
			strmid(CarInfo[idx][cDescription], "Nenhuma", 0, strlen("Nenhuma"), 255);
			CarInfo[idx][cOwned] = 0;

			DestroyVehicle(CarInfo[idx][ownedvehicle]);
			CarInfo[idx][ownedvehicle] = CreateVehicle(CarInfo[idx][cModel],CarInfo[idx][cLocationx],CarInfo[idx][cLocationy],CarInfo[idx][cLocationz]+1.0,CarInfo[idx][cAngle],CarInfo[idx][cColorOne],CarInfo[idx][cColorTwo], -1);

			format(string, sizeof(string), "CARROS: Um carro está a venda por $%d", CarInfo[idx][cValue]);
			SendClientMessageToAll(0xC2A2DAFF, string);

			//Delete3DTextLabel(CarInfo[idx][cText]);
			//CarInfo[idx][cText] = Create3DTextLabel("{50AAFE}Dono: Ninguém\n{FFFF00}Descrição\n{FFFFFF}»Sem Dono«", 0xffffaa, 0.0, 0.0, 0.0, 15.0, 0);
            //Attach3DTextLabelToVehicle(CarInfo[idx][cText], CarInfo[idx][ownedvehicle], 0.0, 0.0, 0.0);

			SalvarCarro(idx);
			SetTimer("CheckCarros", 3000, 0);
		}
	return 1;
}
BPF::PrestesExplodir(playerid)
{
	if(GetPVarInt(playerid,"Explodir") == 1)
	{
		GetPlayerPos(playerid, Ax, Bx, Cx);
 		for(new i; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerInRangeOfPoint(i,8.0,Ax,Bx,Cx))
			{
				SetPlayerHealth(i,0);
				PlayerPlaySound(i, 1057, Ax, Bx, Cx);
			}
		}
		new Nick[MAX_PLAYER_NAME];
		new string[128];
		GetPlayerName(playerid, Nick, sizeof(Nick));
		CreateExplosion(Ax, Bx, Cx, 6, 50.0);
		StopPlayerHoldingObject(playerid);
 		SetPVarInt(playerid, "Explodir", 0);
 		printf("[Terrorista] Usou Homem Bomba");
 		format(string, sizeof(string), "Terrorista: %s se explodiu !", Nick);
 		SendClientMessageToAll(GetPlayerColor(playerid), string);
	}
	return 1;
}
BPF::CheckOwner(playerid)
{
 		// Veiculos
 		new var03=0;
	    for(new i = 0; i < sizeof(CarInfo); i++)
	    {
	        GetPlayerName(playerid,playername,sizeof(playername));
	        if(strcmp(playername,CarInfo[i][cOwner],true)==0)
			{
			    if(PlayerInfo[playerid][pVeiculo] == 0)
			    {
	            	PlayerInfo[playerid][pCarKey] = CarInfo[i][ownedvehicle];
	            	PlayerInfo[playerid][pVeiculo] = i;
	            	CarInfo[i][cDate] = getdate()+10;//10 dias para liberar o carro
	            	var03=1;
	            	continue;
				}
				if(PlayerInfo[playerid][pVeiculo2] == 0 && PlayerInfo[playerid][pVeiculo] != i && PlayerInfo[playerid][pVeiculo3] != i && PlayerInfo[playerid][pVeiculo4] != i && PlayerInfo[playerid][pVeiculo5] != i)
			    {
	            	PlayerInfo[playerid][pCarKey2] = CarInfo[i][ownedvehicle];
	            	PlayerInfo[playerid][pVeiculo2] = i;
	            	CarInfo[i][cDate] = getdate()+10;//10 dias para liberar o carro
	            	continue;
				}
				if(PlayerInfo[playerid][pVeiculo3] == 0 && PlayerInfo[playerid][pVeiculo] != i && PlayerInfo[playerid][pVeiculo2] != i && PlayerInfo[playerid][pVeiculo4] != i && PlayerInfo[playerid][pVeiculo5] != i)
			    {
	            	PlayerInfo[playerid][pCarKey3] = CarInfo[i][ownedvehicle];
	            	PlayerInfo[playerid][pVeiculo3] = i;
	            	CarInfo[i][cDate] = getdate()+10;//10 dias para liberar o carro
	            	continue;
				}
				if(PlayerInfo[playerid][pVeiculo4] == 0 && PlayerInfo[playerid][pVeiculo] != i && PlayerInfo[playerid][pVeiculo2] != i && PlayerInfo[playerid][pVeiculo3] != i && PlayerInfo[playerid][pVeiculo5] != i)
			    {
	            	PlayerInfo[playerid][pCarKey4] = CarInfo[i][ownedvehicle];
	            	PlayerInfo[playerid][pVeiculo4] = i;
	            	CarInfo[i][cDate] = getdate()+10;//10 dias para liberar o carro
	            	continue;
				}
				if(PlayerInfo[playerid][pVeiculo5] == 0 && PlayerInfo[playerid][pVeiculo4] != i && PlayerInfo[playerid][pVeiculo3] != i && PlayerInfo[playerid][pVeiculo2] != i && PlayerInfo[playerid][pVeiculo] != i)
			    {
	            	PlayerInfo[playerid][pCarKey5] = CarInfo[i][ownedvehicle];
	            	PlayerInfo[playerid][pVeiculo5] = i;
	            	CarInfo[i][cDate] = getdate()+10;//10 dias para liberar o carro
	            	continue;
				}
			}
 		}
		if(var03 == 0)
		{
			PlayerInfo[playerid][pCarKey] = 0;
	    	PlayerInfo[playerid][pVeiculo] = 0;
	    	PlayerInfo[playerid][pCarKey2] = 0;
	    	PlayerInfo[playerid][pVeiculo2] = 0;
 	    	PlayerInfo[playerid][pCarKey3] = 0;
	    	PlayerInfo[playerid][pVeiculo3] = 0;
  	    	PlayerInfo[playerid][pCarKey4] = 0;
	    	PlayerInfo[playerid][pVeiculo4] = 0;
  	    	PlayerInfo[playerid][pCarKey5] = 0;
	    	PlayerInfo[playerid][pVeiculo5] = 0;
   		}
		return true;
}


BPF::SalarioPlayer(playerid)
{
	if(PlayerInfo[playerid][pCargo] > 0 || PlayerInfo[playerid][pLider] > 0)
	{
	    new gstring[128];
       	if(PlayerInfo[playerid][pCargo] == 1)
		{
  			new org = GetPlayerOrg(playerid);
  			if(CofreOrg[org][salarioc1] == 0)
		    {
      			SendClientMessage(playerid, COLOR_LIGHTRED, "» Salário da organização(C1):Não definido.");
      			return 1;
			}
	    	if(CofreOrg[org][Dinheiro] < CofreOrg[org][salarioc1])
		    {
      			SendClientMessage(playerid, COLOR_LIGHTRED, "» Sua organização não pode pagar o seu Salário neste PayDay");
      			return 1;
			}
			PlayerInfo[playerid][pConta]=CofreOrg[org][salarioc1]+PlayerInfo[playerid][pConta];
			CofreOrg[org][Dinheiro] -= CofreOrg[org][salarioc1];
			format(gstring, sizeof(gstring), "| Salario da organização: {41DD36}R$%d", CofreOrg[org][salarioc1]);
			SendClientMessage(playerid, COLOR_GRAD1, gstring);
			SacarGranaOrg(org,CofreOrg[org][salarioc1]);
		}
		if(PlayerInfo[playerid][pCargo] == 2)
		{
  			new org = GetPlayerOrg(playerid);
  			if(CofreOrg[org][salarioc2] == 0)
		    {
      			SendClientMessage(playerid, COLOR_LIGHTRED, "» Salário da organização(C2):Não definido.");
      			return 1;
			}
	    	if(CofreOrg[org][Dinheiro] < CofreOrg[org][salarioc2])
		    {
		        SendClientMessage(playerid, COLOR_LIGHTRED, "» Sua organização não pode pagar o seu Salário neste PayDay");
      			return 1;
			}
			PlayerInfo[playerid][pConta]=CofreOrg[org][salarioc2]+PlayerInfo[playerid][pConta];
			CofreOrg[org][Dinheiro] -= CofreOrg[org][salarioc2];
			format(gstring, sizeof(gstring), "| Salario da organização: {41DD36}R$%d", CofreOrg[org][salarioc2]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
			SacarGranaOrg(org,CofreOrg[org][salarioc2]);
		}
		if(PlayerInfo[playerid][pCargo] == 3)
		{
		    new org = GetPlayerOrg(playerid);
		    if(CofreOrg[org][salarioc3] == 0)
		    {
      			SendClientMessage(playerid, COLOR_LIGHTRED, "» Salário da organização(C3):Não definido.");
      			return 1;
			}
		    if(CofreOrg[org][Dinheiro] < CofreOrg[org][salarioc3])
		    {
		        SendClientMessage(playerid, COLOR_LIGHTRED, "» Sua organização não pode pagar o seu Salário neste PayDay");
		        return 1;
			}
			PlayerInfo[playerid][pConta]=CofreOrg[org][salarioc3]+PlayerInfo[playerid][pConta];
			CofreOrg[org][Dinheiro] -= CofreOrg[org][salarioc3];
			format(gstring, sizeof(gstring), "| Salario da organização: {41DD36}R$%d", CofreOrg[org][salarioc3]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
			SacarGranaOrg(org,CofreOrg[org][salarioc3]);
		}
		if(PlayerInfo[playerid][pCargo] == 4)
		{
		    new org = GetPlayerOrg(playerid);
		    if(CofreOrg[org][salarioc4] == 0)
		    {
      			SendClientMessage(playerid, COLOR_LIGHTRED, "» Salário da organização(C4):Não definido.");
      			return 1;
			}
		    if(CofreOrg[org][Dinheiro] < CofreOrg[org][salarioc4])
		    {
		        SendClientMessage(playerid, COLOR_LIGHTRED, "» Sua organização não pode pagar o seu Salário neste PayDay");
		        return 1;
			}
			PlayerInfo[playerid][pConta]=CofreOrg[org][salarioc4]+PlayerInfo[playerid][pConta];
			CofreOrg[org][Dinheiro] -= CofreOrg[org][salarioc4];
			format(gstring, sizeof(gstring), "| Salario da organização: {41DD36}R$%d", CofreOrg[org][salarioc4]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
			SacarGranaOrg(org,CofreOrg[org][salarioc4]);
		}
		if(PlayerInfo[playerid][pCargo] == 5)
		{
		    new org = GetPlayerOrg(playerid);
		    if(CofreOrg[org][salarioc5] == 0)
		    {
      			SendClientMessage(playerid, COLOR_LIGHTRED, "» Salário da organização(C5+):Não definido.");
      			return 1;
			}
		    if(CofreOrg[org][Dinheiro] < CofreOrg[org][salarioc5])
		    {
		        SendClientMessage(playerid, COLOR_LIGHTRED, "Sua organização não pode pagar o seu Salário neste PayDay");
		        return 1;
			}
			PlayerInfo[playerid][pConta]=CofreOrg[org][salarioc5]+PlayerInfo[playerid][pConta];
			CofreOrg[org][Dinheiro] -= CofreOrg[org][salarioc5];
			format(gstring, sizeof(gstring), "| Salario da organização: {41DD36}R$%d", CofreOrg[org][salarioc2]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
			SacarGranaOrg(org,CofreOrg[org][salarioc5]);
		}
		if(PlayerInfo[playerid][pCargo] == 6 || PlayerInfo[playerid][pLider] > 0)
		{
		    new org = GetPlayerOrg(playerid);
		    if(CofreOrg[org][salariolider] == 0)
		    {
      			SendClientMessage(playerid, COLOR_LIGHTRED, "» Salário da organização(Líder):Não definido.");
      			return 1;
			}
		    if(CofreOrg[org][Dinheiro] < CofreOrg[org][salariolider])
		    {
	     		SendClientMessage(playerid, COLOR_LIGHTRED, "» Sua organização não pode pagar o seu Salário neste PayDay");
			    return 1;
			}
			PlayerInfo[playerid][pConta]=CofreOrg[org][salariolider]+PlayerInfo[playerid][pConta];
			CofreOrg[org][Dinheiro] -= CofreOrg[org][salariolider];
			format(gstring, sizeof(gstring), "| Salario da organização: {41DD36}R$%d", CofreOrg[org][salariolider]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
			SacarGranaOrg(org,CofreOrg[org][salariolider]);
		}
	}
	return true;
}

BPF::Administrador(playerid)
{
    if(PlayerInfo[playerid][pAdmin] > 0 && admtrampando[playerid] > 0 || helpertrampando[playerid] == 1)
	{
		SetPlayerHealth(playerid,99999);
	}
	else if(PlayerInfo[playerid][pAdminTemp] > 0 && admtrampando[playerid] > 0 || helpertrampando[playerid] == 1)
	{
		SetPlayerHealth(playerid,99999);
	}
}
BPF::Sincronizar(playerid)
{
 	if(IsPlayerConnected(playerid))
	{
		SetPlayerPos(playerid,xx[playerid],yy[playerid],zz[playerid]);
		SetPlayerFacingAngle(playerid,FaceAngle[playerid]);
		SetPlayerHealth(playerid,PlayerHPP[playerid]);
		SetPlayerVirtualWorld(playerid,virt[playerid]);
		SetPlayerInterior(playerid,interior[playerid]);
		SetPlayerSkin(playerid,skinneg[playerid]);
		SetPlayerArmour(playerid,APP[playerid]);
		ResetPlayerWeapons(playerid);
		GivePlayerWeapon(playerid,gunsinc[1][playerid],ammoo[1][playerid]);
		GivePlayerWeapon(playerid,gunsinc[2][playerid],ammoo[2][playerid]);
		GivePlayerWeapon(playerid,gunsinc[3][playerid],ammoo[3][playerid]);
		GivePlayerWeapon(playerid,gunsinc[4][playerid],ammoo[4][playerid]);
		GivePlayerWeapon(playerid,gunsinc[5][playerid],ammoo[5][playerid]);
		GivePlayerWeapon(playerid,gunsinc[6][playerid],ammoo[6][playerid]);
		GivePlayerWeapon(playerid,gunsinc[7][playerid],ammoo[7][playerid]);
		GivePlayerWeapon(playerid,gunsinc[8][playerid],ammoo[8][playerid]);
		GivePlayerWeapon(playerid,gunsinc[9][playerid],ammoo[9][playerid]);
		GivePlayerWeapon(playerid,gunsinc[10][playerid],ammoo[10][playerid]);
		GivePlayerWeapon(playerid,gunsinc[11][playerid],ammoo[11][playerid]);
		GivePlayerWeapon(playerid,gunsinc[12][playerid],ammoo[12][playerid]);
		if(vehicledd[playerid] == 1)
		{
			PutPlayerInVehicle(playerid,VehicleIDD[playerid],1);
			vehicledd[playerid] = 0;
		}
		sincronizando[playerid] = 0;
		KillTimer(TempoSinc);
		SendClientMessage(playerid,COLOR_YELLOW," Sincronizado com sucesso!");
	}
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
if(gPlayerLogged[playerid] == 0) { return SendClientMessage(playerid, 0xff6347FF, "* Você não está conectado."); }
	new string[128];
	new pstring[128];
	BPFInfo[playerid][Tels] = 0;
	BPFInfo[playerid][pTels] = 0;
    GetPlayerName(clickedplayerid, plname, sizeof(plname));
    format(string, sizeof(string), "{FFFFFF}Ação para:{6E6E6E} %s",plname);
    format(pstring, sizeof(pstring), "{FFFFFF}Ligar  {6E6E6E}Telefonar para o jogador\n{FFFFFF}Mandar SMS    {6E6E6E}Enviar mensagem de texto");
    if(PlayerInfo[clickedplayerid][pAdmin] >= 1)
    {
    	format(pstring, sizeof(pstring), "Telefonar\nMandar SMS\nRelatório Particular");
	}
    if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
    {
    	format(pstring, sizeof(pstring), "Telefonar\nMandar SMS\n\nParticular\nVer Carteira\nExplodir\nTapa\nKickar\nBanir\nCascudo\nTV\nTrazer\nIR");
	}
    ShowPlayerDialog(playerid, 3, DIALOG_STYLE_LIST, string, pstring, "Confirmar", "Cancelar");
    format(string, 128, "Nick: %s",plname);
	SendClientMessage(playerid, COLOR_GRAD1, string);
    BPFInfo[playerid][Tels] = PlayerInfo[clickedplayerid][pPnumber];
    BPFInfo[playerid][pTels] = clickedplayerid;
	return 1;
}
BPF::RemoveParedao(playerid)
{
	DestroyObject(Paredao[playerid]);
	PlantouParedao[playerid] = 0;
}
BPF::OnSelect(playerid)
{
    return SelectTextDraw(playerid, 0xFF0000FF);
}
BPF::GuerraTerrorista()
{
	UpdateTextGuerra();
	ShowGuerra();
	if(TempoGuerra > 0)TempoGuerra --;
	if(TempoGuerra < 1)
	{
   		EndGuerra();
	}
	return true;
}
stock EndGuerra()
{
	new Str[128];
   	GangZoneDestroy(GZGuerra);
   	HideGuerra();
   	TendoGuerra = 0;
   	KillTimer(TimerGuerra);
	//SendClientMessageToAll(-1, "~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*");


   	if(PSG[3] > PSG[15] && PSG[3] > PSG[23])
   	{
	 	SendClientMessageToAll(-1, "[GUERRA] A Guerra foi finalizada com sucesso pela organização: {FFFF00}[Exercito]");
	 	DepositarGranaOrg(3, GranaGuerra);
   	}
   	else if(PSG[15] > PSG[3] && PSG[15] > PSG[23])
   	{
	 	SendClientMessageToAll(-1, "[GUERRA] A Guerra foi finalizada com sucesso pela organização: {FFFF00}[Estado Islâmico]");
        DepositarGranaOrg(15, GranaGuerra);
   	}
   	else if(PSG[23] > PSG[3] && PSG[23] > PSG[15])
   	{
	 	SendClientMessageToAll(-1, "[GUERRA] A Guerra foi finalizada com sucesso pela organização: {FFFF00}[As FARC]");
	 	DepositarGranaOrg(23, GranaGuerra);
   	}
   	else
   	{
	 	SendClientMessageToAll(-1, "[GUERRA] Houve um empate na Guerra, e nenhuma organização saiu vencedora!");
   	}
	format(Str, sizeof Str,"[GUERRA] A Area proxima a: %s pode ser Habitada novamente.", GuerraName);
	SendClientMessageToAll(-1, Str);
	//SendClientMessageToAll(-1, "~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*~*");
	return 1;
}

BPF::ReduceTimer(playerid)
{
	    if(ReduceTime[playerid] == 1)
	    {
			ReduceTime[playerid] = 0;
	    }
}
BPF::ReduceTimerArmas(playerid)
{
	if(IsPlayerConnected(playerid))
	    if(ReduceTimeArmas[playerid] == 1)
			ReduceTimeArmas[playerid] = 0;
}

BPF::DestroyVidaPickup(pickupid)
{
	DestroyPickup(pickupid);
	return true;
}

stock LoadStuff()
{
	new arrCoords[19][64];
	new strFromFile2[100];
	new File: file = fopen("stuff.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		Jackpot = strval(arrCoords[0]);
		Tax = strval(arrCoords[1]);
		TaxValue = strval(arrCoords[2]);
		HV = strval(arrCoords[3]);
		CH = strval(arrCoords[4]);
		CM = strval(arrCoords[5]);
		CS = strval(arrCoords[6]);
		PLE = strval(arrCoords[7]);
		PLO = strval(arrCoords[8]);
		PLPG = strval(arrCoords[9]);
		PMA = strval(arrCoords[10]);
		PTC = strval(arrCoords[11]);
		PLV = strval(arrCoords[12]);
		PMC = strval(arrCoords[13]);
		PMH = strval(arrCoords[14]);
		PME = strval(arrCoords[15]);
		PRE = strval(arrCoords[16]);
		PCE = strval(arrCoords[17]);
		PDU = strval(arrCoords[18]);
		fclose(file);
	}
	return 1;
}


stock SaveStuff()
{
	new coordsstring[100];
	format(coordsstring, sizeof(coordsstring), "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",
 	Jackpot,
 	Tax,
 	TaxValue,
 	HV,
 	CH,
 	CM,
 	CS,
 	PLE,
 	PLO,
 	PLPG,
 	PMA,
 	PTC,
 	PLV,
 	PMC,
	PMH,
	PME,
	PRE,
	PCE,
	PDU);
	new File: file2 = fopen("stuff.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

public OnGameModeExit()
{
    SaveAccounts();
    SalvarObjetos();
	DOF2_Exit();
	SaveTrunk();
	SalvarPlantacao();
	KillTimer(faztime);
	KillTimer(TempoAdministrador);
    foreach(Player, x)
	{
	    if(gPlayerLogged[x])
	    {
			OnPlayerSave(x);
			SaveObjects(x);
			gPlayerLogged[x] = 0;
			LogadoSV[x] = 0;
		}
	}
	if(!MensagemDesligou)
	{
		SendClientMessageToAll(0xFE85E0AA,"SERVER: {FFFFFF}Servidor desligado manualmente.");
	}
	Elevator_Destroy();
	SalvarLogados();
	SalvarCaixas();
	SalvarPortoes();
	salvarFamilias();
	SalvarSEmpresas();
	SalvarEmpresas();
	SalvarFEmpresas();
	SaveStuff();
	getdate(v[0], v[1], v[2]);
	gettime(v[3], v[4], v[5]);
	print("\n=================================================================");
	printf("Servidor Desligado: [%02d/%02d/%d %02d:%02d:%02d]", v[2], v[1], v[0], v[3], v[4], v[5]);
	print("=================================================================\n");
	DOF2_Exit();
	//MapAndreas_Unload();
	return true;
}

BPF::CheckAFK()
{
    ForPlayers(i)
	{
	    if(IsPlayerConnected(i))
	    {
	    new Float:x, Float:y, Float:z, Float:Facingangleafk;
     	if(PlayerInfo[i][pJailed] == 10)
		{
        GetPlayerPos(i, x, y, z);
        GetPlayerFacingAngle(i, Facingangleafk);
        //AUMENTA UN MINUTO DI AFK DEL PLAYER
		if(x == PlayerUpdateInfo[i][posxafk] && y == PlayerUpdateInfo[i][posyafk] &&
        z == PlayerUpdateInfo[i][poszafk] && Facingangleafk == PlayerUpdateInfo[i][angleafk])
        {
            PlayerInactivity[i]++;
            if(PlayerInactivity[i] >= AFK_TIME2)
			{
				new nome[MAX_PLAYER_NAME], string[128];
    			GetPlayerName(i,nome,sizeof(nome));
				format(string, sizeof(string), "[KICK]: %s foi kickado Automaticamente, Motivo: Inatividade", nome);
    			SendClientMessageToAll(COLOR_LIGHTRED, string);
    			PlayerInfo[i][pJailTime] += 130;
    			SendClientMessage(i, 0xFFA500F6,"Nao Fique Afk!");
				Kick(i);
				return 1;
			}
        }
  		}
		if(AFKon == false) return 1;
		if(PlayerInfo[i][pAdmin] >= 1) return 1;
        GetPlayerPos(i, x, y, z);
        GetPlayerFacingAngle(i, Facingangleafk);
        //AUMENTA UN MINUTO DI AFK DEL PLAYER
		if(x == PlayerUpdateInfo[i][posxafk] && y == PlayerUpdateInfo[i][posyafk] &&
        z == PlayerUpdateInfo[i][poszafk] && Facingangleafk == PlayerUpdateInfo[i][angleafk])
        {
            PlayerInactivity[i]++;
            if(PlayerInactivity[i] >= AFK_TIME)
			{
				new nome[MAX_PLAYER_NAME], string[128];
    			GetPlayerName(i,nome,sizeof(nome));
				format(string, sizeof(string), "[KICK]: %s foi kickado Automaticamente, Motivo: Inatividade", nome);
    			SendClientMessageToAll(COLOR_LIGHTRED, string);
    			SendClientMessage(i, 0xFFA500F6,"Kikado por Inatividade");
				Kick(i);
				return 1;
			}
        }
        else
        {
            PlayerInactivity[i] = 0;
        }
        //SALVA LE ATTUALI INFO
        GetPlayerPos(i, PlayerUpdateInfo[i][posxafk], PlayerUpdateInfo[i][posyafk], PlayerUpdateInfo[i][poszafk]);
        GetPlayerFacingAngle(i, PlayerUpdateInfo[i][angleafk]);
        }
	}
	return 0;
}

static stock ReturnPlayerZone(playerid)
{
	new location[MAX_ZONE_NAME];
	GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
    return location;
}
stock HexToInt(string[])
{
    if (string[0] == 0)
    {
        return 0;
    }
    new i;
    new cur = 1;
    new res = 0;
    for (i = strlen(string); i > 0; i--)
    {
        if (string[i-1] < 58)
        {
            res = res + cur * (string[i - 1] - 48);
        }
        else
        {
            res = res + cur * (string[i-1] - 65 + 10);
            cur = cur * 16;
        }
    }
    return res;
}
stock GetPlayerColorEx1(playerid)
{
	new color[85];
    new idorg = GetPlayerOrg(playerid);
	switch(idorg)
	{
		case 1:color = "9fa4e8";
		case 2:color = "3e3d3d";
		case 3:color = "00660C";
		case 4:color = "F78181";
		case 5:color = "337EFF";
		case 6:color = "FBC63F";
	    case 7:color = "6699FF";
		case 8:color = "BDBDBD";
		case 9:color = "ffe99e";
	    case 10:color = "33FFFF";
		case 11:color = "917662";
		case 12:color = "FF6200";
		case 13:color = "00483A";
		case 14:color = "00da1c";
		case 15:color = "6E6E6E";
		case 16:color = "408080";
		case 17:color = "c640dd";
		case 18:color = "DEBC00";
		case 19:color = "FF3636";
		case 20:color = "F05353";
		case 21:color = "aae237";
		case 22:color = "A4D1FF";
	 	case 23:color = "CC0196";
	 	case 24:color = "961e32";
		case 25:color = "535d71";
		case 27:color = "9fa4e8";
		case 28:color = "FFFF00";
		case 30:color = "33FFFF";
		case 31:color = "F78181";
		case 32:color = "ffe99e";
		case 33:color = "906000";
		case 34:color = "FF6200";
		case 35:color = "114411";
		default:color = "FFFFFF";
	}
	return color;
}
forward PlayerBanALL(playerid);
public PlayerBanALL(playerid)
{
    if(BaniuPlayer[playerid] >= 1) BaniuPlayer[playerid] = 0;
}
static stock NomeORG(playerid)
{
	new name[36];
	new idorg = GetPlayerOrg(playerid);
	switch(idorg)
	{
	    case 1:name = "Policia Militar";
	    case 2:name = "BOPE";
	    case 3:name = "Exercito";
	    case 4:name = "Medicos";
	    case 5:name = "Los Aztecas";
	    case 7:name = "Governo";
	    case 8:name = "Hitmans";
	    case 9:name = "Reporteres";
	    case 11:name = "Policia Federal";
	    case 12:name = "Mafia Russa";
	    case 13:name = "Mafia Yakuza";
	    case 14:name = "Groove Street";
	    case 15:name = "Estado Islâmico";
	    case 16:name = "ROTA";
	    case 17:name = "Ballas";
	    case 18:name = "Los Vagos";
	    case 19:name = "Comando Vermelho";
	    case 21:name = "PCC";
	    case 22:name = "The Triad";
	    case 23:name = "As FARC";
	    case 24:name = "Mayans";
	    case 25:name = "Sons Of Anarchy";
	    case 26:name = "Milícia";
	    case 27:name = "Destroyers";
	    case 28:name = "Hells Angels";
	    case 33:name = "Policia Civil";
	    case 34:name = "Detran";
	    default:name = "Civil";
	}
	return name;
}

static stock AbrevORG(playerid)
{
	new name[36];
	new idorg = GetPlayerOrg(playerid);
	switch(idorg)
	{
     case 1:name = "Policia Militar";
	    case 2:name = "BOPE";
	    case 3:name = "Exercito";
	    case 4:name = "Medicos";
	    case 5:name = "Los Aztecas";
	    case 6:name = "Sindicato do Crime";
	    case 7:name = "Governo";
	    case 8:name = "Hitmans";
	    case 9:name = "Reporteres";
	    case 11:name = "Policia Federal";
	    case 12:name = "Mafia Russa";
	    case 13:name = "Mafia Yakuza";
	    case 14:name = "Groove Street";
	    case 15:name = "Estado Islâmico";
	    case 16:name = "ROTA";
	    case 17:name = "Ballas";
	    case 18:name = "Los Vagos";
	    case 19:name = "Comando Vermelho";
	    case 21:name = "PCC";
	    case 22:name = "The Triad";
	    case 23:name = "As FARC";
	    case 24:name = "Mayans";
	    case 25:name = "Sons Of Anarchy";
	    case 26:name = "Milícia";
	    case 27:name = "Destroyers";
	    case 28:name = "Hells Angels";
	    case 33:name = "Policia Civil";
	    case 34:name = "DETRAN";
	    default:name = "Civil";
	}
	return name;
}

static stock NomeLiderORG(playerid)
{
	new name[36];
	new idorg = GetPlayerOrg(playerid);
	switch(idorg)
	{
	    case 1:name = "da Policia Militar";
	    case 2:name = "do BOPE";
	    case 3:name = "do Exercito";
	    case 4:name = "dos Médicos";
	    case 5:name = "dos Los Aztecas";
	    case 6:name = "do Sindicato do Crime";
	    case 7:name = "da Governo";
	    case 8:name = "dos Hitmans";
	    case 9:name = "dos Repórteres";
	    case 11:name = "da Polícia Federal";
	    case 12:name = "da Mafia Russa";
	    case 13:name = "da Mafia Yakuza";
	    case 14:name = "Groove Street";
	    case 15:name = "da Estado Islâmico";
	    case 16:name = "da ROTA";
	    case 17:name = "dos Ballas";
	    case 18:name = "do Los Vagos";
	    case 19:name = "do Comando Vermelho";
	    case 21:name = "do PCC";
	    case 22:name = "dos The Triads";
	    case 23:name = "dos As FARC";
	    case 24:name = "da Mayans";
	    case 25:name = "dos Sons Of Anarchy";
	    case 26:name = "da Milícia";
	    case 33:name = "da Polícia Civil";
	    case 34:name = "dos DETRAN";
	    default:name = "do Civil";
	}
	return name;
}


static stock GetNomeOrg(idorg)
{
	new name[36];
	switch(idorg)
	{
	    case 1:name = "Policia Militar";
	    case 2:name = "BOPE";
	    case 3:name = "Exercito";
	    case 4:name = "Medicos";
	    case 5:name = "Los Aztecas";
	    case 6:name = "Sindicato do Crime";
	    case 7:name = "Governo";
	    case 8:name = "Hitmans";
	    case 9:name = "Reporteres";
	    case 11:name = "Policia Federal";
	    case 12:name = "Mafia Russa";
	    case 13:name = "Mafia Yakuza";
	    case 14:name = "Groove Street";
	    case 15:name = "Estado Islâmico";
	    case 16:name = "ROTA";
	    case 17:name = "Ballas";
	    case 18:name = "Los Vagos";
	    case 19:name = "Comando Vermelho";
	    case 21:name = "PCC";
	    case 22:name = "The Triad";
	    case 23:name = "As FARC";
	    case 24:name = "Mayans";
	    case 25:name = "Sons Of Anarchy";
	    case 26:name = "Milícia";
	    case 27:name = "Destroyers";
	    case 28:name = "Hells Angels";
	    case 33:name = "Policia Civil";
	    case 34:name = "DETRAN";
	    default:name = "Civil";
	}
	return name;
}

static stock SendMessageToOthersAdmins(playerid, color, const message[])
{
	new ret=0;
	foreach(Player, i)
	{
		if (i!=playerid && PlayerInfo[i][pAdmin] > 0)
		{
			SendClientMessage(i, color, message);
			ret++;
		}
		if (i!=playerid && PlayerInfo[i][pAdminTemp] > 0)
		{
			SendClientMessage(i, color, message);
			ret++;
		}
	}
	return ret;
}
public OnVehicleSpawn(vehicleid)
{
    for(new m = 0; m < MAX_MODS; m++)
			{
			    if (VehicleInfo[vehicleid][vMod][m] > 0)
			    {
			        if(VehicleInfo[vehicleid][vMod][m] == 1086) PutSound(vehicleid);
			        AddVehicleComponent(vehicleid,VehicleInfo[vehicleid][vMod][m]);
				}
			}
			if (VehicleInfo[vehicleid][vPaintjob] > -1)
			{
			    ChangeVehiclePaintjob(vehicleid,VehicleInfo[vehicleid][vPaintjob]);
			}
   	new mot, lu, alar, por, cap, porma, ob;
   	GetVehicleParamsEx(vehicleid, mot, lu, alar, por, cap, porma, ob);
   	SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, lu, alar, por, cap, porma, ob);
    if(GetVehicleModel(vehicleid) == 510)
    {
		SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_ON, lu, alar, por, cap, porma, ob);
  	}
    DestroyObject(Fogando[vehicleid]);
    Fogando[vehicleid] = 0;
    PegouF[vehicleid] = 0;
	if(Cblindado[vehicleid] >= 1)
    {
    	Cblindado[vehicleid] = 0;
    	Blindagem[vehicleid] = 0;
    }
    Blindagem[vehicleid] = 0;
    if(GetVehicleModel(vehicleid) == 432)
   	{
    	Cblindado[vehicleid] = 1;
    	Blindagem[vehicleid] = 1000;
	}
	return true;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
  	if (VTrancado[vehicleid] >= 1)
	{
		SetVehicleParamsForPlayer(vehicleid,forplayerid, 0, 1);
	}
	else
	{
		SetVehicleParamsForPlayer(vehicleid,forplayerid, 0, 0);
	}


	if(MecanicMission[forplayerid] && vehicleid == VehicleMission[forplayerid])
	{
	    SetVehicleParamsForPlayer(vehicleid, forplayerid, 1, 1);
	}
	return true;
}

BPF::LockCar(carid)
{
	foreach(Player, i)
	{
		SetVehicleParamsForPlayer(carid,i,0,1);
		gCarLock[carid] = 1;
	}
}

BPF::InitLockDoors(playerid)
{
		new c;
		while (c < 254)
		{
			c++;
			if (gCarLock[c] == 1)
			{
				SetVehicleParamsForPlayer(c,playerid,0,1);
			}
		}
		return 1;
}
BPF::AChatAtendimento(COLOR,const string[],level)
{
	for(new i = 0; i < MAX_PLAYERS; ++i)
	{
		if(IsPlayerConnected(i))
		{
		    if(NumeroChatAtendimento[i] == level)
		    {
				if (ChatAtendimento[i] > 0)
				{
					SendClientMessage(i, COLOR, string);
				}
			}
		}
	}
	return 1;
}
BPF::UnLockCar(carid)
{
	foreach(Player, i)
	{
		SetVehicleParamsForPlayer(carid,i,0,0);
		gCarLock[carid] = 0;
	}
}

BPF::ConviteInfoOrg(nome[], org, cargo)
{
	new arquivo[85];
	format(arquivo, sizeof(arquivo), Pasta_MembrosOrg,org);
 	if(cargo == 6)
	{
	    strmid(InfoOrg[org][Lider], nome, 0, strlen(nome), MAX_PLAYER_NAME);
		DOF2_SetString(arquivo,"Líder",nome);
		DOF2_SaveFile();
		return true;
	}
	if(cargo == 5)
	{
		if(strcmp(InfoOrg[org][SubLider],"Ninguém",true)==0)
		{
		    strmid(InfoOrg[org][SubLider], nome, 0, strlen(nome), MAX_PLAYER_NAME);
       	    DOF2_SetString(arquivo,"SubLíder",nome);
       	    DOF2_SaveFile();
			return true;
		}
	}
	if(strcmp(InfoOrg[org][Membro1],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro1], nome, 0, strlen(nome), MAX_PLAYER_NAME);
        DOF2_SetString(arquivo,"Membro1",nome);
        DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro2],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro2], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro2",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro3],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro3], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro3",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro4],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro4], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro4",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro5],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro5], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro5",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro6],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro6], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro6",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro7],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro7], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro7",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro8],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro8], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro8",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro9],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro9], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro9",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro10],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro10], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro10",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro11],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro11], nome, 0, strlen(nome), MAX_PLAYER_NAME);
		DOF2_SetString(arquivo,"Membro11",nome);
		DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro12],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro12], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro12",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro13],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro13], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro13",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro14],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro14], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro14",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro15],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro15], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro15",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro16],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro16], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro16",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro17],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro17], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro17",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro18],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro18], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro18",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro19],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro19], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro19",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro20],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro20], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro20",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro21],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro21], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro21",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro22],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro22], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro22",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro23],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro23], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro23",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro24],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro24], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro24",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro25],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro25], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro25",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro26],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro26], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro26",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro27],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro27], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro27",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro28],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro28], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro28",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro29],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro29], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro29",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg[org][Membro30],"Ninguém",true)==0)
	{
	    strmid(InfoOrg[org][Membro30], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Membro30",nome);
	    DOF2_SaveFile();
		return true;
	}
	return 0;
}


BPF::CandidatoInfoOrg(nome[], org, cargo)
{
	new arquivo[85];
	format(arquivo, sizeof(arquivo), Pasta_Candidatos,org);

	if(strcmp(InfoOrg2[org][Candidato1],"Ninguém",true)==0)
	{
	    strmid(InfoOrg2[org][Candidato1], nome, 0, strlen(nome), MAX_PLAYER_NAME);
        DOF2_SetString(arquivo,"Candidato1",nome);
        DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg2[org][Candidato2],"Ninguém",true)==0)
	{
	    strmid(InfoOrg2[org][Candidato2], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Candidato2",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg2[org][Candidato3],"Ninguém",true)==0)
	{
	    strmid(InfoOrg2[org][Candidato3], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Candidato3",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg2[org][Candidato4],"Ninguém",true)==0)
	{
	    strmid(InfoOrg2[org][Candidato4], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Candidato4",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg2[org][Candidato5],"Ninguém",true)==0)
	{
	    strmid(InfoOrg2[org][Candidato5], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Candidato5",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg2[org][Candidato6],"Ninguém",true)==0)
	{
	    strmid(InfoOrg2[org][Candidato6], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Candidato6",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg2[org][Candidato7],"Ninguém",true)==0)
	{
	    strmid(InfoOrg2[org][Candidato7], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Candidato7",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg2[org][Candidato8],"Ninguém",true)==0)
	{
	    strmid(InfoOrg2[org][Candidato8], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Candidato8",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg2[org][Candidato9],"Ninguém",true)==0)
	{
	    strmid(InfoOrg2[org][Candidato9], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Candidato9",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg2[org][Candidato10],"Ninguém",true)==0)
	{
	    strmid(InfoOrg2[org][Candidato10], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Candidato10",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg2[org][Candidato11],"Ninguém",true)==0)
	{
	    strmid(InfoOrg2[org][Candidato11], nome, 0, strlen(nome), MAX_PLAYER_NAME);
		DOF2_SetString(arquivo,"Candidato11",nome);
		DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg2[org][Candidato12],"Ninguém",true)==0)
	{
	    strmid(InfoOrg2[org][Candidato12], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Candidato12",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg2[org][Candidato13],"Ninguém",true)==0)
	{
	    strmid(InfoOrg2[org][Candidato13], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Candidato13",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg2[org][Candidato14],"Ninguém",true)==0)
	{
	    strmid(InfoOrg2[org][Candidato14], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Candidato14",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg2[org][Candidato15],"Ninguém",true)==0)
	{
	    strmid(InfoOrg2[org][Candidato15], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Candidato15",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg2[org][Candidato16],"Ninguém",true)==0)
	{
	    strmid(InfoOrg2[org][Candidato16], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Candidato16",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg2[org][Candidato17],"Ninguém",true)==0)
	{
	    strmid(InfoOrg2[org][Candidato17], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Candidato17",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg2[org][Candidato18],"Ninguém",true)==0)
	{
	    strmid(InfoOrg2[org][Candidato18], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Candidato18",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg2[org][Candidato19],"Ninguém",true)==0)
	{
	    strmid(InfoOrg2[org][Candidato19], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Candidato19",nome);
	    DOF2_SaveFile();
		return true;
	}
	if(strcmp(InfoOrg2[org][Candidato20],"Ninguém",true)==0)
	{
	    strmid(InfoOrg2[org][Candidato20], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Candidato20",nome);
	    DOF2_SaveFile();
		return true;
	}
	return 0;
}

stock SaveAllLogins()
{
	for(new i = 1; i < 35; i++)
	{
	    SalvarLoginOrg(i);
	}
}

stock SalvarLoginOrg(orgid)
{
	new file[128];

	format(file, sizeof file, Pasta_MembrosOrg, orgid);
	if(DOF2_FileExists(file))
	{
	    //--- Lideres
	    DOF2_SetString(file, "UL_Líder",InfoOrg[orgid][UL_Lider]);
	    DOF2_SetString(file, "UL_SubLíder",InfoOrg[orgid][UL_SubLider]);

	    //--- Membros
	    DOF2_SetString(file, "UL_Membro1",InfoOrg[orgid][UL_Membro1]);
	    DOF2_SetString(file, "UL_Membro2",InfoOrg[orgid][UL_Membro2]);
	    DOF2_SetString(file, "UL_Membro3",InfoOrg[orgid][UL_Membro3]);
	    DOF2_SetString(file, "UL_Membro4",InfoOrg[orgid][UL_Membro4]);
	    DOF2_SetString(file, "UL_Membro5",InfoOrg[orgid][UL_Membro5]);
	    DOF2_SetString(file, "UL_Membro6",InfoOrg[orgid][UL_Membro6]);
	    DOF2_SetString(file, "UL_Membro7",InfoOrg[orgid][UL_Membro7]);
	    DOF2_SetString(file, "UL_Membro8",InfoOrg[orgid][UL_Membro8]);
	    DOF2_SetString(file, "UL_Membro9",InfoOrg[orgid][UL_Membro9]);
	    DOF2_SetString(file, "UL_Membro10",InfoOrg[orgid][UL_Membro10]);
	    DOF2_SetString(file, "UL_Membro11",InfoOrg[orgid][UL_Membro11]);
	    DOF2_SetString(file, "UL_Membro12",InfoOrg[orgid][UL_Membro12]);
	    DOF2_SetString(file, "UL_Membro13",InfoOrg[orgid][UL_Membro13]);
	    DOF2_SetString(file, "UL_Membro14",InfoOrg[orgid][UL_Membro14]);
	    DOF2_SetString(file, "UL_Membro15",InfoOrg[orgid][UL_Membro15]);
	    DOF2_SetString(file, "UL_Membro16",InfoOrg[orgid][UL_Membro16]);
	    DOF2_SetString(file, "UL_Membro17",InfoOrg[orgid][UL_Membro17]);
	    DOF2_SetString(file, "UL_Membro18",InfoOrg[orgid][UL_Membro18]);
	    DOF2_SetString(file, "UL_Membro19",InfoOrg[orgid][UL_Membro19]);
	    DOF2_SetString(file, "UL_Membro20",InfoOrg[orgid][UL_Membro20]);
	    DOF2_SetString(file, "UL_Membro21",InfoOrg[orgid][UL_Membro21]);
	    DOF2_SetString(file, "UL_Membro22",InfoOrg[orgid][UL_Membro22]);
	    DOF2_SetString(file, "UL_Membro23",InfoOrg[orgid][UL_Membro23]);
	    DOF2_SetString(file, "UL_Membro24",InfoOrg[orgid][UL_Membro24]);
	    DOF2_SetString(file, "UL_Membro25",InfoOrg[orgid][UL_Membro25]);
	    DOF2_SetString(file, "UL_Membro26",InfoOrg[orgid][UL_Membro26]);
	    DOF2_SetString(file, "UL_Membro27",InfoOrg[orgid][UL_Membro27]);
	    DOF2_SetString(file, "UL_Membro28",InfoOrg[orgid][UL_Membro28]);
	    DOF2_SetString(file, "UL_Membro29",InfoOrg[orgid][UL_Membro29]);
	    DOF2_SetString(file, "UL_Membro30",InfoOrg[orgid][UL_Membro30]);
		DOF2_SaveFile();
	}
	return true;
}

stock SalvarPatrocinio(orgid)
{
	new file[128];

	format(file, sizeof file, Pasta_PatrociniosOrg, orgid);
	if(DOF2_FileExists(file))
	{
	    DOF2_SetString(file, "Patrocinio",PatrocinioOrg[orgid]);
		DOF2_SaveFile();
	}
	return true;
}
stock UltimoLoginOrg(playerid)
{
		new org = GetPlayerOrg(playerid);
		if(org < 1)return true;
	    new dia, mes, ano, hora, minuto, segundo;
	    getdate(ano, mes, dia);
	    gettime(hora, minuto, segundo);
	    new cargo = PlayerInfo[playerid][pCargo];
	    for(new i = 1; i < sizeof(InfoOrg); i++)
		{
		   	if(strcmp(NomePlayer(playerid),InfoOrg[i][Lider],true)==0)return format(InfoOrg[i][UL_Lider],128, "%02d/%02d/%04d as %02d:%02d:%02d", dia, mes, ano, hora, minuto, segundo), SalvarLoginOrg(org);
		   	if(strcmp(NomePlayer(playerid),InfoOrg[i][SubLider],true)==0)return format(InfoOrg[i][UL_SubLider],128, "%02d/%02d/%04d as %02d:%02d:%02d", dia, mes, ano, hora, minuto, segundo), SalvarLoginOrg(org);
		   	if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro1],true)==0)return format(InfoOrg[i][UL_Membro1],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
		   	if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro2],true)==0)return format(InfoOrg[i][UL_Membro2],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
		   	if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro3],true)==0)return format(InfoOrg[i][UL_Membro3],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
		   	if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro4],true)==0)return format(InfoOrg[i][UL_Membro4],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
		   	if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro5],true)==0)return format(InfoOrg[i][UL_Membro5],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
		   	if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro6],true)==0)return format(InfoOrg[i][UL_Membro6],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
		   	if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro7],true)==0)return format(InfoOrg[i][UL_Membro7],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
		   	if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro8],true)==0)return format(InfoOrg[i][UL_Membro8],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
		   	if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro9],true)==0)return format(InfoOrg[i][UL_Membro9],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
		   	if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro10],true)==0)return format(InfoOrg[i][UL_Membro10],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
		   	if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro11],true)==0)return format(InfoOrg[i][UL_Membro11],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
		   	if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro12],true)==0)return format(InfoOrg[i][UL_Membro12],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
		   	if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro13],true)==0)return format(InfoOrg[i][UL_Membro13],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
		   	if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro14],true)==0)return format(InfoOrg[i][UL_Membro14],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
		   	if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro15],true)==0)return format(InfoOrg[i][UL_Membro15],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
		   	if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro16],true)==0)return format(InfoOrg[i][UL_Membro16],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
		   	if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro17],true)==0)return format(InfoOrg[i][UL_Membro17],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
		   	if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro18],true)==0)return format(InfoOrg[i][UL_Membro18],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
		   	if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro19],true)==0)return format(InfoOrg[i][UL_Membro19],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
		   	if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro20],true)==0)return format(InfoOrg[i][UL_Membro20],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
            if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro21],true)==0)return format(InfoOrg[i][UL_Membro21],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
            if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro22],true)==0)return format(InfoOrg[i][UL_Membro22],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
            if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro23],true)==0)return format(InfoOrg[i][UL_Membro23],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
            if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro24],true)==0)return format(InfoOrg[i][UL_Membro24],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
            if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro25],true)==0)return format(InfoOrg[i][UL_Membro25],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
            if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro26],true)==0)return format(InfoOrg[i][UL_Membro26],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
            if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro27],true)==0)return format(InfoOrg[i][UL_Membro27],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
            if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro28],true)==0)return format(InfoOrg[i][UL_Membro28],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
            if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro29],true)==0)return format(InfoOrg[i][UL_Membro29],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
            if(strcmp(NomePlayer(playerid),InfoOrg[i][Membro30],true)==0)return format(InfoOrg[i][UL_Membro30],128, "%02d/%02d/%04d as %02d:%02d:%02d - Cargo: %d", dia, mes, ano, hora, minuto, segundo, cargo), SalvarLoginOrg(org);
		}
		return true;
}



BPF::CheckInfoOrg(playerid)
{
		new string[128];
	    if(PlayerInfo[playerid][pVIP] == 5 && PlayerInfo[playerid][pOrgVIP] > 0)return true;
	    new PlayerNick[MAX_PLAYER_NAME];
	    GetPlayerName(playerid,PlayerNick,sizeof(PlayerNick));

	    new dia, mes, ano, hora, minuto, segundo;
	    getdate(ano, mes, dia);
	    gettime(hora, minuto, segundo);

	    for(new i = 1; i < sizeof(InfoOrg); i++)
		{
	    	if(PlayerInfo[playerid][pMembro] > 0 || PlayerInfo[playerid][pLider] > 0)
		    {
		        PlayerInfo[playerid][pCheckInfoOrg] = 0;
		    	if(strcmp(PlayerNick,InfoOrg[i][Lider],true)==0)
		    	{
		    	    PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pLider];
	    			CofreOrg[i][DiaLider] = getdate()+3;// 3 dias

					format(string, sizeof(string), Pasta_CofreOrg,i);
			       	DOF2_SetInt(string,"DiaLíder",CofreOrg[i][DiaLider]);
			       	DOF2_SaveFile();
			       	return true;
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][SubLider],true)==0)
		    	{
   					return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro1],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro2],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro3],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro4],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro5],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro6],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro7],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro8],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro9],true)==0)
		    	{
		    	    return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro10],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro11],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro12],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro13],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro14],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro15],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro16],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro17],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro18],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro19],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro20],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro21],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro22],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro23],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro24],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro25],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro26],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro27],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro28],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro29],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro30],true)==0)
		    	{
           			return PlayerInfo[playerid][pCheckInfoOrg] = PlayerInfo[playerid][pMembro];
		    	}
			}
		}
  		if(PlayerInfo[playerid][pMembro] > 0 || PlayerInfo[playerid][pLider] > 0)
		    {
		        if(PlayerInfo[playerid][pCheckInfoOrg] != PlayerInfo[playerid][pLider])
		        {
		            SendClientMessage(playerid, COLOR_LIGHTRED, "Você não é mais Líder de nenhuma organização, foi Retirado(a).");
					MedicBill[playerid] = 0;
					PlayerInfo[playerid][pMembro] = 0;
					PlayerInfo[playerid][pLider] = 0;
					PlayerInfo[playerid][pCargo] = 0;
					if(PlayerInfo[playerid][pSex] == 1) { PlayerInfo[playerid][pSkin] = 23; } else { PlayerInfo[playerid][pSkin] = 150; }
					PlayerInfo[playerid][pCheckInfoOrg] = 0;
					return true;
		        }
		        else if(PlayerInfo[playerid][pCheckInfoOrg] != PlayerInfo[playerid][pMembro])
		        {
	       			SendClientMessage(playerid, COLOR_LIGHTRED, "Você não faz mais parte de nenhuma organização, foi demitido(a).");
					MedicBill[playerid] = 0;
					PlayerInfo[playerid][pMembro] = 0;
					PlayerInfo[playerid][pLider] = 0;
					PlayerInfo[playerid][pCargo] = 0;
					if(PlayerInfo[playerid][pSex] == 1) { PlayerInfo[playerid][pSkin] = 23; } else { PlayerInfo[playerid][pSkin] = 150; }
					PlayerInfo[playerid][pCheckInfoOrg] = 0;
					return true;
				}
			}
		return true;
}
BPF::LoadPatrocinios()
{	new arquivo[128];
	new idx = 1;
	while (idx < MAX_ORGS)
	{
	    format(arquivo, sizeof(arquivo), Pasta_PatrociniosOrg,idx);
		strmid(PatrocinioOrg[idx], DOF2_GetString(arquivo,"Patrocinio"), 0, strlen(DOF2_GetString(arquivo,"Patrocinio")), 255);
		idx ++;
	}
	return idx;
}
BPF::LoadOrgs()
{	new arquivo[128];
	new idx = 1;
	while (idx < sizeof(InfoOrg))
	{
	    format(arquivo, sizeof(arquivo), Pasta_MembrosOrg,idx);
		strmid(InfoOrg[idx][Lider], DOF2_GetString(arquivo,"Líder"), 0, strlen(DOF2_GetString(arquivo,"Líder")), 255);
		strmid(InfoOrg[idx][SubLider], DOF2_GetString(arquivo,"SubLíder"), 0, strlen(DOF2_GetString(arquivo,"SubLíder")), 255);
		strmid(InfoOrg[idx][Membro1], DOF2_GetString(arquivo,"Membro1"), 0, strlen(DOF2_GetString(arquivo,"Membro1")), 255);
		strmid(InfoOrg[idx][Membro2], DOF2_GetString(arquivo,"Membro2"), 0, strlen(DOF2_GetString(arquivo,"Membro2")), 255);
		strmid(InfoOrg[idx][Membro3], DOF2_GetString(arquivo,"Membro3"), 0, strlen(DOF2_GetString(arquivo,"Membro3")), 255);
		strmid(InfoOrg[idx][Membro4], DOF2_GetString(arquivo,"Membro4"), 0, strlen(DOF2_GetString(arquivo,"Membro4")), 255);
		strmid(InfoOrg[idx][Membro5], DOF2_GetString(arquivo,"Membro5"), 0, strlen(DOF2_GetString(arquivo,"Membro5")), 255);
		strmid(InfoOrg[idx][Membro6], DOF2_GetString(arquivo,"Membro6"), 0, strlen(DOF2_GetString(arquivo,"Membro6")), 255);
		strmid(InfoOrg[idx][Membro7], DOF2_GetString(arquivo,"Membro7"), 0, strlen(DOF2_GetString(arquivo,"Membro7")), 255);
		strmid(InfoOrg[idx][Membro8], DOF2_GetString(arquivo,"Membro8"), 0, strlen(DOF2_GetString(arquivo,"Membro8")), 255);
		strmid(InfoOrg[idx][Membro9], DOF2_GetString(arquivo,"Membro9"), 0, strlen(DOF2_GetString(arquivo,"Membro9")), 255);
		strmid(InfoOrg[idx][Membro10], DOF2_GetString(arquivo,"Membro10"), 0, strlen(DOF2_GetString(arquivo,"Membro10")), 255);
		strmid(InfoOrg[idx][Membro11], DOF2_GetString(arquivo,"Membro11"), 0, strlen(DOF2_GetString(arquivo,"Membro11")), 255);
		strmid(InfoOrg[idx][Membro12], DOF2_GetString(arquivo,"Membro12"), 0, strlen(DOF2_GetString(arquivo,"Membro12")), 255);
		strmid(InfoOrg[idx][Membro13], DOF2_GetString(arquivo,"Membro13"), 0, strlen(DOF2_GetString(arquivo,"Membro13")), 255);
		strmid(InfoOrg[idx][Membro14], DOF2_GetString(arquivo,"Membro14"), 0, strlen(DOF2_GetString(arquivo,"Membro14")), 255);
		strmid(InfoOrg[idx][Membro15], DOF2_GetString(arquivo,"Membro15"), 0, strlen(DOF2_GetString(arquivo,"Membro15")), 255);
		strmid(InfoOrg[idx][Membro16], DOF2_GetString(arquivo,"Membro16"), 0, strlen(DOF2_GetString(arquivo,"Membro16")), 255);
		strmid(InfoOrg[idx][Membro17], DOF2_GetString(arquivo,"Membro17"), 0, strlen(DOF2_GetString(arquivo,"Membro17")), 255);
		strmid(InfoOrg[idx][Membro18], DOF2_GetString(arquivo,"Membro18"), 0, strlen(DOF2_GetString(arquivo,"Membro18")), 255);
		strmid(InfoOrg[idx][Membro19], DOF2_GetString(arquivo,"Membro19"), 0, strlen(DOF2_GetString(arquivo,"Membro19")), 255);
		strmid(InfoOrg[idx][Membro20], DOF2_GetString(arquivo,"Membro20"), 0, strlen(DOF2_GetString(arquivo,"Membro20")), 255);
        strmid(InfoOrg[idx][Membro21], DOF2_GetString(arquivo,"Membro21"), 0, strlen(DOF2_GetString(arquivo,"Membro21")), 255);
        strmid(InfoOrg[idx][Membro22], DOF2_GetString(arquivo,"Membro22"), 0, strlen(DOF2_GetString(arquivo,"Membro22")), 255);
        strmid(InfoOrg[idx][Membro23], DOF2_GetString(arquivo,"Membro23"), 0, strlen(DOF2_GetString(arquivo,"Membro23")), 255);
        strmid(InfoOrg[idx][Membro24], DOF2_GetString(arquivo,"Membro24"), 0, strlen(DOF2_GetString(arquivo,"Membro24")), 255);
        strmid(InfoOrg[idx][Membro25], DOF2_GetString(arquivo,"Membro25"), 0, strlen(DOF2_GetString(arquivo,"Membro25")), 255);
        strmid(InfoOrg[idx][Membro26], DOF2_GetString(arquivo,"Membro26"), 0, strlen(DOF2_GetString(arquivo,"Membro26")), 255);
        strmid(InfoOrg[idx][Membro27], DOF2_GetString(arquivo,"Membro27"), 0, strlen(DOF2_GetString(arquivo,"Membro27")), 255);
        strmid(InfoOrg[idx][Membro28], DOF2_GetString(arquivo,"Membro28"), 0, strlen(DOF2_GetString(arquivo,"Membro28")), 255);
        strmid(InfoOrg[idx][Membro29], DOF2_GetString(arquivo,"Membro29"), 0, strlen(DOF2_GetString(arquivo,"Membro29")), 255);
        strmid(InfoOrg[idx][Membro30], DOF2_GetString(arquivo,"Membro30"), 0, strlen(DOF2_GetString(arquivo,"Membro30")), 255);

//------------------------- Ultimo Login ---------------------------------
		strmid(InfoOrg[idx][UL_Lider], DOF2_GetString(arquivo,"UL_Líder"), 0, strlen(DOF2_GetString(arquivo,"UL_Líder")), 255);
		strmid(InfoOrg[idx][UL_SubLider], DOF2_GetString(arquivo,"UL_SubLíder"), 0, strlen(DOF2_GetString(arquivo,"UL_SubLíder")), 255);
		strmid(InfoOrg[idx][UL_Membro1], DOF2_GetString(arquivo,"UL_Membro1"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro1")), 255);
		strmid(InfoOrg[idx][UL_Membro2], DOF2_GetString(arquivo,"UL_Membro2"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro2")), 255);
		strmid(InfoOrg[idx][UL_Membro3], DOF2_GetString(arquivo,"UL_Membro3"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro3")), 255);
		strmid(InfoOrg[idx][UL_Membro4], DOF2_GetString(arquivo,"UL_Membro4"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro4")), 255);
		strmid(InfoOrg[idx][UL_Membro5], DOF2_GetString(arquivo,"UL_Membro5"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro5")), 255);
		strmid(InfoOrg[idx][UL_Membro6], DOF2_GetString(arquivo,"UL_Membro6"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro6")), 255);
		strmid(InfoOrg[idx][UL_Membro7], DOF2_GetString(arquivo,"UL_Membro7"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro7")), 255);
		strmid(InfoOrg[idx][UL_Membro8], DOF2_GetString(arquivo,"UL_Membro8"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro8")), 255);
		strmid(InfoOrg[idx][UL_Membro9], DOF2_GetString(arquivo,"UL_Membro9"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro9")), 255);
		strmid(InfoOrg[idx][UL_Membro10], DOF2_GetString(arquivo,"UL_Membro10"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro10")), 255);
		strmid(InfoOrg[idx][UL_Membro11], DOF2_GetString(arquivo,"UL_Membro11"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro11")), 255);
		strmid(InfoOrg[idx][UL_Membro12], DOF2_GetString(arquivo,"UL_Membro12"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro12")), 255);
		strmid(InfoOrg[idx][UL_Membro13], DOF2_GetString(arquivo,"UL_Membro13"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro13")), 255);
		strmid(InfoOrg[idx][UL_Membro14], DOF2_GetString(arquivo,"UL_Membro14"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro14")), 255);
		strmid(InfoOrg[idx][UL_Membro15], DOF2_GetString(arquivo,"UL_Membro15"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro15")), 255);
		strmid(InfoOrg[idx][UL_Membro16], DOF2_GetString(arquivo,"UL_Membro16"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro16")), 255);
		strmid(InfoOrg[idx][UL_Membro17], DOF2_GetString(arquivo,"UL_Membro17"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro17")), 255);
		strmid(InfoOrg[idx][UL_Membro18], DOF2_GetString(arquivo,"UL_Membro18"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro18")), 255);
		strmid(InfoOrg[idx][UL_Membro19], DOF2_GetString(arquivo,"UL_Membro19"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro19")), 255);
		strmid(InfoOrg[idx][UL_Membro20], DOF2_GetString(arquivo,"UL_Membro20"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro20")), 255);
        strmid(InfoOrg[idx][UL_Membro21], DOF2_GetString(arquivo,"UL_Membro21"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro21")), 255);
        strmid(InfoOrg[idx][UL_Membro22], DOF2_GetString(arquivo,"UL_Membro22"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro22")), 255);
        strmid(InfoOrg[idx][UL_Membro23], DOF2_GetString(arquivo,"UL_Membro23"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro23")), 255);
        strmid(InfoOrg[idx][UL_Membro24], DOF2_GetString(arquivo,"UL_Membro24"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro24")), 255);
        strmid(InfoOrg[idx][UL_Membro25], DOF2_GetString(arquivo,"UL_Membro25"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro25")), 255);
        strmid(InfoOrg[idx][UL_Membro26], DOF2_GetString(arquivo,"UL_Membro26"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro26")), 255);
        strmid(InfoOrg[idx][UL_Membro27], DOF2_GetString(arquivo,"UL_Membro27"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro27")), 255);
        strmid(InfoOrg[idx][UL_Membro28], DOF2_GetString(arquivo,"UL_Membro28"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro28")), 255);
        strmid(InfoOrg[idx][UL_Membro29], DOF2_GetString(arquivo,"UL_Membro29"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro29")), 255);
        strmid(InfoOrg[idx][UL_Membro30], DOF2_GetString(arquivo,"UL_Membro30"), 0, strlen(DOF2_GetString(arquivo,"UL_Membro30")), 255);
   		idx ++;
	}
	return idx;
}

BPF::LoadCandidatos()
{
	new arquivo[128];
	new idx = 1;
	while (idx < sizeof(InfoOrg2))
	{
	    format(arquivo, sizeof(arquivo), Pasta_Candidatos,idx);
		strmid(InfoOrg2[idx][Candidato1], DOF2_GetString(arquivo,"Candidato1"), 0, strlen(DOF2_GetString(arquivo,"Candidato1")), 255);
		strmid(InfoOrg2[idx][Candidato2], DOF2_GetString(arquivo,"Candidato2"), 0, strlen(DOF2_GetString(arquivo,"Candidato2")), 255);
		strmid(InfoOrg2[idx][Candidato3], DOF2_GetString(arquivo,"Candidato3"), 0, strlen(DOF2_GetString(arquivo,"Candidato3")), 255);
		strmid(InfoOrg2[idx][Candidato4], DOF2_GetString(arquivo,"Candidato4"), 0, strlen(DOF2_GetString(arquivo,"Candidato4")), 255);
		strmid(InfoOrg2[idx][Candidato5], DOF2_GetString(arquivo,"Candidato5"), 0, strlen(DOF2_GetString(arquivo,"Candidato5")), 255);
		strmid(InfoOrg2[idx][Candidato6], DOF2_GetString(arquivo,"Candidato6"), 0, strlen(DOF2_GetString(arquivo,"Candidato6")), 255);
		strmid(InfoOrg2[idx][Candidato7], DOF2_GetString(arquivo,"Candidato7"), 0, strlen(DOF2_GetString(arquivo,"Candidato7")), 255);
		strmid(InfoOrg2[idx][Candidato8], DOF2_GetString(arquivo,"Candidato8"), 0, strlen(DOF2_GetString(arquivo,"Candidato8")), 255);
		strmid(InfoOrg2[idx][Candidato9], DOF2_GetString(arquivo,"Candidato9"), 0, strlen(DOF2_GetString(arquivo,"Candidato9")), 255);
		strmid(InfoOrg2[idx][Candidato10], DOF2_GetString(arquivo,"Candidato10"), 0, strlen(DOF2_GetString(arquivo,"Candidato10")), 255);
		strmid(InfoOrg2[idx][Candidato11], DOF2_GetString(arquivo,"Candidato11"), 0, strlen(DOF2_GetString(arquivo,"Candidato11")), 255);
		strmid(InfoOrg2[idx][Candidato12], DOF2_GetString(arquivo,"Candidato12"), 0, strlen(DOF2_GetString(arquivo,"Candidato12")), 255);
		strmid(InfoOrg2[idx][Candidato13], DOF2_GetString(arquivo,"Candidato13"), 0, strlen(DOF2_GetString(arquivo,"Candidato13")), 255);
		strmid(InfoOrg2[idx][Candidato14], DOF2_GetString(arquivo,"Candidato14"), 0, strlen(DOF2_GetString(arquivo,"Candidato14")), 255);
		strmid(InfoOrg2[idx][Candidato15], DOF2_GetString(arquivo,"Candidato15"), 0, strlen(DOF2_GetString(arquivo,"Candidato15")), 255);
		strmid(InfoOrg2[idx][Candidato16], DOF2_GetString(arquivo,"Candidato16"), 0, strlen(DOF2_GetString(arquivo,"Candidato16")), 255);
		strmid(InfoOrg2[idx][Candidato17], DOF2_GetString(arquivo,"Candidato17"), 0, strlen(DOF2_GetString(arquivo,"Candidato17")), 255);
		strmid(InfoOrg2[idx][Candidato18], DOF2_GetString(arquivo,"Candidato18"), 0, strlen(DOF2_GetString(arquivo,"Candidato18")), 255);
		strmid(InfoOrg2[idx][Candidato19], DOF2_GetString(arquivo,"Candidato19"), 0, strlen(DOF2_GetString(arquivo,"Candidato19")), 255);
		strmid(InfoOrg2[idx][Candidato20], DOF2_GetString(arquivo,"Candidato20"), 0, strlen(DOF2_GetString(arquivo,"Candidato20")), 255);
   		idx ++;
	}
	return idx;
}

BPF::DemitirInfoOrg(nome[])
{
    new arquivo[128];
    for(new i = 1; i < sizeof(InfoOrg); i++)
	{
        format(arquivo, sizeof(arquivo), Pasta_MembrosOrg,i);
    	if(strcmp(nome,InfoOrg[i][Lider],true)==0)
    	{
    	    strmid(InfoOrg[i][Lider], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
    		DOF2_SetString(arquivo,"Líder","Ninguém");
    		DOF2_SaveFile();

			format(InfoOrg[i][UL_Lider],128, "00/00/0000 as 00:00:00");
			SalvarLoginOrg(i);
    	    return true;
    	}
		if(strcmp(nome,InfoOrg[i][SubLider],true)==0)
		{
		    strmid(InfoOrg[i][SubLider], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
		    DOF2_SetString(arquivo,"SubLíder","Ninguém");
		    DOF2_SaveFile();
			return true;
   		}
    	if(strcmp(nome,InfoOrg[i][Membro1],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro1], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro1","Ninguém");
	    	DOF2_SaveFile();
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro2],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro2], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
 	    	DOF2_SetString(arquivo,"Membro2","Ninguém");
 	    	DOF2_SaveFile();
  	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro3],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro3], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
		    DOF2_SetString(arquivo,"Membro3","Ninguém");
		    DOF2_SaveFile();
 	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro4],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro4], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
 	    	DOF2_SetString(arquivo,"Membro4","Ninguém");
 	    	DOF2_SaveFile();
  	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro5],true)==0)
    	{
		    strmid(InfoOrg[i][Membro5], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
		    DOF2_SetString(arquivo,"Membro5","Ninguém");
		    DOF2_SaveFile();
		    return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro6],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro6], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
 	    	DOF2_SetString(arquivo,"Membro6","Ninguém");
 	    	DOF2_SaveFile();
		    return true;
    	}
		if(strcmp(nome,InfoOrg[i][Membro7],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro7], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
 	    	DOF2_SetString(arquivo,"Membro7","Ninguém");
 	    	DOF2_SaveFile();
  	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro8],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro8], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro8","Ninguém");
	    	DOF2_SaveFile();
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro9],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro9], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro9","Ninguém");
	    	DOF2_SaveFile();
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro10],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro10], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro10","Ninguém");
	    	DOF2_SaveFile();
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro11],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro11], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro11","Ninguém");
	    	DOF2_SaveFile();
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro12],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro12], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro12","Ninguém");
	    	DOF2_SaveFile();
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro13],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro13], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro13","Ninguém");
	    	DOF2_SaveFile();
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro14],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro14], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro14","Ninguém");
	    	DOF2_SaveFile();
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro15],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro15], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro15","Ninguém");
	    	DOF2_SaveFile();
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro16],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro16], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro16","Ninguém");
	    	DOF2_SaveFile();
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro17],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro17], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro17","Ninguém");
	    	DOF2_SaveFile();
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro18],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro18], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro18","Ninguém");
	    	DOF2_SaveFile();
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro19],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro19], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro19","Ninguém");
	    	DOF2_SaveFile();
	    	return true;
    	}
		if(strcmp(nome,InfoOrg[i][Membro20],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro20], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro20","Ninguém");
	    	DOF2_SaveFile();
	    	return true;
    	}
		if(strcmp(nome,InfoOrg[i][Membro21],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro21], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro21","Ninguém");
	    	DOF2_SaveFile();
	    	return true;
    	}
		if(strcmp(nome,InfoOrg[i][Membro22],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro22], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro22","Ninguém");
	    	DOF2_SaveFile();
	    	return true;
    	}
		if(strcmp(nome,InfoOrg[i][Membro23],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro23], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro23","Ninguém");
	    	DOF2_SaveFile();
	    	return true;
    	}
		if(strcmp(nome,InfoOrg[i][Membro24],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro24], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro24","Ninguém");
	    	DOF2_SaveFile();
	    	return true;
    	}
		if(strcmp(nome,InfoOrg[i][Membro25],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro25], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro25","Ninguém");
	    	DOF2_SaveFile();
	    	return true;
    	}
		if(strcmp(nome,InfoOrg[i][Membro26],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro26], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro26","Ninguém");
	    	DOF2_SaveFile();
	    	return true;
    	}
		if(strcmp(nome,InfoOrg[i][Membro27],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro27], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro27","Ninguém");
	    	DOF2_SaveFile();
	    	return true;
    	}
		if(strcmp(nome,InfoOrg[i][Membro28],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro28], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro28","Ninguém");
	    	DOF2_SaveFile();
	    	return true;
    	}
		if(strcmp(nome,InfoOrg[i][Membro29],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro29], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro29","Ninguém");
	    	DOF2_SaveFile();
	    	return true;
    	}
		if(strcmp(nome,InfoOrg[i][Membro30],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro30], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	    	DOF2_SetString(arquivo,"Membro30","Ninguém");
	    	DOF2_SaveFile();
	    	return true;
    	}
    }
	return 0;
}

BPF::DCandidatoInfoOrg(nome[], numero)
{
   	new arquivo[85];
	format(arquivo, sizeof(arquivo), Pasta_Candidatos,numero);
   	if(strcmp(nome,InfoOrg2[numero][Candidato1],true)==0)
   	{
	   	strmid(InfoOrg2[numero][Candidato1], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	   	DOF2_SetString(arquivo,"Candidato1","Ninguém");
	   	DOF2_SaveFile();
	   	return true;
   	}
   	if(strcmp(nome,InfoOrg2[numero][Candidato2],true)==0)
   	{
	   	strmid(InfoOrg2[numero][Candidato2], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
 	   	DOF2_SetString(arquivo,"Candidato2","Ninguém");
 	   	DOF2_SaveFile();
  	   	return true;
   	}
   	if(strcmp(nome,InfoOrg2[numero][Candidato3],true)==0)
   	{
	   	strmid(InfoOrg2[numero][Candidato3], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Candidato3","Ninguém");
	    DOF2_SaveFile();
 	   	return true;
   	}
   	if(strcmp(nome,InfoOrg2[numero][Candidato4],true)==0)
   	{
	   	strmid(InfoOrg2[numero][Candidato4], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
 	   	DOF2_SetString(arquivo,"Candidato4","Ninguém");
 	   	DOF2_SaveFile();
  	   	return true;
   	}
   	if(strcmp(nome,InfoOrg2[numero][Candidato5],true)==0)
   	{
	    strmid(InfoOrg2[numero][Candidato5], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	    DOF2_SetString(arquivo,"Candidato5","Ninguém");
	    DOF2_SaveFile();
	    return true;
   	}
   	if(strcmp(nome,InfoOrg2[numero][Candidato6],true)==0)
   	{
	   	strmid(InfoOrg2[numero][Candidato6], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
 	   	DOF2_SetString(arquivo,"Candidato6","Ninguém");
 	   	DOF2_SaveFile();
	    return true;
   	}
	if(strcmp(nome,InfoOrg2[numero][Candidato7],true)==0)
   	{
	   	strmid(InfoOrg2[numero][Candidato7], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
 	   	DOF2_SetString(arquivo,"Candidato7","Ninguém");
 	   	DOF2_SaveFile();
  	   	return true;
   	}
   	if(strcmp(nome,InfoOrg2[numero][Candidato8],true)==0)
   	{
	   	strmid(InfoOrg2[numero][Candidato8], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	   	DOF2_SetString(arquivo,"Candidato8","Ninguém");
	   	DOF2_SaveFile();
	   	return true;
   	}
   	if(strcmp(nome,InfoOrg2[numero][Candidato9],true)==0)
   	{
	   	strmid(InfoOrg2[numero][Candidato9], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	   	DOF2_SetString(arquivo,"Candidato9","Ninguém");
	   	DOF2_SaveFile();
	   	return true;
   	}
   	if(strcmp(nome,InfoOrg2[numero][Candidato10],true)==0)
   	{
	   	strmid(InfoOrg2[numero][Candidato10], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	   	DOF2_SetString(arquivo,"Candidato10","Ninguém");
	   	DOF2_SaveFile();
	   	return true;
   	}
   	if(strcmp(nome,InfoOrg2[numero][Candidato11],true)==0)
   	{
	   	strmid(InfoOrg2[numero][Candidato11], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	   	DOF2_SetString(arquivo,"Candidato11","Ninguém");
	   	DOF2_SaveFile();
	   	return true;
   	}
   	if(strcmp(nome,InfoOrg2[numero][Candidato12],true)==0)
   	{
	   	strmid(InfoOrg2[numero][Candidato12], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	   	DOF2_SetString(arquivo,"Candidato12","Ninguém");
	   	DOF2_SaveFile();
	   	return true;
   	}
   	if(strcmp(nome,InfoOrg2[numero][Candidato13],true)==0)
   	{
	   	strmid(InfoOrg2[numero][Candidato13], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	   	DOF2_SetString(arquivo,"Candidato13","Ninguém");
	   	DOF2_SaveFile();
	   	return true;
   	}
   	if(strcmp(nome,InfoOrg2[numero][Candidato14],true)==0)
   	{
	   	strmid(InfoOrg2[numero][Candidato14], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	   	DOF2_SetString(arquivo,"Candidato14","Ninguém");
	   	DOF2_SaveFile();
	   	return true;
   	}
   	if(strcmp(nome,InfoOrg2[numero][Candidato15],true)==0)
   	{
	   	strmid(InfoOrg2[numero][Candidato15], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	   	DOF2_SetString(arquivo,"Candidato15","Ninguém");
	   	DOF2_SaveFile();
	   	return true;
   	}
   	if(strcmp(nome,InfoOrg2[numero][Candidato16],true)==0)
   	{
	   	strmid(InfoOrg2[numero][Candidato16], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	   	DOF2_SetString(arquivo,"Candidato16","Ninguém");
	   	DOF2_SaveFile();
	   	return true;
   	}
   	if(strcmp(nome,InfoOrg2[numero][Candidato17],true)==0)
   	{
	   	strmid(InfoOrg2[numero][Candidato17], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	   	DOF2_SetString(arquivo,"Candidato17","Ninguém");
	   	DOF2_SaveFile();
	   	return true;
   	}
   	if(strcmp(nome,InfoOrg2[numero][Candidato18],true)==0)
   	{
	   	strmid(InfoOrg2[numero][Candidato18], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	   	DOF2_SetString(arquivo,"Candidato18","Ninguém");
	   	DOF2_SaveFile();
	   	return true;
   	}
   	if(strcmp(nome,InfoOrg2[numero][Candidato19],true)==0)
   	{
	   	strmid(InfoOrg2[numero][Candidato19], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	   	DOF2_SetString(arquivo,"Candidato19","Ninguém");
	   	DOF2_SaveFile();
	   	return true;
   	}
	if(strcmp(nome,InfoOrg2[numero][Candidato20],true)==0)
   	{
	   	strmid(InfoOrg2[numero][Candidato20], "Ninguém", 0, strlen("Ninguém"), MAX_PLAYER_NAME);
	   	DOF2_SetString(arquivo,"Candidato20","Ninguém");
	   	DOF2_SaveFile();
	   	return true;
   	}
	return 0;
}
static stock Demitir(playerid, para1)
{
	new gstring[128];
	format(gstring, sizeof(gstring), "* Você foi demitido pelo líder %s Motivo: Limpou sua Vaga.", PlayerName(playerid));
	SendClientMessage(para1, COLOR_LIGHTRED, gstring);
	SendClientMessage(para1, COLOR_LIGHTRED, "* Agora você é um civil novamente.");
	PlayerInfo[para1][pMembro] = 0;
	PlayerInfo[para1][pCargo] = 0;
	OnDuty[para1] = 0;
	EmpregoDuty[para1] = 0;
	ConnectedToPC[para1] = 0;
  	RemoveallRoadandSpikes(para1);
	if(PlayerInfo[para1][pSex] == 1)
	{
		PlayerInfo[para1][pSkin] = 23;
	}
	else
	{
		PlayerInfo[para1][pSkin] = 150;
	}
	MedicBill[para1] = 0;
	SpawnPlayer(para1);
}
static stock DemitirLider(playerid)
{
	SendClientMessage(playerid, COLOR_LIGHTRED, "Você foi demitido de líder por um admin, agora você é um Civil !");
	PlayerInfo[playerid][pMembro] = 0;
	PlayerInfo[playerid][pLider] = 0;
	PlayerInfo[playerid][pCargo] = 0;
	OnDuty[playerid] = 0;
	EmpregoDuty[playerid] = 0;
	ConnectedToPC[playerid] = 0;
 	RemoveallRoadandSpikes(playerid);
	if(PlayerInfo[playerid][pSex] == 1)
	{
		PlayerInfo[playerid][pSkin] = 23;
	}
	else
	{
		PlayerInfo[playerid][pSkin] = 150;
	}
	MedicBill[playerid] = 0;
	SpawnPlayer(playerid);
}

BPF::TemVaga(family)
{
	if(strcmp(InfoOrg[family][Membro1], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro2], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro3], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro4], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro5], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro6], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro7], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro8], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro9], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro10], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro11], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro12], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro13], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro14], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro15], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro16], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro17], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro18], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro19], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro20], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro21], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro22], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro23], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro24], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro25], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro26], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro27], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro28], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro29], "Ninguém", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro30], "Ninguém", true) == 0)
   	{
		return true;
	}
	return 0;
}

stock IsPlayerOnline(name[])
{
	new PlayerName2[MAX_PLAYER_NAME];
	foreach(Player, i)
	{
	   	GetPlayerName(i, PlayerName2, sizeof(PlayerName2));
	   	if(strcmp(name,PlayerName2,true)==0)
		{
		   	return true;
		}
	}
	return 0;
}

BPF::GetPlayerID(striing[])
{
    foreach(Player, i)
    {
       	new testname[MAX_PLAYER_NAME];
	   	GetPlayerName(i, testname, sizeof(testname));
	   	if(strcmp(testname,striing,true)==0)
	   	{
	   	    return i;
		}
    }
    return INVALID_PLAYER_ID;
}

stock Encrypt(string[])
{
	for(new x=0; x < strlen(string); x++)
 	{
  		string[x] += (3^x) * (x % 15);
  		if(string[x] > (0xff))
  		{
		  	string[x] -= 256;
  		}
  	}
	return 1;
}

stock Desncrypt(string[])
{
	for(new x=0; x < strlen(string); x++)
 	{
  		string[x] += (3^x) * (x % 15);
  		if(string[x] > (0xff))
  		{
		  	string[x] -= 256;
  		}
  	}
	return 1;
}

stock Desencriptar(string[])//Código irá pegar a senha encriptada, desencriptar, e retornar em forma de texto :D
{
    new Senha[100];
    for(new x = 0; x <= strlen(string); x++)
    {
        Senha[x] = (string[x] / 2);//Cada caractere da senha normal vai ser o da encriptada divido pra 2 (pois divisão é o processo inverso da multiplicação).
    }
    return Senha;
}

BPF::Avaliar(playerid)
{
	Avaliado[playerid] = 0;
	return true;
}

BPF::RotaOnibus(playerid)
{
	new opA;
	if(TransportDuty[playerid] == 2)
	{
		opA = random(sizeof(RotaChecks));
		SetPlayerCheckpoint(playerid, RotaChecks[opA][0],RotaChecks[opA][1],RotaChecks[opA][2], 11.0);
		SendClientMessage(playerid, 0x33FF00FF, "** Siga o CheckPoint que foi marcado em seu mapa para continuar a rota **");
		return true;
	}
	return true;
}

BPF::PediuAgora(playerid)
{
	PediuPraEntrar[playerid] = 0;
	return true;
}

BPF::IsAChopper(vehicleid)
{
	if(vehicleid == 497)
	{
		return 1;
	}
	return 0;
}

BPF::VozDePrisaoo(playerid, copid)
{
	if (!ProxDetectorS(50.0, playerid, copid))
	{
		KillTimer(PutaGorda[playerid]);
		if(VozDePrisao[playerid] == 1)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "***O policial que lhe deu voz de prisão perdeu você de vista, agora você está livre!");
			VozDePrisao[playerid] = 0;
		}
	}
	return true;
}

BPF::PlayerEquipar(playerid)
{
	JaEquipado[playerid] = 0;
	return true;
}
//==============================================================================//
static stock isNuero(string[])
{
	for(new i = 0; i < strlen(string); i++)
	    if(string[i] >= '0' && string[i] <= '9') return true;
	return false;
}
static stock IsNumero(striing[])
{
	for (new i = 0, j = strlen(striing); i < j; i++)
	{
		if (striing[i] > '9' || striing[i] < '0') return 0;
	}
	return true;
}
stock NumerosInventario(const string[])
{
    new length = strlen(string);
    if(!length) return false;
    for(new i = 0; i < length; i++)
    {
        if(string[i] > '9' || string[i] <'0') return false;
    }
    return true;
}
stock DiminuirInv(slot,playerid)
{
	if(InventarioInfo[playerid][slot][iUnidades] > 1) return InventarioInfo[playerid][slot][iUnidades] --;
	if(InventarioInfo[playerid][slot][iUnidades] == 1)
	{
	    InventarioInfo[playerid][slot][iUnidades]  = 0;
	    InventarioInfo[playerid][slot][iSlot] = 19382;
	}
	return 1;
}
stock IsNumeric(const string[])
{
	for (new i = 0, j = strlen(string); i < j; i++)
	    if(string[i] > '9' || string[i] < '0') return 0;

	return 1;
}
static stock IsPlayerInTerritorio(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if(x >= Territorio[MinX] && y >= Territorio[MinY] && x <= Territorio[MaxX] && y <= Territorio[MaxY]) return true;
    return 0;
}

BPF::fecharYakuza1()
{
	MoveDynamicObject(pYakuza1, 1534.69995117,-1453.19995117,15.19999981,3);
}
static stock IsVehicleValid(id)
{
	new type=GetVehicleModel(id);
	new blocked[]={ 548, 425, 417, 487, 488, 497, 563, 447, 469, 520 };
	for(new i;i<sizeof(blocked);i++)
	{
		if(type == blocked[i])
		{
			return 0;
		}
	}
	return true;
}
static stock IsPlayerInArea(playerid, Float:max_x, Float:min_x, Float:max_y, Float:min_y)
{
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	if(X <= max_x && X >= min_x && Y <= max_y && Y >= min_y) return true;
	return 0;
}


static stock IsPlayerInWater(playerid)
{
	new Float:x,Float:y,Float:pz;
	GetPlayerPos(playerid,x,y,pz);
	if (
 	(IsPlayerInArea(playerid, 2032.1371, 1841.2656, 1703.1653, 1467.1099) && pz <= 9.0484) //lv piratenschiff
  	|| (IsPlayerInArea(playerid, 2109.0725, 2065.8232, 1962.5355, 10.8547) && pz <= 10.0792) //lv visage
  	|| (IsPlayerInArea(playerid, -492.5810, -1424.7122, 2836.8284, 2001.8235) && pz <= 41.06) //lv staucamm
  	|| (IsPlayerInArea(playerid, -2675.1492, -2762.1792, -413.3973, -514.3894) && pz <= 4.24) //sf südwesten kleiner teich
  	|| (IsPlayerInArea(playerid, -453.9256, -825.7167, -1869.9600, -2072.8215) && pz <= 5.72) //sf gammel teich
  	|| (IsPlayerInArea(playerid, 1281.0251, 1202.2368, -2346.7451, -2414.4492) && pz <= 9.3145) //ls neben dem airport
  	|| (IsPlayerInArea(playerid, 2012.6154, 1928.9028, -1178.6207, -1221.4043) && pz <= 18.45) //ls mitte teich
  	|| (IsPlayerInArea(playerid, 2326.4858, 2295.7471, -1400.2797, -1431.1266) && pz <= 22.615) //ls weiter südöstlich
  	|| (IsPlayerInArea(playerid, 2550.0454, 2513.7588, 1583.3751, 1553.0753) && pz <= 9.4171) //lv pool östlich
  	|| (IsPlayerInArea(playerid, 1102.3634, 1087.3705, -663.1653, -682.5446) && pz <= 112.45) //ls pool nordwestlich
  	|| (IsPlayerInArea(playerid, 1287.7906, 1270.4369, -801.3882, -810.0527) && pz <= 87.123) //pool bei maddog's haus oben
  	|| (IsPlayerInArea >= -1408.0629 && y >= 2021.0587 && x <= -460.9319 && y <= 2861.4893)//Represa do deserto de Las Venturas
    || (IsPlayerInArea >= 1269.5886 && y >= -810.4507 && x <= 1288.8916 && y <= -800.5959) ||//Piscina de uma casa em VineWood (Mad Dog's Mansion)
    || (IsPlayerInArea >= 1086.6010 && y >= -683.6998 && x <= 1103.0225 && y <= -662.1832) ||//Piscina de uma casa em VineWood (Perto Mad Dog's Mansion)
    || (IsPlayerInArea >= 169.6879 && y >= -1392.6630 && x <= 281.5444 && y <= -1168.9749) ||// 2 Piscinas em VineWood
    || (IsPlayerInArea >= -828.3018 && y >= -2107.1487 && x <= -443.5032 && y <= -1855.6273) ||//Lago da árvore caída, ou Lago Morto
    || (IsPlayerInArea >= 1198.9982 && y >= -2407.0581 && x <= 1275.7397 && y <= -2341.6262) ||//Lago perto do aeroporto Los Santos
    || (IsPlayerInArea >= 2293.1467 && y >= -1432.5869 && x <= 2331.7388 && y <= -1397.6476) ||//Lago perto da Igreja Los Santos
    || (IsPlayerInArea >= 1915.3196 && y >= -1236.2382 && x <= 2016.6565 && y <= -1167.9290) ||//Park Glen Los Santos
    || (IsPlayerInArea >= -2747.1692 && y >= -510.1152 && x <= -2663.2468 && y <= -411.4905) ||//Lago em San Fierro
    || (IsPlayerInArea >= 1838.8041 && y >= 1463.2024 && x <= 2035.4167 && y <= 1703.0480) ||//Cascata do Login em Las Venturas
    || (IsPlayerInArea >= 2049.6646 && y >= 1843.3029 && x <= 2119.9021 && y <= 1983.5464) ||//Navio Pirata em Las Venturas
    || (IsPlayerInArea >= 2094.9255 && y >= 1085.2852 && x <= 2179.1790 && y <= 1183.0610) ||//Frente de um Cascino em Las Venturas
    || (IsPlayerInArea >= 2545.3718 && y >= 2347.7112 && x <= 2593.6794 && y <= 2403.8040))//Piscina de um prédio em Las Venturas
   	|| (pz < 1.5)
	)
	{
	    return true;
	}
	return 0;
}
static stock SetHora()
{
	gettime(hour, minute, second);
	if(hour == 0 && minute >= 0 && minute <= 59) { SetWorldTime(0); }
	if(hour == 1 && minute >= 0 && minute <= 59) { SetWorldTime(1); }
	if(hour == 2 && minute >= 0 && minute <= 59) { SetWorldTime(2); }
	if(hour == 3 && minute >= 0 && minute <= 59) { SetWorldTime(3); }
	if(hour == 4 && minute >= 0 && minute <= 59) { SetWorldTime(4); }
	if(hour == 5 && minute >= 0 && minute <= 39) { SetWorldTime(5); }
	if(hour == 5 && minute >= 40 && minute <= 49) { SetWorldTime(23); }
	if(hour == 5 && minute >= 50 && minute <= 59) { SetWorldTime(22); }
	if(hour == 6 && minute >= 0 && minute <= 9) { SetWorldTime(21); }
	if(hour == 6 && minute >= 30 && minute <= 59) { SetWorldTime(7); }
	if(hour == 7 && minute >= 0 && minute <= 59) { SetWorldTime(7); }
	if(hour == 8 && minute >= 0 && minute <= 59) { SetWorldTime(8); }
	if(hour == 9 && minute >= 0 && minute <= 59) { SetWorldTime(9); }
	if(hour == 10 && minute >= 0 && minute <= 59) { SetWorldTime(10); }
	if(hour == 11 && minute >= 0 && minute <= 59) { SetWorldTime(11); }
	if(hour == 12 && minute >= 0 && minute <= 59) { SetWorldTime(12); }
	if(hour == 13 && minute >= 0 && minute <= 59) { SetWorldTime(13); }
	if(hour == 14 && minute >= 0 && minute <= 59) { SetWorldTime(14); }
	if(hour == 15 && minute >= 0 && minute <= 59) { SetWorldTime(15); }
	if(hour == 16 && minute >= 0 && minute <= 59) { SetWorldTime(16); }
	if(hour == 17 && minute >= 0 && minute <= 59) { SetWorldTime(17); }
	if(hour == 17 && minute >= 35 && minute <= 39) { SetWorldTime(20); }
	if(hour == 17 && minute >= 40 && minute <= 49) { SetWorldTime(21); }
	if(hour == 17 && minute >= 55 && minute <= 59) { SetWorldTime(23); }
	if(hour == 18 && minute >= 0 && minute <= 29) { SetWorldTime(5); }
	if(hour == 19 && minute >= 0 && minute <= 59) { SetWorldTime(4); }
	if(hour == 20 && minute >= 0 && minute <= 59) { SetWorldTime(3); }
	if(hour == 21 && minute >= 0 && minute <= 59) { SetWorldTime(2); }
	if(hour == 22 && minute >= 0 && minute <= 59) { SetWorldTime(1); }
	if(hour == 23 && minute >= 0 && minute <= 59) { SetWorldTime(0); }
}

BPF::Atualizar3Dtexts()
{
	new FormatPerigoso[600];
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if(HouseInfo[h][hOwned] == 0)
		{
			format(FormatPerigoso, sizeof(FormatPerigoso),
			"{FFFFFF}Casa %03d\n\
			{FFFFFF}Esta casa esta a venda\n\
			{FFFFFF}Descricao: {33AA33}%s\n\
			{FFFFFF}Preço: {33AA33}R$%s\n\
			{FFFFFF}Nível: {5AEFF9}%d\n\
			{FFFFFF}Use /comprarcasa",
			h,
			HouseInfo[h][hDiscription],
			ConvertMoney(HouseInfo[h][hValue]),
			HouseInfo[h][hLevel]);

			Delete3DTextLabel(HouseLabel[h]);
			HouseLabel[h] = Create3DTextLabel(FormatPerigoso,0x30E7F888,HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]+0.5,13.0, 0);
			DestroyDynamicPickup(HousePickup[h]);
			HousePickup[h] = CreateDynamicPickup(1273, 23, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez],-1,-1,-1,50.0);
		}
		if(HouseInfo[h][hOwned] == 1)
		{
			if(HouseInfo[h][hRentabil] == 0)
			{
				format(FormatPerigoso, sizeof(FormatPerigoso),
				"{FFFFFF}Casa %03d\n\
				{FFFFFF}O dono desta casa é {33AA33}%s\n\
				{FFFFFF}Nível: {33AA33}%d\n\
				{FFFFFF}Último login: {5AEFF9}[%s]\n\n\
				{FFFFFF}Aperte a tecla {5AEFF9}ENTER{FFFFFF} para entrar",
				h,
				HouseInfo[h][hOwner],
				HouseInfo[h][hLevel],
				HouseInfo[h][hVerData]);

				Delete3DTextLabel(HouseLabel[h]);
				HouseLabel[h] = Create3DTextLabel(FormatPerigoso,0x30E7F888,HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]+0.5,13.0, 0);
                DestroyDynamicPickup(HousePickup[h]);
				HousePickup[h] = CreateDynamicPickup(19522, 23, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez],-1,-1,-1,50.0);
			}
			else
			{
				format(FormatPerigoso, sizeof(FormatPerigoso),
				"{FFFFFF}Casa %03d\n\
				{FFFFFF}O dono desta casa é {33AA33}%s\n\
				{FFFFFF}Aluguel: {33AA33}R$%d\n\
				{FFFFFF}Nível: {33AA33}%d\n\
				{FFFFFF}Último Login: {5AEFF9}[%s]\n\
				{FFFFFF}USE /alugarquarto para aluga-la\n\n\
				{FFFFFF}Aperte a tecla {5AEFF9}ENTER{FFFFFF} para entrar",
				h,
				HouseInfo[h][hOwner],
				HouseInfo[h][hRent],
				HouseInfo[h][hLevel],
				HouseInfo[h][hVerData]);

				Delete3DTextLabel(HouseLabel[h]);
				HouseLabel[h] = Create3DTextLabel(FormatPerigoso,0x30E7F888,HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]+0.5,13.0, 0);
				DestroyDynamicPickup(HousePickup[h]);
				HousePickup[h] = CreateDynamicPickup(19522, 23, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez],-1,-1,-1,50.0);
			}
		}
	}
	for(new h = 0; h < sizeof(BizzInfo); h++)
	{
		if(BizzInfo[h][bOwned] == 0)
		{
			format(FormatPerigoso, sizeof(FormatPerigoso),
            "{FFFFFF}Esta empresa esta a venda\n\
			{33AA33}%s\n\
			{FFFFFF}Preço da Empresa: {5AEFF9}R$%s\n\
			{FFFFFF}Nível: {5AEFF9}%d\n\
			{FFFFFF}Fundos: {33AA33}R$%s\n\
			{FFFFFF}Produtos: {33AA33}%d/{FFFFFF}%d\n\
			{FFFFFF}Preço por produto: {5AEFF9}R$%s\n\
			{FFFFFF}Para comprar digite {5AEFF9}/comprarempresa",
			BizzInfo[h][bMessage],
			ConvertMoney(BizzInfo[h][bBuyPrice]),
			BizzInfo[h][bLevelNeeded],
			ConvertMoney(BizzInfo[h][bTill]),
			BizzInfo[h][bProducts],BizzInfo[h][bMaxProducts],
			ConvertMoney(BizzInfo[h][bPriceProd]));

			Update3DTextLabelText(BizzLabel[h], 0x30E7F888, FormatPerigoso);
		}
		if(BizzInfo[h][bOwned] == 1)
		{
   			format(FormatPerigoso, sizeof(FormatPerigoso),
  			"{5AEFF9}%s\n\
  			{FFFFFF}Dono: {5AEFF9}%s\n\
  			{FFFFFF}Entrada: {33AA33}R$%d\n\
         	{FFFFFF}Fundos: {33AA33}R$%s\n\
         	{FFFFFF}Aperte a tecla {5AEFF9}ENTER{FFFFFF} para entrar",
  			BizzInfo[h][bMessage],
		 	BizzInfo[h][bOwner],
		  	BizzInfo[h][bEntranceCost],
		  	ConvertMoney(BizzInfo[h][bTill]));

   			Update3DTextLabelText(BizzLabel[h], 0x30E7F888, FormatPerigoso);
		}
	}
	for(new h = 0; h < sizeof(SBizzInfo); h++)
	{
		if(SBizzInfo[h][sbOwned] == 0)
		{
			format(FormatPerigoso, sizeof(FormatPerigoso),
            "{FFFFFF}Esta empresa esta a venda\n\
			{33AA33}%s\n\
			{FFFFFF}Preço da mini empresa: {5AEFF9}R$%s\n\
			{FFFFFF}Nível: {5AEFF9}%d\n\
			{FFFFFF}Fundos: {33AA33}R$%s\n\
			{FFFFFF}Produtos: {33AA33}%d/{FFFFFF}%d\n\
			{FFFFFF}Preço por produto: {5AEFF9}R$%s\n\
			{FFFFFF}Para comprar digite {5AEFF9}/comprarempresa",
			SBizzInfo[h][sbMessage],
			ConvertMoney(SBizzInfo[h][sbBuyPrice]),
			SBizzInfo[h][sbLevelNeeded],
			ConvertMoney(SBizzInfo[h][sbTill]),
			SBizzInfo[h][sbProducts],SBizzInfo[h][sbMaxProducts],
			ConvertMoney(SBizzInfo[h][sbPriceProd]));

			Update3DTextLabelText(SBizzLabel[h], 0x30E7F888, FormatPerigoso);
		}
		if(SBizzInfo[h][sbOwned] == 1)
		{
            format(FormatPerigoso, sizeof(FormatPerigoso),
  			"{5AEFF9}%s\n\
  			{FFFFFF}Dono: {5AEFF9}%s\n\
  			{FFFFFF}Entrada: {33AA33}R$%d\n\
         	{FFFFFF}Fundos: {33AA33}R$%s\n\
         	{FFFFFF}Aperte a tecla {5AEFF9}ENTER{FFFFFF} para entrar",
  			BizzInfo[h][bMessage],
		 	BizzInfo[h][bOwner],
		  	BizzInfo[h][bEntranceCost],
		  	ConvertMoney(BizzInfo[h][bTill]));

   			Update3DTextLabelText(BizzLabel[h], 0x30E7F888, FormatPerigoso);
		}
	}
	for(new c; c < sizeof(CaixaEquipamentos); ++c){

        format(FormatPerigoso, sizeof FormatPerigoso, "Segure a tecla Y para equipar-se\nMateriais: %d", CaixaEquipamentos[c][caMateriais]);
	  	UpdateDynamic3DTextLabelText(CaixaEquipamentos[c][caText], 0xAAAAAAAA, FormatPerigoso);
	}
	for(new h = 0; h < sizeof(FBizzInfo); h++)
	{
		if(FBizzInfo[h][fbOwned] == 0)
			{
				format(FormatPerigoso, sizeof(FormatPerigoso),
			 	"%s\n\
			 	{FFFFFF}Esta Fazenda esta a venda\n\
			 	{33CCFF}Valor: {33AA33}R$%s\n\
			 	{33CCFF}Nivel: {FFFFFF}%d\n\
			 	{FFFF00}Produtos: {9ACD32}%d/{FFFFFF}%d\n\
				{FFFF00}Preço por produto: {33AA33}R$%s\n\
			 	{FFFFFF}Para comprar digite /comprarfazenda",
			 	FBizzInfo[h][fbMessage],
			 	ConvertMoney(FBizzInfo[h][fbBuyPrice]),
			 	FBizzInfo[h][fbLevelNeeded],
			 	FBizzInfo[h][fbProducts],FBizzInfo[h][fbMaxProducts],
			 	ConvertMoney(FBizzInfo[h][fbPriceProd]));

                Update3DTextLabelText(FBizzLabel[h], 0x30E7F888, FormatPerigoso);
			}
			if(FBizzInfo[h][fbOwned] == 1)
			{
                format(FormatPerigoso, sizeof(FormatPerigoso),
                "%s\n\
			 	{33CCFF}Dono da Fazenda: {FFFFFF}%s\n\
			 	{33CCFF}Extorcao: {FFFFFF}%s\n\
			 	{FFFF00}Produtos: {9ACD32}%d/{FFFFFF}%d\n\
				{FFFF00}Preço por produto: {33AA33}R$%s\n\
			 	{33CCFF}Fundos: {33AA33}R$%s",
			 	FBizzInfo[h][fbMessage],
			 	FBizzInfo[h][fbOwner],
			 	FBizzInfo[h][fbExtortion],
			 	FBizzInfo[h][fbProducts],FBizzInfo[h][fbMaxProducts],
			 	ConvertMoney(FBizzInfo[h][fbPriceProd]),
			 	ConvertMoney(FBizzInfo[h][fbTill]));

			 	Update3DTextLabelText(FBizzLabel[h], 0x30E7F888, FormatPerigoso);
			}
	}
	return 0;
}
//=================================================



static stock GetSpeedKM(playerid)
{
	new
		Float:PosX,
		Float:PosY,
		Float:PosZ,
		Float:PlayerSpeedDistance;

	GetVehicleVelocity(GetPlayerVehicleID(playerid), PosX, PosY, PosZ);
	PlayerSpeedDistance = floatmul(floatsqroot(floatadd(floatadd(floatpower(PosX, 2), floatpower(PosY, 2)),  floatpower(PosZ, 2))), 170.0);
	new spe = floatround(PlayerSpeedDistance * 1);
	return spe;
}

static stock GetPlayerSpeedape(playerid,bool:kmhh)
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 0;
    new Float:Vx,Float:Vy,Float:Vz,Float:rtn;
    GetPlayerVelocity(playerid,Vx,Vy,Vz);
    rtn = floatsqroot(floatabs(floatpower(Vx + Vy + Vz,2)));
    return kmhh?floatround(rtn * 100 * 1.61):floatround(rtn * 100);
}

//static stock GetPlayerVehicleSpeed(playerid,bool:kmh){new Float:Vx,Float:Vy,Float:Vz,Float:rtn;
static stock GetPlayerSpeed(playerid,bool:kmhh)
{
	new Float:Vx,Float:Vy,Float:Vz,Float:rtn;
	if(!IsPlayerInAnyVehicle(playerid))
	{
 		return 0;
	}
	GetVehicleVelocity(GetPlayerVehicleID(playerid),Vx,Vy,Vz);
	rtn = floatsqroot(floatabs(floatpower(Vx + Vy + Vz,2)));
	return kmhh?floatround(rtn * 100 * 1.61):floatround(rtn * 100);
}
//================

stock ContarJogadores()
{
	new	Jogadores = 0;
	foreach(Player, i){
		Jogadores++;
	}
	return Jogadores;
}

static stock RemovePlayerFromVehicleEx(playerid)
{
	RemovePlayerFromVehicle(playerid);
	Controle(playerid, 1);
}

static stock GetPlayerOrg(playerid)
{
	if(!IsPlayerConnected(playerid))return 0;
	new org;
	if(PlayerInfo[playerid][pLider] > 0)
	{
		org = PlayerInfo[playerid][pLider];
		return org;
	}
	if(PlayerInfo[playerid][pMembro] > 0)
	{
		org = PlayerInfo[playerid][pMembro];
		return org;
	}
	return 0;
}
BPF::LoadCofreOrg()
{
	new arquivo[64];
	new idx = 1;
	while (idx < sizeof(CofreOrg))
	{
		format(arquivo, sizeof(arquivo), Pasta_CofreOrg,idx);
		CofreOrg[idx][DiaLider] = DOF2_GetInt(arquivo,"DiaLíder");
		CofreOrg[idx][Dinheiro] = DOF2_GetInt(arquivo,"Dinheiro");
		CofreOrg[idx][Materiais] = DOF2_GetInt(arquivo,"Materiais");
		CofreOrg[idx][Maconha] = DOF2_GetInt(arquivo,"Maconha");
		CofreOrg[idx][Cocaina] = DOF2_GetInt(arquivo,"Cocaina");
		CofreOrg[idx][Crack] = DOF2_GetInt(arquivo,"Crack");
		CofreOrg[idx][dMaconha] = DOF2_GetInt(arquivo,"DarMaconha");
		CofreOrg[idx][dEaglec1] = DOF2_GetInt(arquivo,"DarEaglec1");
		CofreOrg[idx][dAKc1] = DOF2_GetInt(arquivo,"DarAKc1");
		CofreOrg[idx][dMP5c1] = DOF2_GetInt(arquivo,"DarMP5c1");
		CofreOrg[idx][dShotc1] = DOF2_GetInt(arquivo,"DarShotc1");
		CofreOrg[idx][dRiflec1] = DOF2_GetInt(arquivo,"DarRiflec1");
		CofreOrg[idx][dEaglec2] = DOF2_GetInt(arquivo,"DarEaglec2");
		CofreOrg[idx][dAKc2] = DOF2_GetInt(arquivo,"DarAKc2");
		CofreOrg[idx][dMP5c2] = DOF2_GetInt(arquivo,"DarMP5c2");
		CofreOrg[idx][dShotc2] = DOF2_GetInt(arquivo,"DarShotc1");
		CofreOrg[idx][dRiflec2] = DOF2_GetInt(arquivo,"DarRiflec2");
		CofreOrg[idx][dEaglec3] = DOF2_GetInt(arquivo,"DarEaglec3");
		CofreOrg[idx][dAKc3] = DOF2_GetInt(arquivo,"DarAKc3");
		CofreOrg[idx][dMP5c3] = DOF2_GetInt(arquivo,"DarMP5c3");
		CofreOrg[idx][dShotc3] = DOF2_GetInt(arquivo,"DarShotc3");
		CofreOrg[idx][dRiflec3] = DOF2_GetInt(arquivo,"DarRiflec3");
		CofreOrg[idx][dEaglec4] = DOF2_GetInt(arquivo,"DarEaglec4");
		CofreOrg[idx][dAKc4] = DOF2_GetInt(arquivo,"DarAKc4");
		CofreOrg[idx][dMP5c4] = DOF2_GetInt(arquivo,"DarMP5c4");
		CofreOrg[idx][dShotc4] = DOF2_GetInt(arquivo,"DarShotc4");
		CofreOrg[idx][dRiflec4] = DOF2_GetInt(arquivo,"DarRiflec4");
		CofreOrg[idx][dEaglec5] = DOF2_GetInt(arquivo,"DarEaglec5");
		CofreOrg[idx][dAKc5] = DOF2_GetInt(arquivo,"DarAKc5");
		CofreOrg[idx][dMP5c5] = DOF2_GetInt(arquivo,"DarMP5c5");
		CofreOrg[idx][dShotc5] = DOF2_GetInt(arquivo,"DarShotc5");
		CofreOrg[idx][dRiflec5] = DOF2_GetInt(arquivo,"DarRiflec5");
		CofreOrg[idx][cMaconha] = DOF2_GetInt(arquivo,"ComMaconha");
		CofreOrg[idx][cMateriais] = DOF2_GetInt(arquivo,"ComMateriais");
		CofreOrg[idx][mMaconha] = DOF2_GetInt(arquivo,"PagMaconha");
		CofreOrg[idx][mMateriais] = DOF2_GetInt(arquivo,"PagMateriais");
        CofreOrg[idx][Vip] = DOF2_GetInt(arquivo,"Vip");
        CofreOrg[idx][Diasvip] = DOF2_GetInt(arquivo,"Diasvip");
		CofreOrg[idx][DiaVIP] = DOF2_GetInt(arquivo,"DiaVIP");
		CofreOrg[idx][MesVIP] = DOF2_GetInt(arquivo,"MesVIP");
		CofreOrg[idx][AnoVIP] = DOF2_GetInt(arquivo,"AnoVIP");
		if(idx == 12 || idx == 13)
		{
		    CofreOrg[idx][MatBox1] = DOF2_GetInt(arquivo,"Box1");
		    CofreOrg[idx][MatBox2] = DOF2_GetInt(arquivo,"Box2");
		    CofreOrg[idx][MatBox3] = DOF2_GetInt(arquivo,"Box3");
		}
		idx ++;
	}
	Update3d();
	return idx;
}

BPF::LoadSalarioOrg()
{
	new arquivo[64];
	new idx = 1;
	while (idx < sizeof(CofreOrg))
	{
		format(arquivo, sizeof(arquivo), Pasta_CofreOrg,idx);
		CofreOrg[idx][salarioc1] = DOF2_GetInt(arquivo,"SalarioCargo1");
		CofreOrg[idx][salarioc2] = DOF2_GetInt(arquivo,"SalarioCargo2");
		CofreOrg[idx][salarioc3] = DOF2_GetInt(arquivo,"SalarioCargo3");
		CofreOrg[idx][salarioc4] = DOF2_GetInt(arquivo,"SalarioCargo4");
		CofreOrg[idx][salarioc5] = DOF2_GetInt(arquivo,"SalarioCargo5");
		CofreOrg[idx][salariolider] = DOF2_GetInt(arquivo,"SalarioLíder");
		idx ++;
	}
	return true;
}

BPF::SaveAccounts()
{
	foreach(Player, i)
	{
		OnPlayerSave(i);
		SaveObjects(i);
	}
	SalvarCofreOrg();
	SalvarCarros();
	return true;
}

BPF::SalvarCofreOrg()
{
	new arquivo[75];
	new idx = 1;
	while (idx < sizeof(CofreOrg))
	{
		format(arquivo, sizeof(arquivo), Pasta_CofreOrg,idx);
		DOF2_SetInt(arquivo,"Dinheiro",CofreOrg[idx][Dinheiro]);
		DOF2_SetInt(arquivo,"Materiais",CofreOrg[idx][Materiais]);
		DOF2_SetInt(arquivo,"Maconha",CofreOrg[idx][Maconha]);
		DOF2_SetInt(arquivo,"Cocaina",CofreOrg[idx][Cocaina]);
		DOF2_SetInt(arquivo,"Crack",CofreOrg[idx][Crack]);
		DOF2_SetInt(arquivo,"DarMaconha",CofreOrg[idx][dMaconha]);
		DOF2_SetInt(arquivo,"ComMaconha",CofreOrg[idx][cMaconha]);
		DOF2_SetInt(arquivo,"ComMateriais",CofreOrg[idx][cMateriais]);
		DOF2_SetInt(arquivo,"PagMaconha",CofreOrg[idx][mMaconha]);
		DOF2_SetInt(arquivo,"PagMateriais",CofreOrg[idx][mMateriais]);
		DOF2_SetInt(arquivo,"Vip",CofreOrg[idx][Vip]);
  		DOF2_SetInt(arquivo,"Diasvip",CofreOrg[idx][Diasvip]);
		DOF2_SetInt(arquivo,"DiaVIP",CofreOrg[idx][DiaVIP]);
		DOF2_SetInt(arquivo,"MesVIP",CofreOrg[idx][MesVIP]);
		DOF2_SetInt(arquivo,"AnoVIP",CofreOrg[idx][AnoVIP]);
		DOF2_SetInt(arquivo,"DiaLíder",CofreOrg[idx][DiaLider]);
		if(idx == 13 || idx == 12)
		{
		    DOF2_SetInt(arquivo,"Box1",CofreOrg[idx][MatBox1]);
		    DOF2_SetInt(arquivo,"Box2",CofreOrg[idx][MatBox2]);
		    DOF2_SetInt(arquivo,"Box3",CofreOrg[idx][MatBox3]);
		}
		DOF2_SaveFile();
		idx ++;
	}
	return true;
}

//==================
static stock DefinirSalarioc1(org,valor)
{
	CofreOrg[org][salarioc1] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"SalarioCargo1",CofreOrg[org][salarioc1]);
	DOF2_SaveFile();
	return true;
}
static stock DefinirSalarioc2(org,valor)
{
	CofreOrg[org][salarioc2] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"SalarioCargo2",CofreOrg[org][salarioc2]);
	DOF2_SaveFile();
	return true;
}
static stock DefinirSalarioc3(org,valor)
{
	CofreOrg[org][salarioc3] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"SalarioCargo3",CofreOrg[org][salarioc3]);
	DOF2_SaveFile();
	return true;
}
static stock DefinirSalarioc4(org,valor)
{
	CofreOrg[org][salarioc4] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"SalarioCargo4",CofreOrg[org][salarioc4]);
	DOF2_SaveFile();
	return true;
}
static stock DefinirSalarioc5(org,valor)
{
	CofreOrg[org][salarioc5] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"SalarioCargo5",CofreOrg[org][salarioc5]);
	DOF2_SaveFile();
	return true;
}
static stock DefinirSalarioc6(org,valor)
{
	CofreOrg[org][salariolider] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"SalarioLíder",CofreOrg[org][salariolider]);
	DOF2_SaveFile();
	return true;
}

static stock DepositarGranaOrg(org,valor)
{
	new antes = CofreOrg[org][Dinheiro];
	CofreOrg[org][Dinheiro] = antes+valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"Dinheiro",CofreOrg[org][Dinheiro]);
	DOF2_SaveFile();
	return true;
}
static stock GiveCash(playerid,valor)
{
	new antes = PlayerInfo[playerid][pCasher];
	PlayerInfo[playerid][pCasher] = antes+valor;
	return true;
}
static stock TakeCash(playerid,valor)
{
	new antes = PlayerInfo[playerid][pCasher];
	PlayerInfo[playerid][pCasher] = antes-valor;
	return true;
}
// Sistema de portão
stock CarregarPortoes()
{
	new Filea[60];
	for(new i; i<1000; i++)
	{
	    format(Filea,60,"Portoes/Portao_%d.ini",i);
	    if(DOF2_FileExists(Filea))
	    {
	        format(SistemaPortao[i][PortaoSenha],20, DOF2_GetString(Filea,"PortaoSenha"));
			format(SistemaPortao[i][PortaoDono],40, DOF2_GetString(Filea,"PortaoDono"));
	        format(SistemaPortao[i][PortaoText],300,"{FFA500}Portao de %s buzine ou\ndigite /abrirportao para abrir",SistemaPortao[i][PortaoDono]);
			SistemaPortao[i][PortaoX] = DOF2_GetFloat(Filea,"PortaoX");
            SistemaPortao[i][PortaoY] = DOF2_GetFloat(Filea,"PortaoY");
            SistemaPortao[i][PortaoZ] = DOF2_GetFloat(Filea,"PortaoZ");
            SistemaPortao[i][PortaoRX] = DOF2_GetFloat(Filea,"PortaoRX");
            SistemaPortao[i][PortaoRY] = DOF2_GetFloat(Filea,"PortaoRY");
            SistemaPortao[i][PortaoRZ] = DOF2_GetFloat(Filea,"PortaoRZ");
            SistemaPortao[i][PortaoInterior] = DOF2_GetInt(Filea,"PortaoInterior");
            SistemaPortao[i][PortaoMundo] = DOF2_GetInt(Filea,"PortaoMundo");

			SistemaPortao[i][PortaoObj] = CreateDynamicObject(980, SistemaPortao[i][PortaoX],SistemaPortao[i][PortaoY], SistemaPortao[i][PortaoZ], SistemaPortao[i][PortaoRX], SistemaPortao[i][PortaoRY], SistemaPortao[i][PortaoRZ], SistemaPortao[i][PortaoMundo], SistemaPortao[i][PortaoInterior], -1, 800.0);
            SistemaPortao[i][Portao3d] = CreateDynamic3DTextLabel(SistemaPortao[i][PortaoText], -1, SistemaPortao[i][PortaoX],SistemaPortao[i][PortaoY], SistemaPortao[i][PortaoZ], 30, INVALID_PLAYER_ID, INVALID_VEHICLE_ID,  0, SistemaPortao[i][PortaoMundo], SistemaPortao[i][PortaoInterior], -1, 100.0);
		}
	}
	return 1;
}

stock SalvarPortoes()
{
    new Filea[60];
    for(new i; i<1000; i++)
	{
	    format(Filea,60,"Portoes/Portao_%d.ini",i);
		if(IsValidDynamicObject(SistemaPortao[i][PortaoObj]))
		{
            if(!DOF2_FileExists(Filea)) DOF2_CreateFile(Filea);
		    DOF2_SetString(Filea,"PortaoDono", SistemaPortao[i][PortaoDono] );
		    DOF2_SetString(Filea,"PortaoSenha", SistemaPortao[i][PortaoSenha] );
		    DOF2_SetString(Filea,"PortaoText", SistemaPortao[i][PortaoText] );
		    DOF2_SetFloat(Filea,"PortaoX", SistemaPortao[i][PortaoX] );
		    DOF2_SetFloat(Filea,"PortaoY", SistemaPortao[i][PortaoY] );
		    DOF2_SetFloat(Filea,"PortaoZ", SistemaPortao[i][PortaoZ] );
		    DOF2_SetFloat(Filea,"PortaoRX", SistemaPortao[i][PortaoRX] );
		    DOF2_SetFloat(Filea,"PortaoRY", SistemaPortao[i][PortaoRY] );
		    DOF2_SetFloat(Filea,"PortaoRZ", SistemaPortao[i][PortaoRZ] );
			DOF2_SetInt(Filea,"PortaoInterior", SistemaPortao[i][PortaoInterior] );
			DOF2_SetInt(Filea,"PortaoMundo",  SistemaPortao[i][PortaoMundo] );

		    DOF2_SaveFile();
		}
	}
	return 1;
}
forward  SistemaAbrirPortao(playerid,portaoid);
public SistemaAbrirPortao(playerid,portaoid)
{
	new Float:p[6];
	GetDynamicObjectPos(SistemaPortao[portaoid][PortaoObj], p[0],p[1],p[2]);
	GetDynamicObjectRot(SistemaPortao[portaoid][PortaoObj], p[3],p[4],p[5]);

	if(PortaoAberto[portaoid] == 0)
	{
	GameTextForPlayer(playerid, "~g~Portao Aberto", 3000, 3);
	MoveDynamicObject(SistemaPortao[portaoid][PortaoObj], p[0],p[1],p[2]-6, 3.0, p[3],p[4],p[5]);
	PortaoOcupado[portaoid] = 1;
	PortaoAberto[portaoid] = 1;
	SetTimerEx("SistemaAbrirPortao",8000,false,"id", playerid,portaoid);

	}
	else if(PortaoAberto[portaoid] == 1)
	{
	GameTextForPlayer(playerid, "~r~Portao Fechado", 3000, 3);
	MoveDynamicObject(SistemaPortao[portaoid][PortaoObj], p[0],p[1],p[2]+6, 3.0, p[3],p[4],p[5]);
	SetTimerEx("LiberarPortao",3500,false,"d", portaoid);
	PortaoAberto[portaoid] = 0;
	}

	return 1;
}

forward  LiberarPortao(portaoid);
public LiberarPortao(portaoid)
{
    PortaoOcupado[portaoid] = 0;
	return 1;
}
static stock TirarMesVIP(org,valor)
{
	new antes = CofreOrg[org][MesVIP];
	CofreOrg[org][MesVIP] = antes-valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"MesVIP",CofreOrg[org][MesVIP]);
	DOF2_SaveFile();
	return true;
}
static stock ColocarAnoVIP(org,valor)
{
	new antes = CofreOrg[org][AnoVIP];
	CofreOrg[org][AnoVIP] = antes+valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"AnoVIP",CofreOrg[org][AnoVIP]);
	DOF2_SaveFile();
	return true;
}
static stock SalvarDiasvip(org,valor)
{
	CofreOrg[org][Vip] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"Diasvip",CofreOrg[org][Diasvip]);
	DOF2_SaveFile();
	return true;
}
static stock SalvarDiaVIP(org,valor)
{
	CofreOrg[org][Vip] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DiaVIP",CofreOrg[org][DiaVIP]);
	DOF2_SaveFile();
	return true;
}
static stock SalvarMesVIP(org,valor)
{
	CofreOrg[org][Vip] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"MesVIP",CofreOrg[org][MesVIP]);
	DOF2_SaveFile();
	return true;
}
static stock SalvarAnoVIP(org,valor)
{
	CofreOrg[org][Vip] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"AnoVIP",CofreOrg[org][AnoVIP]);
	DOF2_SaveFile();
	return true;
}
static stock SalvarOrgVip(org,valor)
{
	CofreOrg[org][Vip] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"Vip",CofreOrg[org][Vip]);
	DOF2_SaveFile();
	return true;
}
static stock SalvarcMateriais(org,valor)
{
	CofreOrg[org][cMateriais] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"ComMateriais",CofreOrg[org][cMateriais]);
	DOF2_SaveFile();
	return true;
}
static stock SalvarmMateriais(org,valor)
{
	CofreOrg[org][mMateriais] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"PagMateriais",CofreOrg[org][mMateriais]);
	DOF2_SaveFile();
	return true;
}
static stock SalvarmMaconha(org,valor)
{
	CofreOrg[org][mMaconha] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"PagMaconha",CofreOrg[org][mMaconha]);
	return true;
}
static stock SalvarcMaconha(org,valor)
{
	CofreOrg[org][cMaconha] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"ComMaconha",CofreOrg[org][cMaconha]);
	DOF2_SaveFile();
	return true;
}
static stock dSalvarEaglec1(org,valor)
{
	//new antes = CofreOrg[org][dEaglec1]);
	CofreOrg[org][dEaglec1] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DarEaglec1",CofreOrg[org][dEaglec1]);
	DOF2_SaveFile();
	return true;
}
static stock dSalvarMaconha(org,valor)
{
	CofreOrg[org][dMaconha] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DarMaconha",CofreOrg[org][dMaconha]);
	DOF2_SaveFile();
	return true;
}
static stock dSalvarEaglec2(org,valor)
{
	//new antes = CofreOrg[org][dEaglec2]);
	CofreOrg[org][dEaglec2] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DarEaglec2",CofreOrg[org][dEaglec2]);
	DOF2_SaveFile();
	return true;
}
static stock dSalvarEaglec3(org,valor)
{
	//new antes = CofreOrg[org][dEaglec3]);
	CofreOrg[org][dEaglec3] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DarEaglec3",CofreOrg[org][dEaglec3]);
	DOF2_SaveFile();
	return true;
}
static stock dSalvarEaglec4(org,valor)
{
	//new antes = CofreOrg[org][dEaglec4]);
	CofreOrg[org][dEaglec4] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DarEaglec4",CofreOrg[org][dEaglec4]);
	DOF2_SaveFile();
	return true;
}
static stock dSalvarEaglec5(org,valor)
{
	//new antes = CofreOrg[org][dEaglec5]);
	CofreOrg[org][dEaglec5] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DarEaglec5",CofreOrg[org][dEaglec5]);
	DOF2_SaveFile();
	return true;
}
static stock dSalvarShotc1(org,valor)
{
	//new antes = CofreOrg[org][dShotc1]);
	CofreOrg[org][dShotc1] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DarShotc1",CofreOrg[org][dShotc1]);
	DOF2_SaveFile();
	return true;
}

static stock dSalvarShotc2(org,valor)
{
	//new antes = CofreOrg[org][dShotc2]);
	CofreOrg[org][dShotc2] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DarShotc2",CofreOrg[org][dShotc2]);
	DOF2_SaveFile();
	return true;
}
static stock dSalvarShotc3(org,valor)
{
	//new antes = CofreOrg[org][dShotc3]);
	CofreOrg[org][dShotc3] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DarShotc3",CofreOrg[org][dShotc3]);
	DOF2_SaveFile();
	return true;
}
static stock dSalvarShotc4(org,valor)
{
	///new antes = CofreOrg[org][dShotc4]);
	CofreOrg[org][dShotc4] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DarShotc4",CofreOrg[org][dShotc4]);
	DOF2_SaveFile();
	return true;
}
static stock dSalvarShotc5(org,valor)
{
	//new antes = CofreOrg[org][dShotc5]);
	CofreOrg[org][dShotc5] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DarShotc5",CofreOrg[org][dShotc5]);
	DOF2_SaveFile();
	return true;
}
static stock dSalvarMP5c1(org,valor)
{
	//new antes = CofreOrg[org][dMP5c1]);
	CofreOrg[org][dMP5c1] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DarMP5c1",CofreOrg[org][dMP5c1]);
	DOF2_SaveFile();
	return true;
}
static stock dSalvarMP5c2(org,valor)
{
	//new antes = CofreOrg[org][dMP5c2]);
	CofreOrg[org][dMP5c2] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DarMP5c2",CofreOrg[org][dMP5c2]);
	DOF2_SaveFile();
	return true;
}
static stock dSalvarMP5c3(org,valor)
{
	//new antes = CofreOrg[org][dMP5c3]);
	CofreOrg[org][dMP5c3] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DarMP5c3",CofreOrg[org][dMP5c3]);
	DOF2_SaveFile();
	return true;
}
static stock dSalvarMP5c4(org,valor)
{
	//new antes = CofreOrg[org][dMP5c1]);
	CofreOrg[org][dMP5c4] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DarMP5c4",CofreOrg[org][dMP5c4]);
	DOF2_SaveFile();
	return true;
}
static stock dSalvarMP5c5(org,valor)
{
	//new antes = CofreOrg[org][dMP5c5]);
	CofreOrg[org][dMP5c5] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DarMP5c5",CofreOrg[org][dMP5c5]);
	DOF2_SaveFile();
	return true;
}
static stock dSalvarAKc1(org,valor)
{
	//new antes = CofreOrg[org][dAKc1]);
	CofreOrg[org][dAKc1] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DarAKc1",CofreOrg[org][dAKc1]);
	DOF2_SaveFile();
	return true;
}
static stock dSalvarAKc2(org,valor)
{
	//new antes = CofreOrg[org][dAKc2]);
	CofreOrg[org][dAKc2] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DarAKc2",CofreOrg[org][dAKc2]);
	DOF2_SaveFile();
	return true;
}
static stock dSalvarAKc3(org,valor)
{
	//new antes = CofreOrg[org][dAKc3]);
	CofreOrg[org][dAKc3] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DarAKc3",CofreOrg[org][dAKc3]);
	DOF2_SaveFile();
	return true;
}
static stock dSalvarAKc4(org,valor)
{
	//new antes = CofreOrg[org][dAKc4]);
	CofreOrg[org][dAKc4] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DarAKc4",CofreOrg[org][dAKc4]);
	DOF2_SaveFile();
	return true;
}
static stock dSalvarAKc5(org,valor)
{
	//new antes = CofreOrg[org][dAKc5]);
	CofreOrg[org][dAKc5] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DarAKc5",CofreOrg[org][dAKc5]);
	DOF2_SaveFile();
	return true;
}
static stock dSalvarRiflec1(org,valor)
{
	//new antes = CofreOrg[org][dRiflec1]);
	CofreOrg[org][dRiflec1] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DarRiflec1",CofreOrg[org][dRiflec1]);
	DOF2_SaveFile();
	return true;
}
static stock dSalvarRiflec2(org,valor)
{
	//new antes = CofreOrg[org][dRiflec1]);
	CofreOrg[org][dRiflec2] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DarRiflec2",CofreOrg[org][dRiflec2]);
	DOF2_SaveFile();
	return true;
}
static stock dSalvarRiflec3(org,valor)
{
	//new antes = CofreOrg[org][dRiflec3]);
	CofreOrg[org][dRiflec3] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DarRiflec3",CofreOrg[org][dRiflec3]);
	DOF2_SaveFile();
	return true;
}
static stock dSalvarRiflec4(org,valor)
{
	//new antes = CofreOrg[org][dRiflec4]);
	CofreOrg[org][dRiflec4] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DarRiflec4",CofreOrg[org][dRiflec4]);
	DOF2_SaveFile();
	return true;
}
static stock dSalvarRiflec5(org,valor)
{
	//new antes = CofreOrg[org][dRiflec5]);
	CofreOrg[org][dRiflec5] = valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"DarRiflec5",CofreOrg[org][dRiflec5]);
	DOF2_SaveFile();
	return true;
}
static stock SacarGranaOrg(org,valor)
{
	new antes = CofreOrg[org][Dinheiro];
	CofreOrg[org][Dinheiro] = antes-valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"Dinheiro",CofreOrg[org][Dinheiro]);
	DOF2_SaveFile();
	return true;
}
static stock DepositarMaterialOrg(org,valor)
{
	new antes = CofreOrg[org][Materiais];
	CofreOrg[org][Materiais] = antes+valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"Materiais",CofreOrg[org][Materiais]);
	DOF2_SaveFile();
	return true;
}

static stock SacarMaterialOrg(org,valor)
{
	new antes = CofreOrg[org][Materiais];
	CofreOrg[org][Materiais] = antes-valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"Materiais",CofreOrg[org][Materiais]);
	DOF2_SaveFile();
	return true;
}

static stock DepositarMaconhaOrg(org,valor)
{
	new antes = CofreOrg[org][Maconha];
	CofreOrg[org][Maconha] = antes+valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"Maconha",CofreOrg[org][Maconha]);
	DOF2_SaveFile();
	return true;
}

static stock SacarMaconhaOrg(org,valor)
{
	new antes = CofreOrg[org][Maconha];
	CofreOrg[org][Maconha] = antes-valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"Maconha",CofreOrg[org][Maconha]);
	DOF2_SaveFile();
	return true;
}

static stock DepositarCocainaOrg(org,valor)
{
	new antes = CofreOrg[org][Cocaina];
	CofreOrg[org][Cocaina] = antes+valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"Cocaina",CofreOrg[org][Cocaina]);
	DOF2_SaveFile();
	return true;
}

static stock SacarCocainaOrg(org,valor)
{
	new antes = CofreOrg[org][Cocaina];
	CofreOrg[org][Cocaina] = antes-valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"Cocaina",CofreOrg[org][Cocaina]);
	DOF2_SaveFile();
	return true;
}

static stock DepositarCrackOrg(org,valor)
{
	new antes = CofreOrg[org][Crack];
	CofreOrg[org][Crack] = antes+valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"Crack",CofreOrg[org][Crack]);
	DOF2_SaveFile();
	return true;
}

static stock SacarCrackOrg(org,valor)
{
	new antes = CofreOrg[org][Crack];
	CofreOrg[org][Crack] = antes-valor;
	new arquivo[64];
	format(arquivo, sizeof(arquivo), Pasta_CofreOrg,org);
	DOF2_SetInt(arquivo,"Crack",CofreOrg[org][Crack]);
	DOF2_SaveFile();
	return true;
}

BPF::IsAComandoVermelhoCar(carid)
{
	if((carid >= CarrosCV[0]) && (carid <= CarrosCV[9]))
	{
		return true;
	}
	return 0;
}

BPF::IsACaminhoneiroCar(carid)
{
	if((carid >= 529) && (carid <= 534))
	{
		return true;
	}
	return 0;
}
BPF::AluguelCarros1(carid)// Carros Aluguel 1
{
	for(new i=0;i<sizeof(CarrosAluguel1);i++)
	{
		if(carid == CarrosAluguel1[i])
		{
			return 1;
		}
	}
	return 0;
}
BPF::AluguelCarros2(carid)// Carros Aluguel 2
{
	for(new i=0;i<sizeof(CarrosAluguel2);i++)
	{
		if(carid == CarrosAluguel2[i])
		{
			return 1;
		}
	}
	return 0;
}
BPF::AluguelCarros3(carid)// Carros Aluguel 3(perto hq admin)
{
	for(new i=0;i<sizeof(CarrosAluguel3);i++)
	{
		if(carid == CarrosAluguel3[i])
		{
			return 1;
		}
	}
	return 0;
}
BPF::BarcosAluguel(carid)// barcos Aluguel ls e lv
{
	for(new i=0;i<sizeof(CarrosAluguelBarcos);i++)
	{
		if(carid == CarrosAluguelBarcos[i])
		{
			return 1;
		}
	}
	return 0;
}
BPF::AeroAluguel(carid)// heli Aluguel aero ls e lv
{
	for(new i=0;i<sizeof(CarrosAluguelAero);i++)
	{
		if(carid == CarrosAluguelAero[i])
		{
			return 1;
		}
	}
	return 0;
}
BPF::AluguelCarros4(carid)// Carros Aluguel LV
{
	for(new i=0;i<sizeof(CarrosAluguel3);i++)
	{
		if(carid == CarrosAluguel4[i])
		{
			return 1;
		}
	}
	return 0;
}
BPF::BusrouteEnd(playerid)
{
	new gstring[128];
	if (gPlayerTerminal[playerid] == 13)
	{
		PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
		TransportMoney[playerid] += 300;
		DisablePlayerCheckpoint(playerid);
		gPlayerTerminal[playerid] = 0;
	}
	else
	{
		new conta;conta = gPlayerTerminal[playerid]*50;
		format(gstring, 128, "Você encerrou seu serviço de ônibus e ganhou R$%d.", conta-50);
		SendClientMessage(playerid, COLOR_LIGHTRED, gstring);
		PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
		TransportMoney[playerid] += conta-50;
		DisablePlayerCheckpoint(playerid);
		gPlayerTerminal[playerid] = 0;
	}
	return true;
}

BPF::busstoptimer(playerid)
{
		if(TransportDuty[playerid] == 2)
		{
			Controle(playerid, 1);
			SendClientMessage(playerid, COLOR_DBLUE, "Você agora pode seguir viagem!");
		}
}

BPF::IsABus(carid)
{
	if(carid >= 359 && carid <= 365)
	{
		return true;
	}
	return 0;
}

BPF::IsACaminhoneiro(playerid)
{
		new emprego = PlayerInfo[playerid][pEmprego];
		if(emprego==11)
		{
			return true;
		}
		return 0;
}
BPF:: AtualizarTextDraws(playerid)
{
	new String[64];
	if(IsPlayerConnected(playerid) && playerid != INVALID_PLAYER_ID)
	{
	    TextDrawHideForPlayer(playerid, TextCash[playerid]);
		format(String, sizeof(String), "Cash: ~b~~h~%s", ConvertCash(PlayerInfo[playerid][pCasher]));
		TextDrawSetString(TextCash[playerid], String);
		TextDrawShowForPlayer(playerid, TextCash[playerid]);
	}
}
static stock cmdlog(playerid,paramters[])
{
	if(strcmp(paramters,"/porranenhuma", true ) == 0)
	{
	}
	else
	{
		new gstring[128];
		format(gstring, sizeof(gstring), "Player:%s(ID:%d) - Usou o Comando %s", PlayerName(playerid), playerid, paramters);
		BPFLogs("cmdplayer", gstring);
	}
}

stock BPFLogs(log[], string[])
{
	new entry[256], strlog[128],
	dia, mes, ano, hora, minuto, segundo;

	getdate(ano, mes, dia);
	gettime(hora, minuto, segundo);

	format(entry, sizeof(entry), "[%02d/%02d/%02d - %02d:%02d:%02d] - %s\r\n",
	dia, mes, ano, hora, minuto, segundo, string);

	new File:hFile;
	format(strlog, sizeof strlog, Pasta_Logs, log);
	hFile = fopen(strlog, io_append);
	fwrite(hFile, entry);
	fclose(hFile);
	return 0;
}
BPF::DateProp(playerid)
{
	new string[128];
	new diia, mees, aano, hoora, minuuto, seguundo;
	getdate(aano, mees, diia);
	gettime(hoora, minuuto, seguundo);
	GetPlayerName(playerid, playername, sizeof(playername));
	new curdate = getdate();
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if (strcmp(playername, HouseInfo[h][hOwner], true) == 0)
		{
			HouseInfo[h][hDate] = curdate;
			format(string, sizeof string, "%02d/%02d/%02d as %02d:%02d:%02d", diia, mees, aano, hoora, minuuto, seguundo);
			strmid(HouseInfo[h][hVerData], string, 0, strlen(string), 255);
			SaveCasa(h);
			Atualizar3Dtexts();
		}
	}
	for(new b = 0; b < sizeof(BizzInfo); b++)
	{
		if (strcmp(playername, BizzInfo[b][bOwner], true) == 0)
		{
			BizzInfo[b][bDate] = curdate;
			SalvarEmpresa(b);
			Atualizar3Dtexts();
		}
	}
	for(new sb = 0; sb < sizeof(SBizzInfo); sb++)
	{
		if (strcmp(playername, SBizzInfo[sb][sbOwner], true) == 0)
		{
			SBizzInfo[sb][sbDate] = curdate;
			SalvarSEmpresa(sb);
			Atualizar3Dtexts();
		}
	}
	for(new fb = 0; fb < sizeof(FBizzInfo); fb++)
	{
		if (strcmp(playername, FBizzInfo[fb][fbOwner], true) == 0)
		{
			FBizzInfo[fb][fbDate] = curdate;
			SalvarFEmpresa(fb);
			Atualizar3Dtexts();
		}
	}
	return true;
}

BPF::IsArma(playerid)
{
		new lider = PlayerInfo[playerid][pLider];
		new member = PlayerInfo[playerid][pMembro];
		if(member==14 || member==18 || member==19 || member==5 || member==17 || member==20 || member==21 || member==22)
		{
			return true;
		}
		else if(lider==14 || lider==18 || lider==19 || lider==5 || lider==17 || lider==20 || lider==21 || member==22)
		{
			return true;
		}
		return 0;
}
static stock IsPlayerInLocal(playerid)
{
	if(PlayerToPoint(3.0,playerid,246.3115,121.0975,1003.2301))
	{
		return true;
	}
	else if(PlayerToPoint(3.0,playerid,1579.3629,-1635.3847,13.5613))
	{
		return true;
	}
	else if(PlayerToPoint(3.0,playerid,211.2608,185.8552,1003.0313))
	{
		return true;
	}
	else
	{
		return 0;
	}
}
static stock SoNumero(striing[])
{
	for (new i = 0, j = strlen(striing); i < j; i++)
	{
		if (striing[i] > '9' || striing[i] < '0') return 0;
	}
	return true;
}
BPF::SendHelperMessage(COLOR, striing[])
{
	foreach(Player, i)
	{
		if(PlayerInfo[i][pHelper] >= 1 && cHelperc[i] == 0)
		{
			SendClientMessage(i, COLOR, striing);
		}
	}
	printf("%s", striing);
	return true;
}


static stock AntiDeAMX()
{
	new a[][] =
	{
		"Unarmed (Fist)",
		"Brass K"
	};
	#pragma unused a
}

static stock VerSemana(const PT_Dia, const PT_Mes, const PT_Ano)//by - Paulor
{
    new PT_A = (14 - PT_Mes) / 12, PT_B = PT_Ano - PT_A, PT_C = (PT_Mes + (12 * PT_A)) - 2, PT_D = (((((PT_Dia + ((31 * PT_C) / 12)) + PT_B) + (PT_B / 4)) - (PT_B / 100)) + (PT_B / 400)), PT_E = PT_D % 7;
    static const PTSemana[7][14] = { "DOMINGO", "SEGUNDA-FEIRA", "TERCA-FEIRA", "QUARTA-FEIRA", "QUINTA-FEIRA", "SEXTA-FEIRA", "SABADO" };
    return PTSemana[PT_E];
}
stock GetNomeMes(mes)
{
	new name[15];
	switch(mes)
	{
	    case 1:name = "Janeiro";
	    case 2:name = "Fevereiro";
	    case 3:name = "Marco";
	    case 4:name = "Abriu";
	    case 5:name = "Maio";
	    case 6:name = "Junho";
	    case 7:name = "Julho";
	    case 8:name = "Agosto";
	    case 9:name = "Setembro";
	    case 10:name = "Outubro";
	    case 11:name = "Novembro";
	    case 12:name = "Dezembro";
	    default:name = "Nenhum";
	}
	return name;
}
BPF::reloginho()
{
	new str[100];
	new
		ano,
		mes,
		dia,
		horas,
		minutos,
		segundos;
	getdate(ano, mes, dia);
	gettime(horas, minutos, segundos);
	if(HV == 1)
	{
	    horas++;
	}
	if(CH > 0)
	{
	    horas+=CH;
	}
	if(CM > 0)
	{
	    minutos+=CM;
	}
	if(CS > 0)
	{
	    segundos+=CS;
	}
	new myeggtext[20];
	if(mes == 1) { myeggtext = "Janeiro"; }
	else if(mes == 2) { myeggtext = "Fevereiro"; }
	else if(mes == 3) { myeggtext = "Marco"; }
	else if(mes == 4) { myeggtext = "Abril"; }
	else if(mes == 5) { myeggtext = "Maio"; }
	else if(mes == 6) { myeggtext = "Junho"; }
	else if(mes == 7) { myeggtext = "Julho"; }
	else if(mes == 8) { myeggtext = "Agosto"; }
	else if(mes == 9) { myeggtext = "Setembro"; }
	else if(mes == 10) { myeggtext = "Outubro"; }
	else if(mes == 11) { myeggtext = "Novembro"; }
	else if(mes == 12) { myeggtext = "Dezembro"; }
	if(horas > 23) horas = 0, dia++;
    format( str, sizeof str, "%d de %s~n~          %02d:%02d:%02d",dia, GetNomeMes(mes), horas, minutos, segundos);
	TextDrawSetString(Reloginho1, str);
	if(minutos == 30 && segundos == 0) { foreach(Player, i) { PlayerInfo[i][pPayDay] = 5; } PayDay(); }
	if(horas == 7 && minutos == 55 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "[Aviso] Faltam 5 minutos para a Guerra do Morro Começar!"); }
	if(horas == 8 && minutos == 0 && segundos == 1) { gIniciarGuerraMorro(); }
	if(horas == 8 && minutos == 30 && segundos == 1) { IniciarGuerraPedreira(); }
	if(horas == 9 && minutos == 30 && segundos == 1) { FinalizarGuerraPedreira(); }
	if(horas == 13 && minutos == 55 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "[Aviso] Faltam 5 minutos para a Guerra do Morro Começar!"); }
	if(horas == 14 && minutos == 0 && segundos == 1) { gIniciarGuerraMorro(); }
	if(horas == 14 && minutos == 30 && segundos == 1) { IniciarGuerraPedreira(); }
	if(horas == 15 && minutos == 30 && segundos == 1) { FinalizarGuerraPedreira(); }
	if(horas == 19 && minutos == 55 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "[Aviso] Faltam 5 minutos para a Guerra do Morro Começar!"); }
	if(horas == 20 && minutos == 0 && segundos == 1) { gIniciarGuerraMorro(); }
	if(horas == 21 && minutos == 0 && segundos == 1) { IniciarGuerraPedreira(); }
	if(horas == 22 && minutos == 0 && segundos == 1) { FinalizarGuerraPedreira(); }
	if(horas == 1 && minutos == 55 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "[Aviso] Faltam 5 minutos para a Guerra do Morro Começar!"); }
	if(horas == 2 && minutos == 0 && segundos == 1) { gIniciarGuerraMorro(); }
	if(horas == 3 && minutos == 0 && segundos == 1) { IniciarGuerraPedreira(); }
	if(horas == 4 && minutos == 0 && segundos == 1) { FinalizarGuerraPedreira(); }
	if(horas == 4 && minutos == 59 && segundos == 0) {
	SendClientMessageToAll(COLOR_YELLOW, "************************************** {FFFFFF}GMX AUTOMÁTICO {FFFF00}**************************************");
	SendClientMessageToAll(COLOR_YELLOW, "[ATENÇÃO] O servidor reiniciará automaticamente em {FFFFFF}1 minuto{FFFF00} !");
	SendClientMessageToAll(COLOR_YELLOW, "[ATENÇÃO] Estaremos devolta em poucos instantes, aguarde...");
	SendClientMessageToAll(COLOR_YELLOW, "************************************** {FFFFFF}GMX AUTOMÁTICO {FFFF00}**************************************"); }
	if(horas == 5 && minutos == 0 && segundos == 1)
	{
	    		MensagemDesligou = 1;
			    getdate(year, month, day);
			    new string[128];
				format(string, sizeof(string), "AdmCmd: GMX dado as 5 Horas Automatico");
			    BPFLogs("gmxlog", string);
			    printf(string);
				foreach(Player, i)
				{
				    if(IsPlayerConnected(i))
		    		{
		    		    PlayerLogado[i] = 0;
			    	    OnPlayerSave(i);
			    	    SaveObjects(i);
			    	    LogadoSV[i] = 0;
			    	    //gPlayerLogged[i] = 0;
					}
				}
				GameModeInitExitFunc();
	}
	if(horas == 10 && minutos == 25 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Faltam 5 minutos para o Respawn automático, entrem em seus carros!"); }
	if(horas == 10 && minutos == 28 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Faltam 2 minutos para o Respawn automático, entrem em seus carros!"); }
	if(horas == 10 && minutos == 30 && segundos == 1)
	{
       isPlayerInArea();
			for(new i; i < MAX_VEHICLES; i++)
			{
			    new bool:pde = true;
			    foreach(Player, p){
			        if(GetPlayerVehicleID(p) == i)
			            pde = false;
			    }
			    if(Naorespawn[i] == 1)
			            pde = false;
			    if(pde)
			        SetVehicleToRespawn(i);
			}
   }
   if(horas == 10 && minutos == 30 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Info Respawn: Todos os carros foram respawnados com sucesso !"); }
   if(horas == 12 && minutos == 25 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Faltam 5 minutos para o Respawn automático, entrem em seus carros!"); }
   if(horas == 12 && minutos == 28 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Faltam 5 minutos para o Respawn automático, entrem em seus carros!"); }
   if(horas == 12 && minutos == 30 && segundos == 1)
	{
       isPlayerInArea();
			for(new i; i < MAX_VEHICLES; i++)
			{
			    new bool:pde = true;
			    foreach(Player, p){
			        if(GetPlayerVehicleID(p) == i)
			            pde = false;
			    }
			    if(Naorespawn[i] == 1)
			            pde = false;
			    if(pde)
			        SetVehicleToRespawn(i);
			}
   }
   if(horas == 12 && minutos == 30 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Info Respawn: Todos os carros foram respawnados com sucesso !"); }
   if(horas == 14 && minutos == 25 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Faltam 5 minutos para o Respawn automático, entrem em seus carros!"); }
   if(horas == 14 && minutos == 28 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Faltam 2 minutos para o Respawn automático, entrem em seus carros!"); }
   if(horas == 14 && minutos == 30 && segundos == 1)
	{
       isPlayerInArea();
			for(new i; i < MAX_VEHICLES; i++)
			{
			    new bool:pde = true;
			    foreach(Player, p){
			        if(GetPlayerVehicleID(p) == i)
			            pde = false;
			    }
			    if(Naorespawn[i] == 1)
			            pde = false;
			    if(pde)
			        SetVehicleToRespawn(i);
			}
   }
   if(horas == 14 && minutos == 30 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Info Respawn: Todos os carros foram respawnados com sucesso !"); }
   if(horas == 16 && minutos == 25 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Faltam 5 minutos para o Respawn automático, entrem em seus carros!"); }
   if(horas == 16 && minutos == 28 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Faltam 2 minutos para o Respawn automático, entrem em seus carros!"); }
   if(horas == 16 && minutos == 30 && segundos == 1)
	{
       isPlayerInArea();
			for(new i; i < MAX_VEHICLES; i++)
			{
			    new bool:pde = true;
			    foreach(Player, p){
			        if(GetPlayerVehicleID(p) == i)
			            pde = false;
			    }
			    if(Naorespawn[i] == 1)
			            pde = false;
			    if(pde)
			        SetVehicleToRespawn(i);
			}
   }
   if(horas == 16 && minutos == 30 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Info Respawn: Todos os carros foram respawnados com sucesso !"); }
   if(horas == 18 && minutos == 25 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Faltam 5 minutos para o Respawn automático, entrem em seus carros!"); }
   if(horas == 18 && minutos == 28 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Faltam 2 minutos para o Respawn automático, entrem em seus carros!"); }
   if(horas == 18 && minutos == 30 && segundos == 1)
	{
       isPlayerInArea();
			for(new i; i < MAX_VEHICLES; i++)
			{
			    new bool:pde = true;
			    foreach(Player, p){
			        if(GetPlayerVehicleID(p) == i)
			            pde = false;
			    }
			    if(Naorespawn[i] == 1)
			            pde = false;
			    if(pde)
			        SetVehicleToRespawn(i);
			}
   }
   if(horas == 18 && minutos == 30 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Info Respawn: Todos os carros foram respawnados com sucesso !"); }
   if(horas == 20 && minutos == 25 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Faltam 5 minutos para o Respawn automático, entrem em seus carros!"); }
   if(horas == 20 && minutos == 28 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Faltam 2 minutos para o Respawn automático, entrem em seus carros!"); }
   if(horas == 20 && minutos == 30 && segundos == 1)
	{
       isPlayerInArea();
			for(new i; i < MAX_VEHICLES; i++)
			{
			    new bool:pde = true;
			    foreach(Player, p){
			        if(GetPlayerVehicleID(p) == i)
			            pde = false;
			    }
			    if(Naorespawn[i] == 1)
			            pde = false;
			    if(pde)
			        SetVehicleToRespawn(i);
			}
   }
   if(horas == 20 && minutos == 30 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Info Respawn: Todos os carros foram respawnados com sucesso !"); }
   if(horas == 22 && minutos == 25 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Faltam 5 minutos para o Respawn automático, entrem em seus carros!"); }
   if(horas == 22 && minutos == 28 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Faltam 2 minutos para o Respawn automático, entrem em seus carros!"); }
   if(horas == 22 && minutos == 30 && segundos == 1)
	{
       isPlayerInArea();
			for(new i; i < MAX_VEHICLES; i++)
			{
			    new bool:pde = true;
			    foreach(Player, p){
			        if(GetPlayerVehicleID(p) == i)
			            pde = false;
			    }
			    if(Naorespawn[i] == 1)
			            pde = false;
			    if(pde)
			        SetVehicleToRespawn(i);
			}
   }
   if(horas == 22 && minutos == 30 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Info Respawn: Todos os carros foram respawnados com sucesso !"); }
   if(horas == 00 && minutos == 25 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Faltam 5 minutos para o Respawn automático, entrem em seus carros!"); }
   if(horas == 00 && minutos == 28 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Faltam 2 minutos para o Respawn automático, entrem em seus carros!"); }
   if(horas == 00 && minutos == 30 && segundos == 1)
	{
       isPlayerInArea();
			for(new i; i < MAX_VEHICLES; i++)
			{
			    new bool:pde = true;
			    foreach(Player, p){
			        if(GetPlayerVehicleID(p) == i)
			            pde = false;
			    }
			    if(Naorespawn[i] == 1)
			            pde = false;
			    if(pde)
			        SetVehicleToRespawn(i);
			}
   }
   if(horas == 00 && minutos == 30 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Info Respawn: Todos os carros foram respawnados com sucesso !"); }
   if(horas == 2 && minutos == 25 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Faltam 5 minutos para o Respawn automático, entrem em seus carros!"); }
   if(horas == 2 && minutos == 28 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Faltam 2 minutos para o Respawn automático, entrem em seus carros!"); }
   if(horas == 2 && minutos == 30 && segundos == 1)
	{
       isPlayerInArea();
			for(new i; i < MAX_VEHICLES; i++)
			{
			    new bool:pde = true;
			    foreach(Player, p){
			        if(GetPlayerVehicleID(p) == i)
			            pde = false;
			    }
			    if(Naorespawn[i] == 1)
			            pde = false;
			    if(pde)
			        SetVehicleToRespawn(i);
			}
   }
   if(horas == 2 && minutos == 30 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Info Respawn: Todos os carros foram respawnados com sucesso !"); }
   if(horas == 4 && minutos == 25 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Faltam 5 minutos para o Respawn automático, entrem em seus carros!"); }
   if(horas == 4 && minutos == 28 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Faltam 2 minutos para o Respawn automático, entrem em seus carros!"); }
   if(horas == 4 && minutos == 30 && segundos == 1)
	{
       isPlayerInArea();
			for(new i; i < MAX_VEHICLES; i++)
			{
			    new bool:pde = true;
			    foreach(Player, p){
			        if(GetPlayerVehicleID(p) == i)
			            pde = false;
			    }
			    if(Naorespawn[i] == 1)
			            pde = false;
			    if(pde)
			        SetVehicleToRespawn(i);
			}
   }
   if(horas == 4 && minutos == 30 && segundos == 1) { SendClientMessageToAll(COLOR_YELLOW, "Info Respawn: Todos os carros foram respawnados com sucesso !"); }
	SyncTime();
	return true;
}

static stock ChatAdmin(striing[],nivel)
{
    foreach(Player, i)
    {
        if(PlayerInfo[i][pAdmin] >= nivel)
        {
            SendClientMessage(i, 0xFF0000AA, striing);
        }
    }
    return 1;
}

BPF::DesbugMorte(playerid)
	return totaldemortes[playerid] = 0;

BPF::ResetCount(playerid)
{
    SetPVarInt(playerid, "TextSpamCount", 0);
}

static stock IsNotWeaponNoAmmo(WeaponID)
{
	new slot=GetWeaponSlot(WeaponID);
	if(slot!=0 && slot!=1 && slot!=10)return 1;
	return 0;
}
static stock IsNotWeaponVise(WeaponID)
{
	new slot=GetWeaponSlot(WeaponID);
	if(slot>1 && slot!=10 && slot!=6 && slot!=9 &&slot!=11 && slot!=12 && slot!=35 && slot!=36 && slot!=43) return 1;
	return 0;
}
static stock IsGiveVehicleWeapon(WeaponID)
{
	if(WeaponID==25 || WeaponID==46 || WeaponID==2) return 1;
	return 0;
}
#define IsValidWeapon(%0) (%0>=1 && %0<=18 || %0>=21 && %0<=46)
static stock GetWeaponSlot(weaponid)
{
	new slot;
	switch(weaponid)
	{
		case 0,1: slot = 0;
		case 2 .. 9: slot = 1;
		case 10 .. 15: slot = 10;
		case 16 .. 18, 39: slot = 8;
		case 22 .. 24: slot =2;
		case 25 .. 27: slot = 3;
		case 28, 29, 32: slot = 4;
		case 30, 31: slot = 5;
		case 33, 34: slot = 6;
		case 35 .. 38: slot = 7;
		case 40: slot = 12;
		case 41 .. 43: slot = 9;
		case 44 .. 46: slot = 11;
	}
	return slot;
}

public OnRconLoginAttempt(ip[], password[], success)
{
    new string[128];
	if(success)
	{
		new pip[16];
		foreach(Player, i)
		{
		    GetPlayerName(i, sendername, sizeof(sendername));
			GetPlayerIp(i, pip, sizeof(pip));
			if(!strcmp(ip, pip, true))
			{
				if(strcmp(sendername,NOME1, true) == 0 || strcmp(sendername,NOME2, true) == 0 || strcmp(sendername,NOME3, true) == 0
				|| strcmp(sendername,NOME4, true) == 0|| strcmp(sendername,NOME5, true) == 0)
				{
					format(string, sizeof(string), "Seu nick ( %s ) tem permissão para logar-se como admin RCON! Bom jogo.", sendername);
					SendClientMessage(i, 0x33FF00FF, string);
					format(string, sizeof string, "AdmCmd: %s[ID %d] logou na rcon.", sendername, i);
					ABroadCast(COLOR_LIGHTBLUE, string, 1);
					return true;
				}
				else
				{
					format(string, sizeof(string), "Seu nick ( %s ) não tem permissão para logar-se como admin RCON e foi banido.", sendername);
					SendClientMessage(i, COLOR_LIGHTRED, string);
					SendClientMessage(i, COLOR_LIGHTRED, "Se você acha que isto é um erro, faça uma revisão em nosso Discord: https://discord.gg/aW67hZu");
					SBan(i, "Logado na RCON", "Automatico");
					return true;
				}
			}
		}
	}
	else
	{
		new pip[16];
		foreach(Player, i)
		{
		    GetPlayerName(i, sendername, sizeof(sendername));
			GetPlayerIp(i, pip, sizeof(pip));
			if(!strcmp(ip, pip, true))
			{
				format(string, sizeof string, "AdmCmd: Cuidado! pois %s[ID: %d] tentou logar na rcon, mais sem sucesso.", sendername, i);
				ABroadCast(COLOR_LIGHTRED, string, 1);
				return true;
			}
		}
	}
	return true;
}
public OnVehicleDeath(vehicleid, killerid)
{
    new orgid2 = GetPlayerOrg(killerid);
	DestroyObject(Fogando[vehicleid]);
    Fogando[vehicleid] = 0;
    PegouF[vehicleid] = 0;
    RemoveSound(vehicleid);
    PME += 50;
    PDU += 50;
    SacarOrgGrana(7,50);
	foreach(Player, i)
	{
	    if(gPlayerLogged[i] && BusEntered[i] == vehicleid)
	    {
	        SetPlayerHealth(i, 0.0);
	        SendClientMessage(i, COLOR_LIGHTRED, "O onibus em que você está, acaba de explodir!");
	    }
	}
	if(TendoGuerra)
	{
			if(IsCarInGuerra(vehicleid) && GetVehicleModel(vehicleid) == 520)
 			{
 			    if(IsAExCar(vehicleid))
				{
				    if(!IsAExe(killerid))
					{
						PSG[orgid2] += 1;
						GranaGuerra += 825+random(500);
					}
				}
				if(IsAFE(vehicleid))
				{
				    if(!IsAFE(killerid))
					{
						PSG[orgid2] += 1;
						GranaGuerra += 825+random(500);
					}
				}
				if(IsAGICar(vehicleid))
				{
				    if(!IsAGI(killerid))
					{
						PSG[orgid2] += 1;
						GranaGuerra += 825+random(500);
					}
				}
				if(IsAAlCar(vehicleid))
				{
				    if(!IsAAl(killerid))
					{
						PSG[orgid2] += 1;
						GranaGuerra += 825+random(500);
					}
				}
		}
	}
 	if(GetVehicleModel(vehicleid) == chopperid)
  	{
   		foreach(Player, shg)
     	{
      		if(GetPVarInt(shg,"chop_id") == vehicleid && GetPVarInt(shg,"roped") == 1)
        	{
         		DisablePlayerCheckpoint(shg);
           		SetPVarInt(shg,"roped",0);
           		SetPVarInt(shg,"chop_id",-1);
             	DisablePlayerCheckpoint(shg);
              	ClearAnimations(shg);
               	TogglePlayerControllable(shg,1);
               	for(new destr3=0;destr3<=ropelength;destr3++)
                {
                	DestroyDynamicObject(r0pes[shg][destr3]);
              	}
        	}
     	}
  	}
    return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
if(weaponid == 24 && Cbugbalas[playerid] == 7)
 	{
  		Cbugtempo[playerid] = GetTickCount();
 	}
	if(weaponid == 24 && Cbugbalas[playerid] == 1)
	{
 		Cbugbalas[playerid] = 0;
	    new result;
	    result = GetTickCount() - Cbugtempo[playerid];
	  	new tmp[95];
	  	format(tmp, sizeof(tmp), "[CBUG] Tempo de cbug de %s foi de: %d ms", PlayerName(playerid), result);
	  	//SendClientMessage(playerid, COLOR_PURPLE, tmp);
	  	SendClientMessageInRange(30.0, playerid, tmp, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
 	else if(weaponid == 24 && Cbugbalas[playerid] > 1)
	{
		Cbugbalas[playerid] -= 1;
	}
 switch(weaponid)
    {
        // allowed
        case 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 38:
        {

        }
		default:
		{
			// or just return 0
			BanEx(playerid,"Crash aqui não, caralhudo! CHUPA HUE!!!");
			return 0;
		}
	}
    if(hittype == 2 && weaponid == 23)
    {
        if(InChoque[playerid] && IsACop(playerid))
		{
	        new carroatingido,givid;
	        foreach(Player, i)
			{
				if(GetPlayerVehicleID(i) == hitid)
				{
					carroatingido = 1;
					givid = i;
				}
			}
			if(carroatingido == 1)
			{
		        new string[128];
		        format(string, sizeof(string), "* %s[ID:%d] Atingiu o Carro de %s[ID:%d] com a Arma Choque!",PlayerName(playerid),playerid,PlayerName(givid),givid);
					ProxVehicleDetector(30.0, hitid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        Choqued[hitid] = gettime()+300;
		        new mot, lu, alar, por, cap, porma, ob;
				GetVehicleParamsEx(hitid, mot, lu, alar, por, cap, porma, ob);
				SetVehicleParamsEx(hitid, VEHICLE_PARAMS_OFF, lu, alar, por, cap, porma, ob);
			}
		}
    }
    if(hittype != BULLET_HIT_TYPE_NONE)
  	{
    	if(!(-200.0 <= fX <= 200.0 ) || !(-200.0 <= fY <= 200.0) || !(-200.0 <= fZ <= 200.0))
    	{
			BanEx(playerid,"Crash aqui não! ZIFODEO");
			return 0;
    	}
  	}
	if(hittype == 2)
	{
	    new Float:amount;
   switch(weaponid)
		{
		    case 23:amount = 0.0; //choque
		    case 24:amount = 26.0; //Eagle
		    case 25:amount = 19.0; //Shotgun
		    case 27:amount = 15.0; //Combat Shotgun
		    case 29:amount = 5.0;  //MP5
		    case 30:amount = 8.0;  //AK-47
		    case 31:amount = 7.0;  //M4
		    case 42:amount = 0.0;  //Extintor - Bombeiros
		    case 9:amount = 0.0;  //Serra - Bombeiros
		}
		if(Blindagem[hitid] <= 2)
		{
		    Blindagem[hitid] = 0;
		    Cblindado[hitid] = 0;
		    new Float:health,Float:dano;
			GetVehicleHealth(hitid, health);
			dano = health-amount;
			if(health > 0.0)return SetVehicleHealth(hitid, dano);
		}
		if(Cblindado[hitid] >= 1)
		{
			new perda = random(5);
	  		Blindagem[hitid] -= perda;
	 		return RepairVehicleWithBomber(hitid);
		}
	}
	return 1;
}
CMD:teste(playerid)
{
	if(PlayerInfo[playerid][pAdmin] < 5000)return 1;
	foreach(Player, i)
		printf("t/retirarbeneficios %d$(Enter)",i);
	for(new i = 0; i < sizeof(HouseInfo); i++)
		printf("t/avendercasa %d$(Enter)",i);
    for(new i = 0; i < sizeof(HouseInfo); i++)
		printf("t/trazercasa %d$(Enter)",i);
    for(new i = 0; i < sizeof(HouseInfo); i++)
		printf("t/trazercarrocasa %d$(Enter)",i);
    return 1;
}
CMD:daritem(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3000)return 1;
	new plo,string[100];
		if(sscanf(params, "ud",giveplayerid, plo))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USE: /daritem [id] [id do objeto].");
			return 1;
		}
		if(IsPlayerConnected(giveplayerid))
  		{
    			if(InvCheio[playerid] == 1) { InvCheio[playerid] = 0; return 1; }
				format(string, sizeof(string), "Você Entregou o Item Nº %d para %s[ID: %d]", plo, NomePlayer(giveplayerid), giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD2, string);
				format(string, sizeof(string), "{FFA201}[Item]{FFFFFF} %s lhe deu um Item Nº[%d], abra seu inventário para usá-lo.",NomePlayer(playerid), plo);
				SendClientMessage(giveplayerid, COLOR_GRAD2, string);
				for(new i = 0; i<75; i++)
                {
 	               if(InventarioInfo[giveplayerid][i][iSlot] == 19382)
	              {
		  		   InventarioInfo[giveplayerid][i][iSlot] = plo;
		  	       InventarioInfo[giveplayerid][i][iUnidades] = 1;
		  	       return 1;
		  		  	   }
		  		      }
		}
    return 1;
}
stock IsPlayerInRC(playerid)
{
	new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);

	if(IsPlayerInRangeOfPoint(playerid, 100.0, -29.5413,-89.5442,1003.5469) ||//24/7 int
    IsPlayerInRangeOfPoint(playerid, 120.0, 1352.1953,-1748.6051,13.3667) ||//Pref ext
    IsPlayerInRangeOfPoint(playerid, 100.0, 370.3531,173.3661,1008.3828))//pref int
	{
	    return 1;
	}
	return 0;
}
stock PlayerInAreaNeutra(playerid)
{
	new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
	if((x >= 1082.962 && y >= -1389.729 && x <= 1235.075 && y <= -1298.931))//Alhambra
	{
	    return 1;
	}
	return 0;
}
stock IsPlayerInPedagio(playerid)
{
	new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
	if(x >= 47.4359 && y >= -1525.8599 && x <= 54.8892 && y <= -1520.3614)//Pedágio Ponte LS/SF ida
	{
	    pedagio[playerid] = 1;
	    return 1;
	}
	else if(x >= 45.5027 && y >= -1543.0599 && x <= 52.7083 && y <= -1537.5926)//Pedágio Ponte LS/SF volta
	{
	    pedagio[playerid] = 2;
	    return 1;
	}
	else if(x >= 83.2122 && y >= -1263.2079 && x <= 86.1330 && y <= -1251.1005)//Pedágio tunel LS/SF ida
	{
	    pedagio[playerid] = 3;
	    return 1;
	}
	else if(x >= 94.9884 && y >= -1287.9362 && x <= 99.1565 && y <= -1274.5795)//Pedágio tunel LS/SF Volta
	{
	    pedagio[playerid] = 4;
	    return 1;
	}
	else if(x >= 760.1712 && y >= -911.6340 && x <= 771.3953 && y <= -907.1887)//Pedágio volta ponte encima do tunel LS/SF
	{
	    pedagio[playerid] = 5;
	    return 1;
	}
	else if(x >= 766.4536 && y >= -902.2982 && x <= 776.6510 && y <= -899.3876)//Pedágio ida ponte encima do tunel LS/SF
	{
	    pedagio[playerid] = 6;
	    return 1;
	}
	else if(x >= 1178.7725 && y >= -688.4981 && x <= 1186.1528 && y <= -681.8536)//Pedágio ida hq hitmans pedagio
	{
	    pedagio[playerid] = 7;
	    return 1;
	}
	else if(x >= 1174.1885 && y >= -684.6615 && x <= 1181.8016 && y <= -677.5258)//Pedágio volta hq hitmans pedagio
	{
	    pedagio[playerid] = 8;
	    return 1;
	}
	else if(x >= 1646.7639 && y >=  -28.3495 && x <= 1653.4249 && y <= -18.3503)//Pedágio ida LS/LV
	{
	    pedagio[playerid] = 9;
	    return 1;
	}
	else if(x >= 1633.2768 && y >= -33.9912 && x <= 1639.7558 && y <= -22.6113)//Pedágio volta LS/LV
	{
	    pedagio[playerid] = 10;
	    return 1;
	}
	return 0;
}
BPF::GuerraMata(playerid)
{
	new string[128];
    if(PlayerInfo[playerid][pMembro] == 3 || PlayerInfo[playerid][pLider] == 3)
	{
	    if(ProvocoMata[playerid] == 1)
		{
			if(IsPlayerInMata(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
			    PlayAudioStreamForPlayer(playerid, "http://dl.dropboxusercontent.com/s/zfb1v52oozrx97o/dominating2.mp3");
				foreach(Player, i)
			    {
				     if(PlayerInfo[i][pChatTerritorio] == 0)
				     {
                          format(string, sizeof(string), "[GangZone]: %s e o Exército Dominaram a Mata!",playername);
				          SendClientMessage(i, COR_EXE, string);
				     }
				}
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a Mata, a cada 3 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZMata);
				GangZoneShowForAll(GZMata,COR_EXE);
				Dominando[playerid] = 0;
				ProvocoMata[playerid] = 0;
				GuerranaMata = 0;
				donoMata = 1;
				KillTimer(TempoGuerraMata);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está na Mata.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZMata);
				GangZoneShowForAll(GZMata, 0xFFFFFF96);
				ProvocoMata[playerid] = 0;
				GuerranaMata = 0;
				donoMata = 0;
				KillTimer(TempoGuerraMata);
				return 1;
			}
		}
		return 1;
	}
	if(PlayerInfo[playerid][pMembro] == 23 || PlayerInfo[playerid][pLider] == 23)
	{
	    if(ProvocoMata[playerid] == 1)
		{
			if(IsPlayerInMata(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
			    PlayAudioStreamForPlayer(playerid, "http://dl.dropboxusercontent.com/s/zfb1v52oozrx97o/dominating2.mp3");
                foreach(Player, i)
			    {
				     if(PlayerInfo[i][pChatTerritorio] == 0)
				     {
                          format(string, sizeof(string), "[GangZone]: %s e a As FARC Dominaram a Mata!",playername);
				          SendClientMessage(i, 0xCC0196FF, string);
				     }
				}
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a Mata, a cada 3 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZMata);
				GangZoneShowForAll(GZMata,0xCC0196FF);
				Dominando[playerid] = 0;
				ProvocoMata[playerid] = 0;
				GuerranaMata = 0;
				donoMata = 2;
				KillTimer(TempoGuerraMata);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está na Mata.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZMata);
				GangZoneShowForAll(GZMata, 0xFFFFFF96);
				ProvocoMata[playerid] = 0;
				GuerranaMata = 0;
				donoMata = 0;
				KillTimer(TempoGuerraMata);
				return 1;
			}
		}
		return 1;
	}
	if(PlayerInfo[playerid][pMembro] == 15 || PlayerInfo[playerid][pLider] == 15)
	{
	    if(ProvocoMata[playerid] == 1)
		{
			if(IsPlayerInMata(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
			    PlayAudioStreamForPlayer(playerid, "http://dl.dropboxusercontent.com/s/zfb1v52oozrx97o/dominating2.mp3");
                foreach(Player, i)
			    {
				     if(PlayerInfo[i][pChatTerritorio] == 0)
				     {
                          format(string, sizeof(string), "[GangZone]: %s e o Estado Islâmico Dominaram a Mata!",playername);
				          SendClientMessage(i, 0x6E6E6E96, string);
				     }
				}
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a Mata, a cada 3 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZMata);
				GangZoneShowForAll(GZMata,0x6E6E6E96);
				Dominando[playerid] = 0;
				ProvocoMata[playerid] = 0;
				GuerranaMata = 0;
				donoMata = 3;
				KillTimer(TempoGuerraMata);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está na Mata.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZMata);
				GangZoneShowForAll(GZMata, 0xFFFFFF96);
				ProvocoMata[playerid] = 0;
				GuerranaMata = 0;
				donoMata = 0;
				KillTimer(TempoGuerraMata);
				return 1;
			}
		}
		return 1;
	}
 	return 1;
}
public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
    new Float:Vid,Float:colety;
    GetPlayerArmour(playerid,colety);
    GetPlayerHealth(playerid, Vid);
    static Float:X, Float:Y, Float:Z, dano[12];
    if(issuerid != INVALID_PLAYER_ID)
    {
        format(dano, sizeof dano, "%.1f", amount);
        CreateDynamic3DTextLabel(dano, 0xC9C9C9FF, X, Y, Z, 10.0, .playerid = issuerid);
    }
	if(issuerid != INVALID_PLAYER_ID && weaponid == 35)
    {
        SetPlayerHealth(playerid, 0.0);
    }
    return 1;
}
public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	 if(weaponid == 34)
     {
          new Float:Vidi;
          new Float:Coletr;
          if(GetDistanceBetweenPlayers(playerid, damagedid) <= 20)
		  {
               if(Coletr >= 1)
               {
                    new Float:colete;
                    GetPlayerArmour(damagedid,colete);
                    SetPlayerArmour(damagedid,colete - 0);
               }
               else if(Vidi >= 1)
               {
                    new Float:life;
                    GetPlayerHealth(damagedid, life);
                    SetPlayerHealth(damagedid, life - 0);
               }
               SendClientMessage(playerid,COLOR_LIGHTRED, "Sniper de perto é proibido, o tiro foi bloqueado.");
          }
     }
     if(weaponid == 35 && weaponid == 36)
     {
          new Float:Vide;
          new Float:Coletd;
          if(GetDistanceBetweenPlayers(playerid, damagedid) <= 20)
		  {
               if(Coletd >= 1)
               {
                    new Float:wasd;
                    GetPlayerArmour(damagedid,wasd);
                    SetPlayerArmour(damagedid,wasd - 0);
               }
               else if(Vide >= 1)
               {
                    new Float:life;
                    GetPlayerHealth(damagedid, life);
                    SetPlayerHealth(damagedid, life - 0);
               }
               SendClientMessage(playerid,COLOR_LIGHTRED, "Bazuca de perto é proibido, o tiro foi bloqueado.");
          }
     }
	if((pmorto[damagedid]))return 1;
	if((PlayerInfo[damagedid][pAdmin]&&admtrampando[damagedid])||
	(PlayerInfo[damagedid][pHelper]&&helpertrampando[damagedid]))return 1;
	if(GetPVarInt(damagedid, "HD"))return 1;
	//if(PlayerInAlhambra(damagedid))return 1;
	if(PlayerInAreaNeutra(damagedid))return 1;
	if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) return 1;


	if(GetPlayerOrg(playerid) == 0 && GetPlayerOrg(damagedid) == 0 && IsPlayerInRC(playerid))
	{
	    ShowPlayerDialog(playerid, 8724, DIALOG_STYLE_MSGBOX,
		"{FF8400}ATENÇÃO:\n\n",
		"{FFFFFF}Você não pode matar/atirar em alguém dentro da área azul do mapa\n\
		{FFFFFF}caso voce tente novamente, sera {FF0000}PRESO{FFFFFF} por um administrador", "Entendido","");
		ApplyAnimation(playerid,"PED","handscower",4.1,0,1,1,0,0);
	    return 1;
	}
	if(PlayerInfo[playerid][pJailed] && PlayerInfo[damagedid][pJailed])
	{
	    ShowPlayerDialog(playerid, 8724, DIALOG_STYLE_MSGBOX,
		"{FFFFFF}» Proibido fazer {FF0000}Death-Match",
		"{FFFFFF}» Você não pode bater em alguem enquanto estiver{FF0000} Na cadeia\n\
		{FFFFFF}Caso faça novamente, será {FF0000}Ajustado por um admin!", "OK","");
		ApplyAnimation(playerid,"PED","handscower",4.1,0,1,1,0,0);

	    return 1;
	}
	
   for(new c; c < sizeof(CombateInfo); ++c){

		if(strcmp(CombateInfo[c][iniciouCombate], PlayerName(playerid), true) && strcmp(CombateInfo[c][iniciouCombate], PlayerName(damagedid), true) && gettime() > GetPVarInt(playerid, #VarCombateLog) && gettime() > GetPVarInt(damagedid, #VarCombateLog)){

	        SetPVarInt(playerid, #VarCombateLog, gettime()+150);
	        SetPVarInt(damagedid, #VarCombateLog, gettime()+150);
    		CombateLog(playerid, damagedid);
    		return 1;
    	}
    }
    
 switch(weaponid)
	{
	    case 24:amount = 26.0; //Eagle
	    case 25:amount = 18.0; //Shotgun
	    case 27:amount = 19.0; //Combat Shotgun
	    case 29:amount = 5.0;  //MP5
	    case 30:amount = 8.0;  //AK-47
	    case 31:amount = 7.0;  //M4
	    case 35:amount = 0.0;  //Bazuca
	    case 34:               //Sniper Rifle
		{
	  		if(!ProxDetectorS(70.0, playerid, damagedid)){

				if(bodypart == 9){
				    if(GetPlayerState(damagedid) == PLAYER_STATE_ONFOOT){
				    	return InitHeadShot(playerid, damagedid);
					}
				}

				amount = 100.0;
			}
			else{
			    amount = 30.0;
			}

			TextDrawShowForPlayer(playerid, textXizinho);
		}
	}
 	static
	 	string[128]
	 ;
 	if(weaponid == 29)
  	{
   		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(damagedid) == PLAYER_STATE_ONFOOT)
	    {
	        format(string, sizeof string, "É proibido fazer DB neste servidor!", PlayerName(damagedid), damagedid);
         	SendClientMessage(playerid, COLOR_DBLUE, string);
	        SetPlayerArmedWeapon(playerid, 0);
	        amount = 0.0;
	    }
	}
	// /DM
	DMSystem[playerid][damagedid]=true;

    format(string, sizeof(string), "ID=%d", playerid);
    SetPVarInt(damagedid, string, gettime()+600);
	SetPVarInt(damagedid, "VarDano", gettime()+180);

//------------- Retirar Vida/Colete ------------------

	PlayerPlaySound(damagedid, 17802,  0.0, 0.0, 0.0);

	static
		Float:Life,
		Float:Coleete,
		Float:Dano
	;

    GetPlayerArmour(damagedid, Coleete);
    GetPlayerHealth(damagedid, Life);
    if(Coleete > 0)
    {
        if(amount > Coleete)
        {
            Dano = amount - Coleete;
            Life = Life - Dano;

			if(Life <= 0)
			{
			    setarhospital(damagedid);
			    SetPlayerVirtualWorld(damagedid, damagedid+1);
				OnPlayerDeathEx(damagedid, playerid, weaponid);
				pmorto[damagedid] = true;
			}
            SetPlayerArmour(damagedid, 0.0);
            SetPlayerHealth(damagedid, Life);
        }
        else
        {
        	Coleete = Coleete - amount;
        	SetPlayerArmour(damagedid, Coleete);
		}
    }
    else if(Coleete < 1)
    {
        Life = Life - amount;

		if(Life <= 0)
		{
		    setarhospital(damagedid);
		    SetPlayerVirtualWorld(damagedid, damagedid+1);
			OnPlayerDeathEx(damagedid, playerid, weaponid);
			pmorto[damagedid] = true;
		}
        SetPlayerHealth(damagedid, Life);
    }
    
    static Float:HP;
	GetPlayerHealth(damagedid, HP);
	printf("Debug 0");
	if(HP <= 0)
	{
		printf("Debug 1");
		static Float:X, Float:Y, Float:Z, Float:R, str[58];
		GetPlayerPos(damagedid, X, Y, Z);
		GetPlayerFacingAngle(damagedid, R);

		switch(bodypart)
		{
		    case 3:
		    	format(str, sizeof(str), "Corpo de %s\n\nA causa da morte foi: Tiro no Peito", PlayerName(damagedid));
		    case 4:
		    	format(str, sizeof(str), "Corpo de %s\n\nA causa da morte foi: Tiro na Virilha", PlayerName(damagedid));
		    case 5:
		    	format(str, sizeof(str), "Corpo de %s\n\nA causa da morte foi: Tiro no Braço esquerdo", PlayerName(damagedid));
		    case 6:
		    	format(str, sizeof(str), "Corpo de %s\n\nA causa da morte foi: Tiro no Braço direito", PlayerName(damagedid));
		    case 7:
		    	format(str, sizeof(str), "Corpo de %s\n\nA causa da morte foi: Tiro na Perna esquerda", PlayerName(damagedid));
		    case 8:
		    	format(str, sizeof(str), "Corpo de %s\n\nA causa da morte foi: Tiro na Perna direita", PlayerName(damagedid));
		    case 9:
		    	format(str, sizeof(str), "Corpo de %s\n\nA causa da morte foi: Tiro na Cabeça", PlayerName(damagedid));
		}
		printf("Debug 2");

		CriarCadaver(X, Y, Z, R, str, GetPlayerSkin(damagedid), GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	}

//------------------------------------------------------------------------------

//playerid

	format(string, 20, "{00FF00}+%.0f", amount);
 	Update3DTextLabelText(labelDano[playerid], 0xFFFFFFF6, string);

	KillTimer(TempoMostrarLife[playerid]);

	format(string,sizeof(string),"DANO DE %s ~n~%s", NomePlayer(damagedid), NomeArma(weaponid));
	PlayerTextDrawSetString(playerid, textinfodamage[playerid][0], string);

	format(string,sizeof(string),"+%0.0f", amount);
	PlayerTextDrawSetString(playerid, textinfodamage[playerid][1], string);

	PlayerTextDrawShow(playerid, textinfodamage[playerid][0]);
	PlayerTextDrawShow(playerid, textinfodamage[playerid][1]);

	TempoMostrarLife[playerid] = SetTimerEx("HideTextoLife", 800, 0, "i", playerid);
	MostrandoVida[playerid] = 1;

//------------------------------------------------------------------------------

//Damagedid

	format(string, 20, "{FF0000}-%.0f", amount);
 	Update3DTextLabelText(labelDano[damagedid], 0xFFFFFFF6, string);

	KillTimer(TempoMostrarLife[damagedid]);

	format(string,sizeof(string),"DANO EM %s ~n~%s", NomePlayer(playerid), NomeArma(weaponid));
	PlayerTextDrawSetString(playerid, textinfodamaga[damagedid][0], string);

	format(string,sizeof(string),"-%0.0f", amount);
	PlayerTextDrawSetString(playerid, textinfodamaga[damagedid][1], string);

	PlayerTextDrawShow(damagedid, textinfodamaga[damagedid][0]);
	PlayerTextDrawShow(damagedid, textinfodamaga[damagedid][1]);

	TempoMostrarLife[damagedid] = SetTimerEx("HideTextoLife", 800, 0, "i", damagedid);
	MostrandoVida[damagedid] = 1;

//------------------------------------------------------------------------------

	return 1;
}
forward DestruirCadaver(slot);
public DestruirCadaver(slot)
{
	if(IsValidDynamic3DTextLabel(CadaverInfo[slot][cadaver_Label]))
		DestroyDynamic3DTextLabel(CadaverInfo[slot][cadaver_Label]);
	if(IsValidActor(CadaverInfo[slot][cadaver_ID]))
		DestroyActor(CadaverInfo[slot][cadaver_ID]);

	CadaverInfo[slot][cadaver_Pos][0] = CadaverInfo[slot][cadaver_Pos][1] = CadaverInfo[slot][cadaver_Pos][2] = CadaverInfo[slot][cadaver_Pos][3] = 0.0;
	CadaverInfo[slot][cadaver_ID] = -1;
}

CriarCadaver(Float:X, Float:Y, Float:Z, Float:R, str[], skin, VW, Int)
{
	new slot = Iter_Free(Cadaveres);
	if(slot == -1)
		return false;

	CadaverInfo[slot][cadaver_ID] = CreateActor(skin, X, Y, Z, R);
	ApplyActorAnimation(CadaverInfo[slot][cadaver_ID], "PARACHUTE", "FALL_skyDive_DIE", 4.1, 0, 0, 0, 1, 0);

	CadaverInfo[slot][cadaver_Pos][0] = X;
	CadaverInfo[slot][cadaver_Pos][1] = Y;
	CadaverInfo[slot][cadaver_Pos][2] = Z;
	CadaverInfo[slot][cadaver_Pos][3] = R;
	CadaverInfo[slot][cadaver_Label] = CreateDynamic3DTextLabel(str, COR_3DLABEL, X, Y, Z, 7.0, .worldid = VW, .interiorid = Int);
	SetTimerEx("DestruirCadaver", 60000, false, "d", slot);

	Iter_Add(Cadaveres, slot);
	return true;
}
BPF::HideTextoLife(playerid)
{
	if(MostrandoVida[playerid])
	{
	    Update3DTextLabelText(labelDano[playerid], -1, " ");
    	PlayerTextDrawHide(playerid, textinfodamage[playerid][0]);
		PlayerTextDrawHide(playerid, textinfodamage[playerid][1]);
		PlayerTextDrawHide(playerid, textinfodamaga[playerid][0]);
		PlayerTextDrawHide(playerid, textinfodamaga[playerid][1]);
	    MostrandoVida[playerid] = 0;
	    TempoMostrarLife[playerid] = -1;
	}
	TextDrawHideForPlayer(playerid, textXizinho);
	return true;
}

BPF::AnimRoubo(playerid)
{
    SetPlayerFacingAngle(playerid, 93.9411);
    ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_Rob",1.0,1,0,0,0,0);
	return true;
}

BPF::KickBanido(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Kick(playerid);
	}
	return true;
}

stock MostrarMembrosOrg(playerid)
{
	new string[128];
  	MEGAString[0] = EOS;
  	new org = GetPlayerOrg(playerid);
	format(string,sizeof(string),"Líder:  %s\n",InfoOrg[org][Lider]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"1° Sub-Líder:  %s\n",InfoOrg[org][SubLider]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 1:  %s\n",InfoOrg[org][Membro1]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 2:  %s\n",InfoOrg[org][Membro2]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 3:  %s\n",InfoOrg[org][Membro3]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 4:  %s\n",InfoOrg[org][Membro4]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 5:  %s\n",InfoOrg[org][Membro5]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 6:  %s\n",InfoOrg[org][Membro6]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 7:  %s\n",InfoOrg[org][Membro7]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 8:  %s\n",InfoOrg[org][Membro8]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 9:  %s\n",InfoOrg[org][Membro9]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 10:  %s\n",InfoOrg[org][Membro10]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 11:  %s\n",InfoOrg[org][Membro11]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 12:  %s\n",InfoOrg[org][Membro12]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 13:  %s\n",InfoOrg[org][Membro13]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 14:  %s\n",InfoOrg[org][Membro14]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 15:  %s\n",InfoOrg[org][Membro15]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 16:  %s\n",InfoOrg[org][Membro16]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 17:  %s\n",InfoOrg[org][Membro17]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 18:  %s\n",InfoOrg[org][Membro18]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 19:  %s\n",InfoOrg[org][Membro19]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 20:  %s\n",InfoOrg[org][Membro20]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 21:  %s\n",InfoOrg[org][Membro21]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 22:  %s\n",InfoOrg[org][Membro22]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 23:  %s\n",InfoOrg[org][Membro23]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 24:  %s\n",InfoOrg[org][Membro24]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 25:  %s\n",InfoOrg[org][Membro25]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 26:  %s\n",InfoOrg[org][Membro26]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 27:  %s\n",InfoOrg[org][Membro27]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 28:  %s\n",InfoOrg[org][Membro28]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 29:  %s\n",InfoOrg[org][Membro29]);
	strcat(MEGAString,string);
	format(string,sizeof(string),"Membro 30:  %s\n",InfoOrg[org][Membro30]);
	strcat(MEGAString,string);
	ShowPlayerDialog(playerid, 4505, DIALOG_STYLE_LIST, "Clique no nome para limpar", MEGAString, "Limpar", "Voltar");
	return true;
}


stock MostrarCandidatos(playerid)
{
	    new string[128];
	    new org = GetPlayerOrg(playerid);
	    MEGAString[0] = EOS;
	    strcat(MEGAString,"Candidato\tNick\tStatus\n");
		if(IsPlayerOnline(InfoOrg2[org][Candidato1]))
		{
   			format(string,sizeof(string),"1\t%s\t{33FF00}(online)\n",InfoOrg2[org][Candidato1]);
   			strcat(MEGAString,string);
   		}
   		else
   		{
   			format(string,sizeof(string),"1\t%s\t{FC0015}(offline)\n",InfoOrg2[org][Candidato1]);
   			strcat(MEGAString,string);
   		}
		if(IsPlayerOnline(InfoOrg2[org][Candidato2]))
		{
   			format(string,sizeof(string),"2\t%s\t{33FF00}(online)\n",InfoOrg2[org][Candidato2]);
   			strcat(MEGAString,string);
   		}
   		else
   		{
   			format(string,sizeof(string),"2\t%s\t{FC0015}(offline)\n",InfoOrg2[org][Candidato2]);
   			strcat(MEGAString,string);
   		}
		if(IsPlayerOnline(InfoOrg2[org][Candidato3]))
		{
   			format(string,sizeof(string),"3\t%s\t{33FF00}(online)\n",InfoOrg2[org][Candidato3]);
   			strcat(MEGAString,string);
   		}
   		else
   		{
   			format(string,sizeof(string),"3\t%s\t{FC0015}(offline)\n",InfoOrg2[org][Candidato3]);
   			strcat(MEGAString,string);
   		}
		if(IsPlayerOnline(InfoOrg2[org][Candidato4]))
		{
   			format(string,sizeof(string),"4\t%s\t{33FF00}(online)\n",InfoOrg2[org][Candidato4]);
   			strcat(MEGAString,string);
   		}
   		else
   		{
   			format(string,sizeof(string),"4\t%s\t{FC0015}(offline)\n",InfoOrg2[org][Candidato4]);
   			strcat(MEGAString,string);
   		}
		if(IsPlayerOnline(InfoOrg2[org][Candidato5]))
		{
   			format(string,sizeof(string),"5\t%s\t{33FF00}(online)\n",InfoOrg2[org][Candidato5]);
   			strcat(MEGAString,string);
   		}
  		else
   		{
   			format(string,sizeof(string),"5\t%s\t%s {FC0015}(offline)\n",InfoOrg2[org][Candidato5]);
   			strcat(MEGAString,string);
   		}
		if(IsPlayerOnline(InfoOrg2[org][Candidato6]))
		{
   			format(string,sizeof(string),"6\t%s\t{33FF00}(online)\n",InfoOrg2[org][Candidato6]);
   			strcat(MEGAString,string);
   		}
   		else
     	{
   			format(string,sizeof(string),"6\t%s\t{FC0015}(offline)\n",InfoOrg2[org][Candidato6]);
   			strcat(MEGAString,string);
   		}
		if(IsPlayerOnline(InfoOrg2[org][Candidato7]))
		{
   			format(string,sizeof(string),"7\t%s\t{33FF00}(online)\n",InfoOrg2[org][Candidato7]);
   			strcat(MEGAString,string);
   		}
   		else
   		{
   			format(string,sizeof(string),"7\t%s\t{FC0015}(offline)\n",InfoOrg2[org][Candidato7]);
   			strcat(MEGAString,string);
   		}
		if(IsPlayerOnline(InfoOrg2[org][Candidato8]))
		{
   			format(string,sizeof(string),"8\t%s\t{33FF00}(online)\n",InfoOrg2[org][Candidato8]);
   			strcat(MEGAString,string);
   		}
   		else
   		{
   			format(string,sizeof(string),"8\t%s\t{FC0015}(offline)\n",InfoOrg2[org][Candidato8]);
   			strcat(MEGAString,string);
   		}
		if(IsPlayerOnline(InfoOrg2[org][Candidato9]))
		{
   			format(string,sizeof(string),"9\t%s\t%s {33FF00}(online)\n",InfoOrg2[org][Candidato9]);
   			strcat(MEGAString,string);
   		}
   		else
   		{
   			format(string,sizeof(string),"9\t%s\t{FC0015}(offline)\n",InfoOrg2[org][Candidato9]);
   			strcat(MEGAString,string);
   		}
		if(IsPlayerOnline(InfoOrg2[org][Candidato10]))
		{
   			format(string,sizeof(string),"10\t%s\t{33FF00}(online)\n",InfoOrg2[org][Candidato10]);
   			strcat(MEGAString,string);
   		}
   		else
   		{
   			format(string,sizeof(string),"10\t%s\t{FC0015}(offline)\n",InfoOrg2[org][Candidato10]);
   			strcat(MEGAString,string);
   		}
		if(IsPlayerOnline(InfoOrg2[org][Candidato11]))
		{
   			format(string,sizeof(string),"11\t%s\t{33FF00}(online)\n",InfoOrg2[org][Candidato11]);
   			strcat(MEGAString,string);
   		}
   		else
   		{
   			format(string,sizeof(string),"11\t%s\t{FC0015}(offline)\n",InfoOrg2[org][Candidato11]);
   			strcat(MEGAString,string);
   		}
		if(IsPlayerOnline(InfoOrg2[org][Candidato12]))
		{
   			format(string,sizeof(string),"12\t%s\t{33FF00}(online)\n",InfoOrg2[org][Candidato12]);
   			strcat(MEGAString,string);
   		}
   		else
   		{
   			format(string,sizeof(string),"12\t%s\t{FC0015}(offline)\n",InfoOrg2[org][Candidato12]);
   			strcat(MEGAString,string);
   		}
		if(IsPlayerOnline(InfoOrg2[org][Candidato13]))
		{
   			format(string,sizeof(string),"13\t%s\t{33FF00}(online)\n",InfoOrg2[org][Candidato13]);
   			strcat(MEGAString,string);
   		}
   		else
   		{
   			format(string,sizeof(string),"13\t%s\t{FC0015}(offline)\n",InfoOrg2[org][Candidato13]);
   			strcat(MEGAString,string);
   		}
   		if(IsPlayerOnline(InfoOrg2[org][Candidato14]))
		{
   			format(string,sizeof(string),"14\t%s\t{33FF00}(online)\n",InfoOrg2[org][Candidato14]);
   			strcat(MEGAString,string);
   		}
   		else
   		{
   			format(string,sizeof(string),"14\t%s\t{FC0015}(offline)\n",InfoOrg2[org][Candidato14]);
   			strcat(MEGAString,string);
   		}
		if(IsPlayerOnline(InfoOrg2[org][Candidato15]))
		{
   			format(string,sizeof(string),"15\t%s\t{33FF00}(online)\n",InfoOrg2[org][Candidato15]);
   			strcat(MEGAString,string);
   		}
   		else
   		{
   			format(string,sizeof(string),"15\t%s\t{FC0015}(offline)\n",InfoOrg2[org][Candidato15]);
   			strcat(MEGAString,string);
   		}
		if(IsPlayerOnline(InfoOrg2[org][Candidato16]))
		{
   			format(string,sizeof(string),"16\t%s\t{33FF00}(online)\n",InfoOrg2[org][Candidato16]);
   			strcat(MEGAString,string);
   		}
   		else
   		{
   			format(string,sizeof(string),"16\t%s\t{FC0015}(offline)\n",InfoOrg2[org][Candidato16]);
   			strcat(MEGAString,string);
   		}
		if(IsPlayerOnline(InfoOrg2[org][Candidato17]))
		{
   			format(string,sizeof(string),"17\t%s\t{33FF00}(online)\n",InfoOrg2[org][Candidato17]);
   			strcat(MEGAString,string);
   		}
   		else
   		{
   			format(string,sizeof(string),"17\t%s\t{FC0015}(offline)\n",InfoOrg2[org][Candidato17]);
   			strcat(MEGAString,string);
   		}
		if(IsPlayerOnline(InfoOrg2[org][Candidato18]))
		{
   			format(string,sizeof(string),"18\t%s\t{33FF00}(online)\n",InfoOrg2[org][Candidato18]);
   			strcat(MEGAString,string);
   		}
   		else
   		{
   			format(string,sizeof(string),"18\t%s\t{FC0015}(offline)\n",InfoOrg2[org][Candidato18]);
   			strcat(MEGAString,string);
   		}
		if(IsPlayerOnline(InfoOrg2[org][Candidato19]))
		{
   			format(string,sizeof(string),"19\t%s\t{33FF00}(online)\n",InfoOrg2[org][Candidato19]);
   			strcat(MEGAString,string);
   		}
   		else
   		{
   			format(string,sizeof(string),"19\t%s\t{FC0015}(offline)\n",InfoOrg2[org][Candidato19]);
   			strcat(MEGAString,string);
   		}
		if(IsPlayerOnline(InfoOrg2[org][Candidato20]))
		{
   			format(string,sizeof(string),"20\t%s\t{33FF00}(online)\n",InfoOrg2[org][Candidato20]);
   			strcat(MEGAString,string);
   		}
   		else
   		{
   			format(string,sizeof(string),"20\t%s\t{FC0015}(offline)\n",InfoOrg2[org][Candidato20]);
   			strcat(MEGAString,string);
   		}
   		ShowPlayerDialog(playerid, 8991, DIALOG_STYLE_LIST, "Clique no Nome para Limpar", MEGAString, "Limpar", "Voltar");
		return true;
}

BPF::AnimSS(playerid)
{
    ApplyAnimation(playerid, "HEIST9","USE:_SwipeCard", 4.0, 0, 0, 0, 0, 0);
	return true;
}
BPF::Ainvasao()
{
    tempoinvasaosistema = 0;
}
BPF::ContagemInvasaoo(playerid)
{
    new string[70];
    format(string, sizeof(string), "~w~Tempo Para Invasão:~n~~r~%d Segundos...", Contagem[playerid]);
    GameTextForPlayer(playerid, string, 1500, 3);
    if(Contagem[playerid] == 0)
    {
        KillTimer(TempoContagem[playerid]);

    }
    Contagem[playerid]--;
}
BPF::InvasaoPenitenciaria(playerid)
{
	KillTimer(tempoinvasao);
	if(!IsACop(playerid))
	if(!PlayerToPoint(5.0,playerid,1797.2847,-1577.1489,14.0731))
    {
        SendClientMessage(playerid, COLOR_LIGHTRED, "[Atenção]: A porta da Penitenciaria não pode ser explodida por algum motivo !");
		RemovePlayerAttachedObject(playerid,4);
       	TogglePlayerControllable(playerid, 1);
        SendClientMessage(playerid, 0xAFAFAFAA, "Você não está na porta da penitenciária !");
        ProvocoInvasao[playerid] = 0; roubando[playerid] = 0; invasaopenitenciaria = 0; KillTimer(tempoinvasao); tempoinvasaosistema = 0;
        ClearAnimations(playerid);
        TogglePlayerControllable(playerid, 1);
        KillTimer(TempoContagem[playerid]);
        return 1;
    }
    ForPlayers(i)
	{
		if(ProvocoInvasao[i] == 1)
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "[Atenção]: A porta da Penitenciaria foi explodida, liberando todos os presidiários !");
        	ProvocoInvasao[playerid] = 0; roubando[playerid] = 0; invasaopenitenciaria = 0; KillTimer(tempoinvasao); tempoinvasaosistema = 0;
        	RemovePlayerAttachedObject(playerid,4);
        	TogglePlayerControllable(playerid, 1);
        	ClearAnimations(playerid);
        	TogglePlayerControllable(i, 1);
        	KillTimer(TempoContagem[playerid]);
		}
		if(PlayerInfo[i][pJailed] > 0)
		{
		if(PlayerInfo[i][pJailed] == 9)
				{
					return true;
				}
            new gstring[120];
            SetPlayerVirtualWorld(i, 0);
			SetPlayerInterior(i, 0);
			SetPlayerPos(i,1799.4268,-1577.8778,14.0734);
			if(PlayerInfo[i][pJailTime] <= 300) WantedPoints[i] = 1;
            if(PlayerInfo[i][pJailTime] >= 301 || PlayerInfo[i][pJailTime] <= 600) WantedPoints[i] = 2;
            if(PlayerInfo[i][pJailTime] >= 601 || PlayerInfo[i][pJailTime] <= 900)WantedPoints[i] = 3;
            if(PlayerInfo[i][pJailTime] >= 901 || PlayerInfo[i][pJailTime] <= 1200)WantedPoints[i] = 4;
            if(PlayerInfo[i][pJailTime] >= 1201 || PlayerInfo[i][pJailTime] <= 1500)WantedPoints[i] = 5;
            if(PlayerInfo[i][pJailTime] >= 1501 || PlayerInfo[i][pJailTime] <= 1800)WantedPoints[i] = 6;
            if(PlayerInfo[i][pJailTime] >= 1801 || PlayerInfo[i][pJailTime] <= 2100)WantedPoints[i] = 7;
            if(PlayerInfo[i][pJailTime] >= 2101 || PlayerInfo[i][pJailTime] <= 2500)WantedPoints[i] = 8;

			RemovePlayerAttachedObject(i,4);
			PlayerInfo[i][pJailed] = 0;
			SetPlayerSkin(i, PlayerInfo[i][pSkin]);
			format(gstring, sizeof(gstring), "[Foragido]: {FFFFFF}A porta da penitenciária acaba de ser detonada, a policia foi avisada!.");
        	SendClientMessage(i, COR_AMARELO, gstring);
		}
	}
	return 1;
}
BPF::desbugarse(playerid)
{
	Controle(playerid, 1);
	return 1;
}

BPF::OnPlayerSave(playerid)
{
    if(gPlayerLogged[playerid])
	{
		new string3[120];
		format(string3, sizeof(string3), Pasta_Contas, PlayerName(playerid));
		PlayerInfo[playerid][pCash] = GetPlayerMoney(playerid);
		DOF2_SetInt(string3, "Pacote", Pacote[playerid]);
		DOF2_SetString(string3,"TituloPersonalizado",PlayerInfo[playerid][pTITULOP]);
		DOF2_SetInt(string3, "TemTituloPersonalizado", TemTituloPersonalizado[playerid]);
		DOF2_SetInt(string3, "TemAnuncioPersonalizado", TemAnuncioPersonalizado[playerid]);
        DOF2_SetInt(string3, "TemJetpack", TemJetpack[playerid]);
        DOF2_SetInt(string3, "Decodificador", PlayerInfo[playerid][pDecod]);
        DOF2_SetInt(string3, "FamiliaVIP", PlayerInfo[playerid][pFamiliavip]);
        DOF2_SetInt(string3, "Brinquedo", PlayerInfo[playerid][pBrinquedo]);
        DOF2_SetInt(string3, "RCTiger", PlayerInfo[playerid][prctiger]);
        DOF2_SetInt(string3, "RCRaider", PlayerInfo[playerid][prcraider]);
        DOF2_SetInt(string3, "RCBaron", PlayerInfo[playerid][prcbaron]);
        DOF2_SetInt(string3, "Avaliacoes", PlayerInfo[playerid][pAvaliacoes]);
	    DOF2_SetInt(string3, "AvaFinal", PlayerInfo[playerid][pAFinal]);
        DOF2_SetInt(string3, "TemSkate", TemSkate[playerid]);
		DOF2_SetInt(string3,"Level",PlayerInfo[playerid][pLevel]);
		DOF2_SetInt(string3,"AdminLevel",PlayerInfo[playerid][pAdmin]);
		DOF2_SetString(string3,"AdminFuncao",PlayerInfo[playerid][pFuncao]);
		DOF2_SetInt(string3,"AdminTemp",PlayerInfo[playerid][pAdminTemp]);
		DOF2_SetInt(string3,"HelperLevel",PlayerInfo[playerid][pHelper]);
		DOF2_SetInt(string3,"Securekey",PlayerInfo[playerid][pSeckey]);
		DOF2_SetInt(string3,"DonateRank",PlayerInfo[playerid][pVIP]);
		DOF2_SetInt(string3,"UpgradePoints",PlayerInfo[playerid][gPupgrade]);
		DOF2_SetInt(string3,"ConnectedTime",PlayerInfo[playerid][pConnectTime]);
		DOF2_SetInt(string3,"Registered",PlayerInfo[playerid][pReg]);
		DOF2_SetInt(string3,"Sex",PlayerInfo[playerid][pSex]);
		DOF2_SetInt(string3,"Muted",PlayerInfo[playerid][pMuted]);
		DOF2_SetInt(string3,"Respect",PlayerInfo[playerid][pExp]);
		DOF2_SetInt(string3,"Money",PlayerInfo[playerid][pCash]);
		DOF2_SetInt(string3,"Bank",PlayerInfo[playerid][pConta]);
		DOF2_SetInt(string3,"Cashing",PlayerInfo[playerid][pCasher]);
		DOF2_SetInt(string3, "ContagemHoras", ContagemHoras[playerid]);
	    DOF2_SetInt(string3, "ContagemSeg", ContagemSeg[playerid]);
		DOF2_SetInt(string3,"Explosivos",PlayerInfo[playerid][pExplosivos]);
		DOF2_SetInt(string3,"Cigarros",PlayerInfo[playerid][pCigarros]);
		DOF2_SetInt(string3,"pJackSkill",PlayerInfo[playerid][pJackSkill]);
		DOF2_SetInt(string3,"Crimes",PlayerInfo[playerid][pCrimes]);
		DOF2_SetInt(string3,"Kills",PlayerInfo[playerid][pKills]);
		DOF2_SetInt(string3,"Deaths",PlayerInfo[playerid][pDeaths]);
		DOF2_SetInt(string3,"Phonebook",PlayerInfo[playerid][pPhoneBook]);
		DOF2_SetInt(string3,"LottoNr",PlayerInfo[playerid][pLottoNr]);
		DOF2_SetInt(string3,"LottoWin",PlayerInfo[playerid][pLottoWin]);
		DOF2_SetInt(string3,"Emprego",PlayerInfo[playerid][pEmprego]);
		//conquistas.
		DOF2_SetInt(string3,"Conquistas",PlayerInfo[playerid][CBConq]);
		DOF2_SetInt(string3,"Conquista1",PlayerInfo[playerid][CMATOU10]);
		DOF2_SetInt(string3,"Conquista2",PlayerInfo[playerid][CMORREU10]);
		DOF2_SetInt(string3,"Conquista3",PlayerInfo[playerid][CLEVEL2]);
		DOF2_SetInt(string3,"Conquista4",PlayerInfo[playerid][CLIDER]);
		DOF2_SetInt(string3,"Conquista5",PlayerInfo[playerid][CNOVATO]);
		DOF2_SetInt(string3,"Conquista6",PlayerInfo[playerid][CPRESENTE]);
		DOF2_SetInt(string3,"Conquista7",PlayerInfo[playerid][CEMPREGO]);
        DOF2_SetInt(string3,"Conquista8",PlayerInfo[playerid][CORG]);
        DOF2_SetInt(string3,"Conquista9",PlayerInfo[playerid][CADMIN]);
        DOF2_SetInt(string3,"Conquista10",PlayerInfo[playerid][CHELPER]);
        DOF2_SetInt(string3,"Conquista11",PlayerInfo[playerid][CVIPS]);
        DOF2_SetInt(string3,"Conquista12",PlayerInfo[playerid][CHRSJOGADAS]);
        DOF2_SetInt(string3,"Conquista13",PlayerInfo[playerid][CCASACONQUISTA]);
        DOF2_SetInt(string3,"Conquista14",PlayerInfo[playerid][CEMPRESACONT]);
		//
		DOF2_SetInt(string3,"Natal",PlayerInfo[playerid][pNatal]);
		DOF2_SetInt(string3,"Paycheck",PlayerInfo[playerid][pSalario]);
		DOF2_SetInt(string3,"HeadValue",PlayerInfo[playerid][pHeadValue]);
		DOF2_SetInt(string3,"HeadValueT",PlayerInfo[playerid][pHeadValueT]);
		DOF2_SetInt(string3,"HeadValueM",PlayerInfo[playerid][pHeadValueM]);
		DOF2_SetInt(string3,"Jailed",PlayerInfo[playerid][pJailed]);
		DOF2_SetInt(string3,"TempoFDrugs",PlayerInfo[playerid][pTempoFDrugs]);
		DOF2_SetInt(string3,"DrugType",PlayerInfo[playerid][pDrugType]);
		DOF2_SetInt(string3,"BloqNoob",PlayerInfo[playerid][pBloqNoob]);
		DOF2_SetInt(string3,"AnGov",PlayerInfo[playerid][pAnGov]);
		DOF2_SetInt(string3,"Armasb",PlayerInfo[playerid][pArmasb]);
		DOF2_SetInt(string3,"JailTime",PlayerInfo[playerid][pJailTime]);
		DOF2_SetInt(string3,"Capacete",PlayerInfo[playerid][pCapacete]);
		DOF2_SetInt(string3,"Materiais",PlayerInfo[playerid][pMats]);
		DOF2_SetInt(string3,"Contratos",PlayerInfo[playerid][pContratos]);
		DOF2_SetInt(string3,"Maconha",PlayerInfo[playerid][pDrogas]);
		DOF2_SetInt(string3,"Cocaina",PlayerInfo[playerid][pDrogas2]);
		DOF2_SetInt(string3,"Crack",PlayerInfo[playerid][pDrogas3]);
		DOF2_SetInt(string3,"Gam",PlayerInfo[playerid][pGam]);
		DOF2_SetInt(string3,"PFc",PlayerInfo[playerid][pPFc]);
		DOF2_SetInt(string3,"Mcr",PlayerInfo[playerid][pMcr]);
		DOF2_SetInt(string3,"Coc",PlayerInfo[playerid][pCoc]);
		DOF2_SetInt(string3,"Vam",PlayerInfo[playerid][pVam]);
		DOF2_SetInt(string3,"Vsc",PlayerInfo[playerid][pVsc]);
		DOF2_SetInt(string3,"Líder",PlayerInfo[playerid][pLider]);
		DOF2_SetInt(string3,"Member",PlayerInfo[playerid][pMembro]);
		DOF2_SetInt(string3,"Rank",PlayerInfo[playerid][pCargo]);
		DOF2_SetInt(string3,"Multas",PlayerInfo[playerid][pMultas]);
		DOF2_SetInt(string3,"MatouSniper",PlayerInfo[playerid][pMatouSniper]);
		DOF2_SetInt(string3,"Char",PlayerInfo[playerid][pSkin]);
		DOF2_SetInt(string3,"ContractTime",PlayerInfo[playerid][pContractTime]);
		DOF2_SetInt(string3,"pegouvip5",PlayerInfo[playerid][pegouvip]);
		DOF2_SetInt(string3,"MinutosOn",PlayerInfo[playerid][pMinutosOn]);
		DOF2_SetInt(string3,"HorasOn",PlayerInfo[playerid][pHorasOn]);
		DOF2_SetInt(string3,"Dias5On",PlayerInfo[playerid][pDias5On]);
		DOF2_SetInt(string3,"Dias15On",PlayerInfo[playerid][pDias15On]);
		DOF2_SetInt(string3,"MesOn",PlayerInfo[playerid][pMesOn]);
		DOF2_SetBool(string3,"5VOk",PlayerInfo[playerid][p5VOk]);
		DOF2_SetBool(string3,"15VOk",PlayerInfo[playerid][p15VOk]);
		DOF2_SetInt(string3,"TituloId",PlayerInfo[playerid][pTitulo]);
		DOF2_SetInt(string3,"DetSkill",PlayerInfo[playerid][pDetSkill]);
		DOF2_SetInt(string3,"SexSkill",PlayerInfo[playerid][pSexSkill]);
		DOF2_SetInt(string3,"BoxSkill",PlayerInfo[playerid][pBoxSkill]);
		DOF2_SetInt(string3,"LawSkill",PlayerInfo[playerid][pLawSkill]);
		DOF2_SetInt(string3,"MechSkill",PlayerInfo[playerid][pMechSkill]);
		DOF2_SetInt(string3,"NewsSkill",PlayerInfo[playerid][pNewsSkill]);
		DOF2_SetInt(string3,"CarSkill",PlayerInfo[playerid][pCarSkill]);
		DOF2_SetInt(string3,"Chave",PlayerInfo[playerid][pChave]);
		DOF2_SetInt(string3,"DrogasSkill",PlayerInfo[playerid][pDrogasSkill]);
		DOF2_SetInt(string3,"CookSkill",PlayerInfo[playerid][pCookSkill]);
		DOF2_SetInt(string3,"Limparb",PlayerInfo[playerid][pLimparb]);
		DOF2_SetFloat(string3,"pSHealth",PlayerInfo[playerid][pSHealth]);
		DOF2_SetFloat(string3,"pSArmour",PlayerInfo[playerid][pSArmour]);
		DOF2_SetInt(string3,"PhoneNr",PlayerInfo[playerid][pPnumber]);
		DOF2_SetInt(string3,"TelCor",PlayerInfo[playerid][pTelColor]);
		DOF2_SetInt(string3,"House",PlayerInfo[playerid][pPhousekey]);
		DOF2_SetInt(string3,"AimBot", GetPVarInt(playerid,"WarnningAimbot"));
		DOF2_SetInt(string3,"AutoCbug", GetPVarInt(playerid, "WarnningMacro"));
		DOF2_SetInt(string3,"Bizz",PlayerInfo[playerid][pPbiskey]);
		DOF2_SetInt(string3,"Faz",PlayerInfo[playerid][pPFazkey]);
		DOF2_SetInt(string3,"Spawn",PlayerInfo[playerid][pSpawn]);
		DOF2_SetInt(string3,"SafeMaconha",PlayerInfo[playerid][pSafeDrogas]);
		DOF2_SetInt(string3,"SafeCocaina",PlayerInfo[playerid][pSafeDrogas2]);
		DOF2_SetInt(string3,"SafeCrack",PlayerInfo[playerid][pSafeDrogas3]);
		DOF2_SetInt(string3,"NivelProcurado",WantedPoints[playerid]);
		DOF2_SetInt(string3,"SafeMateriais",PlayerInfo[playerid][psMats]);
		DOF2_SetInt(string3,"Age",PlayerInfo[playerid][pAge]);
    	DOF2_SetInt(string3,"AcP",PlayerInfo[playerid][pAcP]);
		DOF2_SetInt(string3,"Ouros",PlayerInfo[playerid][pOuros]);
		DOF2_SetInt(string3,"Avisado",PlayerInfo[playerid][pAviso]);
		DOF2_SetInt(string3,"DiasBanTemp",PlayerInfo[playerid][pDiaBanTemp]);
		DOF2_SetInt(string3,"MesBanTemp",PlayerInfo[playerid][pMesBanTemp]);
		DOF2_SetInt(string3,"AnoBanTemp",PlayerInfo[playerid][pAnoBanTemp]);
		DOF2_SetInt(string3,"DiasVIP",PlayerInfo[playerid][pDiaVIP]);
		DOF2_SetInt(string3,"diasvip",PlayerInfo[playerid][pDiasvip]);
		DOF2_SetInt(string3,"MesVIP",PlayerInfo[playerid][pMesVIP]);
		DOF2_SetInt(string3,"AnoVIP",PlayerInfo[playerid][pAnoVIP]);
		DOF2_SetInt(string3,"diasTO",PlayerInfo[playerid][pDiasTO]);
		DOF2_SetInt(string3,"DiasTO",PlayerInfo[playerid][pDiaTO]);
		DOF2_SetInt(string3,"MesTO",PlayerInfo[playerid][pMesTO]);
		DOF2_SetInt(string3,"AnoTO",PlayerInfo[playerid][pAnoTO]);
		DOF2_SetInt(string3,"OrgVIP",PlayerInfo[playerid][pOrgVIP]);
		DOF2_SetInt(string3,"CarLic",PlayerInfo[playerid][pCarLic]);
		DOF2_SetInt(string3,"FlyLic",PlayerInfo[playerid][pFlyLic]);
		DOF2_SetInt(string3,"DeatEvento",DeatEvento[playerid]);
		DOF2_SetInt(string3,"KillEvento",KillEvento[playerid]);
		DOF2_SetInt(string3,"ContHosp",PlayerInfo[playerid][pContratoHos]);
		DOF2_SetInt(string3,"pFam",PlayerInfo[playerid][pgFam]);
		DOF2_SetInt(string3,"MenuRG",PlayerInfo[playerid][pMenuRG]);
		DOF2_SetInt(string3,"ChatTerritorio",PlayerInfo[playerid][pChatTerritorio]);
		DOF2_SetInt(string3,"ChatVipDesativado",PlayerInfo[playerid][pChatVipDesativado]);
		DOF2_SetInt(string3,"ChatSocioDesativado",PlayerInfo[playerid][pChatSocioDesativado]);
		DOF2_SetInt(string3,"ChatFomeSede",PlayerInfo[playerid][pChatFomeSede]);
		DOF2_SetInt(string3,"ChatNoob",PlayerInfo[playerid][pChatNoob]);
		DOF2_SetInt(string3,"ChatDuelo",PlayerInfo[playerid][pChatDuelo]);
		DOF2_SetInt(string3,"ChatNoticias",PlayerInfo[playerid][pChatNoticias]);
		DOF2_SetInt(string3,"Desafiador",PlayerInfo[playerid][pDesafiador]);
		DOF2_SetInt(string3,"Desafiante",PlayerInfo[playerid][pDesafiante]);
		DOF2_SetInt(string3,"BoatLic",PlayerInfo[playerid][pBoatLic]);
		DOF2_SetInt(string3,"GunLic",PlayerInfo[playerid][pGunLic]);
		DOF2_SetInt(string3,"PayDay",PlayerInfo[playerid][pPayDay]);
		DOF2_SetInt(string3,"CDPlayer",PlayerInfo[playerid][pCDPlayer]);
		DOF2_SetInt(string3,"Wins",PlayerInfo[playerid][pWins]);
		DOF2_SetInt(string3,"Loses",PlayerInfo[playerid][pLoses]);
		DOF2_SetInt(string3,"AlcoholPerk",PlayerInfo[playerid][pAlcoholPerk]);
		DOF2_SetInt(string3,"DrugPerk",PlayerInfo[playerid][pDrugPerk]);
		DOF2_SetInt(string3,"MiserPerk",PlayerInfo[playerid][pMiserPerk]);
		DOF2_SetInt(string3,"PainPerk",PlayerInfo[playerid][pPainPerk]);
		DOF2_SetInt(string3,"TraderPerk",PlayerInfo[playerid][pTraderPerk]);
		DOF2_SetInt(string3,"ConquistaR",PlayerInfo[playerid][pRegisconquista]);
		DOF2_SetInt(string3,"Tutorial",PlayerInfo[playerid][pTut]);
		DOF2_SetInt(string3,"Avisos",PlayerInfo[playerid][pWarns]);
		DOF2_SetString(string3,"MarriedTo",PlayerInfo[playerid][pMarriedTo]);
		DOF2_SetString(string3,"SERIAL",PlayerInfo[playerid][pSERIAL]);
		DOF2_SetInt(string3,"Married",PlayerInfo[playerid][pMarried]);
		DOF2_SetInt(string3,"Luta",PlayerInfo[playerid][pLuta]);
        DOF2_SetInt(string3,"modelo",PlayerInfo[playerid][pModelo]);
		DOF2_SetString(string3,"LU",PlayerInfo[playerid][pLaastLogin]);
		DOF2_SetString(string3,"LV",PlayerInfo[playerid][pLastVerification]);
		DOF2_SetInt(string3,"Ban",PlayerInfo[playerid][pBan]);
		DOF2_SetBool(string3,"Ajustado",PlayerInfo[playerid][pAjustado]);
		DOF2_SetBool(string3,"HAjustado",PlayerInfo[playerid][pHAjustado]);
		DOF2_SetBool(string3,"Galao",PlayerInfo[playerid][pGalao]);
		DOF2_SetBool(string3,"Isqueiro",PlayerInfo[playerid][pIsqueiro]);
		DOF2_SetBool(string3,"Patins",PlayerInfo[playerid][pPatins]);
		DOF2_SetBool(string3,"Televisao",PlayerInfo[playerid][pTelevisao]);
		DOF2_SetBool(string3,"Radio",PlayerInfo[playerid][pRadio]);

		DOF2_SetBool(string3,"resetado",PlayerInfo[playerid][pResetado]);

    	DOF2_SetInt(string3, "Agendado",PlayerInfo[playerid][pAgendado]);
		DOF2_SetInt(string3, "CashAgendado",PlayerInfo[playerid][pCashAgendado]);
		DOF2_SetInt(string3, "QCoinAgendado",PlayerInfo[playerid][pQCoinAgendado]);
		DOF2_SetInt(string3, "MoneyAgendado",PlayerInfo[playerid][pMoneyAgendado]);
		DOF2_SetInt(string3, "QMoneyAgendado",PlayerInfo[playerid][pQMoneyAgendado]);
		DOF2_SetInt(string3, "Sementes", PlayerInfo[playerid][pSementes]);
		DOF2_SetInt(string3, "TituloA", PlayerInfo[playerid][pTituloPersonalizado]); //xandy
	 	DOF2_SetInt(string3,"BiggestFish", PlayerInfo[playerid][pBiggestFish]);
	 	DOF2_SetInt(string3,"CookSkill", PlayerInfo[playerid][pCookSkill]);
	 	DOF2_SetInt(string3,"FishSkill", PlayerInfo[playerid][pFishSkill]);
	 	DOF2_SetInt(string3,"FishLic", PlayerInfo[playerid][pFishLic]);
	 	DOF2_SetInt(string3,"GasReserva", PlayerInfo[playerid][pGasReserva]);

	 	DOF2_SetBool(string3, "Hospital", PlayerInfo[playerid][pHospital]);
	 	DOF2_SetInt(string3,"TempoHospital", PlayerInfo[playerid][pTempoHospital]);
	 	DOF2_SetInt(string3,"Fome", PlayerInfo[playerid][pFome]);
	 	DOF2_SetInt(string3,"Sede", PlayerInfo[playerid][pSede]);
	 	DOF2_SetInt(string3,"FamiliaID", PlayerInfo[playerid][pFamiliaID]);
	 	DOF2_SetInt(string3,"FamiliaLeader", PlayerInfo[playerid][pFamiliaLeader]);
	 	DOF2_SetInt(string3,"FamiliaSubLeader", PlayerInfo[playerid][pFamiliaSubLeader]);

		//Crime
		DOF2_SetString(string3,"cCrime",PlayerCrime[playerid][pAccusedof]);
		DOF2_SetString(string3,"cRelato",PlayerCrime[playerid][pVictim]);

		DOF2_SaveFile();
	}
	return true;
}
BPF::PosicionarObjetos(playerid, index1, modelid1, boneid1, Float:fOffsetX1, Float:fOffsetY1, Float:fOffsetZ1, Float:fRotX1, Float:fRotY1, Float:fRotZ1, Float:fScaleX1, Float:fScaleY1, Float:fScaleZ1)
{
    ObjectLoad[playerid][index1][Objindexid2] = index1;
    ObjectLoad[playerid][index1][Objmodelid] = modelid1;
    ObjectLoad[playerid][index1][Objboneid] = boneid1;
 	ObjectLoad[playerid][index1][ObjOffsetX] = fOffsetX1;
  	ObjectLoad[playerid][index1][ObjOffsetY] = fOffsetY1;
   	ObjectLoad[playerid][index1][ObjOffsetZ] = fOffsetZ1;
    ObjectLoad[playerid][index1][ObjRotX] = fRotX1;
 	ObjectLoad[playerid][index1][ObjRotY] = fRotY1;
  	ObjectLoad[playerid][index1][ObjRotZ] = fRotZ1;
  	ObjectLoad[playerid][index1][ObjScaleX] = fScaleX1;
  	ObjectLoad[playerid][index1][ObjScaleY] = fScaleY1;
  	ObjectLoad[playerid][index1][ObjScaleZ] = fScaleZ1;
	return 0;
}
BPF::SaveObjects(playerid)
{
	new string3[120];
	format(string3, sizeof(string3), Pasta_CharAttach, PlayerName(playerid));
	new str[28];
 	new x=0;
 	while(x < MAX_PLAYER_ATTACHED_OBJECTS)
 	{
 	    format(str, sizeof str, "objeto%d", x);
 	    DOF2_SetInt(string3,str,ObjectLoad[playerid][x][Objindexid2]);
 	    format(str, sizeof str, "modelid%d", x);
		DOF2_SetInt(string3,str,ObjectLoad[playerid][x][Objmodelid]);
		format(str, sizeof str, "boneid%d", x);
	 	DOF2_SetInt(string3,str,ObjectLoad[playerid][x][Objboneid]);
	 	format(str, sizeof str, "OffsetX%d", x);
	 	DOF2_SetFloat(string3,str,ObjectLoad[playerid][x][ObjOffsetX]);
	 	format(str, sizeof str, "OffsetY%d", x);
	  	DOF2_SetFloat(string3,str,ObjectLoad[playerid][x][ObjOffsetY]);
	  	format(str, sizeof str, "OffsetZ%d", x);
	   	DOF2_SetFloat(string3,str,ObjectLoad[playerid][x][ObjOffsetZ]);
	   	format(str, sizeof str, "RotX%d", x);
	    DOF2_SetFloat(string3,str,ObjectLoad[playerid][x][ObjRotX]);
	    format(str, sizeof str, "RotY%d", x);
	 	DOF2_SetFloat(string3,str,ObjectLoad[playerid][x][ObjRotY]);
	 	format(str, sizeof str, "RotZ%d", x);
	  	DOF2_SetFloat(string3,str,ObjectLoad[playerid][x][ObjRotZ]);
	  	format(str, sizeof str, "ScaleX%d", x);
	  	DOF2_SetFloat(string3,str,ObjectLoad[playerid][x][ObjScaleX]);
	  	format(str, sizeof str, "ScaleY%d", x);
	  	DOF2_SetFloat(string3,str,ObjectLoad[playerid][x][ObjScaleY]);
	  	format(str, sizeof str, "ScaleZ%d", x);
	  	DOF2_SetFloat(string3,str,ObjectLoad[playerid][x][ObjScaleZ]);
 	    x++;
 	}
	DOF2_SaveFile();
	return true;
}
BPF::LoadObjects(playerid)
{
    new string2[74];
	format(string2, sizeof(string2), Pasta_CharAttach, PlayerName(playerid));
	if(fexist(string2))
	{
	 	new str[28];
	 	new x=0;
	 	while(x < MAX_PLAYER_ATTACHED_OBJECTS)
	 	{
	 	    format(str, sizeof str, "objeto%d", x);
			ObjectLoad[playerid][x][Objindexid2] = DOF2_GetInt(string2,str);
			format(str, sizeof str, "modelid%d", x);
			ObjectLoad[playerid][x][Objmodelid] = DOF2_GetInt(string2,str);
			format(str, sizeof str, "boneid%d", x);
		 	ObjectLoad[playerid][x][Objboneid] = DOF2_GetInt(string2,str);
		 	format(str, sizeof str, "OffsetX%d", x);
		 	ObjectLoad[playerid][x][ObjOffsetX] = DOF2_GetFloat(string2,str);
		 	format(str, sizeof str, "OffsetY%d", x);
		  	ObjectLoad[playerid][x][ObjOffsetY] = DOF2_GetFloat(string2,str);
		  	format(str, sizeof str, "OffsetZ%d", x);
		   	ObjectLoad[playerid][x][ObjOffsetZ] = DOF2_GetFloat(string2,str);
		   	format(str, sizeof str, "RotX%d", x);
		    ObjectLoad[playerid][x][ObjRotX] = DOF2_GetFloat(string2,str);
		    format(str, sizeof str, "RotY%d", x);
		 	ObjectLoad[playerid][x][ObjRotY] = DOF2_GetFloat(string2,str);
		 	format(str, sizeof str, "RotZ%d", x);
		  	ObjectLoad[playerid][x][ObjRotZ] = DOF2_GetFloat(string2,str);
		  	format(str, sizeof str, "ScaleX%d", x);
		  	ObjectLoad[playerid][x][ObjScaleX] = DOF2_GetFloat(string2,str);
		  	format(str, sizeof str, "ScaleY%d", x);
		  	ObjectLoad[playerid][x][ObjScaleY] = DOF2_GetFloat(string2,str);
		  	format(str, sizeof str, "ScaleZ%d", x);
		  	ObjectLoad[playerid][x][ObjScaleZ] = DOF2_GetFloat(string2,str);
			x++;
	 	}
	}
	else
	{
	}
	return 1;
}
BPF::SetTudo(playerid)
{
	if(PlayerInfo[playerid][pJailed] != 0)return true;
	if(PlayerInfo[playerid][pSHealth] > 0)
	{
		SetPlayerHealth(playerid, PlayerInfo[playerid][pSHealth]);
	}
	SetPlayerArmour(playerid, PlayerInfo[playerid][pSArmour]);
	return true;
}

//---------------------- anims --------------------------------


	CMD:animlist(playerid)
	{
 		SendClientMessage(playerid, COLOR_GRAD2,"Lista de anims");
		SendClientMessage(playerid, COLOR_GRAD2,"/animped /dance /handsup ");
		SendClientMessage(playerid, COLOR_GRAD2,"/animairport /animat /animbar /animball /animfire /animbeach");
		SendClientMessage(playerid, COLOR_GRAD2,"/animbp /animinf /animbiked /animbh /animfood /animbikelp /animms /animbikes /animcar");
		SendClientMessage(playerid, COLOR_GRAD2,"/animbikev /animbmx /animbikedbz /animchase /animbox /animbomber /animbsp /animcamera ");
		SendClientMessage(playerid, COLOR_GRAD2,"/animgym /animpara /animgangs /animlookers /animcarchat /animcasino /animbuddy /animbus");
		SendClientMessage(playerid, COLOR_GRAD2,"/animcarry /animintshop /animjst /animkart /animkissing /animknife /animlapdan /animdend");
		SendClientMessage(playerid, COLOR_GRAD2,"/animmedic /animmtb /animmusc /animotb /animnevada /animpark /animsaw /animchoppa");
		SendClientMessage(playerid, COLOR_GRAD2,"/animclothes /animcoach /animcolt /animcopa /animcod /animcrack /animsnm /animpaulnmac");
		SendClientMessage(playerid, COLOR_GRAD2,"/animlist2 Para ver outros Anims");
		return 1;
	}

	CMD:animlist2(playerid)
	{
		SendClientMessage(playerid, COLOR_GRAD2,"2ª Lista de anims");
		SendClientMessage(playerid, COLOR_GRAD2,"/animcrib /animjump /animdealer /animdildo /animdodge /animdozer  /animdrivebys /animfat");
		SendClientMessage(playerid, COLOR_GRAD2,"/animfightb /animfightc /animfightd /animfighte /animfinale /animfinale2 /animflamef");
		SendClientMessage(playerid, COLOR_GRAD2,"/animflowers /animghands /animfw /animghetto /animgog /animgraffity /animgreya /animgren");
		SendClientMessage(playerid, COLOR_GRAD2,"/animhaircut /animheist  /animinthouse /animintoffice /animplayerdbf /animplayidles /animpolice");
		SendClientMessage(playerid, COLOR_GRAD2,"/animpool /animpoor /animpython /animquad /animquadbz /animrapping  /animrifle /animriot /animrobbank ");
		SendClientMessage(playerid, COLOR_GRAD2,"/animrocket /animrustler /animryder /animscrat /animshamal /animshop /animskate /animshotgun");
		SendClientMessage(playerid, COLOR_GRAD2,"/animvortex /animtec /animtrain /animsil /animtattoo  /animsmoking /animsniper /animspray /animstrip");
		SendClientMessage(playerid, COLOR_GRAD2,"/animbath /animswat /animsweet /animswim /animsword /animtank /animtruck /animuzi  /animvan /animvending");
		SendClientMessage(playerid, COLOR_GRAD2,"/animway /animweap /animblowjob");
		return 1;
	}

	CMD:animbar(playerid, params[])
	{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbar [1-12]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 12) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbar [1-12]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"BAR","Barcustom_get",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"BAR","Barcustom_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"BAR","Barcustom_order",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"BAR","Barserve_bottle",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"BAR","Barserve_give",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"BAR","Barserve_glass",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"BAR","Barserve_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"BAR","Barserve_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"BAR","Barserve_order",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"BAR","dnk_stndF_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"BAR","dnk_stndM_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"BAR","BARman_idle",4.1,0,1,1,1,1);
    }
    return 1;
}


	CMD:animball(playerid, params[])
	{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animball [1-11]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 11) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animball [1-11]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"BASEBALL","Bat_1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"BASEBALL","Bat_2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"BASEBALL","Bat_2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"BASEBALL","Bat_4",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"BASEBALL","Bat_block",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"BASEBALL","Bat_Hit_1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"BASEBALL","Bat_Hit_2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"BASEBALL","Bat_Hit_3",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"BASEBALL","Bat_IDLE",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"BASEBALL","Bat_M",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"BASEBALL","BAT_PART",4.1,0,1,1,1,1);
    }
    return 1;
}


	CMD:animfire(playerid, params[])
	{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animfire [1-13]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 13) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animfire [1-13]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"BD_FIRE","BD_Fire1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"BD_FIRE","BD_Fire2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"BD_FIRE","BD_Fire3",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"BD_FIRE","BD_GF_Wave",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"BD_FIRE","BD_Panic_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"BD_FIRE","BD_Panic_02",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"BD_FIRE","BD_Panic_03",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"BD_FIRE","BD_Panic_04",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"BD_FIRE","BD_Panic_Loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"BD_FIRE","M_smklean_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"BD_FIRE","M_smklean_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"BD_FIRE","Playa_Kiss_03",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"BD_FIRE","wash_up",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animbeach(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbeach [1-5]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 5) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbeach [1-5]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"BEACH","bather",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"BEACH","Lay_Bac_Loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"BEACH","BD_Fire3",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"BEACH","ParkSit_W_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"BEACH","SitnWait_loop_W",4.1,0,1,1,1,1);
    }
    return 1;
}
CMD:sentar(playerid)
{
	ApplyAnimation(playerid, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
	return 1;
}

CMD:animinf(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animinf [1-4]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 4) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animinf [1-4]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"BF_injection","BF_getin_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"BF_injection","BF_getin_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"BF_injection","BF_getout_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"BF_injection","BF_getout_RHS",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animbiiked(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbiked [1-18]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 18) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbiked [1-18]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"BIKED","BIKEd_Back",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 1) {
        ApplyAnimation(playerid,"BIKED","BIKEd_drivebyFT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"BIKED","BIKEd_drivebyLHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"BIKED","BIKEd_drivebyRHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"BIKED","BIKEd_Fwd",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"BIKED","BIKEd_getoffBACK",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"BIKED","BIKEd_getoffLHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"BIKED","BIKEd_getoffRHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"BIKED","BIKEd_hit",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"BIKED","BIKEd_jumponL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"BIKED","BIKEd_jumponR",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"BIKED","BIKEd_kick",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"BIKED","BIKEd_Left",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"BIKED","BIKEd_passenger",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"BIKED","BIKEd_pushes",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"BIKED","BIKEd_Ride",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"BIKED","BIKEd_Right",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"BIKED","BIKEd_shuffle",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 18) {
        ApplyAnimation(playerid,"BIKED","BIKEd_Still",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animbp(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbp [1-7]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 7) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbp [1-7]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"benchpress","gym_bp_celebrate",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"benchpress","gym_bp_down",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"benchpress","gym_bp_getoff",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"benchpress","gym_bp_geton",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"benchpress","gym_bp_up_A",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"benchpress","gym_bp_up_B",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"benchpress","gym_bp_up_smooth",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animbh(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbh [1-18]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 18) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbh [1-18]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"BIKEH","BIKEh_Back",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"BIKEH","BIKEh_drivebyFT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"BIKEH","BIKEh_drivebyLHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"BIKEH","BIKEh_drivebyRHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"BIKEH","BIKEh_Fwd",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"BIKEH","BIKEh_getoffBACK",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"BIKEH","BIKEh_getoffLHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"BIKEH","BIKEh_getoffRHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"BIKEH","BIKEh_hit",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"BIKEH","BIKEh_jumponL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"BIKEH","BIKEh_jumponR",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"BIKEH","BIKEh_kick",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"BIKEH","BIKEh_Left",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"BIKEH","BIKEh_passenger",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"BIKEH","BIKEh_pushes",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"BIKEH","BIKEh_Ride",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"BIKEH","BIKEh_Right",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 18) {
        ApplyAnimation(playerid,"BIKEH","BIKEh_Still",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animms(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animms [1-8]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 8) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animms [1-8]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"BIKEH","BIKEh_Back",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"BIKEH","BIKEh_drivebyFT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"BIKEH","BIKEh_drivebyLHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"BIKEH","BIKEh_drivebyRHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"BIKEH","BIKEh_Fwd",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"BIKEH","BIKEh_getoffBACK",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"BIKEH","BIKEh_getoffLHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"BIKEH","BIKEh_getoffRHS",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animfood(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animfood [1-33]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 33) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animfood [1-33]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"FOOD","EAT_Chicken",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"FOOD","EAT_Pizza",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"FOOD","EAT_Vomit_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"FOOD","EAT_Vomit_SK",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"FOOD","FF_Dam_Bkw",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"FOOD","FF_Dam_Fwd",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"FOOD","FF_Dam_Left",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"FOOD","FF_Dam_Right",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"FOOD","FF_Die_Bkw",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"FOOD","FF_Die_Fwd",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"FOOD","FF_Die_Left",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"FOOD","FF_Die_Right",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"FOOD","FF_Sit_Eat1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"FOOD","FF_Sit_Eat2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"FOOD","FF_Sit_Eat3",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"FOOD","FF_Sit_In",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 18) {
        ApplyAnimation(playerid,"FOOD","FF_Sit_In_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 19) {
        ApplyAnimation(playerid,"FOOD","FF_Sit_In_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 20) {
        ApplyAnimation(playerid,"FOOD","FF_Sit_Look",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 21) {
        ApplyAnimation(playerid,"FOOD","FF_Sit_Loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 22) {
        ApplyAnimation(playerid,"FOOD","FF_Sit_Out_180",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 23) {
        ApplyAnimation(playerid,"FOOD","FF_Sit_Out_L_180",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 24) {
        ApplyAnimation(playerid,"FOOD","FF_Sit_Out_R_180",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 25) {
        ApplyAnimation(playerid,"FOOD","SHP_Thank",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 26) {
        ApplyAnimation(playerid,"FOOD","SHP_Tray_In",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 27) {
        ApplyAnimation(playerid,"FOOD","SHP_Tray_Lift",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 28) {
        ApplyAnimation(playerid,"FOOD","SHP_Tray_Lift_In",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 29) {
        ApplyAnimation(playerid,"FOOD","SHP_Tray_Lift_Loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 30) {
        ApplyAnimation(playerid,"FOOD","SHP_Tray_Lift_Out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 31) {
        ApplyAnimation(playerid,"FOOD","SHP_Tray_Out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 32) {
        ApplyAnimation(playerid,"FOOD","SHP_Tray_Pose",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 33) {
        ApplyAnimation(playerid,"FOOD","SHP_Tray_Return",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animms2(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animms2 [1-41]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 41) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animms2 [1-41]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"MISC","bitchslap",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"MISC","BMX_celebrate",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"MISC","BMX_comeon",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"MISC","bmx_idleloop_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"MISC","bmx_idleloop_02",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"MISC","bmx_talkleft_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"MISC","bmx_talkleft_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"MISC","bmx_talkleft_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"MISC","bmx_talkright_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"MISC","bmx_talkright_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"MISC","bmx_talkright_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"MISC","BPF_wndw",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"MISC","BPF_wndw_02",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"MISC","Case_pickup",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"MISC","door_jet",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"MISC","GRAB_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"MISC","GRAB_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 18) {
        ApplyAnimation(playerid,"MISC","Hiker_Pose",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 19) {
        ApplyAnimation(playerid,"MISC","Hiker_Pose_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 20) {
        ApplyAnimation(playerid,"MISC","Idle_Chat_02",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 21) {
        ApplyAnimation(playerid,"MISC","KAT_Throw_K",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 22) {
        ApplyAnimation(playerid,"MISC","KAT_Throw_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 23) {
        ApplyAnimation(playerid,"MISC","KAT_Throw_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 24) {
        ApplyAnimation(playerid,"MISC","PASS_Rifle_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 25) {
        ApplyAnimation(playerid,"MISC","PASS_Rifle_Ped",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 26) {
        ApplyAnimation(playerid,"MISC","PASS_Rifle_Ply",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 27) {
        ApplyAnimation(playerid,"MISC","pickup_box",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 28) {
        ApplyAnimation(playerid,"MISC","Plane_door",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 29) {
        ApplyAnimation(playerid,"MISC","Plane_exit",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 30) {
        ApplyAnimation(playerid,"MISC","Plane_hijack",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 31) {
        ApplyAnimation(playerid,"MISC","Plunger_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 32) {
        ApplyAnimation(playerid,"MISC","Plyrlean_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 33) {
        ApplyAnimation(playerid,"MISC","plyr_shkhead",4.1,0,1,1,1,1);
    }
    else if(animationplayed ==  34) {
        ApplyAnimation(playerid,"MISC","Run_Dive",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 35) {
        ApplyAnimation(playerid,"MISC","Scratchballs_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 36) {
        ApplyAnimation(playerid,"MISC","SEAT_LR",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 37) {
        ApplyAnimation(playerid,"MISC","Seat_talk_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 38) {
        ApplyAnimation(playerid,"MISC","Seat_talk_02",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 39) {
        ApplyAnimation(playerid,"MISC","SEAT_watch",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 40) {
        ApplyAnimation(playerid,"MISC","smalplane_door",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 41) {
        ApplyAnimation(playerid,"MISC","smlplane_door",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animbikelp(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbikelp [1-9]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 9) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbikelp [1-9]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"BIKELEAP","bk_blnce_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"BIKELEAP","bk_blnce_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"BIKELEAP","bk_jmp",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"BIKELEAP","bk_rdy_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"BIKELEAP","bk_rdy_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"BIKELEAP","struggle_cesar",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"BIKELEAP","struggle_driver",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"BIKELEAP","truck_driver",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"BIKELEAP","truck_getin",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animbikes(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbikes [1-18]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 18) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbikes [1-18]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"BIKES","BIKEs_Back",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"BIKES","BIKEs_drivebyFT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"BIKES","BIKEs_drivebyLHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"BIKES","BIKEs_drivebyRHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"BIKES","BIKEs_Fwd",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"BIKES","BIKEs_getoffBACK",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"BIKES","BIKEs_getoffLHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"BIKES","BIKEs_getoffRHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"BIKES","BIKEs_hit",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"BIKES","BIKEs_jumponL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"BIKES","BIKEs_jumponR",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"BIKES","BIKEs_kick",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"BIKES","BIKEs_Left",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"BIKES","BIKEs_passenger",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"BIKES","BIKEs_pushes",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"BIKES","BIKEs_Ride",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"BIKES","BIKEs_Right",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 18) {
        ApplyAnimation(playerid,"BIKES","BIKEs_Still",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animbikev(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbikev [1-18]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 18) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbikev [1-18]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"BIKEV","BIKEv_Back",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"BIKEV","BIKEv_drivebyFT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"BIKEV","BIKEv_drivebyLHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"BIKEV","BIKEv_drivebyRHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"BIKEV","BIKEv_Fwd",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"BIKEV","BIKEv_getoffBACK",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"BIKEV","BIKEv_getoffLHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"BIKEV","BIKEv_getoffRHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"BIKEV","BIKEv_hit",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"BIKEV","BIKEv_jumponL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"BIKEV","BIKEv_jumponR",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"BIKEV","BIKEv_kick",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"BIKEV","BIKEv_Left",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"BIKEV","BIKEv_passenger",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"BIKEV","BIKEv_pushes",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"BIKEV","BIKEv_Ride",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"BIKEV","BIKEv_Right",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 18) {
        ApplyAnimation(playerid,"BIKEV","BIKEv_Still",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animbmx(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbmx [1-18]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 18) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbmx [1-18]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"BMX","BMX_back",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"BMX","BMX_bunnyhop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"BMX","BMX_drivebyFT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"BMX","BMX_driveby_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"BMX","BMX_driveby_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"BMX","BMX_fwd",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"BMX","BMX_getoffBACK",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"BMX","BMX_pushes",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"BMX","BMX_getoffLHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"BMX","BMX_getoffRHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"BMX","BMX_jumponL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"BMX","BMX_jumponR",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"BMX","BMX_Left",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"BMX","BMX_pedal",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"BMX","BMX_Ride",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"BMX","BMX_Right",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"BMX","BMX_sprint",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 18) {
        ApplyAnimation(playerid,"BMX","BMX_still",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animbikedbz(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbikedbz [1-4]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 4) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbikedbz [1-4]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"BIKE_DBZ","Pass_Driveby_BWD",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"BIKE_DBZ","Pass_Driveby_FWD",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"BIKE_DBZ","Pass_Driveby_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"BIKE_DBZ","Pass_Driveby_RHS",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animchase(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animchase [1-25]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 25) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animchase [1-25]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"MD_CHASE","Carhit_Hangon",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"MD_CHASE","Carhit_Tumble",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"MD_CHASE","donutdrop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"MD_CHASE","Fen_Choppa_L1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"MD_CHASE","Fen_Choppa_L2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"MD_CHASE","Fen_Choppa_L3",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"MD_CHASE","Fen_Choppa_R1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"MD_CHASE","Fen_Choppa_R2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"MD_CHASE","Fen_Choppa_R3",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"MD_CHASE","Hangon_Stun_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"MD_CHASE","Hangon_Stun_Turn",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_2_HANG",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Jmp_BL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Jmp_F",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Lnd_BL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Lnd_Die_BL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Lnd_Die_F",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 18) {
        ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Lnd_F",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 19) {
        ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Lnd_Roll",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 20) {
        ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Lnd_Roll_F",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 21) {
        ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Punch",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 22) {
        ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Punch_F",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 23) {
        ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Shot_F",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 24) {
        ApplyAnimation(playerid,"MD_CHASE","MD_HANG_Lnd_Roll",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 25) {
        ApplyAnimation(playerid,"MD_CHASE","MD_HANG_Loop",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animbox(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbox [1-10]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 10) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbox [1-10]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"BOX","boxhipin",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"BOX","boxhipup",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"BOX","boxshdwn",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"BOX","boxshup",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"BOX","bxhipwlk",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"BOX","bxhwlki",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"BOX","bxshwlk",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"BOX","bxshwlki",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"BOX","bxwlko",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"BOX","catch_box",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animbomber(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbomber [1-6]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 6) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbomber [1-6]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"BOMBER","BOM_Plant_2Idle",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_In",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_Out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"BOMBER","BOM_Plant_In",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"BOMBER","BOM_Plant_Loop",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animbsp(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbsp [1-41]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 41) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbsp [1-41]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_def_jump_shot",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_def_stepL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_def_stepR",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk_Gli",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk_Gli_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk_Lnch",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk_Lnch_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk_Lnd",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_idle",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_idle2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_idle2_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_idleloop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_idleloop_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_idle_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 18) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Cancel",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 19) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Cancel_0",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 20) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_End",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 21) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 22) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 23) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_Net_Dnk_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 24) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_pickup",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 25) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_pickup_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 26) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_react_miss",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 27) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_react_score",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 28) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_run",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 29) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_run_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 30) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_SkidStop_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 31) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_SkidStop_L_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 32) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_SkidStop_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 33) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_SkidStop_R_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed ==  34) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_walk",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 35) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_WalkStop_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 36) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_WalkStop_L_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 37) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_WalkStop_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 38) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_WalkStop_R_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 39) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_walk_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 40) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_walk_start",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 41) {
        ApplyAnimation(playerid,"BSKTBALL","BBALL_walk_start_O",4.1,0,1,1,1,1);
    }
    return 1;
}

CMD:animcamera(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animcamera [1-14]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 14) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animcamera [1-14]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"CAMERA","camcrch_cmon",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"CAMERA","camcrch_idleloop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"CAMERA","camcrch_stay",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"CAMERA","camcrch_to_camstnd",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"CAMERA","camstnd_cmon",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"CAMERA","camstnd_idleloop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"CAMERA","camstnd_lkabt",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"CAMERA","camstnd_to_camcrch",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"CAMERA","piccrch_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"CAMERA","piccrch_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"CAMERA","piccrch_take",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"CAMERA","picstnd_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"CAMERA","picstnd_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"CAMERA","picstnd_take",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animgym(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animgym [1-24]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 24) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animgym [1-24]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"GYMNASIUM","GYMshadowbox",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"GYMNASIUM","gym_bike_celebrate",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"GYMNASIUM","gym_bike_fast",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"GYMNASIUM","gym_bike_faster",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"GYMNASIUM","gym_bike_getoff",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"GYMNASIUM","gym_bike_geton",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"GYMNASIUM","gym_bike_pedal",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"GYMNASIUM","gym_bike_slow",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"GYMNASIUM","gym_bike_still",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"GYMNASIUM","gym_jog_falloff",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"GYMNASIUM","gym_shadowbox",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"GYMNASIUM","gym_tread_celebrate",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"GYMNASIUM","gym_tread_falloff",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"GYMNASIUM","gym_tread_getoff",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"GYMNASIUM","gym_tread_geton",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"GYMNASIUM","gym_tread_jog",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"GYMNASIUM","gym_tread_sprint",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 18) {
        ApplyAnimation(playerid,"GYMNASIUM","gym_tread_tired",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 19) {
        ApplyAnimation(playerid,"GYMNASIUM","gym_tread_walk",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 20) {
        ApplyAnimation(playerid,"GYMNASIUM","gym_walk_falloff",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 21) {
        ApplyAnimation(playerid,"GYMNASIUM","Pedals_fast",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 22) {
        ApplyAnimation(playerid,"GYMNASIUM","Pedals_med",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 23) {
        ApplyAnimation(playerid,"GYMNASIUM","Pedals_slow",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 24) {
        ApplyAnimation(playerid,"GYMNASIUM","Pedals_still",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animpara(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animpara [1-22]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 22) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animpara [1-22]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"PARACHUTE","FALL_skyDive",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"PARACHUTE","FALL_SkyDive_Accel",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"PARACHUTE","FALL_skyDive_DIE",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"PARACHUTE","FALL_SkyDive_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"PARACHUTE","FALL_SkyDive_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"PARACHUTE","PARA_decel",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"PARACHUTE","PARA_decel_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"PARACHUTE","PARA_float",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"PARACHUTE","PARA_float_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"PARACHUTE","PARA_Land",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"PARACHUTE","PARA_Land_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"PARACHUTE","PARA_Land_Water",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"PARACHUTE","PARA_Land_Water_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"PARACHUTE","PARA_open",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"PARACHUTE","PARA_open_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"PARACHUTE","PARA_Rip_Land_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"PARACHUTE","PARA_Rip_Loop_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 18) {
        ApplyAnimation(playerid,"PARACHUTE","PARA_Rip_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 19) {
        ApplyAnimation(playerid,"PARACHUTE","PARA_steerL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 20) {
        ApplyAnimation(playerid,"PARACHUTE","PARA_steerL_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 21) {
        ApplyAnimation(playerid,"PARACHUTE","PARA_steerR",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 22) {
        ApplyAnimation(playerid,"PARACHUTE","PARA_steerR_O",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animgangs(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animgangs [1-22]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 22) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animgangs [1-22]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"GANGS","DEALER_DEAL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"GANGS","DEALER_IDLE",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"GANGS","drnkbr_prtl",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"GANGS","drnkbr_prtl_F",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"GANGS","DRUGS_BUY",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"GANGS","hndshkaa",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"GANGS","hndshkba",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"GANGS","hndshkca",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"GANGS","hndshkcb",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"GANGS","hndshkda",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"GANGS","hndshkea",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"GANGS","hndshkfa",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"GANGS","Invite_No",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"GANGS","Invite_Yes",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"GANGS","leanIDLE",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"GANGS","leanIN",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 18) {
        ApplyAnimation(playerid,"GANGS","leanOUT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 19) {
        ApplyAnimation(playerid,"GANGS","prtial_gngtlkA",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 20) {
        ApplyAnimation(playerid,"GANGS","prtial_gngtlkB",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 21) {
        ApplyAnimation(playerid,"GANGS","prtial_gngtlkCt",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 22) {
        ApplyAnimation(playerid,"GANGS","prtial_gngtlkD",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 23) {
        ApplyAnimation(playerid,"GANGS","prtial_gngtlkE",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 24) {
        ApplyAnimation(playerid,"GANGS","prtial_gngtlkF",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 25) {
        ApplyAnimation(playerid,"GANGS","prtial_gngtlkG",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 26) {
        ApplyAnimation(playerid,"GANGS","prtial_gngtlkH",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 27) {
        ApplyAnimation(playerid,"GANGS","prtial_hndshk_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 28) {
        ApplyAnimation(playerid,"GANGS","prtial_hndshk_biz_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 29) {
        ApplyAnimation(playerid,"GANGS","shake_cara",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 30) {
        ApplyAnimation(playerid,"GANGS","shake_carK",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 31) {
        ApplyAnimation(playerid,"GANGS","shake_carSH",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 32) {
        ApplyAnimation(playerid,"GANGS","smkcig_prtl",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 33) {
        ApplyAnimation(playerid,"GANGS","smkcig_prtl_F",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animlowrider(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animlowrider [1-39]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 39) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animlowrider [1-39]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"LOWRIDER","F_smklean_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"LOWRIDER","lrgirl_bdbnce",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"LOWRIDER","lrgirl_hair",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"LOWRIDER","lrgirl_hurry",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"LOWRIDER","lrgirl_idleloop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"LOWRIDER","lrgirl_idle_to_l0",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"LOWRIDER","lrgirl_l0_bnce",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"LOWRIDER","lrgirl_l0_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"LOWRIDER","lrgirl_l0_to_l1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"LOWRIDER","lrgirl_l12_to_l0",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"LOWRIDER","lrgirl_l1_bnce",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"LOWRIDER","lrgirl_l1_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"LOWRIDER","lrgirl_l1_to_l2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"LOWRIDER","lrgirl_l2_bnce",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"LOWRIDER","lrgirl_l2_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"LOWRIDER","lrgirl_l2_to_l3",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"LOWRIDER","lrgirl_l345_to_l1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 18) {
        ApplyAnimation(playerid,"LOWRIDER","lrgirl_l3_bnce",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 19) {
        ApplyAnimation(playerid,"LOWRIDER","lrgirl_l3_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 20) {
        ApplyAnimation(playerid,"LOWRIDER","lrgirl_l3_to_l4",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 21) {
        ApplyAnimation(playerid,"LOWRIDER","lrgirl_l4_bnce",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 22) {
        ApplyAnimation(playerid,"LOWRIDER","lrgirl_l4_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 23) {
        ApplyAnimation(playerid,"LOWRIDER","lrgirl_l4_to_l5",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 24) {
        ApplyAnimation(playerid,"LOWRIDER","lrgirl_l5_bnce",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 25) {
        ApplyAnimation(playerid,"LOWRIDER","lrgirl_l5_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 26) {
        ApplyAnimation(playerid,"LOWRIDER","M_smklean_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 27) {
        ApplyAnimation(playerid,"LOWRIDER","M_smkstnd_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 28) {
        ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkB",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 29) {
        ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkC",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 30) {
        ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkD",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 31) {
        ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkE",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 32) {
        ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkF",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 33) {
        ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkG",4.1,0,1,1,1,1);
    }
    else if(animationplayed ==  34) {
        ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkH",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 35) {
        ApplyAnimation(playerid,"LOWRIDER","RAP_A_Loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 36) {
        ApplyAnimation(playerid,"LOWRIDER","RAP_B_Loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 37) {
        ApplyAnimation(playerid,"LOWRIDER","RAP_C_Loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 38) {
        ApplyAnimation(playerid,"LOWRIDER","Sit_relaxed",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 39) {
        ApplyAnimation(playerid,"LOWRIDER","Tap_hand",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animlookers(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animlookers [1-25]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 29) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animlookers [1-25]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"ON_LOOKERS","lkaround_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"ON_LOOKERS","lkaround_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"ON_LOOKERS","lkaround_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"ON_LOOKERS","lkup_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"ON_LOOKERS","lkup_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"ON_LOOKERS","lkup_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"ON_LOOKERS","lkup_point",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"ON_LOOKERS","panic_cower",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"ON_LOOKERS","panic_hide",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"ON_LOOKERS","panic_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"ON_LOOKERS","panic_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"ON_LOOKERS","panic_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"ON_LOOKERS","panic_point",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"ON_LOOKERS","panic_shout",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"ON_LOOKERS","Pointup_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"ON_LOOKERS","Pointup_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"ON_LOOKERS","Pointup_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 18) {
        ApplyAnimation(playerid,"ON_LOOKERS","Pointup_shout",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 19) {
        ApplyAnimation(playerid,"ON_LOOKERS","point_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 20) {
        ApplyAnimation(playerid,"ON_LOOKERS","point_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 21) {
        ApplyAnimation(playerid,"ON_LOOKERS","point_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 22) {
        ApplyAnimation(playerid,"ON_LOOKERS","shout_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 23) {
        ApplyAnimation(playerid,"ON_LOOKERS","shout_02",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 24) {
        ApplyAnimation(playerid,"ON_LOOKERS","shout_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 25) {
        ApplyAnimation(playerid,"ON_LOOKERS","shout_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 26) {
        ApplyAnimation(playerid,"ON_LOOKERS","shout_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 27) {
        ApplyAnimation(playerid,"ON_LOOKERS","wave_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 28) {
        ApplyAnimation(playerid,"ON_LOOKERS","wave_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 25) {
        ApplyAnimation(playerid,"ON_LOOKERS","wave_out",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animcarchat(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animcarchat [1-20]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 20) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animcarchat [1-20]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"CAR_CHAT","carfone_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"CAR_CHAT","carfone_loopA",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"CAR_CHAT","carfone_loopA_to_B",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"CAR_CHAT","carfone_loopB",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"CAR_CHAT","carfone_loopB_to_A",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"CAR_CHAT","carfone_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc1_BR",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc1_FL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc1_FR",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc2_FL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc3_BR",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc3_FL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc3_FR",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc4_BL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc4_BR",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc4_FL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc4_FR",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 18) {
        ApplyAnimation(playerid,"CAR_CHAT","car_talkm_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 19) {
        ApplyAnimation(playerid,"CAR_CHAT","car_talkm_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 20) {
        ApplyAnimation(playerid,"CAR_CHAT","car_talkm_out",4.1,0,1,1,1,1);
    }
    return 1;
}

CMD:animcasino(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animcasino [1-23]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 23) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animcasino [1-23]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"CASINO","cards_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"CASINO","cards_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"CASINO","cards_lose",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"CASINO","cards_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"CASINO","cards_pick_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"CASINO","cards_pick_02",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"CASINO","cards_raise",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"CASINO","cards_win",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"CASINO","manwinb",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"CASINO","manwind",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"CASINO","Roulette_bet",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"CASINO","Roulette_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"CASINO","Roulette_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"CASINO","Roulette_lose",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"CASINO","Roulette_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"CASINO","Roulette_win",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"CASINO","Slot_bet_02",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 18) {
        ApplyAnimation(playerid,"CASINO","Slot_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 19) {
        ApplyAnimation(playerid,"CASINO","Slot_lose_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 20) {
        ApplyAnimation(playerid,"CASINO","Slot_Plyr",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 21) {
        ApplyAnimation(playerid,"CASINO","Slot_wait",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 22) {
        ApplyAnimation(playerid,"CASINO","Slot_win_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 23) {
        ApplyAnimation(playerid,"CASINO","wof",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animbuddy(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbuddy [1-5]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 5) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbuddy [1-5]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"BUDDY","buddy_crouchfire",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"BUDDY","buddy_crouchreload",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"BUDDY","buddy_fire",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"BUDDY","buddy_fire_poor",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"BUDDY","buddy_reload",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animbus(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbus [1-9]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 9) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbus [1-9]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"BUS","BUS_close",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"BUS","BUS_getin_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"BUS","BUS_getin_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"BUS","BUS_getout_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"BUS","BUS_getout_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"BUS","BUS_jacked_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"BUS","BUS_open",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"BUS","BUS_open_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"BUS","BUS_pullout_LHS",4.1,0,1,1,1,1);
    }
    return 1;
}

CMD:animcar(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animcar [1-11]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 11) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animcar [1-11]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"CAR","Fixn_Car_Loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"CAR","Fixn_Car_Out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"CAR","flag_drop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"CAR","Sit_relaxed",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"CAR","Tap_hand",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"CAR","Tyd2car_bump",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"CAR","Tyd2car_high",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"CAR","Tyd2car_low",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"CAR","Tyd2car_med",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"CAR","Tyd2car_TurnL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"CAR","Tyd2car_TurnR",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animcarry(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animcarry [1-7]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 7) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animcarry [1-7]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"CARRY","crry_prtial",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"CARRY","liftup",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"CARRY","liftup05",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"CARRY","liftup105",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"CARRY","putdwn",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"CARRY","putdwn05",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"CARRY","putdwn105",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animintshop(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animintshop [1-8]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 8) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animintshop [1-8]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"INT_SHOP","shop_cashier",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"INT_SHOP","shop_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"INT_SHOP","shop_lookA",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"INT_SHOP","shop_lookB",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"INT_SHOP","shop_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"INT_SHOP","shop_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"INT_SHOP","shop_pay",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"INT_SHOP","shop_shelf",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animjst(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animjst [1-4]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 4) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animjst [1-4]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"JST_BUISNESS","girl_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"JST_BUISNESS","girl_02",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"JST_BUISNESS","player_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"JST_BUISNESS","smoke_01",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animkart(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animkart [1-4]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 4) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animkart [1-4]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"KART","KART_getin_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"KART","KART_getin_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"KART","KART_getout_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"KART","KART_getout_RHS",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animkissing(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animkissing [1-14]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 14) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animkissing [1-14]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"KISSING","BD_GF_Wave",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"KISSING","gfwave2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"KISSING","GF_CarArgue_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"KISSING","GF_CarArgue_02",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"KISSING","GF_CarSpot",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"KISSING","GF_StreetArgue_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"KISSING","GF_StreetArgue_02",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"KISSING","gift_give",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"KISSING","Grlfrd_Kiss_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"KISSING","Grlfrd_Kiss_02",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"KISSING","Grlfrd_Kiss_03",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"KISSING","Playa_Kiss_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"KISSING","Playa_Kiss_02",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"KISSING","Playa_Kiss_03",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animknife(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animknife [1-14]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 14) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animknife [1-14]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Damage",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Die",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"KNIFE","KILL_Knife_Player",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"KNIFE","KILL_Partial",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"KNIFE","knife_2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"KNIFE","knife_3",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"KNIFE","knife_4",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"KNIFE","Knife_G",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"KNIFE","knife_hit_1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"KNIFE","knife_hit_2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"KNIFE","knife_IDLE",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"KNIFE","knife_hit_3",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"KNIFE","knife_part",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"KNIFE","WEAPON_knifeidle",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animlapdan(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animlapdan [1-6]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 6) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animlapdan [1-6]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"LAPDAN1","LAPDAN_D",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"LAPDAN1","LAPDAN_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"LAPDAN2","LAPDAN_D",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"LAPDAN2","LAPDAN_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"LAPDAN3","LAPDAN_D",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"LAPDAN3","LAPDAN_P",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animdend(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animdend [1-8]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 8) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animdend [1-8]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"MD_END","END_SC1_PLY",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"MD_END","END_SC1_RYD",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"MD_END","END_SC1_SMO",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"MD_END","END_SC1_SWE",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"MD_END","END_SC2_PLY",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"MD_END","END_SC2_RYD",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"MD_END","END_SC2_SMO",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"MD_END","END_SC2_SWE",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animmedic(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animmedic [1]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 1) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animmedic [1]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"MEDIC","CPR",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animmtb(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animmtb [1-18]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 18) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animmtb [1-18]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"MTB","MTB_back",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"MTB","MTB_bunnyhop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"MTB","MTB_drivebyFT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"MTB","MTB_driveby_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"MTB","MTB_driveby_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"MTB","MTB_fwd",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"MTB","MTB_getoffBACK",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"MTB","MTB_pushes",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"MTB","MTB_getoffLHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"MTB","MTB_getoffRHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"MTB","MTB_jumponL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"MTB","MTB_jumponR",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"MTB","MTB_Left",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"MTB","MTB_pedal",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"MTB","MTB_Ride",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"MTB","MTB_Right",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"MTB","MTB_sprint",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 18) {
        ApplyAnimation(playerid,"MTB","MTB_still",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animmusc(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animmusc [1-17]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 17) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animmusc [1-17]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"MUSCULAR","MscleWalkst_armed",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"MUSCULAR","MscleWalkst_Csaw",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"MUSCULAR","Mscle_rckt_run",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"MUSCULAR","Mscle_rckt_walkst",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"MUSCULAR","Mscle_run_Csaw",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"MUSCULAR","MuscleIdle",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"MUSCULAR","MuscleIdle_armed",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"MUSCULAR","MuscleIdle_Csaw",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"MUSCULAR","MuscleIdle_rocket",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"MUSCULAR","MuscleRun",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"MUSCULAR","MuscleRun_armed",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"MUSCULAR","MuscleSprint",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"MUSCULAR","MuscleWalk",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"MUSCULAR","MuscleWalkstart",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"MUSCULAR","MuscleWalk_armed",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"MUSCULAR","Musclewalk_Csaw",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"MUSCULAR","Musclewalk_rocket",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animotb(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animotb [1-11]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 11) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animotb [1-11]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"OTB","betslp_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"OTB","betslp_lkabt",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"OTB","betslp_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"OTB","betslp_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"OTB","betslp_tnk",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"OTB","wtchrace_cmon",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"OTB","wtchrace_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"OTB","wtchrace_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"OTB","wtchrace_lose",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"OTB","wtchrace_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"OTB","wtchrace_win",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animnevada(playerid, params[])
{
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
        new animationplayed;
        if(sscanf(params, "d", animationplayed)) {
            SendClientMessage(playerid,COLOR_GRAD1,"USE: /animnevada [1-2]");
            return 1;
        }

        if(animationplayed < 1 || animationplayed > 2) {
            SendClientMessage(playerid,COLOR_GRAD1,"USE: /animnevada [1-2]");
            return 1;
        }
        if(animationplayed == 1) {
            ApplyAnimation(playerid,"NEVADA","NEVADA_getin",4.1,0,1,1,1,1);
        }
        else if(animationplayed == 2) {
            ApplyAnimation(playerid,"NEVADA","NEVADA_getout",4.1,0,1,1,1,1);
        }
        return 1;
    }
    return true;
}


CMD:animpark(playerid, params[])
{
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
        new animationplayed;
        if(sscanf(params, "d", animationplayed)) {
            SendClientMessage(playerid,COLOR_GRAD1,"USE: /animpark [1-3]");
            return 1;
        }

        if(animationplayed < 1 || animationplayed > 3) {
            SendClientMessage(playerid,COLOR_GRAD1,"USE: /animpark [1-3]");
            return 1;
        }
        if(animationplayed == 1) {
            ApplyAnimation(playerid,"PARK","Tai_Chi_in",4.1,0,1,1,1,1);
        }
        else if(animationplayed == 2) {
            ApplyAnimation(playerid,"PARK","Tai_Chi_Loop",4.1,0,1,1,1,1);
        }
        else if(animationplayed == 3) {
            ApplyAnimation(playerid,"PARK","Tai_Chi_Out",4.1,0,1,1,1,1);
        }
        return 1;
    }
    return true;
}


CMD:animpaulnmac(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animpaulnmac [1-12]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 12) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animpaulnmac [1-12]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"PAULNMAC","Piss_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"PAULNMAC","Piss_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"PAULNMAC","Piss_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"PAULNMAC","PnM_Argue1_A",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"PAULNMAC","PnM_Argue1_B",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"PAULNMAC","PnM_Argue2_A",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"PAULNMAC","PnM_Argue2_B",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"PAULNMAC","PnM_Loop_A",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"PAULNMAC","PnM_Loop_B",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"PAULNMAC","wank_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"PAULNMAC","wank_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"PAULNMAC","wank_out",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animsaw(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animsaw [1-10]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 12) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animsaw [1-10]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"CHAINSAW","CSAW_1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"CHAINSAW","CSAW_2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"CHAINSAW","CSAW_3",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"CHAINSAW","CSAW_G",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"CHAINSAW","CSAW_Hit_1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"CHAINSAW","CSAW_Hit_2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"CHAINSAW","CSAW_Hit_3",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"CHAINSAW","IDLE_csaw",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"CHAINSAW","WEAPON_csawlo",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animchoppa(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animchoppa [1-18]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 18) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animchoppa [1-18]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"CHOPPA","CHOPPA_back",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"CHOPPA","CHOPPA_bunnyhop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"CHOPPA","CHOPPA_drivebyFT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"CHOPPA","CHOPPA_driveby_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"CHOPPA","CHOPPA_driveby_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"CHOPPA","CHOPPA_fwd",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"CHOPPA","CHOPPA_getoffBACK",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"CHOPPA","CHOPPA_getoffLHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"CHOPPA","CHOPPA_getoffRHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"CHOPPA","CHOPPA_jumponL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"CHOPPA","CHOPPA_jumponR",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"CHOPPA","CHOPPA_Left",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"CHOPPA","CHOPPA_pedal",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"CHOPPA","CHOPPA_Pushes",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"CHOPPA","CHOPPA_ride",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"CHOPPA","CHOPPA_Right",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"CHOPPA","CHOPPA_sprint",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 18) {
        ApplyAnimation(playerid,"CHOPPA","CHOPPA_Still",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animclothes(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animclothes [1-13]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 13) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animclothes [1-13]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"CLOTHES","CLO_Buy",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"CLOTHES","CLO_In",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"CLOTHES","CLO_Out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Hat",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"CLOTHES","CLO_Pose_In",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"CLOTHES","CLO_Pose_In_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Legs",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Out_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Shoes",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Torso",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Watch",4.1,0,1,1,1,1);
    }
    return 1;
}

CMD:animcoach(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animcoach [1-6]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 6) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animcoach [1-6]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"COACH","COACH_inL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"COACH","COACH_inR",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"COACH","COACH_opnL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"COACH","COACH_opnR",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"COACH","COACH_outL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"COACH","COACH_outR",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animcolt(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animcolt [1-7]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 7) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animcolt [1-7]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"COLT45","2guns_crouchfire",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"COLT45","colt45_crouchfire",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"COLT45","colt45_crouchreload",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"COLT45","colt45_fire",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"COLT45","colt45_fire_2hands",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"COLT45","colt45_reload",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"COLT45","sawnoff_reload",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animcopa(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animcopa [1-12]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 12) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animcopa[1-12]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"COP_AMBIENT","Copbrowse_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"COP_AMBIENT","Copbrowse_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"COP_AMBIENT","Copbrowse_nod",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"COP_AMBIENT","Copbrowse_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"COP_AMBIENT","Copbrowse_shake",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"COP_AMBIENT","Coplook_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"COP_AMBIENT","Coplook_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"COP_AMBIENT","Coplook_nod",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"COP_AMBIENT","Coplook_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"COP_AMBIENT","Coplook_shake",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"COP_AMBIENT","Coplook_think",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animcod(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animcod [1-4]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 4) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animcod [1-4]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"COP_DVBYZ","COP_Dvby_B",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"COP_DVBYZ","COP_Dvby_FT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"COP_DVBYZ","COP_Dvby_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"COP_DVBYZ","COP_Dvby_R",4.1,0,1,1,1,1);
    }
    return 1;
}

CMD:animcrack(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animcrack[1-9]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 9) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animcrack [1-9]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"CRACK","Bbalbat_Idle_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"CRACK","Bbalbat_Idle_02",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"CRACK","crckdeth1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"CRACK","crckdeth2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"CRACK","crckdeth3",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"CRACK","crckdeth4",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"CRACK","crckidle1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"CRACK","crckidle2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"CRACK","crckidle3",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animsnm(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animsnm[1-8]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 2424) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animsnm[1-8]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"SNM","SPANKING_IDLEW",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"SNM","SPANKING_IDLEP",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"SNM","SPANKINGW",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"SNM","SPANKINGP",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"SNM","SPANKEDW",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"SNM","SPANKEDP",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"SNM","SPANKING_ENDW",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"SNM","SPANKING_ENDP",4.1,0,1,1,1,1);
    }
    if(animationplayed > 8) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animsnm[1-8]");
    }
    if(animationplayed == 2424) { }
    return 1;
}

CMD:animcrib(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animcrib [1-5]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 5) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animcrib [1-5]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"CRIB","CRIB_Console_Loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"CRIB","CRIB_Use_Switch",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"CRIB","PED_Console_Loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"CRIB","PED_Console_Loose",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"CRIB","PED_Console_Win",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animjump(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animjump [1-5]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 5) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animjump [1-5]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"DAM_JUMP","DAM_Dive_Loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"DAM_JUMP","DAM_Land",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"DAM_JUMP","DAM_Launch",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"DAM_JUMP","Jump_Roll",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"DAM_JUMP","SF_JumpWall",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animdance(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animdance [1-13]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 13) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animdance [1-13]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"DANCING","bd_clap",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"DANCING","bd_clap1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"DANCING","dance_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"DANCING","DAN_Down_A",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"DANCING","DAN_Left_A",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"DANCING","DAN_Loop_A",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"DANCING","DAN_Right_A",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"DANCING","DAN_Up_A",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"DANCING","dnce_M_a",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"DANCING","dnce_M_b",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"DANCING","dnce_M_c",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"DANCING","dnce_M_d",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"DANCING","dnce_M_e",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animblowjob(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animblowjob [1-12]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 13) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animblowjob [1-12]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_START_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_START_W",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_W",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_END_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_END_W",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_START_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_START_W",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_LOOP_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_LOOP_W",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_END_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_END_W",4.1,0,1,1,1,1);
    }
    return 1;
}

CMD:animdealer(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animdealer [1-7]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 7) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animdealer [1-7]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"DEALER","DEALER_DEAL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"DEALER","DEALER_IDLE",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"DEALER","DEALER_IDLE_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"DEALER","DEALER_IDLE_02",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"DEALER","DEALER_IDLE_03",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"DEALER","DRUGS_BUY",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"DEALER","shop_pay",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animdildo(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animdildo [1-9]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 9) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animdildo [1-9]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"DILDO","DILDO_1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"DILDO","DILDO_2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"DILDO","DILDO_3",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"DILDO","DILDO_block",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"DILDO","DILDO_G",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"DILDO","DILDO_Hit_1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"DILDO","DILDO_Hit_2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"DILDO","DILDO_Hit_3",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"DILDO","DILDO_IDLE",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animdodge(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animdodge [1-4]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 4) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animdodge [1-4]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"DODGE","Cover_Dive_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"DODGE","Cover_Dive_02",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"DODGE","Crushed",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"DODGE","Crush_Jump",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animdozer(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animdozer [1-9]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 9) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animdozer [1-9]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"DOZER","DOZER_Align_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"DOZER","DOZER_Align_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"DOZER","DOZER_getin_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"DOZER","DOZER_getin_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"DOZER","DOZER_getout_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"DOZER","DOZER_getout_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"DOZER","DOZER_Jacked_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"DOZER","DOZER_Jacked_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"DOZER","DOZER_pullout_LHS",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animdrivebys(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animdrivebys [1-8]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 8) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animdrivebys [1-8]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyLHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyLHS_Bwd",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyLHS_Fwd",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyRHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyRHS_Bwd",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyRHS_Fwd",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyTop_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyTop_RHS",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animfat(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animfat [1-17]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 17) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animfat [1-17]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"FAT","FatIdle",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 1) {
        ApplyAnimation(playerid,"FAT","FatIdle_armed",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"FAT","FatIdle_Csaw",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"FAT","FatIdle_Rocket",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"FAT","FatRun",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"FAT","FatRun_armed",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"FAT","FatRun_Csaw",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"FAT","FatRun_Rocket",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"FAT","FatSprint",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"FAT","FatWalk",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"FAT","FatWalkstart",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"FAT","FatWalkstart_Csaw",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"FAT","FatWalkSt_armed",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"FAT","FatWalkSt_Rocket",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"FAT","FatWalk_armed",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"FAT","FatWalk_Csaw",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"FAT","FatWalk_Rocket",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"FAT","IDLE_tired",4.1,0,1,1,1,1);
    }
    return 1;
}

CMD:animfightb(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animfightb [1-10]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 10) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animfightb [1-10]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"FIGHT_B","FightB_1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"FIGHT_B","FightB_2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"FIGHT_B","FightB_3",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"FIGHT_B","FightB_block",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"FIGHT_B","FightB_G",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"FIGHT_B","FightB_IDLE",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"FIGHT_B","FightB_M",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"FIGHT_B","HitB_1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"FIGHT_B","HitB_2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"FIGHT_B","HitB_3",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animfightc(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animfightc [1-12]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 12) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animfightc [1-12]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"FIGHT_C","FightC_1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"FIGHT_C","FightC_2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"FIGHT_C","FightC_3",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"FIGHT_C","FightC_block",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"FIGHT_C","FightC_blocking",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"FIGHT_C","FightC_G",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"FIGHT_C","FightC_IDLE",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"FIGHT_C","FightC_M",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"FIGHT_C","FightC_Spar",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"FIGHT_C","HitC_1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"FIGHT_C","HitC_2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"FIGHT_C","HitC_3",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animfightd(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animfightd [1-10]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 10) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animfightd [1-10]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"FIGHT_D","FightD_1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"FIGHT_D","FightD_2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"FIGHT_D","FightD_3",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"FIGHT_D","FightD_block",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"FIGHT_D","FightD_G",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"FIGHT_D","FightD_IDLE",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"FIGHT_D","FightD_M",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"FIGHT_D","HitD_1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"FIGHT_D","HitD_2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"FIGHT_D","HitD_3",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animfighte(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animfighte [1-4]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 4) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animfighte [1-4]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"FIGHT_E","FightKick",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"FIGHT_E","FightKick_B",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"FIGHT_E","Hit_fightkick",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"FIGHT_E","Hit_fightkick_B",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animfinale(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animfinale [1-15]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 15) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animfinale [1-15]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"FINALE","FIN_Climb_In",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 1) {
        ApplyAnimation(playerid,"FINALE","FIN_Cop1_ClimbOut2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"FINALE","FIN_Cop1_Loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"FINALE","FIN_Cop1_Stomp",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"FINALE","FIN_Hang_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"FINALE","FIN_Hang_Loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"FINALE","FIN_Hang_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"FINALE","FIN_Hang_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"FINALE","FIN_Jump_On",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"FINALE","FIN_Land_Car",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"FINALE","FIN_Land_Die",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"FINALE","FIN_LegsUp",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"FINALE","FIN_LegsUp_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"FINALE","FIN_LegsUp_Loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"FINALE","FIN_LegsUp_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"FINALE","FIN_Let_Go",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animfinale2(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animfinale2 [1-8]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 8) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animfinale2 [1-8]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"FINALE2","FIN_Cop1_ClimbOut",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"FINALE2","FIN_Cop1_Fall",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"FINALE2","FIN_Cop1_Loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"FINALE2","FIN_Cop1_Shot",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"FINALE2","FIN_Cop1_Swing",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"FINALE2","FIN_Cop2_ClimbOut",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"FINALE2","FIN_Switch_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"FINALE2","FIN_Switch_S",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animflamef(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animflamef [1-1]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 1) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animflamef [1-1]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"FLAME","FLAME_fire",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animflowers(playerid, params[])
{
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
        new animationplayed;
        if(sscanf(params, "d", animationplayed)) {
            SendClientMessage(playerid,COLOR_GRAD1,"USE: /animflowers [1-3]");
            return 1;
        }

        if(animationplayed < 1 || animationplayed > 3) {
            SendClientMessage(playerid,COLOR_GRAD1,"USE: /animflowers [1-3]");
            return 1;
        }
        if(animationplayed == 1) {
            ApplyAnimation(playerid,"Flowers","Flower_attack",4.1,0,1,1,1,1);
        }
        else if(animationplayed == 2) {
            ApplyAnimation(playerid,"Flowers","Flower_attack_M",4.1,0,1,1,1,1);
        }
        else if(animationplayed == 3) {
            ApplyAnimation(playerid,"Flowers","Flower_Hit",4.1,0,1,1,1,1);
        }
        return 1;
    }
    return true;
}


CMD:animghands(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animghands [1-20]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 20) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animghands [1-20]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"GHANDS","gsign1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"GHANDS","gsign1LH",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"GHANDS","gsign2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"GHANDS","gsign2LH",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"GHANDS","gsign3",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"GHANDS","gsign3LH",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"GHANDS","gsign4",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"GHANDS","gsign4LH",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"GHANDS","gsign5",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"GHANDS","gsign5LH",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"GHANDS","LHGsign1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"GHANDS","LHGsign2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"GHANDS","LHGsign3",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"GHANDS","LHGsign4",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"GHANDS","LHGsign5",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"GHANDS","RHGsign1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"GHANDS","RHGsign2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 18) {
        ApplyAnimation(playerid,"GHANDS","RHGsign3",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 19) {
        ApplyAnimation(playerid,"GHANDS","RHGsign4",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 20) {
        ApplyAnimation(playerid,"GHANDS","RHGsign5",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animfw(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animfw [1-9]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 9) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animfw [1-9]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"Freeweights","gym_barbell",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"Freeweights","gym_free_A",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"Freeweights","gym_free_B",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"Freeweights","gym_free_celebrate",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"Freeweights","gym_free_down",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"Freeweights","gym_free_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"Freeweights","gym_free_pickup",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"Freeweights","gym_free_putdown",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"Freeweights","gym_free_up_smooth",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animghetto(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animghetto [1-7]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 7) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animghetto [1-7]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"GHETTO_DB","GDB_Car2_PLY",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"GHETTO_DB","GDB_Car2_SMO",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"GHETTO_DB","GDB_Car2_SWE",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"GHETTO_DB","GDB_Car_PLY",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"GHETTO_DB","GDB_Car_RYD",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"GHETTO_DB","GDB_Car_SMO",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"GHETTO_DB","GDB_Car_SWE",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animgog(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animgog [1-1]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 1) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animgog [1-1]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"goggles","goggles_put_on",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animgraffity(playerid, params[])
{
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
        new animationplayed;
        if(sscanf(params, "d", animationplayed)) {
            SendClientMessage(playerid,COLOR_GRAD1,"USE: /animgraffity [1-2]");
            return 1;
        }

        if(animationplayed < 1 || animationplayed > 2) {
            SendClientMessage(playerid,COLOR_GRAD1,"USE: /animgraffity [1-2]");
            return 1;
        }
        if(animationplayed == 1) {
            ApplyAnimation(playerid,"GRAFFITI","graffiti_Chkout",4.1,0,1,1,1,1);
        }
        else if(animationplayed == 2) {
            ApplyAnimation(playerid,"GRAFFITI","spraycan_fire",4.1,0,1,1,1,1);
        }
        return 1;
    }
    return true;
}


CMD:animgreya(playerid, params[])
{
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
        new animationplayed;
        if(sscanf(params, "d", animationplayed)) {
            SendClientMessage(playerid,COLOR_GRAD1,"USE: /animgreya [1-3]");
            return 1;
        }

        if(animationplayed < 1 || animationplayed > 3) {
            SendClientMessage(playerid,COLOR_GRAD1,"USE: /animgreya [1-3]");
            return 1;
        }
        if(animationplayed == 1) {
            ApplyAnimation(playerid,"GRAVEYARD","mrnF_loop",4.1,0,1,1,1,1);
        }
        else if(animationplayed == 2) {
            ApplyAnimation(playerid,"GRAVEYARD","mrnM_loop",4.1,0,1,1,1,1);
        }
        else if(animationplayed == 3) {
            ApplyAnimation(playerid,"GRAVEYARD","prst_loopa",4.1,0,1,1,1,1);
        }
        return 1;
    }
    return true;
}


CMD:animgren(playerid, params[])
{
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
        new animationplayed;
        if(sscanf(params, "d", animationplayed)) {
            SendClientMessage(playerid,COLOR_GRAD1,"USE: /animgren [1-3]");
            return 1;
        }

        if(animationplayed < 1 || animationplayed > 3) {
            SendClientMessage(playerid,COLOR_GRAD1,"USE: /animgren [1-3]");
            return 1;
        }
        if(animationplayed == 1) {
            ApplyAnimation(playerid,"GRENADE","WEAPON_start_throw",4.1,0,1,1,1,1);
        }
        else if(animationplayed == 2) {
            ApplyAnimation(playerid,"GRENADE","WEAPON_throw",4.1,0,1,1,1,1);
        }
        else if(animationplayed == 3) {
            ApplyAnimation(playerid,"GRENADE","WEAPON_throwu",4.1,0,1,1,1,1);
        }
        return 1;
    }
    return true;
}


CMD:animhaircut(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animhaircut [1-13]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 13) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animhaircut [1-13]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"HAIRCUTS","BRB_Beard_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"HAIRCUTS","BRB_Buy",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"HAIRCUTS","BRB_Cut",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"HAIRCUTS","BRB_Cut_In",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"HAIRCUTS","BRB_Cut_Out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"HAIRCUTS","BRB_Hair_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"HAIRCUTS","BRB_Hair_02",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"HAIRCUTS","BRB_In",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"HAIRCUTS","BRB_Out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"HAIRCUTS","BRB_Loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"HAIRCUTS","BRB_Sit_In",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"HAIRCUTS","BRB_Sit_Loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"HAIRCUTS","BRB_Sit_Out",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animheist(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animheist [1-10]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 10) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animheist [1-10]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"HEIST9","CAS_G2_GasKO",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"HEIST9","swt_wllpk_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"HEIST9","swt_wllpk_L_back",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"HEIST9","swt_wllpk_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"HEIST9","swt_wllpk_R_back",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"HEIST9","swt_wllshoot_in_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"HEIST9","swt_wllshoot_in_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"HEIST9","swt_wllshoot_out_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"HEIST9","swt_wllshoot_out_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"HEIST9","USE:_SwipeCard",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animinthouse(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animinthouse [1-10]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 10) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animinthouse [1-10]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"INT_HOUSE","BED_In_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"INT_HOUSE","BED_Loop_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"INT_HOUSE","BED_Loop_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"INT_HOUSE","BED_Out_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"INT_HOUSE","BED_Out_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"INT_HOUSE","LOU_In",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"INT_HOUSE","LOU_Loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"INT_HOUSE","LOU_Out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"INT_HOUSE","wash_up",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animintoffice(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animintoffice [1-10]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 10) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animintoffice [1-10]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"INT_OFFICE","FF_Dam_Fwd",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_2Idle_180",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Bored_Loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Crash",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Drink",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Idle_Loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_In",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Read",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Type_Loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Watch",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animplayerdbf(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animplayerdbf [1-4]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 4) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animplayerdbf [1-4]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"PLAYER_DVBYS","Plyr_DrivebyBwd",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"PLAYER_DVBYS","Plyr_DrivebyFwd",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"PLAYER_DVBYS","Plyr_DrivebyLHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"PLAYER_DVBYS","Plyr_DrivebyRHS",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animplayidles(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animplayidles [1-5]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 5) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animplayidles [1-5]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"PLAYIDLES","shift",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"PLAYIDLES","shldr",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"PLAYIDLES","stretch",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"PLAYIDLES","strleg",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"PLAYIDLES","time",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animpolice(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animpolice [1-10]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 10) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animpolice [1-10]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"POLICE","CopTraf_Away",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"POLICE","CopTraf_Come",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"POLICE","CopTraf_Left",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"POLICE","CopTraf_Stop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"POLICE","COP_getoutcar_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"POLICE","Cop_move_FWD",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"POLICE","crm_drgbst_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"POLICE","Door_Kick",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"POLICE","plc_drgbst_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"POLICE","plc_drgbst_02",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animpool(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animpool [1-21]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 21) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animpool [1-21]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"POOL","POOL_ChalkCue",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"POOL","POOL_Idle_Stance",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"POOL","POOL_Long_Shot",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"POOL","POOL_Long_Shot_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"POOL","POOL_Long_Start",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"POOL","POOL_Long_Start_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"POOL","POOL_Med_Shot",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"POOL","POOL_Med_Shot_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"POOL","POOL_Med_Start",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"POOL","POOL_Med_Start_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"POOL","POOL_Place_White",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"POOL","POOL_Short_Shot",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"POOL","POOL_Short_Shot_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"POOL","POOL_Short_Start",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"POOL","POOL_Short_Start_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"POOL","POOL_Walk",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"POOL","POOL_Walk_Start",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 18) {
        ApplyAnimation(playerid,"POOL","POOL_XLong_Shot",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 19) {
        ApplyAnimation(playerid,"POOL","POOL_XLong_Shot_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 20) {
        ApplyAnimation(playerid,"POOL","POOL_XLong_Start",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 21) {
        ApplyAnimation(playerid,"POOL","POOL_XLong_Start_O",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animpoor(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animpoor [1-2]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 2) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animpoor [1-2]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"POOR","WINWASH_Start",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 1) {
        ApplyAnimation(playerid,"POOR","WINWASH_Wash2Beg",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animpython(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animpython [1-5]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 5) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animpython [1-5]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"PYTHON","python_crouchfire",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"PYTHON","python_crouchreload",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"PYTHON","python_fire",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"PYTHON","python_fire_poor",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"PYTHON","python_reload",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animquad(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animquad [1-17]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 17) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animquad [1-17]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"QUAD","QUAD_back",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"QUAD","QUAD_driveby_FT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"QUAD","QUAD_driveby_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"QUAD","QUAD_driveby_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"QUAD","QUAD_FWD",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"QUAD","QUAD_getoff_B",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"QUAD","QUAD_getoff_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"QUAD","QUAD_getoff_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"QUAD","QUAD_geton_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"QUAD","QUAD_geton_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"QUAD","QUAD_hit",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"QUAD","QUAD_kick",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"QUAD","QUAD_Left",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"QUAD","QUAD_passenger",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"QUAD","QUAD_reverse",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"QUAD","QUAD_ride",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"QUAD","QUAD_Right",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animquadbz(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animquadbz [1-4]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 4) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animquadbz [1-4]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"QUAD_DBZ","Pass_Driveby_BWD",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"QUAD_DBZ","Pass_Driveby_FWD",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"QUAD_DBZ","Pass_Driveby_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"QUAD_DBZ","Pass_Driveby_RHS",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animrapping(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animrapping [1-8]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 8) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animrapping [1-8]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"RAPPING","Laugh_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"RAPPING","RAP_A_IN",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"RAPPING","RAP_A_Loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"RAPPING","RAP_A_OUT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"RAPPING","RAP_B_IN",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"RAPPING","RAP_B_Loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"RAPPING","RAP_B_OUT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"RAPPING","RAP_C_Loop",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animrifle(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animrifle [1-5]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 5) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animrifle [1-5]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"RIFLE","RIFLE_crouchfire",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"RIFLE","RIFLE_crouchload",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"RIFLE","RIFLE_fire",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"RIFLE","RIFLE_fire_poor",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"RIFLE","RIFLE_load",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animriot(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animriot [1-7]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 7) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animriot [1-7]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"RIOT","RIOT_ANGRY",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"RIOT","RIOT_ANGRY_B",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"RIOT","RIOT_challenge",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"RIOT","RIOT_CHANT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"RIOT","RIOT_FUKU",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"RIOT","RIOT_PUNCHES",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"RIOT","RIOT_shout",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animrobbank(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animrobbank [1-5]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 5) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animrobbank [1-5]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_End",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_Open",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_Open_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_Rob",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"ROB_BANK","SHP_HandsUp_Scr",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animrocket(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animrocket [1-5]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 5) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animrocket [1-5]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"ROCKET","idle_rocket",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"ROCKET","RocketFire",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"ROCKET","run_rocket",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"ROCKET","walk_rocket",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"ROCKET","WALK_start_rocket",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animrustler(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animrustler [1-5]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 5) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animrustler [1-5]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"RUSTLER","Plane_align_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"RUSTLER","Plane_close",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"RUSTLER","Plane_getin",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"RUSTLER","Plane_getout",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"RUSTLER","Plane_open",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animbiked(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbiked [1-18]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 18) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbiked [1-18]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"BIKED","BIKEd_Back",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 1) {
        ApplyAnimation(playerid,"BIKED","BIKEd_drivebyFT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"BIKED","BIKEd_drivebyLHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"BIKED","BIKEd_drivebyRHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"BIKED","BIKEd_Fwd",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"BIKED","BIKEd_getoffBACK",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"BIKED","BIKEd_getoffLHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"BIKED","BIKEd_getoffRHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"BIKED","BIKEd_hit",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"BIKED","BIKEd_jumponL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"BIKED","BIKEd_jumponR",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"BIKED","BIKEd_kick",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"BIKED","BIKEd_Left",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"BIKED","BIKEd_passenger",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"BIKED","BIKEd_pushes",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"BIKED","BIKEd_Ride",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"BIKED","BIKEd_Right",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"BIKED","BIKEd_shuffle",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 18) {
        ApplyAnimation(playerid,"BIKED","BIKEd_Still",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animryder(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animryder [1-14]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 14) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animryder [1-14]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"RYDER","RYD_Beckon_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 1) {
        ApplyAnimation(playerid,"RYDER","RYD_Beckon_02",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"RYDER","RYD_Beckon_03",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"RYDER","RYD_Die_PT1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"RYDER","RYD_Die_PT2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"RYDER","Van_Crate_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"RYDER","Van_Crate_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"RYDER","Van_Fall_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"RYDER","Van_Fall_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"RYDER","Van_Lean_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"RYDER","Van_Lean_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"RYDER","VAN_PickUp_S",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"RYDER","Van_Stand",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"RYDER","Van_Stand_Crate",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"RYDER","Van_Throw",4.1,0,1,1,1,1);
    }
    return 1;
}

CMD:animscrat(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animscrat [1-12]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 12) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animscrat [1-12]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"SCRATCHING","scdldlp",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"SCRATCHING","scdlulp",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"SCRATCHING","scdrdlp",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"SCRATCHING","scdrulp",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"SCRATCHING","sclng_l",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"SCRATCHING","sclng_r",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"SCRATCHING","scmid_l",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"SCRATCHING","scmid_r",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"SCRATCHING","scshrtl",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"SCRATCHING","scshrtr",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"SCRATCHING","sc_ltor",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"SCRATCHING","sc_rtol",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animshamal(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animshamal [1-4]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 4) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animshamal [1-4]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"SHAMAL","SHAMAL_align",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"SHAMAL","SHAMAL_getin_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"SHAMAL","SHAMAL_getout_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"SHAMAL","SHAMAL_open",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animshop(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animshop [1-24]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 24) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animshop [1-24]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"SHOP","ROB_2Idle",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"SHOP","ROB_Loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"SHOP","donutdrop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"SHOP","ROB_Loop_Threat",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"SHOP","ROB_Shifty",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"SHOP","ROB_StickUp_In",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"SHOP","SHP_Duck_Fire",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"SHOP","SHP_Gun_Aim",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"SHOP","SHP_Gun_Duck",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"SHOP","SHP_Gun_Fire",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"SHOP","SHP_Gun_Grab",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"SHOP","SHP_Gun_Threat",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"SHOP","SHP_HandsUp_Scr",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"SHOP","SHP_Jump_Glide",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"SHOP","SHP_Jump_Land",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"SHOP","SHP_Jump_Launch",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"SHOP","SHP_Rob_GiveCash",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 18) {
        ApplyAnimation(playerid,"SHOP","SHP_Rob_HandsUp",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 19) {
        ApplyAnimation(playerid,"SHOP","SHP_Rob_React",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 20) {
        ApplyAnimation(playerid,"SHOP","SHP_Serve_End",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 21) {
        ApplyAnimation(playerid,"SHOP","SHP_Serve_Idle",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 22) {
        ApplyAnimation(playerid,"SHOP","SHP_Serve_Loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 23) {
        ApplyAnimation(playerid,"SHOP","SHP_Serve_Start",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 24) {
        ApplyAnimation(playerid,"SHOP","Smoke_RYD",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animshotgun(playerid, params[])
{
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
        new animationplayed;
        if(sscanf(params, "d", animationplayed)) {
            SendClientMessage(playerid,COLOR_GRAD1,"USE: /animshotgun [1-3]");
            return 1;
        }

        if(animationplayed < 1 || animationplayed > 3) {
            SendClientMessage(playerid,COLOR_GRAD1,"USE: /animshotgun [1-3]");
            return 1;
        }
        if(animationplayed == 1) {
            ApplyAnimation(playerid,"SHOTGUN","shotgun_crouchfire",4.1,0,1,1,1,1);
        }
        else if(animationplayed == 2) {
            ApplyAnimation(playerid,"SHOTGUN","shotgun_fire",4.1,0,1,1,1,1);
        }
        else if(animationplayed == 3) {
            ApplyAnimation(playerid,"SHOTGUN","shotgun_fire_poor",4.1,0,1,1,1,1);
        }
        return 1;
    }
    return true;
}


CMD:animskate(playerid, params[])
{
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
        new animationplayed;
        if(sscanf(params, "d", animationplayed)) {
            SendClientMessage(playerid,COLOR_GRAD1,"USE: /animskate [1-3]");
            return 1;
        }

        if(animationplayed < 1 || animationplayed > 3) {
            SendClientMessage(playerid,COLOR_GRAD1,"USE: /animskate [1-3]");
            return 1;
        }
        if(animationplayed == 1) {
            ApplyAnimation(playerid,"SKATE","skate_idle",4.1,0,1,1,1,1);
        }
        else if(animationplayed == 2) {
            ApplyAnimation(playerid,"SKATE","skate_run",4.1,0,1,1,1,1);
        }
        else if(animationplayed == 3) {
            ApplyAnimation(playerid,"SKATE","skate_sprint",4.1,0,1,1,1,1);
        }
        return 1;
    }
    return true;
}


CMD:animvortex(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animvortex [1-4]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 4) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animvortex [1-4]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"VORTEX","CAR_jumpin_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"VORTEX","CAR_jumpin_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"VORTEX","vortex_getout_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"VORTEX","vortex_getout_RHS",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animtec(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animtec [1-4]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 4) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animtec [1-4]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"TEC","TEC_crouchfire",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"TEC","TEC_crouchreload",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"TEC","TEC_fire",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"TEC","TEC_reload",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animtrain(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animtrain [1-4]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 4) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animtrain [1-4]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"TRAIN","tran_gtup",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"TRAIN","tran_hng",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"TRAIN","tran_ouch",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"TRAIN","tran_stmb",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animsil(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animsil [1-4]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 4) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animsil [1-4]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"SILENCED","CrouchReload",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"SILENCED","SilenceCrouchfire",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"SILENCED","Silence_fire",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"SILENCED","Silence_reload",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animtattoo(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animtattoo [1-56]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 56) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animtattoo [1-56]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_In_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_In_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_In_T",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_Out_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"TATTOOS","TA_ArmL_Out_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_Out_T",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_Pose_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_Pose_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_Pose_T",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_In_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_In_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_In_T",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_Out_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_Out_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_Out_T",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_Pose_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_Pose_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 18) {
        ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_Pose_T",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 19) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Back_In_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 20) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Back_In_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 21) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Back_In_T",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 22) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Back_Out_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 23) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Back_Out_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 24) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Back_Out_T",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 25) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Back_Pose_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 26) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Back_Pose_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 27) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Back_Pose_T",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 28) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Back_Sit_In_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 29) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Back_Sit_Loop_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 30) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Back_Sit_Out_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 31) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Bel_In_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 32) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Bel_In_T",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 33) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Bel_Out_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed ==  34) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Bel_Out_T",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 35) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Bel_Pose_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 36) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Bel_Pose_T",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 37) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Che_In_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 38) {
        ApplyAnimation(playerid,"TATTOOS","Sit_relaxed",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 39) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Che_In_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 40) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Che_In_T",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 41) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Che_Out_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 41) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Che_Out_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 42) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Che_Out_T",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 43) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Che_Pose_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 44) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Che_Pose_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 45) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Che_Pose_T",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 46) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Idle_Loop_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 47) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Idle_Loop_T",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 48) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Sit_In_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 49) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Sit_In_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 50) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Sit_In_T",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 51) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Sit_Loop_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 52) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Sit_Loop_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 53) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Sit_Loop_T",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 54) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Sit_Out_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 55) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Sit_Out_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 56) {
        ApplyAnimation(playerid,"TATTOOS","TAT_Sit_Out_T",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animsmoking(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animsmoking [1-8]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 8) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animsmoking [1-8]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"SMOKING","F_smklean_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"SMOKING","M_smklean_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"SMOKING","M_smk_drag",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"SMOKING","M_smk_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"SMOKING","M_smk_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"SMOKING","M_smk_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"SMOKING","M_smk_tap",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animsniper(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animsniper [1-1]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 1) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animsniper [1-1]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"SNIPER","WEAPON_sniper",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animspray(playerid, params[])
{
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
        new animationplayed;
        if(sscanf(params, "d", animationplayed)) {
            SendClientMessage(playerid,COLOR_GRAD1,"USE: /animspray [1-2]");
            return 1;
        }

        if(animationplayed < 1 || animationplayed > 2) {
            SendClientMessage(playerid,COLOR_GRAD1,"USE: /animspray [1-2]");
            return 1;
        }
        if(animationplayed == 1) {
            ApplyAnimation(playerid,"SPRAYCAN","spraycan_fire",4.1,0,1,1,1,1);
        }
        else if(animationplayed == 2) {
            ApplyAnimation(playerid,"SPRAYCAN","spraycan_full",4.1,0,1,1,1,1);
        }
        return 1;
    }
    return true;
}


CMD:animstrip(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animstrip [1-20]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 20) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animstrip [1-20]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"STRIP","PLY_CASH",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"STRIP","PUN_CASH",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"STRIP","PUN_HOLLER",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"STRIP","PUN_LOOP",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"STRIP","strip_A",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"STRIP","strip_B",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"STRIP","strip_C",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"STRIP","strip_D",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"STRIP","strip_E",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"STRIP","strip_F",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"STRIP","strip_G",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"STRIP","STR_A2B",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"STRIP","STR_B2A",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"STRIP","STR_B2C",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"STRIP","STR_C1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"STRIP","STR_C2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"STRIP","STR_C2B",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 18) {
        ApplyAnimation(playerid,"STRIP","STR_Loop_A",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 19) {
        ApplyAnimation(playerid,"STRIP","STR_Loop_B",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 20) {
        ApplyAnimation(playerid,"STRIP","STR_Loop_C",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animbath(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbath [1-17]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 18) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animbath [1-17]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"SUNBATHE","batherdown",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 1) {
        ApplyAnimation(playerid,"SUNBATHE","batherup",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"SUNBATHE","Lay_Bac_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"SUNBATHE","Lay_Bac_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"SUNBATHE","ParkSit_M_IdleA",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"SUNBATHE","ParkSit_M_IdleB",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"SUNBATHE","ParkSit_M_IdleC",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"SUNBATHE","ParkSit_M_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"SUNBATHE","ParkSit_M_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_idleA",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_idleB",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_idleC",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"SUNBATHE","SBATHE_F_LieB2Sit",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"SUNBATHE","SBATHE_F_Out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"SUNBATHE","SitnWait_in_W",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"SUNBATHE","SitnWait_out_W",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animswat(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animswat [1-24]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 24) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animswat [1-24]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"SWAT","gnstwall_injurd",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"SWAT","JMP_Wall1m_180",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"SWAT","Rail_fall",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"SWAT","Rail_fall_crawl",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"SWAT","swt_breach_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"SWAT","cards_pick_02",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"SWAT","swt_breach_02",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"SWAT","swt_breach_03",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"SWAT","swt_go",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"SWAT","swt_lkt",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"SWAT","swt_sty",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"SWAT","swt_vent_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"SWAT","swt_vent_02",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"SWAT","swt_vnt_sht_die",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"SWAT","swt_vnt_sht_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"SWAT","swt_vnt_sht_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"SWAT","swt_wllpk_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 18) {
        ApplyAnimation(playerid,"SWAT","swt_wllpk_L_back",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 19) {
        ApplyAnimation(playerid,"SWAT","swt_wllpk_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 20) {
        ApplyAnimation(playerid,"SWAT","swt_wllpk_R_back",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 21) {
        ApplyAnimation(playerid,"SWAT","swt_wllshoot_in_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 22) {
        ApplyAnimation(playerid,"SWAT","swt_wllshoot_in_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 23) {
        ApplyAnimation(playerid,"SWAT","swt_wllshoot_out_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 24) {
        ApplyAnimation(playerid,"SWAT","swt_wllshoot_out_R",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animsweet(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animsweet [1-7]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 7) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animsweet [1-7]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"SWEET","ho_ass_slapped",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"SWEET","LaFin_Player",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"SWEET","LaFin_Sweet",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"SWEET","plyr_hndshldr_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"SWEET","sweet_ass_slap",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"SWEET","sweet_hndshldr_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"SWEET","Sweet_injuredloop",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animswim(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animswim [1-7]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 7) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animswim [1-7]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"SWIM","Swim_Breast",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"SWIM","SWIM_crawl",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"SWIM","Swim_Dive_Under",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"SWIM","Swim_Glide",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"SWIM","Swim_jumpout",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"SWIM","Swim_Tread",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"SWIM","Swim_Under",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animsword(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animsword [1-10]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 10) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animsword [1-10]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"SWORD","sword_1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"SWORD","sword_2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"SWORD","sword_3",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"SWORD","sword_4",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"SWORD","sword_block",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"SWORD","Sword_Hit_1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"SWORD","Sword_Hit_2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"SWORD","Sword_Hit_3",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"SWORD","sword_IDLE",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"SWORD","sword_part",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animtank(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animtank [1-6]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 6) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animtank [1-6]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"TANK","TANK_align_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"TANK","TANK_close_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"TANK","TANK_doorlocked",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"TANK","TANK_getin_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"TANK","TANK_getout_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"TANK","TANK_open_LHS",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animtruck(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animtruck [1-17]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 17) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animtruck [1-17]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"TRUCK","TRUCK_ALIGN_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"TRUCK","TRUCK_ALIGN_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"TRUCK","TRUCK_closedoor_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"TRUCK","TRUCK_closedoor_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"TRUCK","TRUCK_close_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"TRUCK","TRUCK_close_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"TRUCK","TRUCK_getin_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"TRUCK","TRUCK_getin_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"TRUCK","TRUCK_getout_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"TRUCK","TRUCK_getout_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"TRUCK","TRUCK_jackedLHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"TRUCK","TRUCK_jackedRHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"TRUCK","TRUCK_open_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"TRUCK","TRUCK_open_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"TRUCK","TRUCK_pullout_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"TRUCK","TRUCK_pullout_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"TRUCK","TRUCK_Shuffle",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animuzi(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animuzi [1-5]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 5) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animuzi [1-5]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"UZI","UZI_crouchfire",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"UZI","UZI_crouchreload",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"UZI","UZI_fire",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"UZI","UZI_fire_poor",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"UZI","UZI_reload",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animvan(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animvan [1-8]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 8) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animvan [1-8]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"VAN","VAN_close_back_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"VAN","VAN_close_back_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"VAN","VAN_getin_Back_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"VAN","VAN_getin_Back_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"VAN","VAN_getout_back_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"VAN","VAN_getout_back_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"VAN","VAN_open_back_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"VAN","VAN_open_back_RHS",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animvending(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animvending [1-6]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 6) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animvending [1-6]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"VENDING","VEND_Drink2_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"VENDING","VEND_Drink_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"VENDING","vend_eat1_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"VENDING","VEND_Eat_P",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"VENDING","VEND_Use",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"VENDING","VEND_Use_pt2",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animway(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animway [1-17]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 17) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animway [1-17]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"WAYFARER","WF_Back",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 1) {
        ApplyAnimation(playerid,"WAYFARER","WF_drivebyFT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"WAYFARER","WF_drivebyLHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"WAYFARER","WF_drivebyRHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"WAYFARER","WF_Fwd",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"WAYFARER","WF_getoffBACK",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"WAYFARER","WF_getoffLHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"WAYFARER","WF_getoffRHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"WAYFARER","WF_hit",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"WAYFARER","WF_jumponL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"WAYFARER","WF_jumponR",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"WAYFARER","WF_kick",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"WAYFARER","WF_Left",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"WAYFARER","WF_passenger",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"WAYFARER","WF_pushes",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"WAYFARER","WF_Ride",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"WAYFARER","WF_Right",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"WAYFARER","WF_Still",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animweap(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animweap [1-17]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 17) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animweap [1-17]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"WEAPONS","SHP_1H_Lift",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"WEAPONS","SHP_1H_Lift_End",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"WEAPONS","SHP_1H_Ret",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"WEAPONS","SHP_1H_Ret_S",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"WEAPONS","SHP_2H_Lift",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"WEAPONS","SHP_2H_Lift_End",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"WEAPONS","SHP_2H_Ret",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"WEAPONS","SHP_2H_Ret_S",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"WEAPONS","SHP_Ar_Lift",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"WEAPONS","SHP_Ar_Lift_End",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"WEAPONS","SHP_Ar_Ret",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"WEAPONS","SHP_Ar_Ret_S",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"WEAPONS","SHP_G_Lift_In",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"WEAPONS","SHP_G_Lift_Out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"WEAPONS","SHP_Tray_In",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"WEAPONS","SHP_Tray_Out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"WEAPONS","SHP_Tray_Pose",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animwuzi(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animwuzi [1-12]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 12) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animwuzi [1-12]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"WUZI","CS_Dead_Guy",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"WUZI","CS_Plyr_pt1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"WUZI","CS_Plyr_pt2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"WUZI","CS_Wuzi_pt1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"WUZI","CS_Wuzi_pt2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"WUZI","Walkstart_Idle_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"WUZI","Wuzi_follow",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"WUZI","Wuzi_Greet_Plyr",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"WUZI","Wuzi_Greet_Wuzi",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"WUZI","Wuzi_grnd_chk",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"WUZI","Wuzi_stand_loop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"WUZI","Wuzi_Walk",4.1,0,1,1,1,1);
    }
    return 1;
}


CMD:animat(playerid, params[])
{
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
        new animationplayed;
        if(sscanf(params, "d", animationplayed)) {
            SendClientMessage(playerid,COLOR_GRAD1,"USE: /animat [1-3]");
            return 1;
        }

        if(animationplayed < 1 || animationplayed > 3) {
            SendClientMessage(playerid,COLOR_GRAD1,"USE: /animat [1-3]");
            return 1;
        }
        if(animationplayed == 1) {
            ApplyAnimation(playerid,"Attractors","Stepsit_in",4.1,0,1,1,1,1);
        }
        else if(animationplayed == 2) {
            ApplyAnimation(playerid,"Attractors","Stepsit_loop",4.1,0,1,1,1,1);
        }
        else if(animationplayed == 3) {
            ApplyAnimation(playerid,"Attractors","Stepsit_out",4.1,0,1,1,1,1);
        }
        return 1;
    }
    return true;
}


CMD:animairport(playerid, params[])
{
    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
        new animationplayed;
        if(sscanf(params, "d", animationplayed)) {
            SendClientMessage(playerid,COLOR_GRAD1,"USE: /animairport [1]");
            return 1;
        }

        if(animationplayed < 1 || animationplayed > 1) {
            SendClientMessage(playerid,COLOR_GRAD1,"USE: /animairport [1]");
            return 1;
        }
        if(animationplayed == 1) {
            ApplyAnimation(playerid,"AIRPORT","thrw_barl_thrw",4.1,0,1,1,1,1);
        }
        return 1;
    }
    return true;
}
CMD:animped(playerid, params[])
{
    new animationplayed;
    if(sscanf(params, "d", animationplayed)) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animped [1-295]");
        return 1;
    }

    if(animationplayed < 1 || animationplayed > 295) {
        SendClientMessage(playerid,COLOR_GRAD1,"USE: /animped [1-295]");
        return 1;
    }
    if(animationplayed == 1) {
        ApplyAnimation(playerid,"PED","IDLE_CHAT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 2) {
        ApplyAnimation(playerid,"PED","WALK_DRUNK",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 3) {
        ApplyAnimation(playerid,"PED","abseil",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 4) {
        ApplyAnimation(playerid,"PED","ARRESTgun",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 5) {
        ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 6) {
        ApplyAnimation(playerid,"PED","BIKE_elbowL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 7) {
        ApplyAnimation(playerid,"PED","BIKE_fallR",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 8) {
        ApplyAnimation(playerid,"PED","BIKE_fall_off",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 9) {
        ApplyAnimation(playerid,"PED","BIKE_pickupL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 10) {
        ApplyAnimation(playerid,"PED","BIKE_pickupR",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 11) {
        ApplyAnimation(playerid,"PED","BIKE_pullupL",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 12) {
        ApplyAnimation(playerid,"PED","BIKE_pullupR",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 13) {
        ApplyAnimation(playerid,"PED","bomber",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 14) {
        ApplyAnimation(playerid,"PED","CAR_alignHI_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 15) {
        ApplyAnimation(playerid,"PED","CAR_alignHI_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 16) {
        ApplyAnimation(playerid,"PED","CAR_align_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 17) {
        ApplyAnimation(playerid,"PED","CAR_align_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 18) {
        ApplyAnimation(playerid,"PED","CAR_closedoorL_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 19) {
        ApplyAnimation(playerid,"PED","CAR_closedoorL_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 20) {
        ApplyAnimation(playerid,"PED","CAR_closedoor_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 21) {
        ApplyAnimation(playerid,"PED","CAR_closedoor_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 22) {
        ApplyAnimation(playerid,"PED","CAR_close_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 23) {
        ApplyAnimation(playerid,"PED","CAR_crawloutRHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 24) {
        ApplyAnimation(playerid,"PED","CAR_dead_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 25) {
        ApplyAnimation(playerid,"PED","CAR_dead_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 26) {
        ApplyAnimation(playerid,"PED","CAR_doorlocked_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 27) {
        ApplyAnimation(playerid,"PED","CAR_fallout_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 28) {
        ApplyAnimation(playerid,"PED","CAR_fallout_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 29) {
        ApplyAnimation(playerid,"PED","CAR_getinL_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 30) {
        ApplyAnimation(playerid,"PED","CAR_getinL_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 31) {
        ApplyAnimation(playerid,"PED","CAR_getin_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 32) {
        ApplyAnimation(playerid,"PED","CAR_getin_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 33) {
        ApplyAnimation(playerid,"PED","CAR_getoutL_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed ==  34) {
        ApplyAnimation(playerid,"PED","CAR_getout_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 35) {
        ApplyAnimation(playerid,"PED","CAR_getout_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 36) {
        ApplyAnimation(playerid,"PED","car_hookertalk",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 37) {
        ApplyAnimation(playerid,"PED","CAR_jackedLHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 38) {
        ApplyAnimation(playerid,"PED","CAR_jackedRHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 39) {
        ApplyAnimation(playerid,"PED","CAR_jumpin_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 40) {
        ApplyAnimation(playerid,"PED","CAR_LB",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 41) {
        ApplyAnimation(playerid,"PED","CAR_LB_pro",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 42) {
        ApplyAnimation(playerid,"PED","CAR_LB_weak",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 43) {
        ApplyAnimation(playerid,"PED","CAR_LjackedLHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 44) {
        ApplyAnimation(playerid,"PED","CAR_Lshuffle_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 45) {
        ApplyAnimation(playerid,"PED","CAR_Lsit",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 46) {
        ApplyAnimation(playerid,"PED","CAR_open_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 47) {
        ApplyAnimation(playerid,"PED","CAR_open_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 49) {
        ApplyAnimation(playerid,"PED","CAR_pulloutL_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 50) {
        ApplyAnimation(playerid,"PED","CAR_pulloutL_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 51) {
        ApplyAnimation(playerid,"PED","CAR_pullout_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 52) {
        ApplyAnimation(playerid,"PED","CAR_pullout_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 53) {
        ApplyAnimation(playerid,"PED","CAR_Qjacked",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 54) {
        ApplyAnimation(playerid,"PED","CAR_rolldoor",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 55) {
        ApplyAnimation(playerid,"PED","CAR_rolldoorLO",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 56) {
        ApplyAnimation(playerid,"PED","CAR_rollout_LHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 57) {
        ApplyAnimation(playerid,"PED","CAR_rollout_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 58) {
        ApplyAnimation(playerid,"PED","CAR_shuffle_RHS",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 59) {
        ApplyAnimation(playerid,"PED","CAR_sit",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 60) {
        ApplyAnimation(playerid,"PED","CAR_sitp",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 61) {
        ApplyAnimation(playerid,"PED","CAR_sitpLO",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 62) {
        ApplyAnimation(playerid,"PED","CAR_sit_pro",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 63) {
        ApplyAnimation(playerid,"PED","CAR_sit_weak",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 64) {
        ApplyAnimation(playerid,"PED","CAR_tune_radio",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 65) {
        ApplyAnimation(playerid,"PED","CLIMB_idle",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 66) {
        ApplyAnimation(playerid,"PED","CLIMB_jump",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 67) {
        ApplyAnimation(playerid,"PED","CLIMB_jump2fall",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 68) {
        ApplyAnimation(playerid,"PED","CLIMB_jump_B",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 69) {
        ApplyAnimation(playerid,"PED","CLIMB_Pull",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 70) {
        ApplyAnimation(playerid,"PED","CLIMB_Stand",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 71) {
        ApplyAnimation(playerid,"PED","CLIMB_Stand_finish",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 72) {
        ApplyAnimation(playerid,"PED","cower",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 73) {
        ApplyAnimation(playerid,"PED","Crouch_Roll_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 74) {
        ApplyAnimation(playerid,"PED","Crouch_Roll_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 75) {
        ApplyAnimation(playerid,"PED","DAM_armL_frmBK",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 76) {
        ApplyAnimation(playerid,"PED","DAM_armL_frmFT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 77) {
        ApplyAnimation(playerid,"PED","DAM_armL_frmLT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 78) {
        ApplyAnimation(playerid,"PED","DAM_armR_frmBK",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 79) {
        ApplyAnimation(playerid,"PED","DAM_armR_frmFT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 80) {
        ApplyAnimation(playerid,"PED","DAM_armR_frmRT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 81) {
        ApplyAnimation(playerid,"PED","DAM_LegL_frmBK",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 82) {
        ApplyAnimation(playerid,"PED","DAM_LegL_frmFT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 83) {
        ApplyAnimation(playerid,"PED","DAM_LegL_frmLT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 84) {
        ApplyAnimation(playerid,"PED","DAM_LegR_frmBK",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 85) {
        ApplyAnimation(playerid,"PED","DAM_LegR_frmFT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 86) {
        ApplyAnimation(playerid,"PED","DAM_LegR_frmRT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 87) {
        ApplyAnimation(playerid,"PED","DAM_stomach_frmBK",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 88) {
        ApplyAnimation(playerid,"PED","DAM_stomach_frmFT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 89) {
        ApplyAnimation(playerid,"PED","DAM_stomach_frmLT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 90) {
        ApplyAnimation(playerid,"PED","DAM_stomach_frmRT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 91) {
        ApplyAnimation(playerid,"PED","DOOR_LHinge_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 92) {
        ApplyAnimation(playerid,"PED","DOOR_RHinge_O",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 93) {
        ApplyAnimation(playerid,"PED","DrivebyL_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 94) {
        ApplyAnimation(playerid,"PED","DrivebyL_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 95) {
        ApplyAnimation(playerid,"PED","Driveby_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 96) {
        ApplyAnimation(playerid,"PED","Driveby_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 97) {
        ApplyAnimation(playerid,"PED","DRIVE_BOAT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 98) {
        ApplyAnimation(playerid,"PED","DRIVE_BOAT_back",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 99) {
        ApplyAnimation(playerid,"PED","DRIVE_BOAT_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 100) {
        ApplyAnimation(playerid,"PED","DRIVE_BOAT_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 101) {
        ApplyAnimation(playerid,"PED","Drive_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 102) {
        ApplyAnimation(playerid,"PED","Drive_LO_l",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 103) {
        ApplyAnimation(playerid,"PED","Drive_LO_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 104) {
        ApplyAnimation(playerid,"PED","Drive_L_pro",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 105) {
        ApplyAnimation(playerid,"PED","Drive_L_pro_slow",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 106) {
        ApplyAnimation(playerid,"PED","Drive_L_slow",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 107) {
        ApplyAnimation(playerid,"PED","Drive_L_weak",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 108) {
        ApplyAnimation(playerid,"PED","Drive_L_weak_slow",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 109) {
        ApplyAnimation(playerid,"PED","Drive_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 110) {
        ApplyAnimation(playerid,"PED","Drive_R_pro",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 111) {
        ApplyAnimation(playerid,"PED","Drive_R_pro_slow",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 112) {
        ApplyAnimation(playerid,"PED","Drive_R_slow",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 113) {
        ApplyAnimation(playerid,"PED","Drive_R_weak",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 114) {
        ApplyAnimation(playerid,"PED","Drive_R_weak_slow",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 115) {
        ApplyAnimation(playerid,"PED","Drive_truck",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 116) {
        ApplyAnimation(playerid,"PED","DRIVE_truck_back",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 117) {
        ApplyAnimation(playerid,"PED","DRIVE_truck_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 118) {
        ApplyAnimation(playerid,"PED","DRIVE_truck_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 119) {
        ApplyAnimation(playerid,"PED","Drown",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 120) {
        ApplyAnimation(playerid,"PED","DUCK_cower",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 121) {
        ApplyAnimation(playerid,"PED","endchat_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 122) {
        ApplyAnimation(playerid,"PED","endchat_02",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 123) {
        ApplyAnimation(playerid,"PED","endchat_03",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 124) {
        ApplyAnimation(playerid,"PED","DRIVE_truck_back",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 125) {
        ApplyAnimation(playerid,"PED","DRIVE_truck_back",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 126) {
        ApplyAnimation(playerid,"PED","EV_dive",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 127) {
        ApplyAnimation(playerid,"PED","EV_step",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 128) {
        ApplyAnimation(playerid,"PED","facanger",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 129) {
        ApplyAnimation(playerid,"PED","facanger",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 130) {
        ApplyAnimation(playerid,"PED","facgum",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 131) {
        ApplyAnimation(playerid,"PED","facsurp",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 132) {
        ApplyAnimation(playerid,"PED","facsurpm",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 133) {
        ApplyAnimation(playerid,"PED","factalk",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 134) {
        ApplyAnimation(playerid,"PED","facurios",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 135) {
        ApplyAnimation(playerid,"PED","FALL_back",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 136) {
        ApplyAnimation(playerid,"PED","FALL_collapse",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 137) {
        ApplyAnimation(playerid,"PED","FALL_fall",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 138) {
        ApplyAnimation(playerid,"PED","FALL_front",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 139) {
        ApplyAnimation(playerid,"PED","FALL_glide",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 140) {
        ApplyAnimation(playerid,"PED","FALL_land",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 141) {
        ApplyAnimation(playerid,"PED","FALL_skyDive",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 142) {
        ApplyAnimation(playerid,"PED","Fight2Idle",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 143) {
        ApplyAnimation(playerid,"PED","FightA_1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 144) {
        ApplyAnimation(playerid,"PED","FightA_2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 145) {
        ApplyAnimation(playerid,"PED","FightA_3",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 146) {
        ApplyAnimation(playerid,"PED","FightA_block",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 147) {
        ApplyAnimation(playerid,"PED","FightA_G",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 148) {
        ApplyAnimation(playerid,"PED","FightA_M",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 149) {
        ApplyAnimation(playerid,"PED","FIGHTIDLE",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 150) {
        ApplyAnimation(playerid,"PED","FightShB",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 151) {
        ApplyAnimation(playerid,"PED","FightShF",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 152) {
        ApplyAnimation(playerid,"PED","FightSh_BWD",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 153) {
        ApplyAnimation(playerid,"PED","FightSh_FWD",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 154) {
        ApplyAnimation(playerid,"PED","FightSh_Left",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 155) {
        ApplyAnimation(playerid,"PED","FightSh_Right",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 156) {
        ApplyAnimation(playerid,"PED","flee_lkaround_01",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 157) {
        ApplyAnimation(playerid,"PED","FLOOR_hit",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 158) {
        ApplyAnimation(playerid,"PED","FLOOR_hit_f",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 159) {
        ApplyAnimation(playerid,"PED","fucku",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 160) {
        ApplyAnimation(playerid,"PED","gang_gunstand",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 161) {
        ApplyAnimation(playerid,"PED","gas_cwr",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 162) {
        ApplyAnimation(playerid,"PED","getup",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 163) {
        ApplyAnimation(playerid,"PED","getup_front",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 164) {
        ApplyAnimation(playerid,"PED","gum_eat",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 165) {
        ApplyAnimation(playerid,"PED","GunCrouchBwd",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 166) {
        ApplyAnimation(playerid,"PED","GunCrouchFwd",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 167) {
        ApplyAnimation(playerid,"PED","GunMove_BWD",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 168) {
        ApplyAnimation(playerid,"PED","GunMove_FWD",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 169) {
        ApplyAnimation(playerid,"PED","GunMove_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 170) {
        ApplyAnimation(playerid,"PED","GunMove_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 171) {
        ApplyAnimation(playerid,"PED","Gun_2_IDLE",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 172) {
        ApplyAnimation(playerid,"PED","GUN_BUTT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 173) {
        ApplyAnimation(playerid,"PED","GUN_BUTT_crouch",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 174) {
        ApplyAnimation(playerid,"PED","Gun_stand",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 175) {
        ApplyAnimation(playerid,"PED","handscower",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 176) {
        ApplyAnimation(playerid,"PED","handsup",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 177) {
        ApplyAnimation(playerid,"PED","HitA_1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 178) {
        ApplyAnimation(playerid,"PED","HitA_2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 179) {
        ApplyAnimation(playerid,"PED","HitA_3",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 180) {
        ApplyAnimation(playerid,"PED","HIT_back",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 181) {
        ApplyAnimation(playerid,"PED","HIT_behind",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 182) {
        ApplyAnimation(playerid,"PED","HIT_front",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 183) {
        ApplyAnimation(playerid,"PED","HIT_GUN_BUTT",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 184) {
        ApplyAnimation(playerid,"PED","HIT_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 185) {
        ApplyAnimation(playerid,"PED","HIT_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 186) {
        ApplyAnimation(playerid,"PED","HIT_walk",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 187) {
        ApplyAnimation(playerid,"PED","HIT_wall",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 188) {
        ApplyAnimation(playerid,"PED","Idlestance_fat",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 189) {
        ApplyAnimation(playerid,"PED","idlestance_old",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 190) {
        ApplyAnimation(playerid,"PED","IDLE_armed",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 191) {
        ApplyAnimation(playerid,"PED","IDLE_chat",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 192) {
        ApplyAnimation(playerid,"PED","IDLE_csaw",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 193) {
        ApplyAnimation(playerid,"PED","Idle_Gang1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 194) {
        ApplyAnimation(playerid,"PED","IDLE_HBHB",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 195) {
        ApplyAnimation(playerid,"PED","IDLE_ROCKET",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 196) {
        ApplyAnimation(playerid,"PED","IDLE_stance",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 197) {
        ApplyAnimation(playerid,"PED","IDLE_taxi",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 198) {
        ApplyAnimation(playerid,"PED","IDLE_tired",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 199) {
        ApplyAnimation(playerid,"PED","Jetpack_Idle",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 200) {
        ApplyAnimation(playerid,"PED","JOG_femaleA",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 201) {
        ApplyAnimation(playerid,"PED","JOG_maleA",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 202) {
        ApplyAnimation(playerid,"PED","JUMP_glide",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 203) {
        ApplyAnimation(playerid,"PED","JUMP_land",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 204) {
        ApplyAnimation(playerid,"PED","JUMP_launch",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 205) {
        ApplyAnimation(playerid,"PED","JUMP_launch_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 206) {
        ApplyAnimation(playerid,"PED","KART_drive",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 207) {
        ApplyAnimation(playerid,"PED","KART_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 208) {
        ApplyAnimation(playerid,"PED","KART_LB",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 209) {
        ApplyAnimation(playerid,"PED","KART_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 210) {
        ApplyAnimation(playerid,"PED","KD_left",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 211) {
        ApplyAnimation(playerid,"PED","KD_right",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 212) {
        ApplyAnimation(playerid,"PED","KO_shot_face",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 213) {
        ApplyAnimation(playerid,"PED","KO_shot_front",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 214) {
        ApplyAnimation(playerid,"PED","KO_shot_stom",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 215) {
        ApplyAnimation(playerid,"PED","KO_skid_back",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 216) {
        ApplyAnimation(playerid,"PED","KO_skid_front",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 217) {
        ApplyAnimation(playerid,"PED","KO_spin_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 218) {
        ApplyAnimation(playerid,"PED","KO_spin_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 219) {
        ApplyAnimation(playerid,"PED","pass_Smoke_in_car",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 220) {
        ApplyAnimation(playerid,"PED","phone_in",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 221) {
        ApplyAnimation(playerid,"PED","phone_out",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 222) {
        ApplyAnimation(playerid,"PED","phone_talk",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 223) {
        ApplyAnimation(playerid,"PED","Player_Sneak",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 224) {
        ApplyAnimation(playerid,"PED","Player_Sneak_walkstart",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 225) {
        ApplyAnimation(playerid,"PED","roadcross",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 226) {
        ApplyAnimation(playerid,"PED","roadcross_female",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 227) {
        ApplyAnimation(playerid,"PED","roadcross_gang",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 228) {
        ApplyAnimation(playerid,"PED","roadcross_old",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 229) {
        ApplyAnimation(playerid,"PED","run_1armed",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 230) {
        ApplyAnimation(playerid,"PED","run_armed",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 231) {
        ApplyAnimation(playerid,"PED","run_civi",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 232) {
        ApplyAnimation(playerid,"PED","run_csaw",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 233) {
        ApplyAnimation(playerid,"PED","run_fat",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 234) {
        ApplyAnimation(playerid,"PED","run_fatold",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 235) {
        ApplyAnimation(playerid,"PED","run_gang1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 236) {
        ApplyAnimation(playerid,"PED","run_left",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 237) {
        ApplyAnimation(playerid,"PED","run_old",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 238) {
        ApplyAnimation(playerid,"PED","run_player",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 239) {
        ApplyAnimation(playerid,"PED","run_right",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 240) {
        ApplyAnimation(playerid,"PED","run_rocket",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 241) {
        ApplyAnimation(playerid,"PED","Run_stop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 242) {
        ApplyAnimation(playerid,"PED","Run_stopR",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 243) {
        ApplyAnimation(playerid,"PED","Run_Wuzi",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 244) {
        ApplyAnimation(playerid,"PED","SEAT_down",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 245) {
        ApplyAnimation(playerid,"PED","SEAT_idle",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 246) {
        ApplyAnimation(playerid,"PED","SEAT_up",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 247) {
        ApplyAnimation(playerid,"PED","SHOT_leftP",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 248) {
        ApplyAnimation(playerid,"PED","SHOT_partial",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 249) {
        ApplyAnimation(playerid,"PED","SHOT_partial_B",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 250) {
        ApplyAnimation(playerid,"PED","SHOT_rightP",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 251) {
        ApplyAnimation(playerid,"PED","Shove_Partial",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 252) {
        ApplyAnimation(playerid,"PED","Smoke_in_car",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 253) {
        ApplyAnimation(playerid,"PED","sprint_civi",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 254) {
        ApplyAnimation(playerid,"PED","sprint_panic",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 255) {
        ApplyAnimation(playerid,"PED","Sprint_Wuzi",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 256) {
        ApplyAnimation(playerid,"PED","swat_run",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 257) {
        ApplyAnimation(playerid,"PED","Swim_Tread",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 258) {
        ApplyAnimation(playerid,"PED","Tap_hand",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 259) {
        ApplyAnimation(playerid,"PED","Tap_handP",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 260) {
        ApplyAnimation(playerid,"PED","turn_180",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 261) {
        ApplyAnimation(playerid,"PED","Turn_L",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 262) {
        ApplyAnimation(playerid,"PED","Turn_R",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 263) {
        ApplyAnimation(playerid,"PED","WALK_armed",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 264) {
        ApplyAnimation(playerid,"PED","WALK_civi",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 265) {
        ApplyAnimation(playerid,"PED","WALK_csaw",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 266) {
        ApplyAnimation(playerid,"PED","Walk_DoorPartial",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 267) {
        ApplyAnimation(playerid,"PED","WALK_drunk",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 268) {
        ApplyAnimation(playerid,"PED","WALK_fat",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 269) {
        ApplyAnimation(playerid,"PED","WALK_fatold",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 270) {
        ApplyAnimation(playerid,"PED","WALK_gang1",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 271) {
        ApplyAnimation(playerid,"PED","WALK_gang2",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 272) {
        ApplyAnimation(playerid,"PED","WALK_old",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 273) {
        ApplyAnimation(playerid,"PED","WALK_player",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 274) {
        ApplyAnimation(playerid,"PED","WALK_rocket",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 275) {
        ApplyAnimation(playerid,"PED","WALK_shuffle",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 276) {
        ApplyAnimation(playerid,"PED","WALK_start",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 277) {
        ApplyAnimation(playerid,"PED","WALK_start_armed",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 278) {
        ApplyAnimation(playerid,"PED","WALK_start_csaw",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 279) {
        ApplyAnimation(playerid,"PED","WALK_start_rocket",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 280) {
        ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 281) {
        ApplyAnimation(playerid,"PED","WEAPON_crouch",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 282) {
        ApplyAnimation(playerid,"PED","woman_idlestance",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 283) {
        ApplyAnimation(playerid,"PED","woman_run",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 284) {
        ApplyAnimation(playerid,"PED","WOMAN_runbusy",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 285) {
        ApplyAnimation(playerid,"PED","WOMAN_runfatold",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 286) {
        ApplyAnimation(playerid,"PED","woman_runpanic",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 287) {
        ApplyAnimation(playerid,"PED","WOMAN_runsexy",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 288) {
        ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 289) {
        ApplyAnimation(playerid,"PED","WOMAN_walkfatold",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 290) {
        ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 291) {
        ApplyAnimation(playerid,"PED","WOMAN_walkold",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 292) {
        ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 293) {
        ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 294) {
        ApplyAnimation(playerid,"PED","WOMAN_walkshop",4.1,0,1,1,1,1);
    }
    else if(animationplayed == 295) {
        ApplyAnimation(playerid,"PED","XPRESSscratch",4.1,0,1,1,1,1);
    }
    return 1;
}
// ------------------------ Functions ------------------------
stock Elevator_Initialize()
{
	// Initializes the elevator.

	Obj_Elevator 			= CreateDynamicObject(18755, 1786.678100, -1303.459472, GROUND_Z_COORD + ELEVATOR_OFFSET, 0.000000, 0.000000, 270.000000);
	Obj_ElevatorDoors[0] 	= CreateDynamicObject(18757, X_DOOR_CLOSED, -1303.459472, GROUND_Z_COORD, 0.000000, 0.000000, 270.000000);
	Obj_ElevatorDoors[1] 	= CreateDynamicObject(18756, X_DOOR_CLOSED, -1303.459472, GROUND_Z_COORD, 0.000000, 0.000000, 270.000000);

	Label_Elevator          = Create3DTextLabel("{CCCCCC}Pressione '{FFFFFF}ENTER{CCCCCC}' para usar o elevador", 0xCCCCCCAA, 1784.9822, -1302.0426, 13.6491, 10.0, 0);
	Elevator_Pickup         = CreatePickup(1239,23,1784.9822, -1302.0426, 13.6491,-1);

	new string[256],
		Float:z;

	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
	    Obj_FloorDoors[i][0] 	= CreateDynamicObject(18757, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(i), 0.000000, 0.000000, 270.000000);
		Obj_FloorDoors[i][1] 	= CreateDynamicObject(18756, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(i), 0.000000, 0.000000, 270.000000);

		format(string, sizeof(string), "{CCCCCC}[%s]\n{CCCCCC}Pressione '{FFFFFF}ENTER{CCCCCC}' para chamar o elevador", FloorNames[i]);

		if(i == 0)
		    z = 13.4713;
		else
		    z = 13.4713 + 8.7396 + ((i-1) * 5.45155);

		Label_Floors[i]         = Create3DTextLabel(string, 0xCCCCCCAA, 1783.9799, -1300.7660, z, 10.5, 0);
		CreatePickup(1318,23,1783.9799, -1300.7660, z, -1);
		// Label_Elevator, Text3D:Label_Floors[21];
	}

	// Open ground floor doors:
	Floor_OpenDoors(0);
	Elevator_OpenDoors();

	return 1;
}

stock Elevator_Destroy()
{
	// Destroys the elevator.

	DestroyDynamicObject(Obj_Elevator);
	DestroyDynamicObject(Obj_ElevatorDoors[0]);
	DestroyDynamicObject(Obj_ElevatorDoors[1]);
	Delete3DTextLabel(Label_Elevator);

	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
	    DestroyDynamicObject(Obj_FloorDoors[i][0]);
		DestroyDynamicObject(Obj_FloorDoors[i][1]);
		Delete3DTextLabel(Label_Floors[i]);
	}

	return 1;
}

stock Elevator_OpenDoors()
{
	// Opens the elevator's doors.

	new Float:x, Float:y, Float:z;

	GetDynamicObjectPos(Obj_ElevatorDoors[0], x, y, z);
	MoveDynamicObject(Obj_ElevatorDoors[0], X_DOOR_L_OPENED, y, z, DOORS_SPEED);
	MoveDynamicObject(Obj_ElevatorDoors[1], X_DOOR_R_OPENED, y, z, DOORS_SPEED);

	return 1;
}

stock Elevator_CloseDoors()
{
    // Closes the elevator's doors.

    if(ElevatorState == ELEVATOR_STATE_MOVING)
	    return 0;

    new Float:x, Float:y, Float:z;

	GetDynamicObjectPos(Obj_ElevatorDoors[0], x, y, z);
	MoveDynamicObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, y, z, DOORS_SPEED);
	MoveDynamicObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, y, z, DOORS_SPEED);

	return 1;
}

stock Floor_OpenDoors(floorid)
{
    // Opens the doors at the specified floor.

    MoveDynamicObject(Obj_FloorDoors[floorid][0], X_DOOR_L_OPENED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveDynamicObject(Obj_FloorDoors[floorid][1], X_DOOR_R_OPENED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);

	PlaySoundForPlayersInRange(6401, 50.0, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid) + 5.0);

	return 1;
}

stock Floor_CloseDoors(floorid)
{
    // Closes the doors at the specified floor.

    MoveDynamicObject(Obj_FloorDoors[floorid][0], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveDynamicObject(Obj_FloorDoors[floorid][1], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);

	PlaySoundForPlayersInRange(6401, 50.0, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid) + 5.0);

	return 1;
}

stock Elevator_MoveToFloor(floorid)
{
	// Moves the elevator to specified floor (doors are meant to be already closed).

	ElevatorState = ELEVATOR_STATE_MOVING;
	ElevatorFloor = floorid;

	// Move the elevator slowly, to give time to clients to sync the object surfing. Then, boost it up:
	MoveDynamicObject(Obj_Elevator, 1786.678100, -1303.459472, GetElevatorZCoordForFloor(floorid), 0.25);
    MoveDynamicObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), 0.25);
    MoveDynamicObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), 0.25);
    Delete3DTextLabel(Label_Elevator);
    DestroyPickup(Elevator_Pickup);

	ElevatorBoostTimer = SetTimerEx("Elevator_Boost", 2000, 0, "i", floorid);

	return 1;
}

BPF::Elevator_Boost(floorid)
{
	// Increases the elevator's speed until it reaches 'floorid'
	StopDynamicObject(Obj_Elevator);
	StopDynamicObject(Obj_ElevatorDoors[0]);
	StopDynamicObject(Obj_ElevatorDoors[1]);

	MoveDynamicObject(Obj_Elevator, 1786.678100, -1303.459472, GetElevatorZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveDynamicObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveDynamicObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);

	return 1;
}

BPF::Elevator_TurnToIdle()
{
	ElevatorState = ELEVATOR_STATE_IDLE;
	ReadNextFloorInQueue();

	return 1;
}
stock RemoveFirstQueueFloor()
{
	// Removes the data in ElevatorQueue[0], and reorders the queue accordingly.

	for(new i; i < sizeof(ElevatorQueue) - 1; i ++)
	    ElevatorQueue[i] = ElevatorQueue[i + 1];

	ElevatorQueue[sizeof(ElevatorQueue) - 1] = INVALID_FLOOR;

	return 1;
}

stock AddFloorToQueue(floorid)
{
 	// Adds 'floorid' at the end of the queue.

	// Scan for the first empty space:
	new slot = -1;
	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    if(ElevatorQueue[i] == INVALID_FLOOR)
	    {
	        slot = i;
	        break;
	    }
	}

	if(slot != -1)
	{
	    ElevatorQueue[slot] = floorid;

     	// If needed, move the elevator.
	    if(ElevatorState == ELEVATOR_STATE_IDLE)
	        ReadNextFloorInQueue();

	    return 1;
	}

	return 0;
}

stock ResetElevatorQueue()
{
	// Resets the queue.

	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    ElevatorQueue[i] 	= INVALID_FLOOR;
	    FloorRequestedBy[i] = INVALID_PLAYER_ID;
	}

	return 1;
}

stock IsFloorInQueue(floorid)
{
	// Checks if the specified floor is currently part of the queue.

	for(new i; i < sizeof(ElevatorQueue); i ++)
	    if(ElevatorQueue[i] == floorid)
	        return 1;

	return 0;
}

stock ReadNextFloorInQueue()
{
	// Reads the next floor in the queue, closes doors, and goes to it.

	if(ElevatorState != ELEVATOR_STATE_IDLE || ElevatorQueue[0] == INVALID_FLOOR)
	    return 0;

	Elevator_CloseDoors();
	Floor_CloseDoors(ElevatorFloor);

	return 1;
}

stock DidPlayerRequestElevator(playerid)
{
	for(new i; i < sizeof(FloorRequestedBy); i ++)
	    if(FloorRequestedBy[i] == playerid)
	        return 1;

	return 0;
}

stock ShowElevatorDialog(playerid)
{
	MEGAString[0] = EOS;
	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    if(FloorRequestedBy[i] != INVALID_PLAYER_ID)
	        strcat(MEGAString, "{FF0000}");

	    strcat(MEGAString, FloorNames[i]);
	    strcat(MEGAString, "\n");
	}

	ShowPlayerDialog(playerid, ELEVADOR_ID, DIALOG_STYLE_LIST, "Elevador", MEGAString, "Selecionar", "Cancelar");

	return 1;
}

stock CallElevator(playerid, floorid)
{
	// Calls the elevator (also used with the elevator dialog).

	if(FloorRequestedBy[floorid] != INVALID_PLAYER_ID || IsFloorInQueue(floorid))
	    return 0;

	FloorRequestedBy[floorid] = playerid;
	AddFloorToQueue(floorid);

	return 1;
}
public OnPlayerExitedMenu(playerid)
{
	new Menu:Current = GetPlayerMenu(playerid);
	HideMenuForPlayer(Current, playerid);
	if(Current != TuningMenu)
	{
	    ShowMenuForPlayer(TuningMenu, playerid);
	    return true;
	}
	else
	{
		Controle(playerid, 1);
		SendClientMessage(playerid, COLOR_GRAD2,"Você fechou o menu Tunning.");
		SetCameraBehindPlayer(playerid);
        TunningOn[playerid] = 0;
		TunC = -1;
		SetPlayerInterior(playerid,0);
	}
	return 1;
}
stock empmoney(playerid, empid, moneyy)
{
    if(SBizzInfo[empid][sbProducts] <= 0)
	{
		GameTextForPlayer(playerid, "~r~falta produtos", 5000, 1);
	}

	if(SBizzInfo[empid][sbProducts] > 0)
	{
		ExtortionSBiz(empid, SBizzInfo[empid][sbEntranceCost]);
		SBizzInfo[empid][sbProducts]--;
		SBizzInfo[empid][sbTill] += moneyy;
		GiveDinheiro(playerid, -moneyy);
	}
	SalvarSEmpresa(empid);
	Atualizar3Dtexts();
	new string[25];
	format(string, sizeof string, "~g~R$~r~-%d", moneyy);
	GameTextForPlayer(playerid, string, 5000, 1);
}
public OnPlayerSelectedMenuRow(playerid, row)
{
    new Menu: Current = GetPlayerMenu(playerid);
    if (Current == TuningMenu)
	{
	    SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
		SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
        switch (row)
		{
	        case 0:
	        {
	            ShowMenuForPlayer(Paintjobs, playerid);
			}
	        case 1:
	        {
	            ShowMenuForPlayer(Colors, playerid);
			}
	        case 2:
	        {
	            ShowMenuForPlayer(Exhausts, playerid);
			}
	        case 3:
			{
	            ShowMenuForPlayer(Frontbumper, playerid);
	 		}
	        case 4:
	        {
	            ShowMenuForPlayer(Rearbumper, playerid);
			}
	        case 5:
			{
	            ShowMenuForPlayer(Roof, playerid);
			}
	        case 6:
	        {
	            ShowMenuForPlayer(Spoilers, playerid);
			}
	        case 7:
	        {
	            ShowMenuForPlayer(Sideskirts, playerid);
			}
	        case 8:
			{
	            ShowMenuForPlayer(Bullbars, playerid);
			}
	        case 9:
			{
	            ShowMenuForPlayer(Wheels, playerid);
			}
	        case 10:
			{
	            ShowMenuForPlayer(Carstereo, playerid);
			}
	        case 11:
			{
	            ShowMenuForPlayer(TuningMenu1, playerid);
	        }
		}
    }
    if (Current == Paintjobs)
	{
        switch (row)
		{
        case 0:
            if (pmodelid[playerid] == 562 || pmodelid[playerid] == 565 || pmodelid[playerid] == 559 || pmodelid[playerid] == 561 || pmodelid[playerid] == 560 || pmodelid[playerid] == 575 || pmodelid[playerid] == 534 || // Broadway
            pmodelid[playerid] == 567 || pmodelid[playerid] == 483 || pmodelid[playerid] == 536 || pmodelid[playerid] == 535 || pmodelid[playerid] == 576 || pmodelid[playerid] == 558)
			{
                new car = GetPlayerVehicleID(playerid);
                ChangeVehiclePaintjob(car, 0);
                vComponent[car][14] = 0;
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} paintjob{A9A9A9} ao veículo");
                ShowMenuForPlayer(Paintjobs, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso.");
                ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 1:
            if (pmodelid[playerid] == 562 || pmodelid[playerid] == 565 || pmodelid[playerid] == 559 || pmodelid[playerid] == 561 || pmodelid[playerid] == 560 || pmodelid[playerid] == 575 || pmodelid[playerid] == 534 || // Broadway
            pmodelid[playerid] == 567 || pmodelid[playerid] == 483 || pmodelid[playerid] == 536 || pmodelid[playerid] == 535 || pmodelid[playerid] == 576 || pmodelid[playerid] == 558)
			{
                new car = GetPlayerVehicleID(playerid);
                ChangeVehiclePaintjob(car, 1);
                vComponent[car][14] = 1;
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} paintjob{A9A9A9} ao veículo");
                ShowMenuForPlayer(Paintjobs, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso.");
                ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 2:
            if (pmodelid[playerid] == 562 || pmodelid[playerid] == 565 || pmodelid[playerid] == 559 || pmodelid[playerid] == 561 || pmodelid[playerid] == 560 || pmodelid[playerid] == 575 || pmodelid[playerid] == 534 || // Broadway
            pmodelid[playerid] == 567 || pmodelid[playerid] == 483 || pmodelid[playerid] == 536 || pmodelid[playerid] == 535 || pmodelid[playerid] == 576 || pmodelid[playerid] == 558)
			{
                new car = GetPlayerVehicleID(playerid);
                ChangeVehiclePaintjob(car, 2);
                vComponent[car][14] = 2;
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} paintjob{A9A9A9} ao veículo");
                ShowMenuForPlayer(Paintjobs, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso.");
                ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 3:
            if (pmodelid[playerid] == 562 || pmodelid[playerid] == 565 || pmodelid[playerid] == 559 || pmodelid[playerid] == 561 || pmodelid[playerid] == 560 || pmodelid[playerid] == 575 || pmodelid[playerid] == 534 || // Broadway
            pmodelid[playerid] == 567 || pmodelid[playerid] == 483 || pmodelid[playerid] == 536 || pmodelid[playerid] == 535 || pmodelid[playerid] == 576 || pmodelid[playerid] == 558)
			{
                new car = GetPlayerVehicleID(playerid);
                ChangeVehiclePaintjob(car, 3);
                vComponent[car][14] = 3;
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} paintjob{A9A9A9} ao veículo");
                ShowMenuForPlayer(Paintjobs, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso.");
                ShowMenuForPlayer(TuningMenu, playerid);
            }

        case 4:
            if (pmodelid[playerid] == 562 || pmodelid[playerid] == 565 || pmodelid[playerid] == 559 || pmodelid[playerid] == 561 || pmodelid[playerid] == 560 || pmodelid[playerid] == 575 || pmodelid[playerid] == 534 || // Broadway
            pmodelid[playerid] == 567 || pmodelid[playerid] == 483 || pmodelid[playerid] == 536 || pmodelid[playerid] == 535 || pmodelid[playerid] == 576 || pmodelid[playerid] == 558)
			{
                new car = GetPlayerVehicleID(playerid);
                ChangeVehiclePaintjob(car, 4);
                vComponent[car][14] = 4;
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} paintjob{A9A9A9} ao veículo");
                ShowMenuForPlayer(Paintjobs, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso.");
                ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 5:
            {
                ShowMenuForPlayer(TuningMenu, playerid);
            }

        }
    }

    if (Current == Colors)
	{
        switch (row)
		{
        case 0:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                ChangeVehicleColor(car, 0, 0);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você {FFFF00}mudou a cor{A9A9A9} do seu veículo.");
                ShowMenuForPlayer(Colors, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
                ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 1:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                ChangeVehicleColor(car, 1, 1);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você {FFFF00}mudou a cor{A9A9A9} do seu veículo.");
                ShowMenuForPlayer(Colors, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 2:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                ChangeVehicleColor(car, 3, 3);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você {FFFF00}mudou a cor{A9A9A9} do seu veículo.");
                ShowMenuForPlayer(Colors, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 3:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                ChangeVehicleColor(car, 79, 79);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você {FFFF00}mudou a cor{A9A9A9} do seu veículo.");
                ShowMenuForPlayer(Colors, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 4:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                ChangeVehicleColor(car, 86, 86);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você {FFFF00}mudou a cor{A9A9A9} do seu veículo.");
                ShowMenuForPlayer(Colors, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 5:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                ChangeVehicleColor(car, 6, 6);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você {FFFF00}mudou a cor{A9A9A9} do seu veículo.");
                ShowMenuForPlayer(Colors, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 6:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                ChangeVehicleColor(car, 126, 126);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você {FFFF00}mudou a cor{A9A9A9} do seu veículo.");
                ShowMenuForPlayer(Colors, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 7:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                ChangeVehicleColor(car, 66, 66);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você {FFFF00}mudou a cor{A9A9A9} do seu veículo.");
                ShowMenuForPlayer(Colors, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 8:
            ShowMenuForPlayer(Colors1, playerid);
        }
    }

    if (Current == Colors1)
	{
        switch (row) {

        case 0:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                ChangeVehicleColor(car, 24, 24);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você {FFFF00}mudou a cor{A9A9A9} do seu veículo.");
                ShowMenuForPlayer(Colors1, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 1:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                ChangeVehicleColor(car, 123, 123);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você {FFFF00}mudou a cor{A9A9A9} do seu veículo.");
                ShowMenuForPlayer(Colors1, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 2:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                ChangeVehicleColor(car, 53, 53);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você {FFFF00}mudou a cor{A9A9A9} do seu veículo.");
                ShowMenuForPlayer(Colors1, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 3:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                ChangeVehicleColor(car, 93, 93);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você {FFFF00}mudou a cor{A9A9A9} do seu veículo.");
                ShowMenuForPlayer(Colors1, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 4:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                ChangeVehicleColor(car, 83, 83);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você {FFFF00}mudou a cor{A9A9A9} do seu veículo.");
                ShowMenuForPlayer(Colors1, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 5:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                ChangeVehicleColor(car, 60, 60);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você {FFFF00}mudou a cor{A9A9A9} do seu veículo.");
                ShowMenuForPlayer(Colors1, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 6:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                ChangeVehicleColor(car, 126, 126);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você {FFFF00}mudou a cor{A9A9A9} do seu veículo.");
                ShowMenuForPlayer(Colors1, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 7:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                ChangeVehicleColor(car, 110, 110);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você {FFFF00}mudou a cor{A9A9A9} do seu veículo.");
                ShowMenuForPlayer(Colors1, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 8:
        {
			    ShowMenuForPlayer(TuningMenu, playerid);
        }
        }
    }

    if (Current == Exhausts)
	{
        switch (row)
		{
        case 0:
            if (pmodelid[playerid] == 562 || pmodelid[playerid] == 565 || pmodelid[playerid] == 559 || pmodelid[playerid] == 561 || pmodelid[playerid] == 560)
			{
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 562) {

                    AddVehicleComponent(car, 1034);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien Exhaust component on Elegy{A9A9A9}.");
                    ShowMenuForPlayer(Exhausts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 565)
				{
                    AddVehicleComponent(car, 1046);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien Exhaust component on Flash{A9A9A9}.");
                    ShowMenuForPlayer(Exhausts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 559)
				{
                    AddVehicleComponent(car, 1065);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien Exhaust component on Jetser{A9A9A9}.");
                    ShowMenuForPlayer(Exhausts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 561)
				{
                    AddVehicleComponent(car, 1064);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien Exhaust component on Stratum{A9A9A9}.");
                    ShowMenuForPlayer(Exhausts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 560)
				{
                    AddVehicleComponent(car, 1028);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien Exhaust component on Sultan{A9A9A9}.");
                    ShowMenuForPlayer(Exhausts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 558)
				{
                    AddVehicleComponent(car, 1089);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien Exhaust component on Uranus{A9A9A9}.");
                    ShowMenuForPlayer(Exhausts, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 1:
            if (pmodelid[playerid] == 562 || pmodelid[playerid] == 565 || pmodelid[playerid] == 559 || pmodelid[playerid] == 561 || pmodelid[playerid] == 560)
            {
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 562)
				{
                    AddVehicleComponent(car, 1037);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch X-Flow Exhaust component on Elegy{A9A9A9}.");
                    ShowMenuForPlayer(Exhausts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 565)
				{
                    AddVehicleComponent(car, 1045);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch X-Flow Exhaust component on Flash{A9A9A9}.");
                    ShowMenuForPlayer(Exhausts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 559)
				{
                    AddVehicleComponent(car, 1066);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch X-Flow exaust component on Jester{A9A9A9}.");
                    ShowMenuForPlayer(Exhausts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 561)
				{
                    AddVehicleComponent(car, 1059);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch X-Flow Exhaust component on Stratum{A9A9A9}.");
                    ShowMenuForPlayer(Exhausts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 560)
				{
                    AddVehicleComponent(car, 1029);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch X-Flow Exhaust component on Sultan{A9A9A9}.");
                    ShowMenuForPlayer(Exhausts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 558)
				{
                    AddVehicleComponent(car, 1092);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch X-Flow Exhaust component on Uranus{A9A9A9}.");
                    ShowMenuForPlayer(Exhausts, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }

        case 2:
            if (pmodelid[playerid] == 575 || pmodelid[playerid] == 534 || pmodelid[playerid] == 567 || pmodelid[playerid] == 536 || pmodelid[playerid] == 576 || pmodelid[playerid] == 535)
            {
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 575) // Brodway
                {
                    AddVehicleComponent(car, 1044);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chromer Exhaust component on Brodway{A9A9A9}.");
                    ShowMenuForPlayer(Exhausts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 534) // Remington
                {
                    AddVehicleComponent(car, 1126);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chromer Exhaust component on Remington{A9A9A9}.");
                    ShowMenuForPlayer(Exhausts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 567) // Savanna
                {
                    AddVehicleComponent(car, 1129);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chromer Exhaust component on Savanna{A9A9A9}.");
                    ShowMenuForPlayer(Exhausts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 536) // Blade
                {
                    AddVehicleComponent(car, 1104);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chromer Exhaust component on Blade{A9A9A9}.");
                    ShowMenuForPlayer(Exhausts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 535) // Slamvan
                {
                    AddVehicleComponent(car, 1113);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chromer Exhaust component on Slamvan{A9A9A9}.");
                    ShowMenuForPlayer(Exhausts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 576) // Tornado
                {
                    AddVehicleComponent(car, 1136);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chromer Exhaust component on Tornado{A9A9A9}.");
                    ShowMenuForPlayer(Exhausts, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }

        case 3:
            if (pmodelid[playerid] == 575 || pmodelid[playerid] == 534 || pmodelid[playerid] == 567 || pmodelid[playerid] == 536 || pmodelid[playerid] == 576 || pmodelid[playerid] == 535)
			{
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 575) // Brodway
                {
                    AddVehicleComponent(car, 1043);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Slamin Exhaust component on Brodway{A9A9A9}.");
                    ShowMenuForPlayer(Exhausts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 534) // Remington
                {
                    AddVehicleComponent(car, 1127);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Slamin Exhaust component on Remingon{A9A9A9}.");
                    ShowMenuForPlayer(Exhausts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 567) // Savanna
                {
                    AddVehicleComponent(car, 1132);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Slamin Exhaust component on Savanna{A9A9A9}.");
                    ShowMenuForPlayer(Exhausts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 536) // Blade
                {
                    AddVehicleComponent(car, 1105);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Slamin Exhaust component on Blade{A9A9A9}.");
                    ShowMenuForPlayer(Exhausts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 535) // Slamvan
                {
                    AddVehicleComponent(car, 1114);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Slamin Exhaust component on Slamvan{A9A9A9}.");
                    ShowMenuForPlayer(Exhausts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 576) // Tornado
                {
                    AddVehicleComponent(car, 1135);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Slamin Exhaust component on Tornado{A9A9A9}.");
                    ShowMenuForPlayer(Exhausts, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 4:
		{
			    ShowMenuForPlayer(TuningMenu, playerid);
		}
        }
    }

    if (Current == Frontbumper)
	{
        switch (row)
		{
        case 0:
            if (pmodelid[playerid] == 562 || pmodelid[playerid] == 565 || pmodelid[playerid] == 559 || pmodelid[playerid] == 561 || pmodelid[playerid] == 560)
			{
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 562) // Elegy
                {
                    AddVehicleComponent(car, 1171);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien front bumper component on Elegy{A9A9A9}.");
                    ShowMenuForPlayer(Frontbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 565) // Flash
                {
                    AddVehicleComponent(car, 1153);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien front bumper component on Flash{A9A9A9}.");
                    ShowMenuForPlayer(Frontbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 559) // Jester
                {
                    AddVehicleComponent(car, 1160);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien front bumper component on Jester{A9A9A9}.");
                    ShowMenuForPlayer(Frontbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 561) // Stratum
                {
                    AddVehicleComponent(car, 1155);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien front bumper component on Stratum{A9A9A9}.");
                    ShowMenuForPlayer(Frontbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 560) // Sultan
                {
                    AddVehicleComponent(car, 1169);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien front bumper component on Sultan{A9A9A9}.");
                    ShowMenuForPlayer(Frontbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 558) // Uranus
                {
                    AddVehicleComponent(car, 1166);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien front bumper component on Uraus{A9A9A9}.");
                    ShowMenuForPlayer(Frontbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 1:
            if (pmodelid[playerid] == 562 || pmodelid[playerid] == 565 || pmodelid[playerid] == 559 || pmodelid[playerid] == 561 || pmodelid[playerid] == 560)
			{
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 562) // Elegy
                {
                    AddVehicleComponent(car, 1172);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch X-Flow front bumper component on Elegy{A9A9A9}.");
                    ShowMenuForPlayer(Frontbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 565) // Flash
                {
                    AddVehicleComponent(car, 1152);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch  X-Flow front bumper component on Flash{A9A9A9}.");
                    ShowMenuForPlayer(Frontbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 559) // Jetser
                {
                    AddVehicleComponent(car, 1173);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch  X-Flow front bumper component on Jester{A9A9A9}.");
                    ShowMenuForPlayer(Frontbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 561) // Stratum
                {
                    AddVehicleComponent(car, 1157);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch  X-Flow front bumper component on Stratum{A9A9A9}.");
                    ShowMenuForPlayer(Frontbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 560) // Sultan
                {
                    AddVehicleComponent(car, 1170);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch  X-Flow front bumper component on Sultan{A9A9A9}.");
                    ShowMenuForPlayer(Frontbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 558) // Uranus
                {
                    AddVehicleComponent(car, 1165);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch  X-Flow front bumper component on Uranus{A9A9A9}.");
                    ShowMenuForPlayer(Frontbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 2:

            if (pmodelid[playerid] == 575 || pmodelid[playerid] == 534 || pmodelid[playerid] == 567 || pmodelid[playerid] == 536 || pmodelid[playerid] == 576 || pmodelid[playerid] == 535)
			{
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 575) // Brodway
                {
                    AddVehicleComponent(car, 1174);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chromer front bumper component on Brodway{A9A9A9}.");
                    ShowMenuForPlayer(Frontbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 534) // Remington
                {
                    AddVehicleComponent(car, 1179);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chromer front bumper component on Remington{A9A9A9}.");
                    ShowMenuForPlayer(Frontbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 567) // Savanna
                {
                    AddVehicleComponent(car, 1189);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chromer front bumper component on Savanna{A9A9A9}.");
                    ShowMenuForPlayer(Frontbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 536) // Blade
                {
                    AddVehicleComponent(car, 1182);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chromer front bumper component on Blade{A9A9A9}.");
                    ShowMenuForPlayer(Frontbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 535) // Slamvan
                {
                    AddVehicleComponent(car, 1115);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chromer front bumper component on Slamvan{A9A9A9}.");
                    ShowMenuForPlayer(Frontbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 576) // Tornado
                {
                    AddVehicleComponent(car, 1191);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chromer front bumper component on Tornado{A9A9A9}.");
                    ShowMenuForPlayer(Frontbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 3:
            if (pmodelid[playerid] == 575 || pmodelid[playerid] == 534 || pmodelid[playerid] == 567 || pmodelid[playerid] == 536 || pmodelid[playerid] == 576 || pmodelid[playerid] == 576)
			{
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 575) // Brodway
                {
                    AddVehicleComponent(car, 1175);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Slamin front bumper component on Brodway{A9A9A9}.");
                    ShowMenuForPlayer(Frontbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 534) // Remington
                {
                    AddVehicleComponent(car, 1185);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Slamin front bumper component on Remington{A9A9A9}.");
                    ShowMenuForPlayer(Frontbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 567) // Savanna
                {
                    AddVehicleComponent(car, 1188);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Slamin front bumper component on Savanna{A9A9A9}.");
                    ShowMenuForPlayer(Frontbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 536) // Blade
                {
                    AddVehicleComponent(car, 1181);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Slamin front bumper component on Blade{A9A9A9}.");
                    ShowMenuForPlayer(Frontbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 535) // Slamvan
                {
                    AddVehicleComponent(car, 1116);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Slamin front bumper component on Slamvan{A9A9A9}.");
                    ShowMenuForPlayer(Frontbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 576) // Tornado
                {
                    AddVehicleComponent(car, 1190);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Slamin front bumper component on Tornado{A9A9A9}.");
                    ShowMenuForPlayer(Frontbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 4:
		{
			    ShowMenuForPlayer(TuningMenu, playerid);
		}
        }
    }

    if (Current == Rearbumper)
	{
        switch (row)
		{
        case 0:
            if (pmodelid[playerid] == 562 || pmodelid[playerid] == 565 || pmodelid[playerid] == 559 || pmodelid[playerid] == 561 || pmodelid[playerid] == 560)
			{
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 562) // Elegy
                {
                    AddVehicleComponent(car, 1149);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien rear bumper component on Elegy{A9A9A9}.");
                    ShowMenuForPlayer(Rearbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 565) // Flash
                {
                    AddVehicleComponent(car, 1150);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien rear bumper component on Flash{A9A9A9}.");
                    ShowMenuForPlayer(Rearbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 559) // Jester
                {
                    AddVehicleComponent(car, 1159);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien rear bumper component on Jester{A9A9A9}.");
                    ShowMenuForPlayer(Rearbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 561) // Stratum
                {
                    AddVehicleComponent(car, 1154);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien rear bumper component on Stratum{A9A9A9}.");
                    ShowMenuForPlayer(Rearbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 560) // Sultan
                {
                    AddVehicleComponent(car, 1141);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien rear bumper component on Sultan{A9A9A9}.");
                    ShowMenuForPlayer(Rearbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 558) // Uranus
                {
                    AddVehicleComponent(car, 1168);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien rear bumper component on Uranus{A9A9A9}.");
                    ShowMenuForPlayer(Rearbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 1:
            if (pmodelid[playerid] == 562 || pmodelid[playerid] == 565 || pmodelid[playerid] == 559 || pmodelid[playerid] == 561 || pmodelid[playerid] == 560)
			{
			    new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 562) // Elegy
                {
                    AddVehicleComponent(car, 1148);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch  X-Flow rear bumper component on Elegy{A9A9A9}.");
                    ShowMenuForPlayer(Rearbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 565) // Flash
                {
                    AddVehicleComponent(car, 1151);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch  X-Flow rear bumper component on Flash{A9A9A9}.");
                    ShowMenuForPlayer(Rearbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 559) // Jetser
                {
                    AddVehicleComponent(car, 1161);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch  X-Flow rear bumper component on Jester{A9A9A9}.");
                    ShowMenuForPlayer(Rearbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 561) // Stratum
                {
                    AddVehicleComponent(car, 1156);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch  X-Flow rear bumper component on Stratum{A9A9A9}.");
                    ShowMenuForPlayer(Rearbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 560) // Sultan
                {
                    AddVehicleComponent(car, 1140);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch  X-Flow rear bumper component on Sultan{A9A9A9}.");
                    ShowMenuForPlayer(Rearbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 558) // Uranus
                {
                    AddVehicleComponent(car, 1167);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch  X-Flow rear bumper component on Uranus{A9A9A9}.");
                    ShowMenuForPlayer(Rearbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 2:
            if (pmodelid[playerid] == 575 || pmodelid[playerid] == 534 || pmodelid[playerid] == 567 || pmodelid[playerid] == 536 || pmodelid[playerid] == 576 || pmodelid[playerid] == 535)
			{
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 575) // Brodway
                {
                    AddVehicleComponent(car, 1176);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chromer rear bumper component on Brodway{A9A9A9}.");
                    ShowMenuForPlayer(Rearbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 534) // Remington
                {
                    AddVehicleComponent(car, 1180);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chromer rear bumper component on Remington{A9A9A9}.");
                    ShowMenuForPlayer(Rearbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 567) // Savanna
                {
                    AddVehicleComponent(car, 1187);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chromer rear bumper component on Savanna{A9A9A9}.");
                    ShowMenuForPlayer(Rearbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 536) // Blade
                {
                    AddVehicleComponent(car, 1184);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chromer rear bumper component on Blade{A9A9A9}.");
                    ShowMenuForPlayer(Rearbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 535) // Slamvan
                {
                    AddVehicleComponent(car, 1109);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chromer rear bumper component on Slamvan{A9A9A9}.");
                    ShowMenuForPlayer(Rearbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 576) // Tornado
                {
                    AddVehicleComponent(car, 1192);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chromer rear bumper component on Tornado{A9A9A9}.");
                    ShowMenuForPlayer(Rearbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 3:
            if (pmodelid[playerid] == 575 || pmodelid[playerid] == 534 || pmodelid[playerid] == 567 || pmodelid[playerid] == 536 || pmodelid[playerid] == 576 || pmodelid[playerid] == 535)
			{
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 575) // Brodway
                {
                    AddVehicleComponent(car, 1177);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Slamin rear bumper component on Brodway{A9A9A9}.");
                    ShowMenuForPlayer(Rearbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 534) // Remington
                {
                    AddVehicleComponent(car, 1178);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Slamin rear bumper component on Remington{A9A9A9}.");
                    ShowMenuForPlayer(Rearbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 567) // Savanna
                {
                    AddVehicleComponent(car, 1186);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Slamin rear bumper component on Savanna{A9A9A9}.");
                    ShowMenuForPlayer(Rearbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 536) // Blade
                {
                    AddVehicleComponent(car, 1183);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Slamin rear bumper component on Blade{A9A9A9}.");
                    ShowMenuForPlayer(Rearbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 535) // Slamvan
                {
                    AddVehicleComponent(car, 1110);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Slamin rear bumper component on Slamvan{A9A9A9}.");
                    ShowMenuForPlayer(Rearbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 576) // Tornado
                {
                    AddVehicleComponent(car, 1193);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Slamin rear bumper component on Tornado{A9A9A9}.");
                    ShowMenuForPlayer(Rearbumper, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 4:
        {
			    ShowMenuForPlayer(TuningMenu, playerid);
        }
        }
    }

    if (Current == Roof)
	{
        switch (row)
		{
        case 0:
            if (pmodelid[playerid] == 562 || pmodelid[playerid] == 565 || pmodelid[playerid] == 559 || pmodelid[playerid] == 561 || pmodelid[playerid] == 560)
			{
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 562) // Elegy
                {
                    AddVehicleComponent(car, 1035);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien roof vent component on Elegy{A9A9A9}.");
                    ShowMenuForPlayer(Roof, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 565) // Flash
                {
                    AddVehicleComponent(car, 1054);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien roof vent component on Flash{A9A9A9}.");
                    ShowMenuForPlayer(Roof, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 559) // Jester
                {
                    AddVehicleComponent(car, 1067);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien roof vent component on Jester{A9A9A9}.");
                    ShowMenuForPlayer(Roof, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 561) // Stratum
                {
                    AddVehicleComponent(car, 1055);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien roof vent component on Stratum{A9A9A9}.");
                    ShowMenuForPlayer(Roof, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 560) // Sultan
                {
                    AddVehicleComponent(car, 1032);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien roof vent component on Sultan{A9A9A9}.");
                    ShowMenuForPlayer(Roof, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 558) // Uranus
                {
                    AddVehicleComponent(car, 1088);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien roof vent component on Uranus{A9A9A9}.");
                    ShowMenuForPlayer(Roof, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 1:
            if (pmodelid[playerid] == 562 || pmodelid[playerid] == 565 || pmodelid[playerid] == 559 || pmodelid[playerid] == 561 || pmodelid[playerid] == 560)
			{
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 562) // Elegy
                {
                    AddVehicleComponent(car, 1035);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch X-Flow roof vent component on Elegy{A9A9A9}.");
                    ShowMenuForPlayer(Roof, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 565) // Flash
                {
                    AddVehicleComponent(car, 1053);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch X-Flow roof vent component on Flash{A9A9A9}.");
                    ShowMenuForPlayer(Roof, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 559) // Jetser
                {
                    AddVehicleComponent(car, 1068);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch X-Flow roof vent component on Jester{A9A9A9}.");
                    ShowMenuForPlayer(Roof, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 561) // Stratum
                {
                    AddVehicleComponent(car, 1061);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch X-Flow roof vent component on Stratum{A9A9A9}.");
                    ShowMenuForPlayer(Roof, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 560) // Sultan
                {
                    AddVehicleComponent(car, 1033);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch X-Flow roof vent component on Sultan{A9A9A9}.");
                    ShowMenuForPlayer(Roof, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 558) // Uranus
                {
                    AddVehicleComponent(car, 1091);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch X-Flow roof vent component on Uranus{A9A9A9}.");
                    ShowMenuForPlayer(Roof, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 2:
            if (pmodelid[playerid] == 567 || pmodelid[playerid] == 536)
			{
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 567) // Savanna
                {
                    AddVehicleComponent(car, 1130);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Hardtop Roof component on Brodway{A9A9A9}.");
                    ShowMenuForPlayer(Roof, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 536) // Blade
                {
                    AddVehicleComponent(car, 1128);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Hardtop Roof component on Blade{A9A9A9}.");
                    ShowMenuForPlayer(Roof, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[WARNING] You can only add this component to Locos Low Car types Savanna and Blade{A9A9A9}.");
                ShowMenuForPlayer(Roof, playerid);
            }
        case 3:
            if (pmodelid[playerid] == 567 || pmodelid[playerid] == 536)
			{
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 567) // Savanna
                {
                    AddVehicleComponent(car, 1131);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Softtop Roof component on Brodway{A9A9A9}.");
                    ShowMenuForPlayer(Roof, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 536) // Blade
                {
                    AddVehicleComponent(car, 1103);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Softtop Roof component on Blade{A9A9A9}.");
                    ShowMenuForPlayer(Roof, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[WARNING] You can only add this component to Locos Low Car types Savanna and Blade{A9A9A9}.");
                ShowMenuForPlayer(Roof, playerid);
            }
        case 4:
		{
		    SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
		}
        }
    }

    if (Current == Spoilers)
	{
        switch (row)
		{
        case 0:
            if (pmodelid[playerid] == 562 || pmodelid[playerid] == 565 || pmodelid[playerid] == 559 || pmodelid[playerid] == 561 || pmodelid[playerid] == 560)
			{
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 562) // Elegy
                {
                    AddVehicleComponent(car, 1147);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien Spoilers component on Elegy{A9A9A9}.");
                    ShowMenuForPlayer(Spoilers, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 565) // Flash
                {
                    AddVehicleComponent(car, 1049);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien Spoilers component on Flash{A9A9A9}.");
                    ShowMenuForPlayer(Spoilers, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 559) // Jester
                {
                    AddVehicleComponent(car, 1162);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien Spoilers component on Jester{A9A9A9}.");
                    ShowMenuForPlayer(Spoilers, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 561) // Stratum
                {
                    AddVehicleComponent(car, 1158);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien Spoilers component on Stratum{A9A9A9}.");
                    ShowMenuForPlayer(Spoilers, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 560) // Sultan
                {
                    AddVehicleComponent(car, 1138);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien Spoilers component on Sultan{A9A9A9}.");
                    ShowMenuForPlayer(Spoilers, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 558) // Uranus
                {
                    AddVehicleComponent(car, 1164);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien Spoilers component on Uranus{A9A9A9}.");
                    ShowMenuForPlayer(Spoilers, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não pode adicionar isso.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 1:
            if (pmodelid[playerid] == 562 || pmodelid[playerid] == 565 || pmodelid[playerid] == 559 || pmodelid[playerid] == 561 || pmodelid[playerid] == 560)
			{
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 562) // Elegy
                {
                    AddVehicleComponent(car, 1146);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch X-Flow Spoilers component on Elegy{A9A9A9}.");
                    ShowMenuForPlayer(Spoilers, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 565) // Flash
                {
                    AddVehicleComponent(car, 1150);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch X-Flow Spoilers component on Flash{A9A9A9}.");
                    ShowMenuForPlayer(Spoilers, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 559) // Jetser
                {
                    AddVehicleComponent(car, 1158);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch X-Flow Spoilers component on Jester{A9A9A9}.");
                    ShowMenuForPlayer(Spoilers, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 561) // Stratum
                {
                    AddVehicleComponent(car, 1060);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch X-Flow Spoilers component on Stratum{A9A9A9}.");
                    ShowMenuForPlayer(Spoilers, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 560) // Sultan
                {
                    AddVehicleComponent(car, 1139);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch X-Flow Spoilers component on Sultan{A9A9A9}.");
                    ShowMenuForPlayer(Spoilers, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 558) // Uranus
                {
                    AddVehicleComponent(car, 1163);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch X-Flow Spoilers component on Uranus{A9A9A9}.");
                    ShowMenuForPlayer(Spoilers, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 2:
            {
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        }
    }

    if (Current == Sideskirts) {

        switch (row)
		{
        case 0:
            if (pmodelid[playerid] == 562 || pmodelid[playerid] == 565 || pmodelid[playerid] == 559 || pmodelid[playerid] == 561 || pmodelid[playerid] == 560)
			{
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 562) // Elegy
                {
                    AddVehicleComponent(car, 1036);
                    AddVehicleComponent(car, 1040);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien Side Skirts component on Elegy{A9A9A9}.");
                    ShowMenuForPlayer(Sideskirts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 565) // Flash
                {
                    AddVehicleComponent(car, 1047);
                    AddVehicleComponent(car, 1051);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien Sideskirts vent component on Flash{A9A9A9}.");
                    ShowMenuForPlayer(Sideskirts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 559) // Jester
                {
                    AddVehicleComponent(car, 1069);
                    AddVehicleComponent(car, 1071);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien Side Skirts component on Jester{A9A9A9}.");
                    ShowMenuForPlayer(Sideskirts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 561) // Stratum
                {
                    AddVehicleComponent(car, 1056);
                    AddVehicleComponent(car, 1062);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien Side Skirts component on Stratum{A9A9A9}.");
                    ShowMenuForPlayer(Sideskirts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 560) // Sultan
                {
                    AddVehicleComponent(car, 1026);
                    AddVehicleComponent(car, 1027);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien Side Skirts bumper component on Sultan{A9A9A9}.");
                    ShowMenuForPlayer(Sideskirts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 558) // Uranus
                {
                    AddVehicleComponent(car, 1090);
                    AddVehicleComponent(car, 1094);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch Alien Side Skirts component on Uranus{A9A9A9}.");
                    ShowMenuForPlayer(Sideskirts, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 1:
            if (pmodelid[playerid] == 562 || pmodelid[playerid] == 565 || pmodelid[playerid] == 559 || pmodelid[playerid] == 561 || pmodelid[playerid] == 560)
			{
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 562) // Elegy
                {
                    AddVehicleComponent(car, 1039);
                    AddVehicleComponent(car, 1041);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch X-Flow Side Skirts component on Elegy{A9A9A9}.");
                    ShowMenuForPlayer(Sideskirts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 565) // Flash
                {
                    AddVehicleComponent(car, 1048);
                    AddVehicleComponent(car, 1052);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch X-Flow Side Skirts component on Flash{A9A9A9}.");
                    ShowMenuForPlayer(Sideskirts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 559) // Jetser
                {
                    AddVehicleComponent(car, 1070);
                    AddVehicleComponent(car, 1072);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch X-Flow Side Skirts component on Jester{A9A9A9}.");
                    ShowMenuForPlayer(Sideskirts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 561) // Stratum
                {
                    AddVehicleComponent(car, 1057);
                    AddVehicleComponent(car, 1063);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch X-Flow Side Skirts component on Stratum{A9A9A9}.");
                    ShowMenuForPlayer(Sideskirts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 560) // Sultan
                {
                    AddVehicleComponent(car, 1031);
                    AddVehicleComponent(car, 1030);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch X-Flow Side Skirts component on Sultan{A9A9A9}.");
                    ShowMenuForPlayer(Sideskirts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 558) // Uranus
                {
                    AddVehicleComponent(car, 1093);
                    AddVehicleComponent(car, 1095);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wheel Arch X-Flow Side Skirts component on Uranus{A9A9A9}.");
                    ShowMenuForPlayer(Sideskirts, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso à esse veículo.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 2:
            if (pmodelid[playerid] == 575 || pmodelid[playerid] == 536 || pmodelid[playerid] == 576 || pmodelid[playerid] == 567)
			{
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 575) // Brodway
                {
                    AddVehicleComponent(car, 1042);
                    AddVehicleComponent(car, 1099);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chrome Strip Side Skirts component on Brodway{A9A9A9}.");
                    ShowMenuForPlayer(Sideskirts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 567) // Savanna
                {
                    AddVehicleComponent(car, 1102);
                    AddVehicleComponent(car, 1133);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chrome Strip Side Skirts component on Savanna{A9A9A9}.");
                    ShowMenuForPlayer(Sideskirts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 576) // Tornado
                {
                    AddVehicleComponent(car, 1134);
                    AddVehicleComponent(car, 1137);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chrome Strip Side Skirts component on Tornado{A9A9A9}.");
                    ShowMenuForPlayer(Sideskirts, playerid);
                    empmoney(playerid, 19, 500);
                }
				else if (pmodelid[playerid] == 536) // Blade
                {
                    AddVehicleComponent(car, 1108);
                    AddVehicleComponent(car, 1107);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chrome Strip Side Skirts component on Blade{A9A9A9}.");
                    ShowMenuForPlayer(Sideskirts, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso à esse veículo.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 3:
            if (pmodelid[playerid] == 534 || pmodelid[playerid] == 534)
			{
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 534) // Remington
                {
                    AddVehicleComponent(car, 1122);
                    AddVehicleComponent(car, 1101);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chrome Flames Side Skirts component on Remington{A9A9A9}.");
                    ShowMenuForPlayer(Sideskirts, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso à esse veículo.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 4:
            if (pmodelid[playerid] == 534 || pmodelid[playerid] == 534)
			{
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 534) // Remington
                {
                    AddVehicleComponent(car, 1106);
                    AddVehicleComponent(car, 1124);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chrome Arches Side Skirts component on Remington{A9A9A9}.");
                    ShowMenuForPlayer(Sideskirts, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso à esse veículo.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 5:
            if (pmodelid[playerid] == 535)
            {
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 535) // Slamvan
                {
                    AddVehicleComponent(car, 1118);
                    AddVehicleComponent(car, 1120);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chrome Trim Side Skirts component on Slamvan{A9A9A9}.");
                    ShowMenuForPlayer(Sideskirts, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso à esse veículo.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 6:
            if (pmodelid[playerid] == 535)
            {
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 535) // Slamvan
                {
                    AddVehicleComponent(car, 1119);
                    AddVehicleComponent(car, 1121);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chrome Wheelcovers component on Slamvan{A9A9A9}.");
                    ShowMenuForPlayer(Sideskirts, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso à esse veículo.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 7:
		{
		    SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
		}
        }
    }

    if (Current == Bullbars)
	{
        switch (row)
		{
        case 0:
            if (pmodelid[playerid] == 534)
            {
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 534) // Remington
                {
                    AddVehicleComponent(car, 1100);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chrome Grill component on Remington{A9A9A9}.");
                    ShowMenuForPlayer(Bullbars, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso à esse veículo.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 1:
            if (pmodelid[playerid] == 534)
            {
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 534) // Remington
                {
                    AddVehicleComponent(car, 1123);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chrome Bars component on Remington{A9A9A9}.");
                    ShowMenuForPlayer(Bullbars, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso à esse veículo.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 2:
            if (pmodelid[playerid] == 534)
            {
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 534) // Remington
                {
                    AddVehicleComponent(car, 1125);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chrome Lights component on Remington{A9A9A9}.");
                    ShowMenuForPlayer(Bullbars, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso à esse veículo.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 3:
            if (pmodelid[playerid] == 535)
            {
                new car = GetPlayerVehicleID(playerid);
                if (pmodelid[playerid] == 535) // Slamvan
                {
                    AddVehicleComponent(car, 1117);
                    SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Locos Low Chrome Lights component on Slamvan{A9A9A9}.");
                    ShowMenuForPlayer(Bullbars, playerid);
                    empmoney(playerid, 19, 500);
                }
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[AVISO] Você não pode adicionar isso à esse veículo.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 4:
		{
		    SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
		}
        }
    }

    if (Current == Wheels)
	{
        switch (row)
		{
        case 0:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                AddVehicleComponent(car, 1025);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Offroad Wheels{A9A9A9}.");
                ShowMenuForPlayer(Wheels, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 1:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                AddVehicleComponent(car, 1074);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Mega Wheels{A9A9A9}.");
                ShowMenuForPlayer(Wheels, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 2:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                AddVehicleComponent(car, 1076);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Wires Wheels{A9A9A9}.");
                ShowMenuForPlayer(Wheels, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 3:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                AddVehicleComponent(car, 1078);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Twist Wheels{A9A9A9}.");
                ShowMenuForPlayer(Wheels, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
                ShowMenuForPlayer(Wheels, playerid);
            }
        case 4:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                AddVehicleComponent(car, 1081);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Grove Wheels{A9A9A9}.");
                ShowMenuForPlayer(Wheels, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 5:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                AddVehicleComponent(car, 1082);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Import Wheels{A9A9A9}.");
                ShowMenuForPlayer(Wheels, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 6:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                AddVehicleComponent(car, 1085);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Atomic Wheels{A9A9A9}.");
                ShowMenuForPlayer(Wheels, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 7:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                AddVehicleComponent(car, 1096);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Ahab Wheels{A9A9A9}.");
                ShowMenuForPlayer(Wheels, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 8:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                AddVehicleComponent(car, 1097);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Virtual Wheels{A9A9A9}.");
                ShowMenuForPlayer(Wheels, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 9:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                AddVehicleComponent(car, 1098);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Access Wheels{A9A9A9}.");
                ShowMenuForPlayer(Wheels, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 10:
            {
                ShowMenuForPlayer(Wheels1, playerid);
            }
        case 11:
            {
                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
				SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        }
    }

    if (Current == Neon)
	{
        switch (row)
		{
        case 0:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                SetVehicleNeon(car, Neon_Azul, true);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Neon Azul{A9A9A9}.");
                ShowMenuForPlayer(Neon, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
                ShowMenuForPlayer(TuningMenu1, playerid);
            }
        case 1:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                SetVehicleNeon(car, Neon_Vermelho, true);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Neon Vermelho{A9A9A9}.");
                ShowMenuForPlayer(Neon, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
                ShowMenuForPlayer(TuningMenu1, playerid);
            }
        case 2:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                SetVehicleNeon(car, Neon_Verde, true);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Neon Verde{A9A9A9}.");
                ShowMenuForPlayer(Neon, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
                ShowMenuForPlayer(TuningMenu1, playerid);
            }
        case 3:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                SetVehicleNeon(car, Neon_Branco, true);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Neon Branco{A9A9A9}.");
                ShowMenuForPlayer(Neon, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
                ShowMenuForPlayer(TuningMenu1, playerid);
            }
        case 4:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                SetVehicleNeon(car, Neon_Rosa, true);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Neon Rosa{A9A9A9}.");
                ShowMenuForPlayer(Neon, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
                ShowMenuForPlayer(TuningMenu1, playerid);
            }
        case 5:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                SetVehicleNeon(car, Neon_Amarelo, true);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Neon Amarelo{A9A9A9}.");
                ShowMenuForPlayer(Neon, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
                ShowMenuForPlayer(TuningMenu1, playerid);
            }
        case 6:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                SetVehicleNeon(car, 0, false);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você removeu{FFFF00} Todos os Neons{A9A9A9}.");
                ShowMenuForPlayer(Neon, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
                ShowMenuForPlayer(TuningMenu1, playerid);
            }
        case 7:
            {
                ShowMenuForPlayer(TuningMenu1, playerid);
            }
        }
    }

    if (Current == Wheels1)
	{
        switch (row)
		{
        case 0:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                AddVehicleComponent(car, 1084);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Trance Wheels{A9A9A9}.");
                ShowMenuForPlayer(Wheels1, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 1:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                AddVehicleComponent(car, 1073);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Shadow Wheels{A9A9A9}.");
                ShowMenuForPlayer(Wheels1, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 2:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                AddVehicleComponent(car, 1075);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Rimshine Wheels{A9A9A9}.");
                ShowMenuForPlayer(Wheels1, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 3:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                AddVehicleComponent(car, 1077);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Classic Wheels{A9A9A9}.");
                ShowMenuForPlayer(Wheels1, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
                ShowMenuForPlayer(Wheels, playerid);
            }
        case 4:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                AddVehicleComponent(car, 1079);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Cutter Wheels{A9A9A9}.");
                ShowMenuForPlayer(Wheels1, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 5:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                AddVehicleComponent(car, 1080);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Switch Wheels{A9A9A9}.");
                ShowMenuForPlayer(Wheels1, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 6:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                AddVehicleComponent(car, 1083);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Dollar Wheels{A9A9A9}.");
                ShowMenuForPlayer(Wheels1, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 7:
            {
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        }
    }

    if (Current == Carstereo)
	{
        switch (row)
		{
        case 0:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                AddVehicleComponent(car, 1086);
                PutSound(car);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Stereo Bass bost system{A9A9A9}.");
                ShowMenuForPlayer(Carstereo, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 1:
            {
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        }
    }

    if (Current == Hydraulics)
	{
        switch (row)
		{
        case 0:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                AddVehicleComponent(car, 1087);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} Hydraulics{A9A9A9} ao veículo");
                ShowMenuForPlayer(Hydraulics, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 1:
            {
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        }
    }

    if (Current == Nitro)
	{
        switch (row)
		{
        case 0:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                AddVehicleComponent(car, 1008);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} 2x Nitro{A9A9A9} ao veículo");
                ShowMenuForPlayer(Nitro, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 1:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                AddVehicleComponent(car, 1009);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou{FFFF00} 5x Nitro{A9A9A9} ao veículo");
                ShowMenuForPlayer(Nitro, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 2:
            if (GetPlayerMoney(playerid) >= 0)
			{
                new car = GetPlayerVehicleID(playerid);
                AddVehicleComponent(car, 1010);
                SendClientMessage(playerid, COLOR_GRAD1, "[INFO] Você adicicionou {FFFF00}10x Nitro{A9A9A9} ao veículo");
                ShowMenuForPlayer(Nitro, playerid);
                empmoney(playerid, 19, 500);
            } else {
                SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você não contém dinheiro.");
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        case 3:
            {
			    ShowMenuForPlayer(TuningMenu, playerid);
            }
        }
    }

    if (Current == TuningMenu1)
	{
        switch (row)
		{
	        case 0:
			{
	            if (IsPlayerConnected(playerid))
				{
	                ShowMenuForPlayer(Hydraulics, playerid);
	            }
			}
	        case 1:
	        {
	            if (IsPlayerConnected(playerid))
				{
	                ShowMenuForPlayer(Nitro, playerid);
	            }
			}
	        case 2:
			{
	            if (IsPlayerConnected(playerid))
				{
	                ShowMenuForPlayer(Neon, playerid);
	            }
			}
	        case 3:
	        {
	            if (IsPlayerConnected(playerid))
	            {
	                RepairVehicleWithBomber(GetPlayerVehicleID(playerid));
	                SendClientMessage(playerid, COLOR_YELLOW, "[INFO] Você reparou seu veículo.");
	                ShowMenuForPlayer(TuningMenu1, playerid);
	                empmoney(playerid, 19, 500);

	            }
			}
			case 4:
	  		{
	             	if(IsPlayerInAnyVehicle(playerid))
					{
		                Controle(playerid, 1);
						SendClientMessage(playerid, COLOR_GRAD2,"Você fechou o menu Tunning.");
						SetCameraBehindPlayer(playerid);
						SetPlayerInterior(playerid,0);
	                    TunningOn[playerid] = 0;

						return 1;
					}
	    	}
	        case 5:
			{
	            if (IsPlayerConnected(playerid))
				{
	                SetPlayerCameraPos(playerid, 1780.1196, -1709.9355, -61.5949);
					SetPlayerCameraLookAt(playerid, 1779.6116, -1710.7952, -61.9699);
				    ShowMenuForPlayer(TuningMenu, playerid);
	            }
			}
		}
    }
    return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    if(response)
	{
	    AcessorioInfo[playerid][index][aSlot] = index;
	    AcessorioInfo[playerid][index][aLocal] = boneid;
	    AcessorioInfo[playerid][index][aModel] = modelid;
	    AcessorioInfo[playerid][index][aX] = fOffsetX;
	    AcessorioInfo[playerid][index][aY] = fOffsetY;
	    AcessorioInfo[playerid][index][aZ] = fOffsetZ;
	    AcessorioInfo[playerid][index][aRX] = fRotX;
	    AcessorioInfo[playerid][index][aRY] = fRotY;
	    AcessorioInfo[playerid][index][aRZ] = fRotZ;
	    AcessorioInfo[playerid][index][aTX] = fScaleX;
	    AcessorioInfo[playerid][index][aTY] = fScaleY;
	    AcessorioInfo[playerid][index][aTZ] = fScaleZ;
	    SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
	    SendClientMessage(playerid, -1, "* Objeto editado com sucesso!");
	    SendClientMessage(playerid, -1, "* OBS: caso queira reposicionar ou guardar o item use /acessorios.");
	}
    else
    {
        for(new i; i<75; i++)
        {
            if(InventarioInfo[playerid][i][iSlot] == 19382)
            {
            InventarioInfo[playerid][i][iSlot] = modelid;
            InventarioInfo[playerid][i][iUnidades] = 1;
            RemovePlayerAttachedObject(playerid,index);
            AcessorioInfo[playerid][index][aLocal] = 0;
	    	AcessorioInfo[playerid][index][aModel] = 0;
            SendClientMessage(playerid, -1, "* Você cancelou a edição, seu item foi guardado em seu inventario!");
            return 1;
            }
        }
        SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
        SendClientMessage(playerid, -1, "* Seu inventário está cheio!");
    }
	if(response)
	{
	    if(fScaleX > 5.0 || fScaleY > 5.0 || fScaleZ > 5.0)
	    {
	        SendClientMessage(playerid, 0xFFFFFFFF, "Objeto Muito Grande Diminua!");
	        EditAttachedObject(playerid, index);
	        return 1;
	    }
	    SendClientMessage(playerid, 0x00AA00FF, "[!] {FFFFFF}Acessório editado com sucesso, use {00FFFF}/acessorios {FFFFFF}para remover ou editá-los novamente!");
	}
    PosicionarObjetos(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
	SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);

	return 1;
}
forward CarregarTituloPersonalizado(playerid);
public CarregarTituloPersonalizado(playerid)
{
        new string2[128];
	    format(string2, sizeof(string2), Pasta_Contas, PlayerName(playerid));
	    strmid(PlayerInfo[playerid][pTITULOP],DOF2_GetString(string2,"TituloPersonalizado"),0,strlen(DOF2_GetString(string2,"TituloPersonalizado")),255);
   		Titulos[playerid][13] = 1;
	return 1;
}
//SISTEMA DE ATENDIMENTO
public TempoAtendimento()
{
    foreach(Player, i)
	{
    	if(FilaAtendimento[i] != 999 && IsPlayerConnected(i))
    	{
             TempoAtendimento2[i]++;
    	}
	}
    return 1;
}
public CBConquistas(playerid)
{
	new stringconq[64];
	if(PlayerInfo[playerid][CMATOU10] == 0)
	{
		if(PlayerInfo[playerid][pKills] == 50)
		{
			TextDrawShowForPlayer(playerid, Conquistas[0]);
			TextDrawShowForPlayer(playerid, Conquistas[1]);
			TextDrawShowForPlayer(playerid, Conquistas[2]);
			TextDrawShowForPlayer(playerid, Conquistas[3]);
			TextDrawShowForPlayer(playerid, Conquistas[4]);
			TextDrawShowForPlayer(playerid, Conquistas[5]);

			format(stringconq,sizeof(stringconq),"$2000_-_Matar 50 Vezes");
			TextDrawSetString(Conquistas[3], stringconq);
			SetTimerEx("FecharConquistas", 15000, false, "i", playerid);
			PlayerInfo[playerid][CMATOU10] += 1;
			PlayerInfo[playerid][CBConq] += 1;
			PlayerPlaySound(playerid,1138,0.0,0.0,0.0);
			GiveDinheiro(playerid, 2000);
		}
	}
	if(PlayerInfo[playerid][CMORREU10] == 0)
	{
		if(PlayerInfo[playerid][pDeaths] == 150)
		{
  			TextDrawShowForPlayer(playerid, Conquistas[0]);
			TextDrawShowForPlayer(playerid, Conquistas[1]);
			TextDrawShowForPlayer(playerid, Conquistas[2]);
			TextDrawShowForPlayer(playerid, Conquistas[3]);
			TextDrawShowForPlayer(playerid, Conquistas[4]);
			TextDrawShowForPlayer(playerid, Conquistas[5]);

			format(stringconq,sizeof(stringconq),"$1550_-_Morrer 150 Vezes");
			TextDrawSetString(Conquistas[3], stringconq);
			SetTimerEx("FecharConquistas", 15000, false, "i", playerid);
			PlayerInfo[playerid][CMORREU10] += 1;
			PlayerInfo[playerid][CBConq] += 1;
			PlayerPlaySound(playerid,1138,0.0,0.0,0.0);
			GiveDinheiro(playerid, 15000);
		}
	}
	if(PlayerInfo[playerid][CLEVEL2] == 0)
	{
		if(PlayerInfo[playerid][pLevel] == 5)
		{
	        TextDrawShowForPlayer(playerid, Conquistas[0]);
			TextDrawShowForPlayer(playerid, Conquistas[1]);
			TextDrawShowForPlayer(playerid, Conquistas[2]);
			TextDrawShowForPlayer(playerid, Conquistas[3]);
			TextDrawShowForPlayer(playerid, Conquistas[4]);
			TextDrawShowForPlayer(playerid, Conquistas[5]);

			format(stringconq,sizeof(stringconq),"$7000_-_Upar nivel 5");
			TextDrawSetString(Conquistas[3], stringconq);
			SetTimerEx("FecharConquistas", 15000, false, "i", playerid);
			PlayerInfo[playerid][CLEVEL2] += 1;
			PlayerInfo[playerid][CBConq] += 1;
			PlayerPlaySound(playerid,1138,0.0,0.0,0.0);
			GiveDinheiro(playerid, 15000);
		}
	}
		if(PlayerInfo[playerid][CLIDER] == 0)
	{
		if(PlayerInfo[playerid][pLider] >= 1)
		{
	        TextDrawShowForPlayer(playerid, Conquistas[0]);
			TextDrawShowForPlayer(playerid, Conquistas[1]);
			TextDrawShowForPlayer(playerid, Conquistas[2]);
			TextDrawShowForPlayer(playerid, Conquistas[3]);
			TextDrawShowForPlayer(playerid, Conquistas[4]);
			TextDrawShowForPlayer(playerid, Conquistas[5]);

			format(stringconq,sizeof(stringconq),"$8000_-_Virar Lider");
			TextDrawSetString(Conquistas[3], stringconq);
			SetTimerEx("FecharConquistas", 15000, false, "i", playerid);
			PlayerInfo[playerid][CLIDER] += 1;
			PlayerInfo[playerid][CBConq] += 1;
			PlayerPlaySound(playerid,1138,0.0,0.0,0.0);
			GiveDinheiro(playerid, 8000);
		}
	}
      if(PlayerInfo[playerid][CNOVATO] == 0)
	   {
		if(PlayerInfo[playerid][pRegisconquista] == 1)
		{
	        TextDrawShowForPlayer(playerid, Conquistas[0]);
			TextDrawShowForPlayer(playerid, Conquistas[1]);
			TextDrawShowForPlayer(playerid, Conquistas[2]);
			TextDrawShowForPlayer(playerid, Conquistas[3]);
			TextDrawShowForPlayer(playerid, Conquistas[4]);
			TextDrawShowForPlayer(playerid, Conquistas[5]);

			format(stringconq,sizeof(stringconq),"$1000_-_Registrando_no_servidor");
			TextDrawSetString(Conquistas[3], stringconq);
			SetTimerEx("FecharConquistas", 15000, false, "i", playerid);
			PlayerInfo[playerid][CNOVATO] += 1;
			PlayerInfo[playerid][CBConq] += 1;
			PlayerPlaySound(playerid,1138,0.0,0.0,0.0);
			GiveDinheiro(playerid, 1000);
		}
	}
	if(PlayerInfo[playerid][CPRESENTE] == 0)
	   {
		if(PlayerInfo[playerid][pNatal] == char)
		{
	        TextDrawShowForPlayer(playerid, Conquistas[0]);
			TextDrawShowForPlayer(playerid, Conquistas[1]);
			TextDrawShowForPlayer(playerid, Conquistas[2]);
			TextDrawShowForPlayer(playerid, Conquistas[3]);
			TextDrawShowForPlayer(playerid, Conquistas[4]);
			TextDrawShowForPlayer(playerid, Conquistas[5]);

			format(stringconq,sizeof(stringconq),"$2000_-_Primeiro Presente");
			TextDrawSetString(Conquistas[3], stringconq);
			SetTimerEx("FecharConquistas", 1500, false, "i", playerid);
			PlayerInfo[playerid][CPRESENTE] += 1;
			PlayerInfo[playerid][CBConq] += 1;
			PlayerPlaySound(playerid,1138,0.0,0.0,0.0);
			GiveDinheiro(playerid, 2000);
		}
	}
	if(PlayerInfo[playerid][CEMPREGO] == 0)
	   {
		if(PlayerInfo[playerid][pEmprego] >= 1)
		{
	        TextDrawShowForPlayer(playerid, Conquistas[0]);
			TextDrawShowForPlayer(playerid, Conquistas[1]);
			TextDrawShowForPlayer(playerid, Conquistas[2]);
			TextDrawShowForPlayer(playerid, Conquistas[3]);
			TextDrawShowForPlayer(playerid, Conquistas[4]);
			TextDrawShowForPlayer(playerid, Conquistas[5]);

			format(stringconq,sizeof(stringconq),"$2000_-_Primeiro Emprego");
			TextDrawSetString(Conquistas[3], stringconq);
			SetTimerEx("FecharConquistas", 1500, false, "i", playerid);
			PlayerInfo[playerid][CEMPREGO] += 1;
			PlayerInfo[playerid][CBConq] += 1;
			PlayerPlaySound(playerid,1138,0.0,0.0,0.0);
			GiveDinheiro(playerid, 2000);
		}
	}
	if(PlayerInfo[playerid][CORG] == 0)
	   {
		if(PlayerInfo[playerid][pMembro] >= 1)
		{
	        TextDrawShowForPlayer(playerid, Conquistas[0]);
			TextDrawShowForPlayer(playerid, Conquistas[1]);
			TextDrawShowForPlayer(playerid, Conquistas[2]);
			TextDrawShowForPlayer(playerid, Conquistas[3]);
			TextDrawShowForPlayer(playerid, Conquistas[4]);
			TextDrawShowForPlayer(playerid, Conquistas[5]);

			format(stringconq,sizeof(stringconq),"$2000_-_Primeira ORG");
			TextDrawSetString(Conquistas[3], stringconq);
			SetTimerEx("FecharConquistas", 1500, false, "i", playerid);
			PlayerInfo[playerid][CORG] += 1;
			PlayerInfo[playerid][CBConq] += 1;
			PlayerPlaySound(playerid,1138,0.0,0.0,0.0);
			GiveDinheiro(playerid, 2000);
		}
	}
	if(PlayerInfo[playerid][CADMIN] == 0)
	   {
		if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pAdminTemp] >= 1)
		{
	        TextDrawShowForPlayer(playerid, Conquistas[0]);
			TextDrawShowForPlayer(playerid, Conquistas[1]);
			TextDrawShowForPlayer(playerid, Conquistas[2]);
			TextDrawShowForPlayer(playerid, Conquistas[3]);
			TextDrawShowForPlayer(playerid, Conquistas[4]);
			TextDrawShowForPlayer(playerid, Conquistas[5]);

			format(stringconq,sizeof(stringconq),"$1000000_-_Ser promovido a admin");
			TextDrawSetString(Conquistas[3], stringconq);
			SetTimerEx("FecharConquistas", 1500, false, "i", playerid);
			PlayerInfo[playerid][CADMIN] += 1;
			PlayerInfo[playerid][CBConq] += 1;
			PlayerPlaySound(playerid,1138,0.0,0.0,0.0);
			GiveDinheiro(playerid, 1000000);
		}
	}
	if(PlayerInfo[playerid][CHELPER] == 0)
	   {
		if(PlayerInfo[playerid][pHelper] >= 1)
		{
	        TextDrawShowForPlayer(playerid, Conquistas[0]);
			TextDrawShowForPlayer(playerid, Conquistas[1]);
			TextDrawShowForPlayer(playerid, Conquistas[2]);
			TextDrawShowForPlayer(playerid, Conquistas[3]);
			TextDrawShowForPlayer(playerid, Conquistas[4]);
			TextDrawShowForPlayer(playerid, Conquistas[5]);

			format(stringconq,sizeof(stringconq),"$5000_-_Ser promovido a Helper");
			TextDrawSetString(Conquistas[3], stringconq);
			SetTimerEx("FecharConquistas", 1500, false, "i", playerid);
			PlayerInfo[playerid][CHELPER] += 1;
			PlayerInfo[playerid][CBConq] += 1;
			PlayerPlaySound(playerid,1138,0.0,0.0,0.0);
			GiveDinheiro(playerid, 50000);
		}
	}
	if(PlayerInfo[playerid][CVIPS] == 0)
	   {
		if(PlayerInfo[playerid][pVIP] >= 1)
		{
	        TextDrawShowForPlayer(playerid, Conquistas[0]);
			TextDrawShowForPlayer(playerid, Conquistas[1]);
			TextDrawShowForPlayer(playerid, Conquistas[2]);
			TextDrawShowForPlayer(playerid, Conquistas[3]);
			TextDrawShowForPlayer(playerid, Conquistas[4]);
			TextDrawShowForPlayer(playerid, Conquistas[5]);

			format(stringconq,sizeof(stringconq),"$9000_-_Ser VIP");
			TextDrawSetString(Conquistas[3], stringconq);
			SetTimerEx("FecharConquistas", 1500, false, "i", playerid);
			PlayerInfo[playerid][CVIPS] += 1;
			PlayerInfo[playerid][CBConq] += 1;
			PlayerPlaySound(playerid,1138,0.0,0.0,0.0);
			GiveDinheiro(playerid, 9000);
		}
	}
	if(PlayerInfo[playerid][CHRSJOGADAS] == 0)
	   {
		if(PlayerInfo[playerid][pConnectTime] > 500)
		{
	        TextDrawShowForPlayer(playerid, Conquistas[0]);
			TextDrawShowForPlayer(playerid, Conquistas[1]);
			TextDrawShowForPlayer(playerid, Conquistas[2]);
			TextDrawShowForPlayer(playerid, Conquistas[3]);
			TextDrawShowForPlayer(playerid, Conquistas[4]);
			TextDrawShowForPlayer(playerid, Conquistas[5]);

			format(stringconq,sizeof(stringconq),"$15Cash_-_500 Horas jogadas");
			TextDrawSetString(Conquistas[3], stringconq);
			SetTimerEx("FecharConquistas", 1500, false, "i", playerid);
			PlayerInfo[playerid][CHRSJOGADAS] += 1;
			PlayerInfo[playerid][CBConq] += 1;
			PlayerPlaySound(playerid,1138,0.0,0.0,0.0);
			PlayerInfo[playerid][pCasher] += 15;
		}
	}
	if(PlayerInfo[playerid][CCASACONQUISTA] == 0)
	   {
		if(PlayerInfo[playerid][pPHousekey] != 500 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 0)
		{
	        TextDrawShowForPlayer(playerid, Conquistas[0]);
			TextDrawShowForPlayer(playerid, Conquistas[1]);
			TextDrawShowForPlayer(playerid, Conquistas[2]);
			TextDrawShowForPlayer(playerid, Conquistas[3]);
			TextDrawShowForPlayer(playerid, Conquistas[4]);
			TextDrawShowForPlayer(playerid, Conquistas[5]);

			format(stringconq,sizeof(stringconq),"$5000_-_Primeira Casa");
			TextDrawSetString(Conquistas[3], stringconq);
			SetTimerEx("FecharConquistas", 1500, false, "i", playerid);
			PlayerInfo[playerid][CCASACONQUISTA] += 1;
			PlayerInfo[playerid][CBConq] += 1;
			PlayerPlaySound(playerid,1138,0.0,0.0,0.0);
			GiveDinheiro(playerid, 50000);
		}
	}
	if(PlayerInfo[playerid][CEMPRESACONT] == 0)
	   {
		if(PlayerInfo[playerid][pPbiskey] != 255)
		{
	        TextDrawShowForPlayer(playerid, Conquistas[0]);
			TextDrawShowForPlayer(playerid, Conquistas[1]);
			TextDrawShowForPlayer(playerid, Conquistas[2]);
			TextDrawShowForPlayer(playerid, Conquistas[3]);
			TextDrawShowForPlayer(playerid, Conquistas[4]);
			TextDrawShowForPlayer(playerid, Conquistas[5]);

			format(stringconq,sizeof(stringconq),"$5Cash_-_Primeira Empresa");
			TextDrawSetString(Conquistas[3], stringconq);
			SetTimerEx("FecharConquistas", 1500, false, "i", playerid);
			PlayerInfo[playerid][CEMPRESACONT] += 1;
			PlayerInfo[playerid][CBConq] += 1;
			PlayerPlaySound(playerid,1138,0.0,0.0,0.0);
			PlayerInfo[playerid][pCasher] += 5;
		}
	}
	return 1;
}
forward FecharConquistas(playerid);
public FecharConquistas(playerid)
{
	TextDrawHideForPlayer(playerid, Conquistas[0]);
	TextDrawHideForPlayer(playerid, Conquistas[1]);
	TextDrawHideForPlayer(playerid, Conquistas[2]);
	TextDrawHideForPlayer(playerid, Conquistas[3]);
	TextDrawHideForPlayer(playerid, Conquistas[4]);
	TextDrawHideForPlayer(playerid, Conquistas[5]);
	return 1;
}
BPF::OnFilterScriptExit()
{
    for(new i =0; i<MAX_PLAYERS;i++)
	    takingselfie[i] = 0;
 return 1;
}
BPF::GetAmmo(playerid, slot, wep, ammo,i, pixacaoid)
{
    new newwep,newammo,string[128],gstring[900];
	if(wep == 41)
	{
	    GetPlayerWeaponData(playerid, 9, newwep, newammo);
		if(ammo - newammo > 20)
		{
	 		if(PlayerToPoint(3.0, playerid,Pixacao[i][PixX],Pixacao[i][PixY],Pixacao[i][PixZ]))
	 		{
				new DonoAntigo = Pixacao[i][Dono];
				if(GetPlayerOrg(playerid) != Pixacao[i][Dono] && GetPlayerOrg(playerid) != 0)
				{
				    if(GetPlayerOrg(playerid) == DonoAntigo)
				    {
						format(string, sizeof(string), "A gang %s rasurou uma de suas pixações.", NomeORG(playerid));
						SendFamilyMessage(DonoAntigo, COLOR_MARINE, string);
						Pixamento[DonoAntigo]--;
					}
					Pixacao[i][Dono] = GetPlayerOrg(playerid);
					format(string, sizeof(string), "Spray Tag\nPichador: %s\nOrganização dona: {%s}%s", PlayerName(playerid),GetPlayerColorEx(i),NomeORG(playerid));
					Update3DTextLabelText(PixLabel[i], 0xC0C0C077, string);
					format(gstring, sizeof(gstring), "%s e os %s Pixaram um Grafitti ", PlayerName(playerid), NomeORG(playerid));
					SendClientMessageToAll(GetPlayerColor(playerid), gstring);
					PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
					Pixamento[playerid]++;
				}
				else
				    SendClientMessage(playerid, COLOR_GREY,"[ERRO] Esta pixação já pertence à sua gang.");
			}
		}
		else
	        SendClientMessage(playerid, COLOR_GREY,"[ERRO] Você não usou spray suficiente");

        Pixando[playerid] = false;
	}
	return 1;
}
BPF::GetAmmo2(playerid, slot, wep, ammo,i, pixacaoid)
{
    new newwep,newammo,string[128];
	if(wep == 41)
	{
	    GetPlayerWeaponData(playerid, 9, newwep, newammo);
		if(ammo - newammo > 20)
		{
	 		if(PlayerToPoint(3.0, playerid,Pixacao[i][PixX],Pixacao[i][PixY],Pixacao[i][PixZ]))
	 		{
				new DonoAntigo = Pixacao[i][Dono];
				if(GetPlayerOrg(playerid) != Pixacao[i][Dono] && GetPlayerOrg(playerid) != 0 && Pixacao[i][Dono] != 0)
				{
				    if(GetPlayerOrg(playerid) == DonoAntigo)
				    {
						format(string, sizeof(string), "A Policia %s limpou uma de suas pixações.", NomeORG(playerid));
						SendFamilyMessage(DonoAntigo, COLOR_MARINE, string);
						Pixamento[DonoAntigo]--;
					}
					Pixacao[i][Dono] = 0;
					format(string, sizeof(string), "Spray Tag\nPichador: %s\nOrganização dona: {%s}%s", PlayerName(playerid),GetPlayerColorEx(i),NomeORG(playerid));
					Update3DTextLabelText(PixLabel[i], 0xC0C0C077, string);
					PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
					Pixamento[playerid]++;
     				format(string, sizeof(string), "Oficial: %s limpou uma pixação",PlayerName(playerid));
	                SendFamilyMessage(1, 0x77EEA1FF, string);
	                SendFamilyMessage(2, 0x77EEA1FF, string);
	                SendFamilyMessage(3, 0x77EEA1FF, string);
	                SendFamilyMessage(7, 0x77EEA1FF, string);
	                SendFamilyMessage(11, 0x77EEA1FF, string);
	                SendFamilyMessage(16, 0x77EEA1FF, string);
	                SendFamilyMessage(22, 0x77EEA1FF, string);
	                SendFamilyMessage(26, 0x77EEA1FF, string);
	                SendFamilyMessage(27, 0x77EEA1FF, string);
	                SendFamilyMessage(28, 0x77EEA1FF, string);
	                SendFamilyMessage(32, 0x77EEA1FF, string);
	                SendFamilyMessage(33, 0x77EEA1FF, string);
				}
				else
				    SendClientMessage(playerid, COLOR_GREY,"[ERRO] Esta pixação já está sem dono.");
			}
		}
		else
	        SendClientMessage(playerid, COLOR_GREY,"[ERRO] Você não usou spray suficiente");

        Pixando[playerid] = false;
	}
	return 1;
}
stock GetPixacaoOwner(pixacaoid)
{
	new dono[20];
	if(Pixacao[pixacaoid][Dono] == 0)
	    dono = "Nenhum";
	else
	    format(dono,20,OrgsNames[Pixacao[pixacaoid][Dono]]);

	return dono;
}
public RandomServerNames()
{
	new string[128];
	new random1 = random(sizeof(NomeServer));
	format(string, sizeof(string), "hostname %s", NomeServer[random1] );
	SendRconCommand(string);
	return 1;
}
public ZerarEventoChuck(playerid)
{
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(PlayerInfo[i][pTrazerChuck] == 1)
		{
            new string[150];
            PlayAudioStreamForPlayer(i, "http://dl.dropboxusercontent.com/s/jmre9puicy80pys/fimevento.mp3");
            format(string, sizeof(string), "O Evento chegou ao fim, seu K/D foi [%d/%d], obrigado pela participação.", KillEvento[i], DeatEvento[i]);
  			SendClientMessage(i, COLOR_YELLOW, string);
  			PrimeiroChuck[i] = 0;
  			PrimeiroChuck[i] = 0;
  			PlayerInfo[i][pTrazerChuck] = 0;
  			LimiteChuck = 0;
  			SetPlayerSpawn(i);
            ResetPlayerWeapons(i);
  			SetPlayerSkin(i, PlayerInfo[i][pSkin]);
  			SetPlayerToTeamColor(i);
  			SetPlayerWorldBounds(i,20000.0000,-20000.0000,20000.0000,-20000.0000);
		}
	}
	KillTimer(TempoEventoChuck);
}
public TempoEvento(playerid)
{
   foreach(Player, i)
   {
       if(tempoevento[i] > 0)
	   {
		  tempoevento[i] = 0;
	   }
   }
}
public hbomba(playerid)
{
     if(phbomba[playerid] > 0)
     {
         phbomba[playerid] = 0;
	     SendClientMessage(playerid, COLOR_GRAD1, "Você ja pode usar o comando /homembomba novamente !");
 	 }
}
BPF::TempoExplodir(playerid)
{
	new string[250];
	if(dinamitoubanco[playerid] == 1)
	{
	     DestroyObject(dinamitebanco1);
	     DestroyObject(dinamitebanco2);
	     CreateExplosion(2144.2, 1627.1, 994.29999, 12, 10.0);
	     MoveDynamicObject(portabanco,2144.2, 1627.1, 997.29999, 20.0);
	     format(string, sizeof(string), "%s e os %s conseguiram explodir a porta e estão invadindo o cofre do banco! ID:[%d]", PlayerName(playerid), NomeORG(playerid), playerid);
	     SendClientMessageToAll(GetPlayerColor(playerid), string);
	     KillTimer(tempoexplodir[playerid]);
	     SetTimerEx("VoltarPortas", 40000, 0, "i", playerid);
	}
	if(dinamitounavio[playerid] == 1)
	{
	     DestroyObject(dinamitenavio);
	     CreateExplosion(254, -1383, 1494.1, 2, 10.0);
	     MoveObject(portanavio2,-1383, 1494.1, 4.6,20.0);
	     format(string, sizeof(string), "%s e os %s conseguiram explodir a porta e estão invadindo o cofre do navio! ID:[%d]", PlayerName(playerid), NomeORG(playerid), playerid);
	     SendClientMessageToAll(GetPlayerColor(playerid), string);
	     KillTimer(tempoexplodir[playerid]);
	     SetTimerEx("VoltarPortas", 14000, 0, "i", playerid);
	}
}
BPF::VoltarPortas(playerid)
{
	 if(dinamitoubanco[playerid] == 1)
	 {
          dinamitoubanco[playerid] = 0;
          MoveDynamicObject(portabanco, 2144.2, 1627.1, 994.29999,20.0);
     }
     if(dinamitounavio[playerid] == 1)
     {
          dinamitounavio[playerid] = 0;
          MoveDynamicObject(portanavio2, -1383, 1494.1, 2, 20.0);
     }
     return 1;
}
BPF::RouboPortas(playerid)
{
     if(AbrirPortaBanco[playerid] == 1)
	 {
          AbrirPortaBanco[playerid] = 0;
          MoveDynamicObject(portabanco, 2144.2, 1627.1, 994.29999,20.0);
	      KillTimer(rouboportas[playerid]);
	 }
	 if(AbrirPortaNavio[playerid] == 1)
	 {
          AbrirPortaNavio[playerid] = 0;
          MoveObject(portanavio2, -1383, 1494.1, 2, 20.0);
	      KillTimer(rouboportas[playerid]);
	 }
     return 1;
}
public cbomba()
{
	if(pcbomba > 0)
	{
			pcbomba = 0;
	}
}
stock RemoveSound(vehicleid)
{
    if(VehicleInfo[vehicleid][SoundCar] == 1086)
   	{
		DestroyObject(Sound1[vehicleid]);
		DestroyObject(Sound2[vehicleid]);
		DestroyObject(Sound3[vehicleid]);
		DestroyObject(Sound4[vehicleid]);
		VehicleInfo[vehicleid][SoundCar] = 0;
	}
}
//Head Shot Camera System

#define CAMERA_MOVE_TIME 5000

stock PutSound(vehicleid)
{
    if(GetVehicleModel(vehicleid) == 535)
   	{
		Sound1[vehicleid] = CreateObject(2232, 0.0, 0.0, 0.0,0.0, 0.0, 96.0);
		Sound2[vehicleid] = CreateObject(2232, 0.0, 0.0, 0.0,0.0, 0.0, 96.0);
		Sound3[vehicleid] = CreateObject(2229, 0.0, 0.0, 0.0,0.0, 0.0, 96.0);
		Sound4[vehicleid] = CreateObject(2229, 0.0, 0.0, 0.0,0.0, 0.0, 96.0);
   	    AttachObjectToVehicle(Sound1[vehicleid], vehicleid, -0.564999, -2.024998, 0.989999, 0.000000, 0.000000, 0.000000); //Object Model: 2232 |
		AttachObjectToVehicle(Sound2[vehicleid], vehicleid, 0.594999, -2.024998, 0.989999, 0.000000, 0.000000, 0.000000); //Object Model: 2232 |
		AttachObjectToVehicle(Sound3[vehicleid], vehicleid, -0.454999, -1.774998, 1.469998, -0.000000, 90.047943, 0.000000); //Object Model: 2229 |
		AttachObjectToVehicle(Sound4[vehicleid], vehicleid, 0.509999, -1.774998, 2.085000, -0.000000, -90.034461, 0.000000); //Object Model: 2229 |
		VehicleInfo[vehicleid][SoundCar] = 1086;
   	}
}

stock InitHeadShot(playerid, targetid)
{
	if(GetPlayerInterior(playerid) != 0 || GetPlayerInterior(targetid) != 0)
	{
	    return 1;
	}

	SetPlayerArmedWeapon(playerid, 0);
	SetPlayerArmedWeapon(targetid, 0);

	new
		Float:fOPos[3],
		Float:fHPos[3],
		Float:Angle,
		Float:Speedd,
		object,
		time
		;

    GetPlayerFacingAngle(playerid, Angle);

	TogglePlayerControllable(playerid, 0);
	TogglePlayerControllable(targetid, 0);


    GetPlayerPos(playerid, fOPos[0], fOPos[1], fOPos[2]);
    GetXYInFrontOfPlayer(playerid, fOPos[0], fOPos[1], 1.0);

	SetPlayerCameraPos(targetid, fOPos[0], fOPos[1], fOPos[2]);

	GetPlayerPos(targetid, fHPos[0], fHPos[1], fHPos[2]);
 	SetPlayerPos(targetid, fHPos[0], fHPos[1], fHPos[2]);
    fHPos[2] += 0.8;

	SetPlayerCameraLookAt(targetid, fHPos[0], fHPos[1], fHPos[2]);

 	GetPlayerFacingAngle(playerid, Angle);

	Speedd = VectorSize(fOPos[0]-fHPos[0], fOPos[1]-fHPos[1], fOPos[2]-fHPos[2]) / ( CAMERA_MOVE_TIME / 1000 );

	object = CreateObject(1636, fOPos[0], fOPos[1], fOPos[2], 0.0, 0.0, 0.0);
 	SetObjectFacePoint(object, fHPos[0], fHPos[1]);
  	MoveObject(object, fHPos[0], fHPos[1], fHPos[2], Speedd);

	SetTimerEx("CameraEnd", CAMERA_MOVE_TIME+200, false, "ii", playerid, targetid);
 	SetTimerEx("SparkCreate", CAMERA_MOVE_TIME-500, false, "fffiii",  fHPos[0], fHPos[1], fHPos[2], object, playerid, targetid);

	fHPos[0] -= (1 * floatsin(-Angle, degrees));
	fHPos[1] -= (1 * floatcos(-Angle, degrees));
	fOPos[0] += (1 * floatsin(-Angle, degrees));
	fOPos[1] += (1 * floatcos(-Angle, degrees));

	time = CAMERA_MOVE_TIME + floatround(CAMERA_MOVE_TIME * 0.15, floatround_round);

	InterpolateCameraPos(playerid, fOPos[0], fOPos[1], fOPos[2], fHPos[0], fHPos[1], fHPos[2], time, CAMERA_MOVE);
    InterpolateCameraPos(targetid, fOPos[0], fOPos[1], fOPos[2], fHPos[0], fHPos[1], fHPos[2], time, CAMERA_MOVE);
	InterpolateCameraLookAt(playerid, fOPos[0], fOPos[1], fOPos[2], fHPos[0], fHPos[1], fHPos[2], 1000, CAMERA_MOVE);
    InterpolateCameraLookAt(targetid, fOPos[0], fOPos[1], fOPos[2], fHPos[0], fHPos[1], fHPos[2], 1000, CAMERA_MOVE);

	SetPlayerChatBubble(playerid, "[HEAD SHOT CAMERA]", 0xFF0000FF, 50.0, CAMERA_MOVE_TIME);
    SetPlayerChatBubble(targetid, "[HEAD SHOT CAMERA]", 0xFF0000FF, 50.0, CAMERA_MOVE_TIME);

	SetPVarInt(playerid, "HD", 1);
	SetPVarInt(targetid, "HD", 1);

	return 1;
}

BPF::ShowMessageDB(playerid)
{
    format(strvinny,sizeof(strvinny),"{FF8000}[ANT-DB] %s }Foi Acusado de Cometer DB em Você\nCaso Seja Verdade Aperte em '{00FFFF}Acusar{FF8000}'!\nCaso contrário aperte em '{00FFFF}Não Acusar{FF8000}'!",kickname);
    ShowPlayerDialog(playerid,1643,DIALOG_STYLE_MSGBOX,"Acusação [ANT-DB]",strvinny,"Acusar","Nao Acusar");
    return 1;
}
BPF::CameraEnd(playerid, targetid)
{
    SetPlayerArmedWeapon(playerid, 34);
    TogglePlayerControllable(playerid, 1);
    SetCameraBehindPlayer(playerid);
    SetPlayerArmedWeapon(targetid, 34);
    TogglePlayerControllable(targetid, 1);
    SetCameraBehindPlayer(targetid);

	SetPVarInt(playerid, "HD", 0);
	SetPVarInt(targetid, "HD", 0);

    return 1;
}

BPF::SparkCreate(Float:X, Float:Y, Float:Z, objectid, playerid, targetid)
{
    DestroyObject(objectid);
	SetTimerEx("Spark", 500, false, "i", CreateDynamicObject(18668, X, Y, Z - 1.6, 0.0, 0.0, 0.0) );

	OnPlayerDeath(targetid, playerid, 34);
	pmorto[targetid] = true;
 	SetPlayerHealth(targetid, 0.0);

	SoundInRange(32402, 30.0, X, Y, Z);
	PlayerPlaySound(playerid, 32402, 0.0, 0.0, 0.0);
	PlayerPlaySound(targetid, 32402, 0.0, 0.0, 0.0);
}
BPF::ppk1(playerid)
{
	DestroyDynamicObject(ppk11[playerid]);
	DestroyDynamicObject(ppk12[playerid]);
	DestroyDynamicObject(ppk13[playerid]);
	ppk11[playerid] = 0;
	ppk12[playerid] = 0;
	ppk13[playerid] = 0;
}
BPF::ppk2(playerid)
{
	DestroyDynamicObject(Ppk2[playerid]);
	Ppk2[playerid] = 0;
}
BPF::ppk3(playerid)
{
	DestroyDynamicObject(Ppk3[playerid]);
	Ppk3[playerid] = 0;
}
BPF::RemoveConesPlayer(playerid)
{
	ConeInfo[playerid][ConeID1]=999;
	ConeInfo[playerid][ConeCreated1]=0;
    DestroyDynamicObject(ConeInfo[playerid][ConeObject1]);
    Delete3DTextLabel(ConeInfo[playerid][ConeText1]);
	ConeInfo[playerid][ConeID2]=999;
	ConeInfo[playerid][ConeCreated2]=0;
    DestroyDynamicObject(ConeInfo[playerid][ConeObject2]);
    Delete3DTextLabel(ConeInfo[playerid][ConeText2]);
	ConeInfo[playerid][ConeID3]=999;
	ConeInfo[playerid][ConeCreated3]=0;
    DestroyDynamicObject(ConeInfo[playerid][ConeObject3]);
    Delete3DTextLabel(ConeInfo[playerid][ConeText3]);
	ConeInfo[playerid][ConeID4]=999;
	ConeInfo[playerid][ConeCreated4]=0;
    DestroyDynamicObject(ConeInfo[playerid][ConeObject4]);
    Delete3DTextLabel(ConeInfo[playerid][ConeText4]);
	ConeInfo[playerid][ConeID5]=999;
	ConeInfo[playerid][ConeCreated5]=0;
    DestroyDynamicObject(ConeInfo[playerid][ConeObject5]);
    Delete3DTextLabel(ConeInfo[playerid][ConeText5]);
}
BPF::RemoveRoadblock(playerid)
{
	BarreiraInfo[playerid][brID]=999;
	BarreiraInfo[playerid][brCreated]=0;
    DestroyDynamicObject(BarreiraInfo[playerid][brObject]);
    Delete3DTextLabel(BarreiraInfo[playerid][brText]);
}
BPF::RemoveConeblock1(playerid)
{
	ConeInfo[playerid][ConeID1]=999;
	ConeInfo[playerid][ConeCreated1]=0;
    DestroyDynamicObject(ConeInfo[playerid][ConeObject1]);
    Delete3DTextLabel(ConeInfo[playerid][ConeText1]);
}
BPF::RemoveConeblock2(playerid)
{
	ConeInfo[playerid][ConeID2]=999;
	ConeInfo[playerid][ConeCreated2]=0;
    DestroyDynamicObject(ConeInfo[playerid][ConeObject2]);
    Delete3DTextLabel(ConeInfo[playerid][ConeText2]);
}
BPF::RemoveConeblock3(playerid)
{
	ConeInfo[playerid][ConeID3]=999;
	ConeInfo[playerid][ConeCreated3]=0;
    DestroyDynamicObject(ConeInfo[playerid][ConeObject3]);
    Delete3DTextLabel(ConeInfo[playerid][ConeText3]);
}
BPF::RemoveConeblock4(playerid)
{
	ConeInfo[playerid][ConeID4]=999;
	ConeInfo[playerid][ConeCreated4]=0;
    DestroyDynamicObject(ConeInfo[playerid][ConeObject4]);
    Delete3DTextLabel(ConeInfo[playerid][ConeText4]);
}
BPF::RemoveConeblock5(playerid)
{
	ConeInfo[playerid][ConeID5]=999;
	ConeInfo[playerid][ConeCreated5]=0;
    DestroyDynamicObject(ConeInfo[playerid][ConeObject5]);
    Delete3DTextLabel(ConeInfo[playerid][ConeText5]);
}

stock RemoveallRoadandSpikes(playerid)
{
    BarreiraInfo[playerid][brID]=999;
	BarreiraInfo[playerid][brCreated]=0;
	DestroyDynamicObject(BarreiraInfo[playerid][brObject]);
	Delete3DTextLabel(BarreiraInfo[playerid][brText]);
	ConeInfo[playerid][ConeID1]=999;
	ConeInfo[playerid][ConeCreated1]=0;
	DestroyDynamicObject(ConeInfo[playerid][ConeObject1]);
	Delete3DTextLabel(ConeInfo[playerid][ConeText1]);
	ConeInfo[playerid][ConeID2]=999;
	ConeInfo[playerid][ConeCreated2]=0;
	DestroyDynamicObject(ConeInfo[playerid][ConeObject2]);
	Delete3DTextLabel(ConeInfo[playerid][ConeText2]);
	ConeInfo[playerid][ConeID3]=999;
	ConeInfo[playerid][ConeCreated3]=0;
	DestroyDynamicObject(ConeInfo[playerid][ConeObject3]);
	Delete3DTextLabel(ConeInfo[playerid][ConeText3]);
	ConeInfo[playerid][ConeID4]=999;
	ConeInfo[playerid][ConeCreated4]=0;
	DestroyDynamicObject(ConeInfo[playerid][ConeObject4]);
	Delete3DTextLabel(ConeInfo[playerid][ConeText4]);
	ConeInfo[playerid][ConeID5]=999;
	ConeInfo[playerid][ConeCreated5]=0;
	DestroyDynamicObject(ConeInfo[playerid][ConeObject5]);
	Delete3DTextLabel(ConeInfo[playerid][ConeText5]);
	SpikeInfo[playerid][sID]=999;
	SpikeInfo[playerid][sCreated]=0;
	Delete3DTextLabel(SpikeInfo[playerid][sText]);
	DestroyDynamicObject(SpikeInfo[playerid][sObject]);
}
BPF::RemoveRoadPregos(playerid)
{
	SpikeInfo[playerid][sID]=999;
 	SpikeInfo[playerid][sCreated]=0;
  	DestroyDynamicObject(SpikeInfo[playerid][sObject]);
   	Delete3DTextLabel(SpikeInfo[playerid][sText]);
}

BPF::CheckCarHealth(i)
{
	if(IsPlayerConnected(i) && IsPlayerInAnyVehicle(i) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
	{
		new Float:health;
			GetVehicleHealth(GetPlayerVehicleID(i),health);
		if(health <= 320)
			if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
	   			if(CarShopping[i] != true)
	   			{
				    new randomFogo;
	    			randomFogo = random(8);
		    		switch(randomFogo)
     				{
	   					case 0,2,4,6,7:
	    				{
		   					if(PegouF[GetPlayerVehicleID(i)] <= 0)
						    {
							    new Float:P[3];
							    new string[MAX_STRING];
								SendClientMessage(i, COLOR_LIGHTBLUE, "Seu veiculo está pegando Fogo! Os Bombeiros já Foram Acionados!");
								PegouF[GetPlayerVehicleID(i)] = 1;
								GetPlayerName(i, sendername, sizeof(sendername));
								format(string, sizeof(string), "* O veiculo de %s Está Pegando Fogo!", sendername);
								ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					            SetVehicleHealth(GetPlayerVehicleID(i), 301);
								GetVehiclePos(GetPlayerVehicleID(i), P[0], P[1], P[2]);
								Fogando[GetPlayerVehicleID(i)] = CreateObject(18691, P[0], P[1], P[2]-1,0.0, 0.0, 96.0);
								new atach = Fogando[GetPlayerVehicleID(i)];
								new get = GetPlayerVehicleID(i);
								AttachObjectToVehicle(atach, get, 0.0, 2.0, -3.0, 0.0, 0.0, 0.0);
					   			new Float:X,Float:Y,Float:Z;
					   			GetPlayerPos(i, X,Y,Z);
					   			new mot, lu, alar, por, cap, porma, ob;
	      						GetVehicleParamsEx(get, mot, lu, alar, por, cap, porma, ob);
	      						SetVehicleParamsEx(get, VEHICLE_PARAMS_OFF, lu, alar, por, cap, porma, ob);
								RemovePlayerFromVehicle(i);
								format(string, sizeof(string), "** %s Precisa de um Bombeiro Urgentemente!! Use: (/aceitar bombeiro)", sendername);
			    				SendFamilyMessage(20, 0xF78181AA, string);
					    		format(string, sizeof(string), "**Corra! Antes que o Carro Exploda!!!");
						    	SendFamilyMessage(20, 0xF78181AA, string);
								BombCall = i;
							}
						}
						case 1,3,5:
						{
						    PegouF[GetPlayerVehicleID(i)] = 1;
						}
					}//fim swicth
				}//fim carro conce
	}//se estiver conectado
}

BPF::CheckFogoBomb(playerid)
{
        new playername2[MAX_PLAYER_NAME];
        new string[100];
        new gstring[100];
        if(GetPlayerState(playerid) == 1)
        {
            if(GetPlayerWeapon(playerid) == 42)
            {
			    new counter = 0;
			    new result;
    			for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = ChecarveiculoBPF(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
				switch(counter)
					{
						case 0:
						{
						    TextDrawHideForPlayer(playerid, TextdrawBomb[playerid]);
						}
						case 1:
						{
						    new Float:P[3];
						    GetVehiclePos(result, P[0], P[1], P[2]);
			                if(IsPlayerInRangeOfPoint(playerid, 12.0, P[0], P[1], P[2]))
			                {
			                    if(Fogando[result] <= 0)
			                    {
			                        TextDrawHideForPlayer(playerid, TextdrawBomb[playerid]);
			                        SendClientMessage(playerid, COLOR_YELLOW, "Este carro não está pegando fogo!");
								 	return 1;
								}
								if(EmpregoDuty[playerid] != 1)
		        				{
		            				SendClientMessage(playerid, COLOR_GREY, "Entre em serviço primeiro! (/batercartao)");
		       		 			}
			                    if(Apagando[playerid] > 0)
			                    {
			                        Apagando[playerid]++;
									format(gstring, sizeof(gstring), "	~r~Apagando:~w~ ~y~%d/20", Apagando[playerid] );
                    				TextDrawSetString(TextdrawBomb[playerid], gstring);
                    				TextDrawShowForPlayer(playerid, TextdrawBomb[playerid]);
			                        SetTimerEx("CheckFogoBomb", 750, false, "i", playerid);
			                        if(Apagando[playerid] == 20)
			                        {
			                            DestroyObject(Fogando[result]);
			                            GiveDinheiro(playerid, 500);
			                            GetPlayerName(playerid, playername2, sizeof(playername2));
			                            Apagando[playerid] = 0;
		                                Fogando[result] = 0;
		                                SetVehicleHealth(result, 360);
		                                PegouF[result] = 0;
		                                TextDrawHideForPlayer(playerid, TextdrawBomb[playerid]);
		                                SendClientMessage(playerid, COLOR_YELLOW, "O incêndio foi apagado com seu Extintor!");
		                                GameTextForPlayer(playerid, "~w~incendio apagado~n~~g~bonus: R$2500", 1000, 1);
                                  		format(string, sizeof(string), "[Atenção] O Bombeiro %s Apagou um Incêndio Usando seu Extintor.", playername2);
                                  		GiveDinheiro(playerid, 2500);
										SendClientMessageToAll(0xF78181AA, string);

			                        }
			                    }
							}
		                }
					}
				}
		}
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
            if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 407)
            {
     			new counter = 0;
			    new result;
    			for(new i; i != MAX_VEHICLES; i++)
			    {
			        if(i != GetPlayerVehicleID(playerid))
					{
				        new dist = ChecarveiculoBPF(8, playerid, i);
				        if(dist)
				        {
				            result = i;
				            counter++;
	           			}
			        }
			    }
				switch(counter)
				{
					case 0:
					{
					    TextDrawHideForPlayer(playerid, TextdrawBomb[playerid]);
					}
					case 1:
					{
		                new Float:P[3];
	    				GetVehiclePos(result, P[0], P[1], P[2]);
	          			if(IsPlayerInRangeOfPoint(playerid, 12.0, P[0], P[1], P[2]))
	          			{
		                    if(Fogando[result] <= 0)
		                    {
		                        TextDrawHideForPlayer(playerid, TextdrawBomb[playerid]);
		                        SendClientMessage(playerid, COLOR_YELLOW, "Este carro não está pegando fogo!");
							 	return 1;
							}
							if(EmpregoDuty[playerid] != 1)
   							{
		            			SendClientMessage(playerid, COLOR_GREY, "Entre em serviço primeiro! (/batercartao)");
		       		 		}
		                if(Apagando[playerid] > 0)
		                {
		                    Apagando[playerid]++;
		                    format(gstring, sizeof(gstring), "	~r~Apagando:~w~ ~y~%d/30", Apagando[playerid] );
	  						TextDrawSetString(TextdrawBomb[playerid], gstring);
	                    	TextDrawShowForPlayer(playerid, TextdrawBomb[playerid]);
       		 				SetTimerEx("CheckFogoBomb", 750, false, "i", playerid);
		                       if(Apagando[playerid] == 30)
			                   {
		                            DestroyObject(Fogando[result]);
		                            GiveDinheiro(playerid, 500);
				                    GetPlayerName(playerid, playername2, sizeof(playername2));
				                    Apagando[playerid] = 0;
			                        Fogando[result] = 0;
			                        SetVehicleHealth(result, 360);
			                        PegouF[result] = 0;
			                        TextDrawHideForPlayer(playerid, TextdrawBomb[playerid]);
	                          		SendClientMessage(playerid, COLOR_YELLOW, "O incêndio foi apagado pelo seu Caminhão!");
	                          		GameTextForPlayer(playerid, "~w~incendio apagado~n~~g~bonus: R$2500", 1000, 1);
	                                format(string, sizeof(string), "[Atenção] O Bombeiro %s Apagou um Incêndio Usando o Caminhão.", playername2);
	                                GiveDinheiro(playerid, 2500);
									SendClientMessageToAll(0xF78181AA, string);
		                        }
		                }
					}
      			}
			}
		}
	}
	return 1;
}
BPF::ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		ForPlayers(i)
		{
			if(IsPlayerConnected(i))
			{
				if(!BigEar[i])
				{
					GetPlayerPos(i, posx, posy, posz);
					tempposx = (oldposx -posx);
					tempposy = (oldposy -posy);
					tempposz = (oldposz -posz);
					//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						SendClientMessage(i, col1, string);
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						SendClientMessage(i, col2, string);
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						SendClientMessage(i, col3, string);
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						SendClientMessage(i, col4, string);
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						SendClientMessage(i, col5, string);
					}
				}
				else
				{
					SendClientMessage(i, col1, string);
				}
			}
		}
	}//not connected
	return 1;
}
BPF::ProxVehicleDetector(Float:radi, vehicleid, string[],col1,col2,col3,col4,col5)
{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetVehiclePos(vehicleid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		ForPlayers(i)
		{
			if(IsPlayerConnected(i))
			{
				if(!BigEar[i])
				{
					GetPlayerPos(i, posx, posy, posz);
					tempposx = (oldposx -posx);
					tempposy = (oldposy -posy);
					tempposz = (oldposz -posz);
					//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						SendClientMessage(i, col1, string);
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						SendClientMessage(i, col2, string);
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						SendClientMessage(i, col3, string);
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						SendClientMessage(i, col4, string);
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						SendClientMessage(i, col5, string);
					}
				}
				else
				{
					SendClientMessage(i, col1, string);
				}
			}
		}
	return 1;
}

stock CrashPlayer(playerid)
{
	for(new i=0;i<=1000;i++) CreatePlayerObject(playerid,4108,0,0,0,0,0,0);
	return 1;
}

BPF::CreateBancoOrgs()
{
    new arquivo[256];
	new idx = 1;
	while (idx < sizeof(InfoOrg))
	{
	    format(arquivo, sizeof(arquivo), "Cofre Org/Org%d.cfg",idx);
	    if(!DOF2_FileExists(arquivo))
		{
			DOF2_CreateFile(arquivo);
			DOF2_SetInt(arquivo,"DiaLider",0);
			DOF2_SetInt(arquivo,"Dinheiro",500000);
			DOF2_SetInt(arquivo,"Materiais",200);
			DOF2_SetInt(arquivo,"Maconha",200);
			DOF2_SetInt(arquivo,"Cocaina",200);
			DOF2_SetInt(arquivo,"Crack",200);
			DOF2_SetInt(arquivo,"dMaconha",200);
			DOF2_SetInt(arquivo,"dEaglec1",200);
			DOF2_SetInt(arquivo,"dEaglec2",200);
			DOF2_SetInt(arquivo,"dEaglec3",200);
			DOF2_SetInt(arquivo,"dEaglec4",200);
			DOF2_SetInt(arquivo,"dEaglec5",200);
			DOF2_SetInt(arquivo,"dShotc1",200);
			DOF2_SetInt(arquivo,"dShotc2",200);
			DOF2_SetInt(arquivo,"dShotc3",200);
			DOF2_SetInt(arquivo,"dShotc4",200);
			DOF2_SetInt(arquivo,"dShotc5",200);
			DOF2_SetInt(arquivo,"dMP5c1",200);
			DOF2_SetInt(arquivo,"dMP5c2",200);
			DOF2_SetInt(arquivo,"dMP5c3",200);
			DOF2_SetInt(arquivo,"dMP5c4",200);
			DOF2_SetInt(arquivo,"dMP5c5",200);
			DOF2_SetInt(arquivo,"dAKc1",200);
			DOF2_SetInt(arquivo,"dAKc2",200);
			DOF2_SetInt(arquivo,"dAKc3",200);
			DOF2_SetInt(arquivo,"dAKc4",200);
			DOF2_SetInt(arquivo,"dAKc5",200);
			DOF2_SetInt(arquivo,"dM4c1",200);
			DOF2_SetInt(arquivo,"dM4c2",200);
			DOF2_SetInt(arquivo,"M4c3",200);
			DOF2_SetInt(arquivo,"dM4c4",200);
			DOF2_SetInt(arquivo,"dM4c5",200);
			DOF2_SetInt(arquivo,"dRiflec1",200);
			DOF2_SetInt(arquivo,"dRiflec2",200);
			DOF2_SetInt(arquivo,"dRiflec3",200);
			DOF2_SetInt(arquivo,"dRiflec4",200);
			DOF2_SetInt(arquivo,"dRiflec5",200);
			DOF2_SetInt(arquivo,"cMaconha",5000);
			DOF2_SetInt(arquivo,"cMateriais",5000);
			DOF2_SetInt(arquivo,"mMateriais",5000);
			DOF2_SetInt(arquivo,"mMaconha",5000);
			DOF2_SetInt(arquivo,"salarioc1",5000);
			DOF2_SetInt(arquivo,"salarioc2",5000);
			DOF2_SetInt(arquivo,"salarioc3",5000);
			DOF2_SetInt(arquivo,"salarioc4",5000);
			DOF2_SetInt(arquivo,"salarioc5",5000);
			DOF2_SetInt(arquivo,"salariolider",5000);
			DOF2_SetInt(arquivo,"Vip",0);
			DOF2_SetInt(arquivo,"Diasvip",0);
			DOF2_SetInt(arquivo,"DiaVIP",0);
			DOF2_SetInt(arquivo,"MesVIP",0);
			DOF2_SetInt(arquivo,"AnoVIP",0);
			DOF2_SetInt(arquivo,"MatBox1",0);
			DOF2_SetInt(arquivo,"MatBox2",0);
			DOF2_SetInt(arquivo,"MatBox3",0);
		}
		else
		{
			DOF2_CreateFile(arquivo);
			DOF2_SetInt(arquivo,"DiaLider",0);
			DOF2_SetInt(arquivo,"Dinheiro",500000);
			DOF2_SetInt(arquivo,"Materiais",200);
			DOF2_SetInt(arquivo,"Maconha",200);
			DOF2_SetInt(arquivo,"Cocaina",200);
			DOF2_SetInt(arquivo,"Crack",200);
			DOF2_SetInt(arquivo,"dMaconha",200);
			DOF2_SetInt(arquivo,"dEaglec1",200);
			DOF2_SetInt(arquivo,"dEaglec2",200);
			DOF2_SetInt(arquivo,"dEaglec3",200);
			DOF2_SetInt(arquivo,"dEaglec4",200);
			DOF2_SetInt(arquivo,"dEaglec5",200);
			DOF2_SetInt(arquivo,"dShotc1",200);
			DOF2_SetInt(arquivo,"dShotc2",200);
			DOF2_SetInt(arquivo,"dShotc3",200);
			DOF2_SetInt(arquivo,"dShotc4",200);
			DOF2_SetInt(arquivo,"dShotc5",200);
			DOF2_SetInt(arquivo,"dMP5c1",200);
			DOF2_SetInt(arquivo,"dMP5c2",200);
			DOF2_SetInt(arquivo,"dMP5c3",200);
			DOF2_SetInt(arquivo,"dMP5c4",200);
			DOF2_SetInt(arquivo,"dMP5c5",200);
			DOF2_SetInt(arquivo,"dAKc1",200);
			DOF2_SetInt(arquivo,"dAKc2",200);
			DOF2_SetInt(arquivo,"dAKc3",200);
			DOF2_SetInt(arquivo,"dAKc4",200);
			DOF2_SetInt(arquivo,"dAKc5",200);
			DOF2_SetInt(arquivo,"dM4c1",200);
			DOF2_SetInt(arquivo,"dM4c2",200);
			DOF2_SetInt(arquivo,"M4c3",200);
			DOF2_SetInt(arquivo,"dM4c4",200);
			DOF2_SetInt(arquivo,"dM4c5",200);
			DOF2_SetInt(arquivo,"dRiflec1",200);
			DOF2_SetInt(arquivo,"dRiflec2",200);
			DOF2_SetInt(arquivo,"dRiflec3",200);
			DOF2_SetInt(arquivo,"dRiflec4",200);
			DOF2_SetInt(arquivo,"dRiflec5",200);
			DOF2_SetInt(arquivo,"cMaconha",5000);
			DOF2_SetInt(arquivo,"cMateriais",5000);
			DOF2_SetInt(arquivo,"mMateriais",5000);
			DOF2_SetInt(arquivo,"mMaconha",5000);
			DOF2_SetInt(arquivo,"salarioc1",5000);
			DOF2_SetInt(arquivo,"salarioc2",5000);
			DOF2_SetInt(arquivo,"salarioc3",5000);
			DOF2_SetInt(arquivo,"salarioc4",5000);
			DOF2_SetInt(arquivo,"salarioc5",5000);
			DOF2_SetInt(arquivo,"salariolider",5000);
			DOF2_SetInt(arquivo,"Vip",0);
			DOF2_SetInt(arquivo,"Diasvip",0);
			DOF2_SetInt(arquivo,"DiaVIP",0);
			DOF2_SetInt(arquivo,"MesVIP",0);
			DOF2_SetInt(arquivo,"AnoVIP",0);
			DOF2_SetInt(arquivo,"MatBox1",0);
			DOF2_SetInt(arquivo,"MatBox2",0);
			DOF2_SetInt(arquivo,"MatBox3",0);
		}
   		idx ++;
	}
	return 1;
}
BPF::Carregar(playerid)
{
	Controle(playerid, 1);
}
BPF::countdown()
{
	new Float:X, Float:Y, Float:Z;
	switch(CountStage)
 	{
		case 1:
		{
  			GameTextForAll("~n~~n~~n~~n~~n~~n~~n~~g~-~y~]~g~-~g~Comecou~g~-~y~]~g~-",1000,3);
     		for(new i; i < MAX_PLAYERS; i++)
     		{
     			GetPlayerPos(i,X,Y,Z);
       			PlayerPlaySound(i,1057,X,Y,Z);
				Controle(i, 1);
  			}
    		KillTimer(timer);
			CountStage = 0;
		}
		case 2: GameTextForAll("~n~~n~~n~~n~~n~~n~~n~~g~-~y~ 1 ~g~-",1000,3), CountStage = 1;
  		case 3: GameTextForAll("~n~~n~~n~~n~~n~~n~~n~~g~-~y~ 2 ~g~-",1000,3), CountStage = 2;
  	}
}

BPF::Spark(objectid) DestroyObject(objectid);

stock AtachVip(playerid)
{
    if (PlayerInfo[playerid][pVIP] > 0 && PlayerInfo[playerid][pVIP] <= 1)
	{
		labelvip[playerid] = CreatePlayer3DTextLabel(playerid,"VIP",0x00fefeFF,30.0,40.0,50.0,40.0,playerid);
  	}
   	if (PlayerInfo[playerid][pVIP] > 1 && PlayerInfo[playerid][pVIP] < 3)
	{
		labelvip[playerid] = CreatePlayer3DTextLabel(playerid,"SÓCIO",0xfaa788FF,30.0,40.0,50.0,40.0,playerid);
	}
	if (PlayerInfo[playerid][pVIP] > 4 && PlayerInfo[playerid][pVIP] < 5)
	{
	    labelvip[playerid] = CreatePlayer3DTextLabel(playerid,"SÓCIO POWER",0xbb52feFF,30.0,40.0,50.0,40.0,playerid);
	}
	if (PlayerInfo[playerid][pVIP] > 4 && PlayerInfo[playerid][pVIP] < 6)
	{
	    labelvip[playerid] = CreatePlayer3DTextLabel(playerid,"SÓCIO GOLD",0xfef33cFF,30.0,40.0,50.0,40.0,playerid);
	}
	if (PlayerInfo[playerid][pVIP] > 5 && PlayerInfo[playerid][pVIP] < 7)
	{
	    labelvip[playerid] = CreatePlayer3DTextLabel(playerid,"SÓCIO PLATINA",0xAEFFD1FF,30.0,40.0,50.0,40.0,playerid);
	}
}
BPF::PlayerUpdateCamrea(playerid)
{
	  if(!CamreaInfo[air]) return RemovePlayer(playerid);
	  GetPlayerPos(CamreaInfo[cameraman],CamreaInfo[campostion][0],CamreaInfo[campostion][1],CamreaInfo[campostion][2]);
	  GetPlayerFacingAngle(CamreaInfo[cameraman], CamreaInfo[campostion][3]);
	  SetPlayerChatBubble(playerid, "Assistindo TV", 0xFFFF33FF, 50.0, 5000);
	  if(CamreaInfo[campostion][3] > 0  && CamreaInfo[campostion][3] <= 45)
	  {
	    SetPlayerCameraPos(playerid,CamreaInfo[campostion][0],CamreaInfo[campostion][1],CamreaInfo[campostion][2]+1);
	  	SetPlayerCameraLookAt(playerid,CamreaInfo[campostion][0],CamreaInfo[campostion][1]+20.0,CamreaInfo[campostion][2]+1);
	  }
	  if(CamreaInfo[campostion][3] > 45 && CamreaInfo[campostion][3] <= 135)
	  {
	    SetPlayerCameraPos(playerid,CamreaInfo[campostion][0],CamreaInfo[campostion][1],CamreaInfo[campostion][2]+1);
	  	SetPlayerCameraLookAt(playerid,CamreaInfo[campostion][0]-20.0,CamreaInfo[campostion][1],CamreaInfo[campostion][2]+1);
	  }
	  if(CamreaInfo[campostion][3] > 135 && CamreaInfo[campostion][3] <= 225)
	  {
	    SetPlayerCameraPos(playerid,CamreaInfo[campostion][0],CamreaInfo[campostion][1],CamreaInfo[campostion][2]+1);
	  	SetPlayerCameraLookAt(playerid,CamreaInfo[campostion][0],CamreaInfo[campostion][1]-20.0,CamreaInfo[campostion][2]+1);
	  }
	  if(CamreaInfo[campostion][3] > 225  && CamreaInfo[campostion][3] < 315)
	  {
	    SetPlayerCameraPos(playerid,CamreaInfo[campostion][0],CamreaInfo[campostion][1],CamreaInfo[campostion][2]+1);
	  	SetPlayerCameraLookAt(playerid,CamreaInfo[campostion][0]+20.0,CamreaInfo[campostion][1],CamreaInfo[campostion][2]+1);
	  }
	  if(CamreaInfo[campostion][3] > 315  && CamreaInfo[campostion][3] <= 360)
	  {
	    SetPlayerCameraPos(playerid,CamreaInfo[campostion][0],CamreaInfo[campostion][1],CamreaInfo[campostion][2]+1);
	  	SetPlayerCameraLookAt(playerid,CamreaInfo[campostion][0],CamreaInfo[campostion][1]+20.0,CamreaInfo[campostion][2]+1);
	  }
	  if ( IsPlayerInAnyVehicle ( CamreaInfo[cameraman] ) )
	  {
	  	TogglePlayerSpectating(playerid, 1);
	    new vehicleid = GetPlayerVehicleID(CamreaInfo[cameraman]);
		PlayerSpectateVehicle(playerid, vehicleid, SPECTATE_MODE_SIDE);
	  }
	return true;
}
Assistindo(playerid)
{
  new string[MAX_STRING];
  if(player_viewer[playerid]) return SendClientMessage(playerid,0xCD0400AA,"para parar de assistir use: /desligartv");
  if(!CamreaInfo[air]) return SendClientMessage(playerid,0xCD0400AA,"A Tv está fora do Ar!");
  CPU[playerid] = SetTimerEx("PlayerUpdateCamrea",50,true,"d",playerid);
  SetPlayerCameraPos(playerid,CamreaInfo[campostion][0],CamreaInfo[campostion][1],CamreaInfo[campostion][2]+1);
  SetPlayerCameraLookAt(playerid,CamreaInfo[campostion][0],CamreaInfo[campostion][1]+20.0,CamreaInfo[campostion][2]+1);
  player_viewer[playerid] = true;
  CamreaInfo[audience]++;
  format(string, sizeof(string), "Audiencia de Pessoas Assistindo Televisão: %d", CamreaInfo[audience]);
  SendClientMessage(CamreaInfo[cameraman], 0xff6347FF, string);
  return true;
}
RemovePlayer(playerid)
{
  if(player_viewer[playerid] == true)
  {
	  new string[MAX_STRING];
	  //SpawnPlayer(playerid);
	  TogglePlayerSpectating(playerid, 0);
	  SetCameraBehindPlayer(playerid);
	  CamreaInfo[audience]--;
	  format(string, sizeof(string), "Audiencia de Pessoas Assistindo Televisão: %d", CamreaInfo[audience]);
	  SendClientMessage(CamreaInfo[cameraman], 0xff6347FF, string);
	  player_viewer[playerid] = false;
	  KillTimer(CPU[playerid]);
  }
  return true;
}
OnAir(playerid,camera)
{
	if(camera == 1)
	{
		CamreaInfo[cameraman] = playerid;
		CamreaInfo[air] = true;
	}
	else if(camera == 0)
	{
		if(CamreaInfo[cameraman] == playerid)
		{
			new string[128];
			CamreaInfo[cameraman] = INVALID_PLAYER_ID;
			format(string, sizeof(string), "Repórter %s: deixou de ser o Camera-Man.", NomePlayer(playerid));
			SendFamilyMessage(9, 0xFFA500F6, string);
			RemovePlayerAttachedObjectEx(playerid, Vaga_Maconha);
			OffAir();
			return true;
		}
		if(CamreaInfo[cameraman] != playerid)
		{
			new string[128];
			CamreaInfo[cameraman] = playerid;
			format(string, sizeof(string), "Repórter %s: Virou o Camera-Man.", NomePlayer(playerid));
			SendFamilyMessage(9, 0xFFA500F6, string);
			new id = CountAttachedObjects(playerid);
			SetPlayerAttachedObject(playerid,id,1886,1,0.182000,0.000000,0.169999,0.000000,-93.000022,178.200027,0.549000,0.334999,0.412000);
			SetPlayerAttachedObjectEx(1886,Vaga_Maconha,playerid,id);
		}
	}
	return true;
}
	OffAir()
	{
	  KillTimer(CamreaInfo[tup]);
	  CamreaInfo[air] = false;
	  SendClientMessage(CamreaInfo[cameraman], 0xE60000FF,"Você Desativou a Camera!");
	  for(new i = 0; i < GetMaxPlayers(); i++) RemovePlayer(i);
	  return true;
	}
stock SetObjectFacePoint(objectid, Float: X, Float: Y) // By Lorenc_ | http://forum.sa-mp.com/showpost.php?p=1456045&postcount=2563
{
    static
        Float: pX,      Float: oX,
        Float: pY,      Float: oY,
        Float: oZ
    ;
    GetObjectRot(objectid, oX, oY, oZ);
    GetObjectPos(objectid, pX, pY, oZ);

    oZ = ( floatadd(atan2(floatsub(Y, pY), floatsub(X, pX)), 270.0) );

    SetObjectRot(objectid, oX, oY, oZ);
}
equipamentosDestruir(p){

	if(CaixaEquipamentos[p][caCreated]){

	    new
			file[78]
		;

 		format(file, sizeof file, "CaixasEquipamentos/CaiXa%d.ini", p);

		if(DOF2_FileExists(file)){

			DOF2_RemoveFile(file);
   		}

	    CaixaEquipamentos[p][caCreated] = false;

		DestroyDynamicObject(CaixaEquipamentos[p][caObject]);
		DestroyDynamic3DTextLabel(CaixaEquipamentos[p][caText]);
	}
}

dialogEquipar(playerid){

	new string[2000];
	string[0] = EOS;
	for(new i; i < MAX_CAIXASEQUIPAMENTOS; ++i){

        if(CaixaEquipamentos[i][caCreated] && IsPlayerInRangeOfPoint(playerid, 2, CaixaEquipamentos[i][caX], CaixaEquipamentos[i][caY], CaixaEquipamentos[i][caZ])){

            new Float:health, Float:armour;
			GetPlayerHealth(playerid, health);
			GetPlayerArmour(playerid, armour);
            if(CaixaEquipamentos[i][caType] == 1){

                strcat(string, "{FFFFFF}CAIXA DE ARMAS PEQUENA:\n\n");
                strcat(string, "{B4B5B7}Vida/Colete:\n");
                strcat(string, "{FFFFFF}Vida: {2641FE}+40\n");
                strcat(string, "{FFFFFF}Colete: {2641FE}+40\n\n");
                strcat(string, "{FFFFFF}Armas/Balas:\n\n");
                strcat(string, "{FFFFFF}Desert Eagle: {2641FE}+75 balas\n");
                strcat(string, "{FFFFFF}Shotgun: {2641FE}+50 balas\n");
                strcat(string, "{FFFFFF}MP5: {2641FE}+150 balas\n");
                strcat(string, "{FFFFFF}M4: {2641FE}+100\n");
                strcat(string, "{FFFFFF}Sniper: {2641FE}+15 balas");
                SetPlayerHealth(playerid, health + 40);
                SetPlayerArmour(playerid, armour + 40);
                GivePlayerWeapon(playerid, 24, 75);
                GivePlayerWeapon(playerid, 25, 50);
                GivePlayerWeapon(playerid, 29, 150);
                GivePlayerWeapon(playerid, 31, 100);
                GivePlayerWeapon(playerid, 34, 15);
                CaixaEquipamentos[i][caMateriais] -= 40;
				ShowPlayerDialog(playerid, 3035, DIALOG_STYLE_MSGBOX, "Equipamentos que recebeu", string, "Fechar", "");
            }
            if(CaixaEquipamentos[i][caType] == 2){

                strcat(string, "{FFFFFF}CAIXA DE ARMAS MÉDIA:\n\n");
                strcat(string, "{B4B5B7}Vida/Colete:\n");
                strcat(string, "{FFFFFF}Vida: {2641FE}+75\n");
                strcat(string, "{FFFFFF}Colete: {2641FE}+75\n\n");
                strcat(string, "{FFFFFF}Armas/Balas:\n\n");
                strcat(string, "{FFFFFF}Faca: {2641FE}+1\n");
                strcat(string, "{FFFFFF}Desert Eagle: {2641FE}+150 balas\n");
                strcat(string, "{FFFFFF}Shotgun: {2641FE}+100 balas\n");
                strcat(string, "{FFFFFF}MP5: {2641FE}+250 balas\n");
                strcat(string, "{FFFFFF}M4: {2641FE}+250\n");
                strcat(string, "{FFFFFF}Sniper: {2641FE}+75 balas");
                SetPlayerHealth(playerid, health + 75);
                SetPlayerArmour(playerid, armour + 75);
                GivePlayerWeapon(playerid, 4, 1);
                GivePlayerWeapon(playerid, 24, 150);
                GivePlayerWeapon(playerid, 25, 100);
                GivePlayerWeapon(playerid, 29, 250);
                GivePlayerWeapon(playerid, 31, 250);
                GivePlayerWeapon(playerid, 34, 75);
                CaixaEquipamentos[i][caMateriais] -= 40;
				ShowPlayerDialog(playerid, 3035, DIALOG_STYLE_MSGBOX, "Equipamentos que recebeu", string, "Fechar", "");
            }
            if(CaixaEquipamentos[i][caType] == 3){

                strcat(string, "{FFFFFF}CAIXA DE ARMAS GRANDE:\n\n");
                strcat(string, "{B4B5B7}Vida/Colete:\n");
                strcat(string, "{FFFFFF}Vida: {2641FE}+100\n");
                strcat(string, "{FFFFFF}Colete: {2641FE}+100\n\n");
                strcat(string, "{FFFFFF}Armas/Balas:\n\n");
                strcat(string, "{FFFFFF}Faca: {2641FE}+1\n");
                strcat(string, "{FFFFFF}Desert Eagle: {2641FE}+500 balas\n");
                strcat(string, "{FFFFFF}Shotgun: {2641FE}+250 balas\n");
                strcat(string, "{FFFFFF}MP5: {2641FE}+450 balas\n");
                strcat(string, "{FFFFFF}M4: {2641FE}+350\n");
                strcat(string, "{FFFFFF}Sniper: {2641FE}+150 balas");
                SetPlayerHealth(playerid, health + 100);
                SetPlayerArmour(playerid, armour + 100);
                GivePlayerWeapon(playerid, 4, 1);
                GivePlayerWeapon(playerid, 24, 500);
                GivePlayerWeapon(playerid, 25, 250);
                GivePlayerWeapon(playerid, 29, 450);
                GivePlayerWeapon(playerid, 31, 350);
                GivePlayerWeapon(playerid, 34, 150);
                CaixaEquipamentos[i][caMateriais] -= 40;
				ShowPlayerDialog(playerid, 3035, DIALOG_STYLE_MSGBOX, "Equipamentos que recebeu", string, "Fechar", "");
            }
            if(CaixaEquipamentos[i][caMateriais] == 40){

				SendClientMessage(playerid, -1, #Caixa destruida!);
                equipamentosDestruir(i);
			}
		}
	}
}

//------------------------------------------------

new legalmods[48][22] = {
        {400, 1024,1021,1020,1019,1018,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {401, 1145,1144,1143,1142,1020,1019,1017,1013,1007,1006,1005,1004,1003,1001,0000,0000,0000,0000},
        {404, 1021,1020,1019,1017,1016,1013,1007,1002,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {405, 1023,1021,1020,1019,1018,1014,1001,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {410, 1024,1023,1021,1020,1019,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
		{415, 1023,1019,1018,1017,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {418, 1021,1020,1016,1006,1002,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {420, 1021,1019,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {421, 1023,1021,1020,1019,1018,1016,1014,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {422, 1021,1020,1019,1017,1013,1007,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {426, 1021,1019,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {436, 1022,1021,1020,1019,1017,1013,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
        {439, 1145,1144,1143,1142,1023,1017,1013,1007,1003,1001,0000,0000,0000,0000,0000,0000,0000,0000},
        {477, 1021,1020,1019,1018,1017,1007,1006,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {478, 1024,1022,1021,1020,1013,1012,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {489, 1024,1020,1019,1018,1016,1013,1006,1005,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
        {491, 1145,1144,1143,1142,1023,1021,1020,1019,1018,1017,1014,1007,1003,0000,0000,0000,0000,0000},
        {492, 1016,1006,1005,1004,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {496, 1143,1142,1023,1020,1019,1017,1011,1007,1006,1003,1002,1001,0000,0000,0000,0000,0000,0000},
        {500, 1024,1021,1020,1019,1013,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {516, 1021,1020,1019,1018,1017,1016,1015,1007,1004,1002,1000,0000,0000,0000,0000,0000,0000,0000},
        {517, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1016,1007,1003,1002,0000,0000,0000,0000,0000},
        {518, 1145,1144,1143,1142,1023,1020,1018,1017,1013,1007,1006,1005,1003,1001,0000,0000,0000,0000},
        {527, 1021,1020,1018,1017,1015,1014,1007,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {529, 1023,1020,1019,1018,1017,1012,1011,1007,1006,1003,1001,0000,0000,0000,0000,0000,0000,0000},
        {534, 1185,1180,1179,1178,1127,1126,1125,1124,1123,1122,1106,1101,1100,0000,0000,0000,0000,0000},
        {535, 1121,1120,1119,1118,1117,1116,1115,1114,1113,1110,1109,0000,0000,0000,0000,0000,0000,0000},
        {536, 1184,1183,1182,1181,1128,1108,1107,1105,1104,1103,0000,0000,0000,0000,0000,0000,0000,0000},
        {540, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1004,1001,0000,0000,0000,0000},
        {542, 1145,1144,1021,1020,1019,1018,1015,1014,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {546, 1145,1144,1143,1142,1024,1023,1019,1018,1017,1007,1006,1004,1002,1001,0000,0000,0000,0000},
        {547, 1143,1142,1021,1020,1019,1018,1016,1003,1000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {549, 1145,1144,1143,1142,1023,1020,1019,1018,1017,1012,1011,1007,1003,1001,0000,0000,0000,0000},
        {550, 1145,1144,1143,1142,1023,1020,1019,1018,1006,1005,1004,1003,1001,0000,0000,0000,0000,0000},
        {551, 1023,1021,1020,1019,1018,1016,1006,1005,1003,1002,0000,0000,0000,0000,0000,0000,0000,0000},
        {558, 1168,1167,1166,1165,1164,1163,1095,1094,1093,1092,1091,1090,1089,1088,0000,0000,0000,0000},
        {559, 1173,1162,1161,1160,1159,1158,1072,1071,1070,1069,1068,1067,1066,1065,0000,0000,0000,0000},
        {560, 1170,1169,1141,1140,1139,1138,1033,1032,1031,1030,1029,1028,1027,1026,0000,0000,0000,0000},
        {561, 1157,1156,1155,1154,1064,1063,1062,1061,1060,1059,1058,1057,1056,1055,1031,1030,1027,1026},
        {562, 1172,1171,1149,1148,1147,1146,1041,1040,1039,1038,1037,1036,1035,1034,0000,0000,0000,0000},
        {565, 1153,1152,1151,1150,1054,1053,1052,1051,1050,1049,1048,1047,1046,1045,0000,0000,0000,0000},
        {567, 1189,1188,1187,1186,1133,1132,1131,1130,1129,1102,0000,0000,0000,0000,0000,0000,0000,0000},
        {575, 1177,1176,1175,1174,1099,1044,1043,1042,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {576, 1193,1192,1191,1190,1137,1136,1135,1134,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {580, 1023,1020,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {589, 1145,1144,1024,1020,1018,1017,1016,1013,1007,1006,1005,1004,1000,0000,0000,0000,0000,0000},
        {600, 1022,1020,1018,1017,1013,1007,1006,1005,1004,0000,0000,0000,0000,0000,0000,0000,0000,0000},
        {603, 1145,1144,1143,1142,1024,1023,1020,1019,1018,1017,1007,1006,1001,0000,0000,0000,0000,0000}
};





stock iswheelmodel(modelid) {

    new wheelmodels[17] = {1025,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1096,1097,1098};

    for(new I = 0, b = sizeof(wheelmodels); I != b; ++I) {
        if (modelid == wheelmodels[I])
            return true;

    }

    return false;
}

stock IllegalCarNitroIde(carmodel) {

    new illegalvehs[29] = { 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449 };

    for(new I = 0, b = sizeof(illegalvehs); I != b; ++I) {

        if (carmodel == illegalvehs[I])
            return true;

    }

    return false;
}

// assumes player is in a car - make sure it is.
stock illegal_nos_vehicle(PlayerID) {

    new carid = GetPlayerVehicleID(PlayerID);
    new playercarmodel = GetVehicleModel(carid);

    return IllegalCarNitroIde(playercarmodel);

}

stock islegalcarmod(vehicleide, componentid) {

    new modok = false;

    // stereo, hydraulics & nos (1x 2x 3x) are special.
    if ( (iswheelmodel(componentid)) || (componentid == 1086) || (componentid == 1087) || ((componentid >= 1008) && (componentid <= 1010))) {

        new nosblocker = IllegalCarNitroIde(vehicleide);

        if (!nosblocker)
            modok = true;

    } else {

        // check if the specified model CAN use this particular mod.
        for(new I = 0, b = sizeof(legalmods); I != b; ++I) {

            if (legalmods[I][0] == vehicleide) { // first is car IDE

                for(new J = 1; J < 22; J++) { // start with 1
                    if (legalmods[I][J] == componentid)
                        modok = true;
                }

            }

        }

    }

    return modok;
}
stock SetPlayerFaceToPoint(playerid, Float: X, Float: Y)
{
    static
        Float: pX,
        Float: pY,
        Float: oZ
    ;

    GetPlayerPos(playerid, pX, pY, oZ);

    oZ = ( floatadd(atan2(floatsub(Y, pY), floatsub(X, pX)), 270.0) );

    SetPlayerFacingAngle(playerid, oZ);
}
stock IsVehicleOccupied(vehicleid) // Returns 1 if there is anyone in the vehicle
{
    ForPlayers(i)
    {
        if(IsPlayerInAnyVehicle(i))
        {
            if(GetPlayerVehicleID(i)==vehicleid)
                return 1;
        }
    }
    return 0;
}
stock ColocarXenon(playerid, vehicleid, cor)
{
	if(cor == 1)//azul
	{
		for(new x=0;x < 4;x++)
 			xenon[x][playerid] = CreateDynamicObject(19298,0,0,0,0,0,0);

	    AttachDynamicObjectToVehicle(xenon[0][playerid], vehicleid, 0.0, 3.0, -0.8, 0.0, 0.0, 0.0);
	    AttachDynamicObjectToVehicle(xenon[1][playerid], vehicleid, 0.0, 5.0, -0.8, 0.0, 0.0, 0.0);
	   	AttachDynamicObjectToVehicle(xenon[2][playerid], vehicleid, 0.0, 6.0, -0.8, 0.0, 0.0, 0.0);
	    AttachDynamicObjectToVehicle(xenon[3][playerid], vehicleid, 0.0, 7.0, -0.8, 0.0, 0.0, 0.0);
	}
	else if(cor == 2)//verde
	{
	    for(new x=0;x < 4;x++)
			xenon[x][playerid] = CreateDynamicObject(19297,0,0,0,0,0,0);

	    AttachDynamicObjectToVehicle(xenon[0][playerid], vehicleid, 0.0, 3.0, -0.8, 0.0, 0.0, 0.0);
	    AttachDynamicObjectToVehicle(xenon[1][playerid], vehicleid, 0.0, 5.0, -0.8, 0.0, 0.0, 0.0);
	   	AttachDynamicObjectToVehicle(xenon[2][playerid], vehicleid, 0.0, 6.0, -0.8, 0.0, 0.0, 0.0);
	    AttachDynamicObjectToVehicle(xenon[3][playerid], vehicleid, 0.0, 7.0, -0.8, 0.0, 0.0, 0.0);
	}
	else if(cor == 3)//roxo
	{
	    for(new x=0;x < 4;x++)
 			xenon[x][playerid] = CreateDynamicObject(19296,0,0,0,0,0,0);

	    AttachDynamicObjectToVehicle(xenon[0][playerid], vehicleid, 0.0, 3.0, -0.8, 0.0, 0.0, 0.0);
	    AttachDynamicObjectToVehicle(xenon[1][playerid], vehicleid, 0.0, 5.0, -0.8, 0.0, 0.0, 0.0);
	   	AttachDynamicObjectToVehicle(xenon[2][playerid], vehicleid, 0.0, 6.0, -0.8, 0.0, 0.0, 0.0);
	    AttachDynamicObjectToVehicle(xenon[3][playerid], vehicleid, 0.0, 7.0, -0.8, 0.0, 0.0, 0.0);
	}
	return 0;
}
stock RemoverXenon(playerid)
{
    for(new x=0;x < 4;x++)
    	DestroyDynamicObject(xenon[x][playerid]);
	return 0;
}
ProibidoXenon(playerid,cocheid)
{
new Coches[48] =
{
//Motos
522,
462,
521,
461,
463,
581,
448,
586,
523,
468,
471,
//Bicis
509,
481,
510,
//Botes
539,
472,
473,
493,
595,
484,
430,
453,
452,
446,
454,
//Helicopteros
548,
425,
417,
487,
497,
563,
501,
465,
447,
469,
488,
// Aviones
520,
476,
593,
553,
513,
512,
577,
592,
511,
464,
519,
460,
};
cocheid = GetPlayerVehicleID(playerid);
if(IsPlayerInVehicle(playerid,cocheid))
        {
                for(new i = 0; i < 48; i++)
                {
                        if(GetVehicleModel(cocheid) == Coches[i])
                        {
                                return 1;
                        }
                }
        }
return 0;
}
stock SetArmament(playerid, item)
{
    if(item == 11749)
    {
		PlayerTextDrawSetPreviewRot(playerid, WeaponMod[playerid], 90.000000, 180.000000, 310.000000, 0.500000);
	}
	else if(item == 18642)
	{
	    PlayerTextDrawSetPreviewRot(playerid, WeaponMod[playerid], 0.000000, 140.000000, 180.000000, 0.500000);
	}
	PlayerTextDrawSetPreviewModel(playerid, WeaponMod[playerid], item);
    PlayerTextDrawShow(playerid, WeaponModBox[playerid]);
    PlayerTextDrawShow(playerid, WeaponMod[playerid]);
	return 0;
}
stock RemoveArmament(playerid)
{
    PlayerTextDrawHide(playerid, WeaponMod[playerid]);
    PlayerTextDrawHide(playerid, WeaponModBox[playerid]);
	return 0;
}
  //final da gm
  stock pNome(playerid)
{
    new nome[MAX_PLAYER_NAME];
    GetPlayerName(playerid, nome, sizeof(nome));
    return nome;
}
stock GetLocal_XYZ(Float:xxxx, Float:yyyy)
{
 new zone[50];
 format(zone, 50, "Desconhecido");
 for(new i = 0; i != sizeof(gSAZones); i++)
 {
  if(xxxx >= gSAZones[i][SAZONE_AREA][0] && xxxx <= gSAZones[i][SAZONE_AREA][3] && yyyy >= gSAZones[i][SAZONE_AREA][1] && yyyy <= gSAZones[i][SAZONE_AREA][4])
  {
      format(zone, 50, gSAZones[i][SAZONE_NAME]);
   return zone;
  }
 }
 return zone;
}